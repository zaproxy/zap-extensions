pscanalpha.desc = R\u00e8gles de balayage passif - alpha

pscanalpha.examplefile.name=An example passive scan rule which loads data from a file.
pscanalpha.examplefile.desc=Add more information about the vulnerability here.
pscanalpha.examplefile.other=This is for information that doesnt fit in any of the other sections.
pscanalpha.examplefile.soln=A general description of how to solve the problem.
pscanalpha.examplefile.refs=https\://www.zaproxy.org/blog/2014-04-03-hacking-zap-3-passive-scan-rules/

pscanalpha.permissionspolicymissing.name=Permissions Policy Header Not Set
pscanalpha.permissionspolicymissing.desc=Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.
pscanalpha.permissionspolicymissing.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy\nhttps\://developers.google.com/web/updates/2018/06/feature-policy\nhttps\://scotthelme.co.uk/a-new-security-header-feature-policy/\nhttps\://w3c.github.io/webappsec-feature-policy/\nhttps\://www.smashingmagazine.com/2018/12/feature-policy/
pscanalpha.permissionspolicymissing.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.

pscanalpha.permissionspolicymissing.deprecated.name=Deprecated Feature Policy Header Set
pscanalpha.permissionspolicymissing.deprecated.desc=The header has now been renamed to Permissions-Policy. 
pscanalpha.permissionspolicymissing.deprecated.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy
pscanalpha.permissionspolicymissing.deprecated.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header instead of the Feature-Policy header.

pscanalpha.inpagebanner.name=In Page Banner Information Leak
pscanalpha.inpagebanner.desc=The server returned a version banner string in the response content. Such information leaks may allow attackers to further target specific issues impacting the product and version in use.
pscanalpha.inpagebanner.other=There is a chance that the highlight in the finding is on a value in the headers, versus the actual matched string in the response body.
pscanalpha.inpagebanner.soln=Configure the server to prevent such information leaks. For example\:\nUnder Tomcat this is done via the "server" directive and implementation of custom error pages.\nUnder Apache this is done via the "ServerSignature" and "ServerTokens" directives.
pscanalpha.inpagebanner.refs=https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/

pscanalpha.sourcecodedisclosure.name=Source Code Disclosure
pscanalpha.sourcecodedisclosure.desc=Code Source de l'Application a \u00e9t\u00e9 divulgu\u00e9e par le serveur web
pscanalpha.sourcecodedisclosure.soln=S'assurer que le Code Source de l'application n'est pas disponible avec d'autres extensions, et de s'assurer que le code source n'est pas pr\u00e9sent dans d'autres fichiers ou de donn\u00e9es d\u00e9ploy\u00e9es sur le serveur web, ou servis par le serveur web. 
pscanalpha.sourcecodedisclosure.refs=http\://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-u-s-government/
pscanalpha.sourcecodedisclosure.extrainfo={0}

pscanalpha.base64disclosure.name=Base64 Disclosure
pscanalpha.base64disclosure.desc=Base64 encoded data was disclosed by the application/web server. Note\: in the interests of performance not all base64 strings in the response were analyzed individually, the entire response should be looked at by the analyst/security team/developer(s).
pscanalpha.base64disclosure.soln=Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
pscanalpha.base64disclosure.refs=http\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.extrainfo={1}

pscanalpha.base64disclosure.viewstate.name=ASP.NET ViewState Disclosure
pscanalpha.base64disclosure.viewstate.desc=An ASP.NET ViewState was disclosed by the application/web server
pscanalpha.base64disclosure.viewstate.soln=Manually confirm that the ASP.NET ViewState does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
pscanalpha.base64disclosure.viewstate.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.viewstate.extrainfo={0}

pscanalpha.base64disclosure.viewstatewithoutmac.name=ASP.NET ViewState Integrity
pscanalpha.base64disclosure.viewstatewithoutmac.desc=The application does not use a Message Authentication Code (MAC) to protect the integrity of the ASP.NET ViewState, which can be tampered with by a malicious client
pscanalpha.base64disclosure.viewstatewithoutmac.soln=Ensure that all ASP.NET ViewStates are protected from tampering, by using a MAC, generated using a secure algorithm, and a secret key on the server side. This is the default configuration on modern ASP.NET installation, by may be over-ridden programatically, or via the ASP.NET configuration.
pscanalpha.base64disclosure.viewstatewithoutmac.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttps\://www.jardinesoftware.net/2012/02/06/asp-net-tampering-with-event-validation-part-1/
pscanalpha.base64disclosure.viewstatewithoutmac.extrainfo={0}

pscanalpha.storabilitycacheability.name = Contenu Cacheability

pscanalpha.nonstorable.name = Non-Storable Content
pscanalpha.nonstorable.desc = Le contenu de r\u00e9ponse ne sont pas stockables par la mise en cache des composants tels que des serveurs proxy. Si la r\u00e9ponse ne contient pas sensibles, personnelles ou des informations sp\u00e9cifiques \u00e0 l'utilisateur, il peut b\u00e9n\u00e9ficier de l'\u00eatre stock\u00e9s et mis en cache pour am\u00e9liorer les performances.
pscanalpha.nonstorable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.nonstorable.soln = Le contenu peut \u00eatre marqu\u00e9 comme stockables en veillant \u00e0 ce que les conditions suivantes sont remplies\:\nLa m\u00e9thode de la requ\u00eate doit \u00eatre comprise par le cache et d\u00e9fini comme \u00e9tant mis en cache ("GET", "HEAD", et "POST" sont actuellement d\u00e9finis comme pouvant \u00eatre mis en cache)\nLe code d'\u00e9tat de r\u00e9ponse doit \u00eatre comprise par le cache (l'un des 1XX, 2XX, 3XX, 4XX ou 5XX r\u00e9ponse classes sont g\u00e9n\u00e9ralement comprises)\nLe "no-store" cache directive ne doivent pas figurer dans la requ\u00eate ou de la r\u00e9ponse champs d'en-t\u00eate\nPour la mise en cache par "partag\u00e9" caches comme "proxy" caches, le "private" r\u00e9ponse de la directive ne doit pas appara\u00eetre dans la r\u00e9ponse\nPour la mise en cache par "shared" caches comme "proxy" caches, le "Autorization" champ d'en-t\u00eate ne doivent pas figurer dans la demande, \u00e0 moins que la r\u00e9ponse permet explicitement (\u00e0 l'aide de l'un des "must-revalidate", "public", ou "s-maxage" Cache-Control r\u00e9ponse directives)\nOutre les conditions ci-dessus, au moins une des conditions suivantes doivent \u00e9galement \u00eatre satisfaits par la r\u00e9ponse\:\nIl doit contenir une "Expires" champ d'en-t\u00eate\nIl doit contenir un "max-age" r\u00e9ponse de la directive\nPour "shared" caches comme "proxy" caches, il doit contenir un "s-maxage" r\u00e9ponse de la directive\nIl doit contenir un "Cache Control Extension" qui lui permet d'\u00eatre mis en cachesa\nIl doit avoir un code d'\u00e9tat est d\u00e9finie comme pouvant \u00eatre mis en cache par d\u00e9faut (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).   
pscanalpha.nonstorable.extrainfo = {0}

pscanalpha.storablenoncacheable.name = Storable but Non-Cacheable Content
pscanalpha.storablenoncacheable.desc = Le contenu de r\u00e9ponse sont stockables par la mise en cache des composants tels que des serveurs proxy, mais ne seront pas r\u00e9cup\u00e9r\u00e9es directement \u00e0 partir du cache, sans validation de la demande en amont, en r\u00e9ponse \u00e0 des demandes similaires provenant d'autres utilisateurs. 
pscanalpha.storablenoncacheable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablenoncacheable.soln=\ 
pscanalpha.storablenoncacheable.extrainfo = {0}}

pscanalpha.storablecacheable.name = \u00c0 ranger et facile \u00e0 mettre en Cache le Contenu
pscanalpha.storablecacheable.desc = Le contenu de r\u00e9ponse sont stockables par la mise en cache des composants tels que des serveurs proxy, et peuvent \u00eatre r\u00e9cup\u00e9r\u00e9es directement \u00e0 partir du cache, plut\u00f4t que depuis le serveur d'origine par la mise en cache des serveurs, en r\u00e9ponse \u00e0 des demandes similaires provenant d'autres utilisateurs. Si les donn\u00e9es de r\u00e9ponse sont sensibles, personnelles ou sp\u00e9cifiques \u00e0 l'utilisateur, cela peut entra\u00eener la fuite d'informations sensibles. Dans certains cas, cela peut m\u00eame aboutir \u00e0 un utilisateur le contr\u00f4le total de la session d'un autre utilisateur, selon la configuration de la mise en cache des composants \u00e0 utiliser dans leur environnement. C'est principalement un probl\u00e8me o\u00f9 "shared" de la mise en cache des serveurs tels que "proxy" caches sont configur\u00e9s sur le r\u00e9seau local. Cette configuration est g\u00e9n\u00e9ralement trouv\u00e9s en entreprise ou en milieu scolaire, par exemple.
pscanalpha.storablecacheable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablecacheable.soln = Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. 
pscanalpha.storablecacheable.extrainfo = {0}
pscanalpha.storablecacheable.otherinfo.liberallifetimeheuristic = In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.
pscanalpha.storablecacheable.otherinfo.staleretrievenotblocked = The response is stale, and stale responses are not configured to be re-validated or blocked, using the 'must-revalidate', 'proxy-revalidate', 's-maxage', or 'max-age' response 'Cache-Control' directives.

pscanalpha.jso.name=Java Serialization Object
pscanalpha.jso.desc=Java Serialization seems to be in use. If not correctly validated, an attacker can send a specially crafted object. This can lead to a dangerous "Remote Code Execution". A magic sequence identifying JSO has been detected (Base64\: rO0AB, Raw\: 0xac, 0xed, 0x00, 0x05).
pscanalpha.jso.soln=Deserialization of untrusted data is inherently dangerous and should be avoided.
pscanalpha.jso.refs=https\://www.oracle.com/technetwork/java/seccodeguide-139067.html\#8

pscanalpha.sri-integrity.name=Sub Resource Integrity Attribute Missing
pscanalpha.sri-integrity.desc=The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content. 
pscanalpha.sri-integrity.soln=Provide a valid integrity attribute to the tag.
pscanalpha.sri-integrity.refs=https\://developer.mozilla.org/en/docs/Web/Security/Subresource_Integrity

pscanalpha.jsfunction.name=Dangerous JS Functions
pscanalpha.jsfunction.desc=A dangerous JS function seems to be in use that would leave the site vulnerable.
pscanalpha.jsfunction.soln=See the references for security advice on the use of these functions.
pscanalpha.jsfunction.refs=https\://angular.io/guide/security

pscanalpha.payloader.name=Passive Scan Rules Alpha Custom Payloads
pscanalpha.payloader.desc=Provides support for custom payloads in scan rules.

pscanalpha.site-isolation.name = Insufficient Site Isolation Against Spectre Vulnerability

pscanalpha.site-isolation.corp.name = Cross-Origin-Resource-Policy Header Missing or Invalid
pscanalpha.site-isolation.corp.desc = Cross-Origin-Resource-Policy header is an opt-in header designed to counter side-channels attacks like Spectre. Resource should be specifically set as shareable amongst different origins.
pscanalpha.site-isolation.corp.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_(CORP)
pscanalpha.site-isolation.corp.soln = Ensure that the application/web server sets the Cross-Origin-Resource-Policy header appropriately, and that it sets the Cross-Origin-Resource-Policy header to 'same-origin' for all web pages.\n'same-site' is considered as less secured and should be avoided.\nIf resources must be shared, set the header to 'cross-origin'.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Resource-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-resource-policy).

pscanalpha.site-isolation.coep.name = Cross-Origin-Embedder-Policy Header Missing or Invalid
pscanalpha.site-isolation.coep.desc = Cross-Origin-Embedder-Policy header is a response header that prevents a document from loading any cross-origin resources that don't explicitly grant the document permission (using CORP or CORS).
pscanalpha.site-isolation.coep.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy
pscanalpha.site-isolation.coep.soln = Ensure that the application/web server sets the Cross-Origin-Embedder-Policy header appropriately, and that it sets the Cross-Origin-Embedder-Policy header to 'require-corp' for documents.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Embedder-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-embedder-policy).

pscanalpha.site-isolation.coop.name = Cross-Origin-Opener-Policy Header Missing or Invalid
pscanalpha.site-isolation.coop.desc = Cross-Origin-Opener-Policy header is a response header that allows a site to control if others included documents share the same browsing context. Sharing the same browsing context with untrusted documents might lead to data leak.
pscanalpha.site-isolation.coop.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy
pscanalpha.site-isolation.coop.soln = Ensure that the application/web server sets the Cross-Origin-Opener-Policy header appropriately, and that it sets the Cross-Origin-Opener-Policy header to 'same-origin' for documents.\n'same-origin-allow-popups' is considered as less secured and should be avoided.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Opener-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-opener-policy).

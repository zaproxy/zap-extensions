pscanalpha.desc = Mga Passive Scan Rules - alpha

pscanalpha.examplefile.name=An example passive scan rule which loads data from a file.
pscanalpha.examplefile.desc=Add more information about the vulnerability here.
pscanalpha.examplefile.other=This is for information that doesnt fit in any of the other sections.
pscanalpha.examplefile.soln=A general description of how to solve the problem.
pscanalpha.examplefile.refs=https\://www.zaproxy.org/blog/2014-04-03-hacking-zap-3-passive-scan-rules/

pscanalpha.permissionspolicymissing.name=Permissions Policy Header Not Set
pscanalpha.permissionspolicymissing.desc=Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.
pscanalpha.permissionspolicymissing.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy\nhttps\://developers.google.com/web/updates/2018/06/feature-policy\nhttps\://scotthelme.co.uk/a-new-security-header-feature-policy/\nhttps\://w3c.github.io/webappsec-feature-policy/\nhttps\://www.smashingmagazine.com/2018/12/feature-policy/
pscanalpha.permissionspolicymissing.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.

pscanalpha.permissionspolicymissing.deprecated.name=Deprecated Feature Policy Header Set
pscanalpha.permissionspolicymissing.deprecated.desc=The header has now been renamed to Permissions-Policy. 
pscanalpha.permissionspolicymissing.deprecated.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy
pscanalpha.permissionspolicymissing.deprecated.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header instead of the Feature-Policy header.

pscanalpha.inpagebanner.name=In Page Banner Information Leak
pscanalpha.inpagebanner.desc=The server returned a version banner string in the response content. Such information leaks may allow attackers to further target specific issues impacting the product and version in use.
pscanalpha.inpagebanner.other=There is a chance that the highlight in the finding is on a value in the headers, versus the actual matched string in the response body.
pscanalpha.inpagebanner.soln=Configure the server to prevent such information leaks. For example\:\nUnder Tomcat this is done via the "server" directive and implementation of custom error pages.\nUnder Apache this is done via the "ServerSignature" and "ServerTokens" directives.
pscanalpha.inpagebanner.refs=https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/

pscanalpha.sourcecodedisclosure.name=Ang pagbubunyag sa pinagmula ng code
pscanalpha.sourcecodedisclosure.desc=Ang Code ng Paggamit ng Application ay isiwalat ng web server
pscanalpha.sourcecodedisclosure.soln=Tiyakin na ang Code ng Paggamit ng aplikasyon ay hindi magagamit sa mga alternatibong extension, at tiyakin na ang source code ay hindi naroroon sa loob ng ibang mga file o data na ipinadala sa web server, o nagsilbi sa pamamagitan ng web server. 
pscanalpha.sourcecodedisclosure.refs=http\://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-u-s-government/
pscanalpha.sourcecodedisclosure.extrainfo={0}

pscanalpha.base64disclosure.name=Pagpapahayag ng Base64
pscanalpha.base64disclosure.desc=Base64 encoded data was disclosed by the application/web server. Note\: in the interests of performance not all base64 strings in the response were analyzed individually, the entire response should be looked at by the analyst/security team/developer(s).
pscanalpha.base64disclosure.soln=Isa isahing kumpirmahin na ang Base64 na datos ay hindi tumutulo sa sensitibong impormasyon, at ang datos ay hindi maaaring isama / ginamit upang pagsamantalahan ang iba pang mga kahinaan.
pscanalpha.base64disclosure.refs=http\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.extrainfo={1}

pscanalpha.base64disclosure.viewstate.name=Tignan ang katayuan ng pag bubunyag ASP.NET
pscanalpha.base64disclosure.viewstate.desc=An ASP.NET Tignan ang pagbubunyag sa pamamagitan ng aplikasyon/web server
pscanalpha.base64disclosure.viewstate.soln=Manu-manong kumpirmahin na hindi tinatanggal ng ASP.NET ViewState ang sensitibong impormasyon, at ang data ay hindi maaaring pagsama / ginagamit upang pagsamantalahan ang iba pang mga kahinaan.
pscanalpha.base64disclosure.viewstate.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.viewstate.extrainfo={0}

pscanalpha.base64disclosure.viewstatewithoutmac.name=Tignan ang katayuan ng integridad sa ASP.NET
pscanalpha.base64disclosure.viewstatewithoutmac.desc=Ang aplikasyon ay hindi gumagamit ng Code Authentication Code (MAC) upang maprotektahan ang integridad ng ASP.NET ViewState, na maaaring tampered ng isang malisyosong client
pscanalpha.base64disclosure.viewstatewithoutmac.soln=Tiyakin na ang lahat ng ASP.NET ViewStates ay protektado mula sa pag-tampering, sa pamamagitan ng paggamit ng MAC, na binuo gamit ang isang secure na algorithm, at isang lihim na key sa gilid ng server. Ito ang default na pagsasaayos sa modernong pag-install ng ASP.NET, sa pamamagitan ng maaaring over-ridden programatically, o sa pamamagitan ng configuration ng ASP.NET.
pscanalpha.base64disclosure.viewstatewithoutmac.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttps\://www.jardinesoftware.net/2012/02/06/asp-net-tampering-with-event-validation-part-1/
pscanalpha.base64disclosure.viewstatewithoutmac.extrainfo={0}

pscanalpha.storabilitycacheability.name = Ang nilalaman ng Cacheability

pscanalpha.nonstorable.name = Ang hindi-imbakan na nilalaman
pscanalpha.nonstorable.desc = Ang tugon ng mga nilalaman ay hindi maiponan ng caching na mga komponent kagaya ng proxy na mga server. Kung ang tugon ay hindi naglalaman ng sensitibo, personal o gumagamit-tiyak na impormasyon. maaring makinabang mula sa pag-imbak at pag-cache para bumuti ang pagsasagawa.
pscanalpha.nonstorable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.nonstorable.soln = Ang nilalaman ay maaring markahan ng storable sa pamamagitan ng pagtiyak na ang sumusunod na mga kondisyon ay nasisiyahan\: Ang pamamaraan sa kahilingan ay dapat maunawaan sa pamamagitan ng cache at kahulugan ng pagiging cacheable ("MAKUHA", "HEAD"m at "POST" ay kasalukuyang nilinaw bilang cacheable)\nAng tugon na status code ay dapat nating maunawaan ang cache (isa sa 1XX, 2XX, 3XX, 4XX, or 5XX na tugon na mga class ay naunawaan ng lahat)\nAng "walang-store" na cache na direktiba ay dapat makita sa kahilingan o tugon na header na mga patlang\nPara sa caching sa pamamagitan ng "naibahagi" na mga cache na tulad ng "proxy" na mga cache, ang "Pagpapatunay" na header na patlang ay dapat makita sa kahilingan, maliban sa tugon na explicitly pumapayag nito (sa paggamit sa isa sa "dapat-revalidate", "publiko", o "s-maxage" Cache-Control na tugon ng mga direktiba)\nSaka sa mga kondisyon sa itaas, kahit isa sa mga sumusunod na mga kondisyon ay dapat din na makuntento sa tugon\:\nDapat ito ay naglalaman ng "Expires" na header sa patlang\nDapat ito ay naglalaman ng "max-age" na tugon na direktiba\nPara sa "ibinahagi" na mga cache tulad ng "proxy" na mga cache, ay dapat rin na naglalaman ng "s-maxage" na tugon na direktiba\nDapat ito ay naglalaman ng "Cache Control na extension" na nagpapahintulot na ma-cache\nIto ay dapat merong status code na naka-define bilang cacheable sa pamamagitan ng default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).   
pscanalpha.nonstorable.extrainfo = {0}

pscanalpha.storablenoncacheable.name = Ang Storable ngunit Hindi-Cacheable na nilalaman
pscanalpha.storablenoncacheable.desc = Ang tugon na mga nilalaman ay storable sa pamamagitan ng caching na mga komponent tulad ng proxy na mga server, ngunit ay hindi makuhang direkta mula sa cache, nang hindi ma-validate ang tugon na upstream, bilang tugon sa gayong mga kahilingan mula sa ibang mga gumagamit. 
pscanalpha.storablenoncacheable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablenoncacheable.soln=
pscanalpha.storablenoncacheable.extrainfo = {0}}

pscanalpha.storablecacheable.name = Ang Storable and Cacheable na nilalaman
pscanalpha.storablecacheable.desc = Ang mga nilalaman ng sagot ay maaaring maimbak ng mga sangkap ng pag-cache tulad ng mga server ng proxy, at maaaring makuha nang direkta mula sa cache, sa halip na mula sa pinagmulan ng server ng mga server ng caching, bilang tugon sa mga katulad na kahilingan mula sa iba pang mga gumagamit. Kung sensitibo ang data ng tugon, personal o user-specific, maaaring magresulta ito sa sensitibong impormasyon na na-leak. Sa ilang mga kaso, ito ay maaaring kahit na magreresulta sa isang gumagamit na nakakakuha ng kumpletong kontrol ng session ng ibang user, depende sa pagsasaayos ng mga component ng caching na ginagamit sa kanilang kapaligiran. Ito ang pangunahing isyu na kung saan ang "shared" na mga server ng caching tulad ng "proxy" na mga cache ay naka-configure sa lokal na network. Ang configuration na ito ay kadalasang matatagpuan sa mga corporate o pang-edukasyon na kapaligiran, halimbawa.
pscanalpha.storablecacheable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablecacheable.soln = Patunayan na ang kasagutan ay hindi naglalaman ng sensitibo, personal, user-specific na impormasyon. Kung gagawin nito, isaalang-alang ang paggamit sa sumusunod na HTTP tugon na mga header, upang malimitahan, o mapigilan ang nilalaman na imbakan at makuha mula sa cache ng isa pang taga-gamit\:\nCache-Control\: wala-cache, wala-store, dapat-revalidate, pribado\nPragma\: wala-cache\nPragma\: no-cache\nAng pag-aayos na ito ay nagtuturo sa parehong HTTP 1.0 at HTTP 1.1compliant caching na mga server upang hindi maimbakan ang kasagutan, at upang hindi makuha ang kasagutan (walang pagpapatunay) mula  sa cache, bilang tugon sa isang katulad na tugon. 
pscanalpha.storablecacheable.extrainfo = {0}
pscanalpha.storablecacheable.otherinfo.liberallifetimeheuristic = Ang kawalan ng isang tahasang pag-tutukoy na direktiba sa pag-huli ng buhay na kasagutan, \nisang liberal na buhay na heuristic ng 1 taon ay ipinapalagay. ito ay pinahihintulutan rfc7234.
pscanalpha.storablecacheable.otherinfo.staleretrievenotblocked = Ang kasagutan ay wala, at ang mga kasagutan ay hindi naka-ayos upang ma-validate o ma-harang, gamit ang 'must-revalidate', 'proxy-revalidate', 'maxage', o 'max-age' na sagot 'Cache-Control 'mga direktiba.

pscanalpha.jso.name=Java Serialization Object
pscanalpha.jso.desc=Java Serialization seems to be in use. If not correctly validated, an attacker can send a specially crafted object. This can lead to a dangerous "Remote Code Execution". A magic sequence identifying JSO has been detected (Base64\: rO0AB, Raw\: 0xac, 0xed, 0x00, 0x05).
pscanalpha.jso.soln=Deserialization of untrusted data is inherently dangerous and should be avoided.
pscanalpha.jso.refs=https\://www.oracle.com/technetwork/java/seccodeguide-139067.html\#8

pscanalpha.sri-integrity.name=Sub Resource Integrity Attribute Missing
pscanalpha.sri-integrity.desc=The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content. 
pscanalpha.sri-integrity.soln=Provide a valid integrity attribute to the tag.
pscanalpha.sri-integrity.refs=https\://developer.mozilla.org/en/docs/Web/Security/Subresource_Integrity

pscanalpha.jsfunction.name=Dangerous JS Functions
pscanalpha.jsfunction.desc=A dangerous JS function seems to be in use that would leave the site vulnerable.
pscanalpha.jsfunction.soln=See the references for security advice on the use of these functions.
pscanalpha.jsfunction.refs=https\://angular.io/guide/security

pscanalpha.payloader.name=Passive Scan Rules Alpha Custom Payloads
pscanalpha.payloader.desc=Provides support for custom payloads in scan rules.

pscanalpha.site-isolation.name = Insufficient Site Isolation Against Spectre Vulnerability

pscanalpha.site-isolation.corp.name = Cross-Origin-Resource-Policy Header Missing or Invalid
pscanalpha.site-isolation.corp.desc = Cross-Origin-Resource-Policy header is an opt-in header designed to counter side-channels attacks like Spectre. Resource should be specifically set as shareable amongst different origins.
pscanalpha.site-isolation.corp.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_(CORP)
pscanalpha.site-isolation.corp.soln = Ensure that the application/web server sets the Cross-Origin-Resource-Policy header appropriately, and that it sets the Cross-Origin-Resource-Policy header to 'same-origin' for all web pages.\n'same-site' is considered as less secured and should be avoided.\nIf resources must be shared, set the header to 'cross-origin'.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Resource-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-resource-policy).

pscanalpha.site-isolation.coep.name = Cross-Origin-Embedder-Policy Header Missing or Invalid
pscanalpha.site-isolation.coep.desc = Cross-Origin-Embedder-Policy header is a response header that prevents a document from loading any cross-origin resources that don't explicitly grant the document permission (using CORP or CORS).
pscanalpha.site-isolation.coep.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy
pscanalpha.site-isolation.coep.soln = Ensure that the application/web server sets the Cross-Origin-Embedder-Policy header appropriately, and that it sets the Cross-Origin-Embedder-Policy header to 'require-corp' for documents.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Embedder-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-embedder-policy).

pscanalpha.site-isolation.coop.name = Cross-Origin-Opener-Policy Header Missing or Invalid
pscanalpha.site-isolation.coop.desc = Cross-Origin-Opener-Policy header is a response header that allows a site to control if others included documents share the same browsing context. Sharing the same browsing context with untrusted documents might lead to data leak.
pscanalpha.site-isolation.coop.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy
pscanalpha.site-isolation.coop.soln = Ensure that the application/web server sets the Cross-Origin-Opener-Policy header appropriately, and that it sets the Cross-Origin-Opener-Policy header to 'same-origin' for documents.\n'same-origin-allow-popups' is considered as less secured and should be avoided.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Opener-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-opener-policy).

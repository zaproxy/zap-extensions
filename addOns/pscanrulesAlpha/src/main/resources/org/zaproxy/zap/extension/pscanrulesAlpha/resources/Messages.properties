# This file defines the default (English) variants of all of the internationalised messages
pscanalpha.desc = Passive Scan Rules - alpha

pscanalpha.examplefile.name=An example passive scan rule which loads data from a file
pscanalpha.examplefile.desc=Add more information about the vulnerability here
pscanalpha.examplefile.other=This is for information that doesnt fit in any of the other sections
pscanalpha.examplefile.soln=A general description of how to solve the problem
pscanalpha.examplefile.refs=http://zaproxy.blogspot.co.uk/2014/04/hacking-zap-3-passive-scan-rules.html

pscanalpha.featurepolicymissing.name=Feature Policy Header Not Set
pscanalpha.featurepolicymissing.desc=Feature Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Feature Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.
pscanalpha.featurepolicymissing.refs=https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy\nhttps://developers.google.com/web/updates/2018/06/feature-policy\nhttps://scotthelme.co.uk/a-new-security-header-feature-policy/\nhttps://w3c.github.io/webappsec-feature-policy/\nhttps://www.smashingmagazine.com/2018/12/feature-policy/
pscanalpha.featurepolicymissing.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Feature-Policy header.

pscanalpha.inpagebanner.name=In Page Banner Information Leak
pscanalpha.inpagebanner.desc=The server returned a version banner string in the response content. Such information leaks may allow attackers to further target specific issues impacting the product and version in use.
pscanalpha.inpagebanner.other=There is a chance that the highlight in the finding is on a value in the headers, versus the actual matched string in the response body.
pscanalpha.inpagebanner.soln=Configure the server to prevent such information leaks. For example:\nUnder Tomcat this is done via the "server" directive and implementation of custom error pages.\nUnder Apache this is done via the "ServerSignature" and "ServerTokens" directives.
pscanalpha.inpagebanner.refs=https://www.owasp.org/index.php/Testing_for_Error_Code_(OTG-ERR-001)

pscanalpha.modernapp.name=Modern Web Application
pscanalpha.modernapp.desc=The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.
pscanalpha.modernapp.other.links=Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.
pscanalpha.modernapp.other.self=Links have been found with a target of '_self' - this is often used by modern frameworks to force a full page reload.
pscanalpha.modernapp.other.nolinks=No links have been found while there are scripts, which is an indication that this is a modern web application.
pscanalpha.modernapp.other.noscript=A noScript tag has been found, which is an indication that the application works differently with JavaScript enabled compared to when it is not.
pscanalpha.modernapp.soln=This is an informational alert and so no changes are required.

pscanalpha.sourcecodedisclosure.name=Source Code Disclosure
pscanalpha.sourcecodedisclosure.desc=Application Source Code was disclosed by the web server
pscanalpha.sourcecodedisclosure.soln=Ensure that application Source Code is not available with alternative extensions, and ensure that source code is not present within other files or data deployed to the web server, or served by the web server. 
pscanalpha.sourcecodedisclosure.refs=http://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-u-s-government/
pscanalpha.sourcecodedisclosure.extrainfo={0}

pscanalpha.base64disclosure.name=Base64 Disclosure
pscanalpha.base64disclosure.desc=Base64 encoded data was disclosed by the application/web server. Note: in the interests of performance not all base64 strings in the response were analyzed individually, the entire response should be looked at by the analyst/security team/developer(s).
pscanalpha.base64disclosure.soln=Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
pscanalpha.base64disclosure.refs=https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.extrainfo={1}

pscanalpha.base64disclosure.viewstate.name=ASP.NET ViewState Disclosure
pscanalpha.base64disclosure.viewstate.desc=An ASP.NET ViewState was disclosed by the application/web server
pscanalpha.base64disclosure.viewstate.soln=Manually confirm that the ASP.NET ViewState does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
pscanalpha.base64disclosure.viewstate.refs=http://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttps://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.viewstate.extrainfo={0}

pscanalpha.base64disclosure.viewstatewithoutmac.name=ASP.NET ViewState Integrity
pscanalpha.base64disclosure.viewstatewithoutmac.desc=The application does not use a Message Authentication Code (MAC) to protect the integrity of the ASP.NET ViewState, which can be tampered with by a malicious client
pscanalpha.base64disclosure.viewstatewithoutmac.soln=Ensure that all ASP.NET ViewStates are protected from tampering, by using a MAC, generated using a secure algorithm, and a secret key on the server side. This is the default configuration on modern ASP.NET installation, by may be over-ridden programatically, or via the ASP.NET configuration.
pscanalpha.base64disclosure.viewstatewithoutmac.refs=http://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttps://www.jardinesoftware.net/2012/02/06/asp-net-tampering-with-event-validation-part-1/
pscanalpha.base64disclosure.viewstatewithoutmac.extrainfo={0}

pscanalpha.storabilitycacheability.name = Content Cacheability

pscanalpha.nonstorable.name = Non-Storable Content
pscanalpha.nonstorable.desc = The response contents are not storable by caching components such as proxy servers. If the response does not contain sensitive, personal or user-specific information, it may benefit from being stored and cached, to improve performance.
pscanalpha.nonstorable.refs = https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.nonstorable.soln = The content may be marked as storable by ensuring that the following conditions are satisfied:\nThe request method must be understood by the cache and defined as being cacheable ("GET", "HEAD", and "POST" are currently defined as cacheable)\nThe response status code must be understood by the cache (one of the 1XX, 2XX, 3XX, 4XX, or 5XX response classes are generally understood)\nThe "no-store" cache directive must not appear in the request or response header fields\nFor caching by "shared" caches such as "proxy" caches, the "private" response directive must not appear in the response\nFor caching by "shared" caches such as "proxy" caches, the "Authorization" header field must not appear in the request, unless the response explicitly allows it (using one of the "must-revalidate", "public", or "s-maxage" Cache-Control response directives)\nIn addition to the conditions above, at least one of the following conditions must also be satisfied by the response:\nIt must contain an "Expires" header field\nIt must contain a "max-age" response directive\nFor "shared" caches such as "proxy" caches, it must contain a "s-maxage" response directive\nIt must contain a "Cache Control Extension" that allows it to be cached\nIt must have a status code that is defined as cacheable by default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).   
pscanalpha.nonstorable.extrainfo = {0}

pscanalpha.storablenoncacheable.name = Storable but Non-Cacheable Content
pscanalpha.storablenoncacheable.desc = The response contents are storable by caching components such as proxy servers, but will not be retrieved directly from the cache, without validating the request upstream, in response to similar requests from other users. 
pscanalpha.storablenoncacheable.refs = https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablenoncacheable.soln = 
pscanalpha.storablenoncacheable.extrainfo = {0}}

pscanalpha.storablecacheable.name = Storable and Cacheable Content
pscanalpha.storablecacheable.desc = The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where "shared" caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.
pscanalpha.storablecacheable.refs = https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablecacheable.soln = Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. 
pscanalpha.storablecacheable.extrainfo = {0}
pscanalpha.storablecacheable.otherinfo.liberallifetimeheuristic = In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.
pscanalpha.storablecacheable.otherinfo.staleretrievenotblocked = The response is stale, and stale responses are not configured to be re-validated or blocked, using the 'must-revalidate', 'proxy-revalidate', 's-maxage', or 'max-age' response 'Cache-Control' directives.

pscanalpha.jso.name=Java Serialization Object
pscanalpha.jso.desc=Java Serialization seems to be in use. If not correctly validated, an attacker can send a specially crafted object. This can lead to a dangerous "Remote Code Execution". A magic sequence identifying JSO has been detected (Base64: rO0AB, Raw: 0xac, 0xed, 0x00, 0x05).
pscanalpha.jso.soln=Deserialization of untrusted data is inherently dangerous and should be avoided.
pscanalpha.jso.refs=https://www.oracle.com/technetwork/java/seccodeguide-139067.html#8

pscanalpha.sri-integrity.name=Sub Resource Integrity Attribute Missing
pscanalpha.sri-integrity.desc=The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content. 
pscanalpha.sri-integrity.soln=Provide a valid integrity attribute to the tag.
pscanalpha.sri-integrity.refs=https://developer.mozilla.org/en/docs/Web/Security/Subresource_Integrity

pscanalpha.jsfunction.name=Dangerous JS Functions
pscanalpha.jsfunction.desc=A dangerous JS function seems to be in use that would leave the site vulnerable.
pscanalpha.jsfunction.soln=See the references for security advice on the use of these functions.
pscanalpha.jsfunction.refs=https://angular.io/guide/security

pscanalpha.payloader.name=Passive Scan Rules Alpha Custom Payloads
pscanalpha.payloader.desc=Provides support for custom payloads in scan rules.

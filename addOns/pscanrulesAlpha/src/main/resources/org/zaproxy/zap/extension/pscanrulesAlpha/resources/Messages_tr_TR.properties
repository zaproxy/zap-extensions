pscanalpha.desc = Pasif Tarama Kurallar\u0131 - alfa

pscanalpha.examplefile.name=An example passive scan rule which loads data from a file.
pscanalpha.examplefile.desc=Add more information about the vulnerability here.
pscanalpha.examplefile.other=This is for information that doesnt fit in any of the other sections.
pscanalpha.examplefile.soln=A general description of how to solve the problem.
pscanalpha.examplefile.refs=https\://www.zaproxy.org/blog/2014-04-03-hacking-zap-3-passive-scan-rules/

pscanalpha.permissionspolicymissing.name=Permissions Policy Header Not Set
pscanalpha.permissionspolicymissing.desc=Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.
pscanalpha.permissionspolicymissing.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy\nhttps\://developers.google.com/web/updates/2018/06/feature-policy\nhttps\://scotthelme.co.uk/a-new-security-header-feature-policy/\nhttps\://w3c.github.io/webappsec-feature-policy/\nhttps\://www.smashingmagazine.com/2018/12/feature-policy/
pscanalpha.permissionspolicymissing.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.

pscanalpha.permissionspolicymissing.deprecated.name=Deprecated Feature Policy Header Set
pscanalpha.permissionspolicymissing.deprecated.desc=The header has now been renamed to Permissions-Policy. 
pscanalpha.permissionspolicymissing.deprecated.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy
pscanalpha.permissionspolicymissing.deprecated.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header instead of the Feature-Policy header.

pscanalpha.inpagebanner.name=In Page Banner Information Leak
pscanalpha.inpagebanner.desc=The server returned a version banner string in the response content. Such information leaks may allow attackers to further target specific issues impacting the product and version in use.
pscanalpha.inpagebanner.other=There is a chance that the highlight in the finding is on a value in the headers, versus the actual matched string in the response body.
pscanalpha.inpagebanner.soln=Configure the server to prevent such information leaks. For example\:\nUnder Tomcat this is done via the "server" directive and implementation of custom error pages.\nUnder Apache this is done via the "ServerSignature" and "ServerTokens" directives.
pscanalpha.inpagebanner.refs=https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/

pscanalpha.sourcecodedisclosure.name=Kaynak Kodu Bilgilendirme
pscanalpha.sourcecodedisclosure.desc=Uygulama Kaynak Kodu web sunucusu taraf\u0131ndan if\u015fa edildi
pscanalpha.sourcecodedisclosure.soln=Kaynak Kodu alternatif uzant\u0131lar\u0131 ile ge\u00e7erli olmad\u0131\u011f\u0131n\u0131 uygulanmas\u0131n\u0131 sa\u011flamak ve bu kaynak kodu web sunucusuna da\u011f\u0131t\u0131lan veya web sunucusu taraf\u0131ndan sunulan di\u011fer dosyalar\u0131 veya veri i\u00e7inde mevcut de\u011fil emin olun. 
pscanalpha.sourcecodedisclosure.refs=http\://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-us-government/
pscanalpha.sourcecodedisclosure.extrainfo={0}

pscanalpha.base64disclosure.name=Base64 Bilgilendirme
pscanalpha.base64disclosure.desc=Base64 encoded data was disclosed by the application/web server. Note\: in the interests of performance not all base64 strings in the response were analyzed individually, the entire response should be looked at by the analyst/security team/developer(s).
pscanalpha.base64disclosure.soln=El ile Base64 veri hassas bilgileri s\u0131z\u0131nt\u0131 ve veri / toplanan di\u011fer g\u00fcvenlik a\u00e7\u0131klar\u0131ndan yararlanmak i\u00e7in kullan\u0131lan olamaz olmad\u0131\u011f\u0131n\u0131 teyit etmektedir.
pscanalpha.base64disclosure.refs=http\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.extrainfo={1}

pscanalpha.base64disclosure.viewstate.name=ASP.NET ViewState Bilgilendirme
pscanalpha.base64disclosure.viewstate.desc=Bir ASP.NET ViewState uygulama / web sunucusu taraf\u0131ndan if\u015fa edildi
pscanalpha.base64disclosure.viewstate.soln=El ile ASP.NET ViewState hassas bilgileri s\u0131z\u0131nt\u0131 ve veri / toplanan di\u011fer g\u00fcvenlik a\u00e7\u0131klar\u0131ndan yararlanmak i\u00e7in kullan\u0131lan olamaz olmad\u0131\u011f\u0131n\u0131 teyit etmektedir.
pscanalpha.base64disclosure.viewstate.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.viewstate.extrainfo={0}

pscanalpha.base64disclosure.viewstatewithoutmac.name=ASP.NET ViewState B\u00fct\u00fcnl\u00fc\u011f\u00fc
pscanalpha.base64disclosure.viewstatewithoutmac.desc=Uygulama k\u00f6t\u00fc niyetli bir istemci taraf\u0131ndan tahrif edilebilir ASP.NET ViewState b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc korumak i\u00e7in Mesaj Do\u011frulama Kodu (MAC) kullanmaz
pscanalpha.base64disclosure.viewstatewithoutmac.soln=T\u00fcm ASP.NET ViewStates g\u00fcvenli bir algoritma kullan\u0131larak olu\u015fturulan bir MAC, ve sunucu taraf\u0131nda gizli bir anahtar kullanarak, m\u00fcdahale korunur emin olun. Programlama basm\u0131\u015f a\u015f\u0131r\u0131 veya ASP.NET yap\u0131land\u0131rma yoluyla olabilir bu modern ASP.NET kurulumu varsay\u0131lan yap\u0131land\u0131rmad\u0131r.
pscanalpha.base64disclosure.viewstatewithoutmac.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx https\://www.jardinesoftware.net/2012/02/06/asp-net-tampering-with-event-validation-part-1 /
pscanalpha.base64disclosure.viewstatewithoutmac.extrainfo={0}

pscanalpha.storabilitycacheability.name = \u0130\u00e7erik Cacheability

pscanalpha.nonstorable.name = Olmayan Cihaz i\u00e7inde saklanabilen \u0130\u00e7erik
pscanalpha.nonstorable.desc = Yan\u0131t i\u00e7eri\u011fi gibi proxy sunucular\u0131 olarak \u00f6nbelle\u011fe bile\u015fenleri taraf\u0131ndan depolanabilir de\u011fil. Tepki duyarl\u0131, ki\u015fisel veya kullan\u0131c\u0131ya \u00f6zg\u00fc bilgileri i\u00e7ermiyorsa, bu performans\u0131n\u0131 art\u0131rmak, saklanabilir ve \u00f6nbelle\u011fe al\u0131nmas\u0131n\u0131 yararlanabilir.
pscanalpha.nonstorable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.nonstorable.soln = \u0130\u00e7erik a\u015fa\u011f\u0131daki \u015fartlar kar\u015f\u0131land\u0131\u011f\u0131nda olmas\u0131n\u0131 sa\u011flayarak depolanabilir olarak i\u015faretlenmi\u015f olabilir\: istek y\u00f6ntemi (\u015fu anda \u00f6nbelleklenebilir olarak tan\u0131mlanan, "HEAD" "GET", ve "POST") \u00f6nbellek taraf\u0131ndan anla\u015f\u0131lmas\u0131 ve \u00f6nbelleklenebilir olarak tan\u0131mlanm\u0131\u015f olmal\u0131d\u0131r yan\u0131t durum kodu \u00f6nbellek (1xx, 2xx, 3xx, 4XX veya 5XX tepki s\u0131n\u0131flar\u0131n\u0131n biri genellikle anla\u015f\u0131ld\u0131\u011f\u0131) "no-store" \u00f6nbellek y\u00f6nergesi \u00f6nbelle\u011fe alma i\u00e7in istek veya yan\u0131t ba\u015fl\u0131k alanlar\u0131na g\u00f6re g\u00f6r\u00fcnmez gerekir taraf\u0131ndan anla\u015f\u0131lmal\u0131d\u0131r \u00f6rne\u011fin "vekil" \u00f6nbelleklerini olarak "ortak" \u00f6nbelleklerini, "\u00f6zel" yan\u0131t\u0131 y\u00f6nergesi gibi "vekil" \u00f6nbelleklerini olarak "ortak" cache taraf\u0131ndan \u00f6nbelle\u011fe i\u00e7in tepki g\u00f6r\u00fcnmez gerekir "Yetkilendirme" ba\u015fl\u0131k alan\u0131, istek g\u00f6r\u00fcnmez gerekir yan\u0131t\u0131 a\u00e7\u0131k\u00e7a yukar\u0131daki ko\u015fullara ek olarak ("s-maxage" Cache-Control tepki direktifleri, "kamu" "must-REVALIDATE" birini kullanarak, ya da) izin vermedik\u00e7e, a\u015fa\u011f\u0131daki ko\u015fullardan en az birinin de olmal\u0131 cevab\u0131yla tatmin\: Bir i\u00e7ermelidir ba\u015fl\u0131k alan\u0131 B\u00f6yle, bu It must bir "s-maxage" yan\u0131t\u0131 y\u00f6nergesini i\u00e7ermelidir "proxy" \u00f6nbelleklerini olarak "ortak" cache \u0130\u00e7in "max-age" yan\u0131t\u0131 y\u00f6nergesini i\u00e7ermelidir "Expires" Bu Varsay\u0131lan (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501) taraf\u0131ndan \u00f6nbelleklenebilir olarak tan\u0131mlanan bir durum kodu olmas\u0131 gerekir \u00f6nbelle\u011fe al\u0131nmas\u0131n\u0131 sa\u011flayan bir "Cache Kontrol uzant\u0131s\u0131" i\u00e7erir.   
pscanalpha.nonstorable.extrainfo = {0}

pscanalpha.storablenoncacheable.name = Depolanabilir ama Olmayan Cacheable \u0130\u00e7eri\u011fi
pscanalpha.storablenoncacheable.desc = Yan\u0131t i\u00e7eri\u011fi gibi proxy sunucular\u0131 olarak \u00f6nbelle\u011fe bile\u015fenleri taraf\u0131ndan depolanabilir, ancak di\u011fer kullan\u0131c\u0131lardan benzer isteklerine yan\u0131t olarak, yukar\u0131 iste\u011fini do\u011frulayarak olmadan do\u011frudan \u00f6nbellekten al\u0131nmas\u0131n\u0131 olmayacakt\u0131r. 
pscanalpha.storablenoncacheable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablenoncacheable.soln=
pscanalpha.storablenoncacheable.extrainfo = {0} }

pscanalpha.storablecacheable.name = Depolanabilir ve Cacheable \u0130\u00e7eri\u011fi
pscanalpha.storablecacheable.desc = Yan\u0131t i\u00e7eri\u011fi gibi proxy sunucular\u0131 olarak \u00f6nbelle\u011fe bile\u015fenleri taraf\u0131ndan depolanabilir, ve di\u011fer kullan\u0131c\u0131lardan benzer isteklerine yan\u0131t olarak, \u00f6nbellekten yerine \u00f6nbelle\u011fe sunucular\u0131 taraf\u0131ndan kaynak sunucudan do\u011frudan al\u0131nabilir. Yan\u0131t verileri, hassas ki\u015fisel ya da kullan\u0131c\u0131ya \u00f6zg\u00fc ise, bu hassas bilgilerin s\u0131zd\u0131r\u0131lm\u0131\u015f olmas\u0131 neden olabilir. Baz\u0131 durumlarda, bu da, bir kullan\u0131c\u0131, bir kullan\u0131c\u0131n\u0131n oturum tam kontrol elde kendi ortam\u0131nda kullan\u0131lan \u00f6nbelle\u011fe alma bile\u015fenlerinin konfig\u00fcrasyonuna ba\u011fl\u0131 olarak neden olabilir. Bu \u00f6ncelikle b\u00f6yle "proxy" \u00f6nbelleklerini olarak "ortak" \u00f6nbelle\u011fe alma sunucular\u0131 yerel a\u011f \u00fczerinde yap\u0131land\u0131r\u0131lm\u0131\u015f olan bir konudur. Bu yap\u0131land\u0131rma, tipik haliyle, \u00f6rne\u011fin, kurum veya e\u011fitim ortamlarda bulunur.
pscanalpha.storablecacheable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablecacheable.soln = Tepki duyarl\u0131, ki\u015fisel veya kullan\u0131c\u0131ya \u00f6zg\u00fc bilgileri i\u00e7ermiyor do\u011frulay\u0131n. Cache-Control\: no-cache, no-store, olmal\u0131-REVALIDATE, \u00f6zel Pragma E\u011fer, ba\u015fka bir kullan\u0131c\u0131 taraf\u0131ndan saklan\u0131r ve \u00f6nbellekten al\u0131n\u0131yor, a\u015fa\u011f\u0131daki HTTP yan\u0131t ba\u015fl\u0131klar\u0131 kullan\u0131m\u0131n\u0131 dikkate s\u0131n\u0131rlamak i\u00e7in, veya i\u00e7eri\u011fi engellemek \: no-cache Expires\: 0 Bu yap\u0131land\u0131rma yan\u0131t\u0131n\u0131 saklamak de\u011fil, ve benzer bir iste\u011fine yan\u0131t olarak, \u00f6nbellekten (do\u011frulama olmadan), yan\u0131t\u0131 almak de\u011fil hem HTTP 1.0 ve HTTP 1.1 uyumlu \u00f6nbelle\u011fe alma sunucular\u0131 y\u00f6nlendirir. 
pscanalpha.storablecacheable.extrainfo = {0}
pscanalpha.storablecacheable.otherinfo.liberallifetimeheuristic = Yan\u0131tta a\u00e7\u0131k\u00e7a belirtilen \u00f6nbellek \u00f6mr\u00fc y\u00f6nergesi yoklu\u011funda, 1 y\u0131ll\u0131k bir liberal ya\u015fam boyu bulu\u015fma y\u00f6ntemi kabul edildi. Buna, rfc7234 taraf\u0131ndan izin verilir.
pscanalpha.storablecacheable.otherinfo.staleretrievenotblocked = Yan\u0131t ge\u00e7ersiz ve eskimi\u015f yan\u0131tlar 'must-revalidate', 'proxy-revalidate', 's-maxage' veya 'max-age' yan\u0131t\u0131n\u0131 kullanarak 'Cache-Control 'direktifleri yeniden \u00f6n do\u011frulanma veya engellenecek \u015fekilde yap\u0131land\u0131r\u0131lmad\u0131.

pscanalpha.jso.name=Java Serialization Object
pscanalpha.jso.desc=Java Serialization seems to be in use. If not correctly validated, an attacker can send a specially crafted object. This can lead to a dangerous "Remote Code Execution". A magic sequence identifying JSO has been detected (Base64\: rO0AB, Raw\: 0xac, 0xed, 0x00, 0x05).
pscanalpha.jso.soln=Deserialization of untrusted data is inherently dangerous and should be avoided.
pscanalpha.jso.refs=https\://www.oracle.com/technetwork/java/seccodeguide-139067.html\#8

pscanalpha.sri-integrity.name=Sub Resource Integrity Attribute Missing
pscanalpha.sri-integrity.desc=The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content. 
pscanalpha.sri-integrity.soln=Provide a valid integrity attribute to the tag.
pscanalpha.sri-integrity.refs=https\://developer.mozilla.org/en/docs/Web/Security/Subresource_Integrity

pscanalpha.jsfunction.name=Dangerous JS Functions
pscanalpha.jsfunction.desc=A dangerous JS function seems to be in use that would leave the site vulnerable.
pscanalpha.jsfunction.soln=See the references for security advice on the use of these functions.
pscanalpha.jsfunction.refs=https\://angular.io/guide/security

pscanalpha.payloader.name=Passive Scan Rules Alpha Custom Payloads
pscanalpha.payloader.desc=Provides support for custom payloads in scan rules.

pscanalpha.site-isolation.name = Insufficient Site Isolation Against Spectre Vulnerability

pscanalpha.site-isolation.corp.name = Cross-Origin-Resource-Policy Header Missing or Invalid
pscanalpha.site-isolation.corp.desc = Cross-Origin-Resource-Policy header is an opt-in header designed to counter side-channels attacks like Spectre. Resource should be specifically set as shareable amongst different origins.
pscanalpha.site-isolation.corp.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_(CORP)
pscanalpha.site-isolation.corp.soln = Ensure that the application/web server sets the Cross-Origin-Resource-Policy header appropriately, and that it sets the Cross-Origin-Resource-Policy header to 'same-origin' for all web pages.\n'same-site' is considered as less secured and should be avoided.\nIf resources must be shared, set the header to 'cross-origin'.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Resource-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-resource-policy).

pscanalpha.site-isolation.coep.name = Cross-Origin-Embedder-Policy Header Missing or Invalid
pscanalpha.site-isolation.coep.desc = Cross-Origin-Embedder-Policy header is a response header that prevents a document from loading any cross-origin resources that don't explicitly grant the document permission (using CORP or CORS).
pscanalpha.site-isolation.coep.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy
pscanalpha.site-isolation.coep.soln = Ensure that the application/web server sets the Cross-Origin-Embedder-Policy header appropriately, and that it sets the Cross-Origin-Embedder-Policy header to 'require-corp' for documents.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Embedder-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-embedder-policy).

pscanalpha.site-isolation.coop.name = Cross-Origin-Opener-Policy Header Missing or Invalid
pscanalpha.site-isolation.coop.desc = Cross-Origin-Opener-Policy header is a response header that allows a site to control if others included documents share the same browsing context. Sharing the same browsing context with untrusted documents might lead to data leak.
pscanalpha.site-isolation.coop.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy
pscanalpha.site-isolation.coop.soln = Ensure that the application/web server sets the Cross-Origin-Opener-Policy header appropriately, and that it sets the Cross-Origin-Opener-Policy header to 'same-origin' for documents.\n'same-origin-allow-popups' is considered as less secured and should be avoided.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Opener-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-opener-policy).

pscanalpha.desc = Regras de Varredura Passiva - alpha

pscanalpha.examplefile.name=An example passive scan rule which loads data from a file.
pscanalpha.examplefile.desc=Add more information about the vulnerability here.
pscanalpha.examplefile.other=This is for information that doesnt fit in any of the other sections.
pscanalpha.examplefile.soln=A general description of how to solve the problem.
pscanalpha.examplefile.refs=https\://www.zaproxy.org/blog/2014-04-03-hacking-zap-3-passive-scan-rules/

pscanalpha.permissionspolicymissing.name=Permissions Policy Header Not Set
pscanalpha.permissionspolicymissing.desc=Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.
pscanalpha.permissionspolicymissing.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy\nhttps\://developers.google.com/web/updates/2018/06/feature-policy\nhttps\://scotthelme.co.uk/a-new-security-header-feature-policy/\nhttps\://w3c.github.io/webappsec-feature-policy/\nhttps\://www.smashingmagazine.com/2018/12/feature-policy/
pscanalpha.permissionspolicymissing.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.

pscanalpha.permissionspolicymissing.deprecated.name=Deprecated Feature Policy Header Set
pscanalpha.permissionspolicymissing.deprecated.desc=The header has now been renamed to Permissions-Policy. 
pscanalpha.permissionspolicymissing.deprecated.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy
pscanalpha.permissionspolicymissing.deprecated.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header instead of the Feature-Policy header.

pscanalpha.inpagebanner.name=In Page Banner Information Leak
pscanalpha.inpagebanner.desc=The server returned a version banner string in the response content. Such information leaks may allow attackers to further target specific issues impacting the product and version in use.
pscanalpha.inpagebanner.other=There is a chance that the highlight in the finding is on a value in the headers, versus the actual matched string in the response body.
pscanalpha.inpagebanner.soln=Configure the server to prevent such information leaks. For example\:\nUnder Tomcat this is done via the "server" directive and implementation of custom error pages.\nUnder Apache this is done via the "ServerSignature" and "ServerTokens" directives.
pscanalpha.inpagebanner.refs=https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/

pscanalpha.sourcecodedisclosure.name=Divulga\u00e7\u00e3o de C\u00f3digo-fonte
pscanalpha.sourcecodedisclosure.desc=O c\u00f3digo-fonte da aplica\u00e7\u00e3o foi divulgado pelo servidor da web
pscanalpha.sourcecodedisclosure.soln=Certifique-se de que o c\u00f3digo-fonte da aplica\u00e7\u00e3o n\u00e3o esteja dispon\u00edvel com extens\u00f5es alternativas e certifique-se de que o c\u00f3digo-fonte n\u00e3o esteja presente em outros arquivos ou dados implantados no servidor web ou servidos pelo servidor web.
pscanalpha.sourcecodedisclosure.refs=http\://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-u-s-government/
pscanalpha.sourcecodedisclosure.extrainfo={0}

pscanalpha.base64disclosure.name=Divulga\u00e7\u00e3o de Base64
pscanalpha.base64disclosure.desc=Base64 encoded data was disclosed by the application/web server. Note\: in the interests of performance not all base64 strings in the response were analyzed individually, the entire response should be looked at by the analyst/security team/developer(s).
pscanalpha.base64disclosure.soln=Confirme manualmente se os dados Base64 n\u00e3o vazam informa\u00e7\u00f5es confidenciais e se os dados n\u00e3o podem ser agregados/usados \u200b\u200bpara explorar outras vulnerabilidades.
pscanalpha.base64disclosure.refs=http\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.extrainfo={1}

pscanalpha.base64disclosure.viewstate.name=Divulga\u00e7\u00e3o ASP.NET ViewState
pscanalpha.base64disclosure.viewstate.desc=Um ViewState ASP.NET foi divulgado pela aplica\u00e7\u00e3o/servidor web
pscanalpha.base64disclosure.viewstate.soln=Confirme manualmente se o ViewState ASP.NET n\u00e3o vaza informa\u00e7\u00f5es confidenciais e se os dados n\u00e3o podem ser agregados/usados \u200b\u200bpara explorar outras vulnerabilidades.
pscanalpha.base64disclosure.viewstate.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.viewstate.extrainfo={0}

pscanalpha.base64disclosure.viewstatewithoutmac.name=Integridade ViewState ASP.NET
pscanalpha.base64disclosure.viewstatewithoutmac.desc=A aplica\u00e7\u00e3o n\u00e3o usa um C\u00f3digo de Autentica\u00e7\u00e3o de Mensagem (MAC) para proteger a integridade do ASP.NET ViewState, que pode ser adulterado por um cliente malicioso
pscanalpha.base64disclosure.viewstatewithoutmac.soln=Certifique-se de que todos os ViewStates ASP.NET est\u00e3o protegidos contra viola\u00e7\u00e3o, usando um MAC, gerado usando um algoritmo seguro e uma chave secreta no lado do servidor. Esta \u00e9 a configura\u00e7\u00e3o padr\u00e3o na instala\u00e7\u00e3o moderna do ASP.NET, que pode ser substitu\u00edda programaticamente ou por meio da configura\u00e7\u00e3o do ASP.NET.
pscanalpha.base64disclosure.viewstatewithoutmac.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttps\://www.jardinesoftware.net/2012/02/06/asp-net-tampering-with-event-validation-part-1/
pscanalpha.base64disclosure.viewstatewithoutmac.extrainfo={0}

pscanalpha.storabilitycacheability.name = Cache de Conte\u00fado

pscanalpha.nonstorable.name = Conte\u00fado N\u00e3o-Armazen\u00e1vel
pscanalpha.nonstorable.desc = O conte\u00fado da resposta n\u00e3o pode ser armazenado por componentes de armazenamento em cache, como servidores proxy. Se a resposta n\u00e3o contiver informa\u00e7\u00f5es confidenciais, pessoais ou espec\u00edficas do usu\u00e1rio, ela pode se beneficiar ao ser armazenada e armazenada em cache para melhorar o desempenho.
pscanalpha.nonstorable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.nonstorable.soln = O conte\u00fado pode ser marcado como armazen\u00e1vel garantindo que as seguintes condi\u00e7\u00f5es sejam satisfeitas\: O m\u00e9todo de solicita\u00e7\u00e3o deve ser compreendido pelo cache e definido como armazen\u00e1vel em cache ("GET", "HEAD" e "POST" s\u00e3o atualmente definidos como armazen\u00e1veis \u200b\u200bem cache). o c\u00f3digo de status de resposta deve ser compreendido pelo cache (uma das classes de resposta 1XX, 2XX, 3XX, 4XX ou 5XX \u00e9 geralmente entendida). A diretiva de cache "no-store" n\u00e3o deve aparecer nos campos de cabe\u00e7alho de solicita\u00e7\u00e3o ou resposta para caches "shared", como caches "proxy", a diretiva de resposta "private" n\u00e3o deve aparecer na resposta. Para armazenamento em cache por caches "shared", como caches "proxy", o campo de cabe\u00e7alho "Authorization" n\u00e3o deve aparecer na solicita\u00e7\u00e3o, a menos que a resposta o permita explicitamente (usando uma das diretivas de resposta "must-revalidate", "public" ou "s-maxage" Cache-Control). Al\u00e9m das condi\u00e7\u00f5es acima, pelo menos uma das seguintes condi\u00e7\u00f5es tamb\u00e9m deve ser satisfeita pela resposta\: Deve conter um campo de cabe\u00e7alho "Expire" e deve conter uma diretiva de resposta "max-age". Para caches "shared", como caches "proxy", deve conter uma diretiva de resposta "s-maxage". Deve conter uma "Cache Control Extension" que permite que seja armazenado em cache. Ele deve ter um c\u00f3digo de status definido como armazen\u00e1vel em cache por padr\u00e3o (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).
pscanalpha.nonstorable.extrainfo = {0}

pscanalpha.storablenoncacheable.name = Conte\u00fado Armazen\u00e1vel, mas N\u00e3o Armazen\u00e1vel em Cache
pscanalpha.storablenoncacheable.desc = O conte\u00fado da resposta pode ser armazenado por componentes de cache, como servidores proxy, mas n\u00e3o ser\u00e1 recuperado diretamente do cache, sem validar o pedido de envio, em resposta a pedidos semelhantes de outros usu\u00e1rios.
pscanalpha.storablenoncacheable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablenoncacheable.soln=
pscanalpha.storablenoncacheable.extrainfo = {0}}

pscanalpha.storablecacheable.name = Conte\u00fado Armazen\u00e1vel e Armazen\u00e1vel em Cache
pscanalpha.storablecacheable.desc = O conte\u00fado da resposta pode ser armazenado por componentes de cache, como servidores proxy, e pode ser recuperado diretamente do cache, em vez do servidor de origem pelos servidores de cache, em resposta a solicita\u00e7\u00f5es semelhantes de outros usu\u00e1rios. Se os dados de resposta forem confidenciais, pessoais ou espec\u00edficos do usu\u00e1rio, isso pode resultar no vazamento de informa\u00e7\u00f5es confidenciais. Em alguns casos, isso pode at\u00e9 mesmo resultar em um usu\u00e1rio ganhando controle total da sess\u00e3o de outro usu\u00e1rio, dependendo da configura\u00e7\u00e3o dos componentes de cache em uso em seu ambiente. Este \u00e9 principalmente um problema quando os servidores de cache "shared", como caches "proxy", s\u00e3o configurados na rede local. Essa configura\u00e7\u00e3o \u00e9 normalmente encontrada em ambientes corporativos ou educacionais, por exemplo.
pscanalpha.storablecacheable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablecacheable.soln = Confirme se a resposta n\u00e3o cont\u00e9m informa\u00e7\u00f5es confidenciais, pessoais ou espec\u00edficas do usu\u00e1rio. Em caso afirmativo, considere o uso dos seguintes cabe\u00e7alhos de resposta HTTP, para limitar ou evitar que o conte\u00fado seja armazenado e recuperado do cache por outro usu\u00e1rio\: Cache-Control\: no-cache, no-store, must-revalidate, private Pragma \: no-cache Expires\: 0 Esta configura\u00e7\u00e3o direciona os servidores de cache compat\u00edvel com HTTP 1.0 e HTTP 1.1 para n\u00e3o armazenar a resposta e n\u00e3o recuperar a resposta (sem valida\u00e7\u00e3o) do cache, em resposta a uma solicita\u00e7\u00e3o semelhante.
pscanalpha.storablecacheable.extrainfo = {0}
pscanalpha.storablecacheable.otherinfo.liberallifetimeheuristic = Na aus\u00eancia de uma diretiva de tempo de vida de armazenamento em cache explicitamente especificada na resposta, uma heur\u00edstica de tempo de vida liberal de 1 ano foi assumida. Isso \u00e9 permitido por rfc7234.
pscanalpha.storablecacheable.otherinfo.staleretrievenotblocked = A resposta est\u00e1 desatualizada e as respostas desatualizadas n\u00e3o s\u00e3o configuradas para ser revalidadas ou bloqueadas, usando a resposta 'must-revalidate', 'proxy-revalidate', 's-maxage' ou 'max-age' 'Cache-Control 

pscanalpha.jso.name=Java Serialization Object
pscanalpha.jso.desc=Java Serialization seems to be in use. If not correctly validated, an attacker can send a specially crafted object. This can lead to a dangerous "Remote Code Execution". A magic sequence identifying JSO has been detected (Base64\: rO0AB, Raw\: 0xac, 0xed, 0x00, 0x05).
pscanalpha.jso.soln=Deserialization of untrusted data is inherently dangerous and should be avoided.
pscanalpha.jso.refs=https\://www.oracle.com/technetwork/java/seccodeguide-139067.html\#8

pscanalpha.sri-integrity.name=Sub Resource Integrity Attribute Missing
pscanalpha.sri-integrity.desc=The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content. 
pscanalpha.sri-integrity.soln=Provide a valid integrity attribute to the tag.
pscanalpha.sri-integrity.refs=https\://developer.mozilla.org/en/docs/Web/Security/Subresource_Integrity

pscanalpha.jsfunction.name=Dangerous JS Functions
pscanalpha.jsfunction.desc=A dangerous JS function seems to be in use that would leave the site vulnerable.
pscanalpha.jsfunction.soln=See the references for security advice on the use of these functions.
pscanalpha.jsfunction.refs=https\://angular.io/guide/security

pscanalpha.payloader.name=Passive Scan Rules Alpha Custom Payloads
pscanalpha.payloader.desc=Provides support for custom payloads in scan rules.

pscanalpha.site-isolation.name = Insufficient Site Isolation Against Spectre Vulnerability

pscanalpha.site-isolation.corp.name = Cross-Origin-Resource-Policy Header Missing or Invalid
pscanalpha.site-isolation.corp.desc = Cross-Origin-Resource-Policy header is an opt-in header designed to counter side-channels attacks like Spectre. Resource should be specifically set as shareable amongst different origins.
pscanalpha.site-isolation.corp.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_(CORP)
pscanalpha.site-isolation.corp.soln = Ensure that the application/web server sets the Cross-Origin-Resource-Policy header appropriately, and that it sets the Cross-Origin-Resource-Policy header to 'same-origin' for all web pages.\n'same-site' is considered as less secured and should be avoided.\nIf resources must be shared, set the header to 'cross-origin'.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Resource-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-resource-policy).

pscanalpha.site-isolation.coep.name = Cross-Origin-Embedder-Policy Header Missing or Invalid
pscanalpha.site-isolation.coep.desc = Cross-Origin-Embedder-Policy header is a response header that prevents a document from loading any cross-origin resources that don't explicitly grant the document permission (using CORP or CORS).
pscanalpha.site-isolation.coep.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy
pscanalpha.site-isolation.coep.soln = Ensure that the application/web server sets the Cross-Origin-Embedder-Policy header appropriately, and that it sets the Cross-Origin-Embedder-Policy header to 'require-corp' for documents.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Embedder-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-embedder-policy).

pscanalpha.site-isolation.coop.name = Cross-Origin-Opener-Policy Header Missing or Invalid
pscanalpha.site-isolation.coop.desc = Cross-Origin-Opener-Policy header is a response header that allows a site to control if others included documents share the same browsing context. Sharing the same browsing context with untrusted documents might lead to data leak.
pscanalpha.site-isolation.coop.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy
pscanalpha.site-isolation.coop.soln = Ensure that the application/web server sets the Cross-Origin-Opener-Policy header appropriately, and that it sets the Cross-Origin-Opener-Policy header to 'same-origin' for documents.\n'same-origin-allow-popups' is considered as less secured and should be avoided.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Opener-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-opener-policy).

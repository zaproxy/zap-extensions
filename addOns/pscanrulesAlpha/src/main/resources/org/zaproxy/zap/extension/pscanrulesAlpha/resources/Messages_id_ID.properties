pscanalpha.desc = Aturan Pindai Pasif - alfa

pscanalpha.examplefile.name=An example passive scan rule which loads data from a file.
pscanalpha.examplefile.desc=Add more information about the vulnerability here.
pscanalpha.examplefile.other=This is for information that doesnt fit in any of the other sections.
pscanalpha.examplefile.soln=A general description of how to solve the problem.
pscanalpha.examplefile.refs=https\://www.zaproxy.org/blog/2014-04-03-hacking-zap-3-passive-scan-rules/

pscanalpha.permissionspolicymissing.name=Permissions Policy Header Not Set
pscanalpha.permissionspolicymissing.desc=Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.
pscanalpha.permissionspolicymissing.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy\nhttps\://developers.google.com/web/updates/2018/06/feature-policy\nhttps\://scotthelme.co.uk/a-new-security-header-feature-policy/\nhttps\://w3c.github.io/webappsec-feature-policy/\nhttps\://www.smashingmagazine.com/2018/12/feature-policy/
pscanalpha.permissionspolicymissing.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.

pscanalpha.permissionspolicymissing.deprecated.name=Deprecated Feature Policy Header Set
pscanalpha.permissionspolicymissing.deprecated.desc=The header has now been renamed to Permissions-Policy. 
pscanalpha.permissionspolicymissing.deprecated.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy
pscanalpha.permissionspolicymissing.deprecated.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header instead of the Feature-Policy header.

pscanalpha.inpagebanner.name=In Page Banner Information Leak
pscanalpha.inpagebanner.desc=The server returned a version banner string in the response content. Such information leaks may allow attackers to further target specific issues impacting the product and version in use.
pscanalpha.inpagebanner.other=There is a chance that the highlight in the finding is on a value in the headers, versus the actual matched string in the response body.
pscanalpha.inpagebanner.soln=Configure the server to prevent such information leaks. For example\:\nUnder Tomcat this is done via the "server" directive and implementation of custom error pages.\nUnder Apache this is done via the "ServerSignature" and "ServerTokens" directives.
pscanalpha.inpagebanner.refs=https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/

pscanalpha.sourcecodedisclosure.name=Pengungkapan Kode Sumber
pscanalpha.sourcecodedisclosure.desc=Kode Sumber Aplikasi telah diungkapkan oleh server web
pscanalpha.sourcecodedisclosure.soln=Pastikan bahwa Kode Sumber aplikasi tidak tersedia dengan ekstensi alternatif, dan pastikan kode sumber tidak ada dalam file atau data lain yang dikirim ke server web, atau dilayani oleh server web. 
pscanalpha.sourcecodedisclosure.refs=http\://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-us-government/
pscanalpha.sourcecodedisclosure.extrainfo={0}

pscanalpha.base64disclosure.name=Pengungkapan Base64
pscanalpha.base64disclosure.desc=Base64 encoded data was disclosed by the application/web server. Note\: in the interests of performance not all base64 strings in the response were analyzed individually, the entire response should be looked at by the analyst/security team/developer(s).
pscanalpha.base64disclosure.soln=Secara manual konfirmasikan bahwa data Base64 tidak membocorkan informasi sensitif, dan data tersebut tidak dapat digabungkan/digunakan untuk memanfaatkan kerentanan lainnya.
pscanalpha.base64disclosure.refs=http\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.extrainfo={1}

pscanalpha.base64disclosure.viewstate.name=ASP.NET ViewState Disclosure
pscanalpha.base64disclosure.viewstate.desc=ASP.NET ViewState telah diungkapkan oleh aplikasi / web server
pscanalpha.base64disclosure.viewstate.soln=Secara manual konfirmasikan bahwa ASP.NET ViewState tidak membocorkan informasi sensitif, dan data tersebut tidak dapat digabungkan/digunakan untuk memanfaatkan kerentanan lainnya.
pscanalpha.base64disclosure.viewstate.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.viewstate.extrainfo={0}

pscanalpha.base64disclosure.viewstatewithoutmac.name=ASP.NET ViewState Integrity
pscanalpha.base64disclosure.viewstatewithoutmac.desc=Aplikasi tidak menggunakan Message Authentication Code (MAC) untuk melindungi integritas ViewState ASP.NET, yang dapat dirusak oleh klien berbahaya
pscanalpha.base64disclosure.viewstatewithoutmac.soln=Pastikan semua ViewStates ASP.NET terlindungi dari gangguan, dengan menggunakan MAC, yang dihasilkan dengan menggunakan algoritma yang aman, dan kunci rahasia di sisi server. Ini adalah konfigurasi default pada instalasi ASP.NET modern, yang mungkin terlalu banyak ditangani secara programatik, atau melalui konfigurasi ASP.NET.
pscanalpha.base64disclosure.viewstatewithoutmac.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx https\://www.jardinesoftware.net/2012/02/06/asp-net-tampering-with-event-validation-part-1 /
pscanalpha.base64disclosure.viewstatewithoutmac.extrainfo={0}

pscanalpha.storabilitycacheability.name = Kontent Cacheability

pscanalpha.nonstorable.name = Konten Non-Storable
pscanalpha.nonstorable.desc = Isi tanggapan tidak terhindarkan oleh komponen caching seperti server proxy. Jika tanggapan tidak mengandung informasi sensitif, pribadi atau informasi khusus pengguna, mungkin akan mendapat keuntungan dari penyimpanan dan penyimpanan cache, untuk meningkatkan kinerja.
pscanalpha.nonstorable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.nonstorable.soln = Konten dapat ditandai sebagai storable dengan memastikan bahwa kondisi berikut terpenuhi\:\nMetode permintaan harus dipahami oleh cache dan didefinisikan sebagai cacheable ("GET", "HEAD", dan "POST" saat ini didefinisikan sebagai cacheable)\nKode status respons harus dipahami oleh cache (salah satu kelas respons 1XX, 2XX, 3XX, 4XX, atau 5XX umumnya dipahami)\nPerintah cache "no-store" tidak boleh muncul di kolom header request atau response\nUntuk caching dengan cache "shared" seperti cache "proxy", perintah respons "pribadi" tidak boleh muncul dalam tanggapan.\nUntuk caching dengan cache "shared" seperti cache "proxy", kolom header "Otorisasi" tidak boleh muncul dalam permintaan, kecuali jika jawabannya secara eksplisit mengizinkannya (menggunakan salah satu dari "harus-dipalsukan ulang", "publik", atau "s-maxage" Cache-Control response directives)\nSelain kondisi di atas, setidaknya salah satu dari kondisi berikut juga harus dipenuhi oleh respon\:\nIni harus berisi kolom header "Kedaluwarsa"\nIni harus berisi perintah tanggapan "usia maksim"\nUntuk cache "shared" seperti cache "proxy", itu harus berisi perintah tanggapan "s-maxage"\nIni harus berisi "Cache Control Extension" yang memungkinkannya di-cache\nIni harus memiliki kode status yang didefinisikan sebagai cacheable secara default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).   
pscanalpha.nonstorable.extrainfo = {0}

pscanalpha.storablenoncacheable.name = Konten Storable tapi Non-Cacheable
pscanalpha.storablenoncacheable.desc = Isi tanggapan storable oleh komponen caching seperti server proxy, namun tidak akan diambil langsung dari cache, tanpa memvalidasi permintaan di hulu, sebagai tanggapan atas permintaan serupa dari pengguna lain. 
pscanalpha.storablenoncacheable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablenoncacheable.soln=
pscanalpha.storablenoncacheable.extrainfo = {0}}

pscanalpha.storablecacheable.name = Konten Storable dan Cacheable
pscanalpha.storablecacheable.desc = Isi tanggapan storable oleh komponen caching seperti server proxy, dan dapat diambil langsung dari cache, bukan dari server asal oleh server caching, sebagai tanggapan atas permintaan serupa dari pengguna lain. Jika data respons sensitif, personal atau user-specific, hal ini dapat mengakibatkan informasi sensitif bocor. Dalam beberapa kasus, ini mungkin mengakibatkan pengguna mendapatkan kontrol penuh terhadap sesi pengguna lain, bergantung pada konfigurasi komponen caching yang digunakan di lingkungan mereka. Ini terutama merupakan masalah di mana server caching "shared" seperti cache "proxy" dikonfigurasi pada jaringan lokal. Konfigurasi ini biasanya ditemukan di lingkungan perusahaan atau pendidikan, misalnya.
pscanalpha.storablecacheable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablecacheable.soln = Validasi bahwa respons tidak mengandung informasi sensitif, pribadi atau informasi khusus pengguna. Jika ya, pertimbangkan penggunaan header respons HTTP berikut, untuk membatasi, atau mencegah konten disimpan dan diambil dari cache oleh pengguna lain\:\nCache-Control\: no-cache, no-store, harus-revalidate, private\nPragma\: tidak ada cache\nKedaluwarsa\: 0\nKonfigurasi ini mengarahkan server caching HTTP 1.0 dan HTTP 1.1 yang sesuai untuk tidak menyimpan respons, dan untuk tidak mengambil tanggapan (tanpa validasi) dari cache, sebagai tanggapan atas permintaan serupa. 
pscanalpha.storablecacheable.extrainfo = {0}
pscanalpha.storablecacheable.otherinfo.liberallifetimeheuristic = Dengan tidak adanya instruksi seumur hidup caching yang ditentukan secara eksplisit dalam tanggapannya, umur heuristik liberal selama 1 tahun diasumsikan. Ini diijinkan oleh rfc7234.
pscanalpha.storablecacheable.otherinfo.staleretrievenotblocked = Responnya basi, dan tanggapan basi tidak dikonfigurasikan untuk divalidasi ulang atau diblokir, menggunakan respons 'harus-revalidate', 'proxy-revalidate', 's-maxage', atau 'max-age' 'Cache-Control 'arahan.

pscanalpha.jso.name=Java Serialization Object
pscanalpha.jso.desc=Java Serialization seems to be in use. If not correctly validated, an attacker can send a specially crafted object. This can lead to a dangerous "Remote Code Execution". A magic sequence identifying JSO has been detected (Base64\: rO0AB, Raw\: 0xac, 0xed, 0x00, 0x05).
pscanalpha.jso.soln=Deserialization of untrusted data is inherently dangerous and should be avoided.
pscanalpha.jso.refs=https\://www.oracle.com/technetwork/java/seccodeguide-139067.html\#8

pscanalpha.sri-integrity.name=Sub Resource Integrity Attribute Missing
pscanalpha.sri-integrity.desc=The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content. 
pscanalpha.sri-integrity.soln=Provide a valid integrity attribute to the tag.
pscanalpha.sri-integrity.refs=https\://developer.mozilla.org/en/docs/Web/Security/Subresource_Integrity

pscanalpha.jsfunction.name=Dangerous JS Functions
pscanalpha.jsfunction.desc=A dangerous JS function seems to be in use that would leave the site vulnerable.
pscanalpha.jsfunction.soln=See the references for security advice on the use of these functions.
pscanalpha.jsfunction.refs=https\://angular.io/guide/security

pscanalpha.payloader.name=Passive Scan Rules Alpha Custom Payloads
pscanalpha.payloader.desc=Provides support for custom payloads in scan rules.

pscanalpha.site-isolation.name = Insufficient Site Isolation Against Spectre Vulnerability

pscanalpha.site-isolation.corp.name = Cross-Origin-Resource-Policy Header Missing or Invalid
pscanalpha.site-isolation.corp.desc = Cross-Origin-Resource-Policy header is an opt-in header designed to counter side-channels attacks like Spectre. Resource should be specifically set as shareable amongst different origins.
pscanalpha.site-isolation.corp.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy_(CORP)
pscanalpha.site-isolation.corp.soln = Ensure that the application/web server sets the Cross-Origin-Resource-Policy header appropriately, and that it sets the Cross-Origin-Resource-Policy header to 'same-origin' for all web pages.\n'same-site' is considered as less secured and should be avoided.\nIf resources must be shared, set the header to 'cross-origin'.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Resource-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-resource-policy).

pscanalpha.site-isolation.coep.name = Cross-Origin-Embedder-Policy Header Missing or Invalid
pscanalpha.site-isolation.coep.desc = Cross-Origin-Embedder-Policy header is a response header that prevents a document from loading any cross-origin resources that don't explicitly grant the document permission (using CORP or CORS).
pscanalpha.site-isolation.coep.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy
pscanalpha.site-isolation.coep.soln = Ensure that the application/web server sets the Cross-Origin-Embedder-Policy header appropriately, and that it sets the Cross-Origin-Embedder-Policy header to 'require-corp' for documents.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Embedder-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-embedder-policy).

pscanalpha.site-isolation.coop.name = Cross-Origin-Opener-Policy Header Missing or Invalid
pscanalpha.site-isolation.coop.desc = Cross-Origin-Opener-Policy header is a response header that allows a site to control if others included documents share the same browsing context. Sharing the same browsing context with untrusted documents might lead to data leak.
pscanalpha.site-isolation.coop.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy
pscanalpha.site-isolation.coop.soln = Ensure that the application/web server sets the Cross-Origin-Opener-Policy header appropriately, and that it sets the Cross-Origin-Opener-Policy header to 'same-origin' for documents.\n'same-origin-allow-popups' is considered as less secured and should be avoided.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Opener-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-opener-policy).

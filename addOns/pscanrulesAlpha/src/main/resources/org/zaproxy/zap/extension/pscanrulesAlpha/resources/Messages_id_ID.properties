#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages
pscanalpha.desc=Aturan Pindai Pasif - alfa

pscanalpha.cookiesamesitescanner.name=Cookie Tanpa Atribut SameSite
pscanalpha.cookiesamesitescanner.desc=Kuki telah ditetapkan tanpa atribut SameSite, yang berarti cookie tersebut dapat dikirim sebagai hasil permintaan 'permintaan lintas situs'.\nAtribut SameSite adalah ukuran penghitung yang efektif untuk pemalsuan permintaan lintas situs, penyisipan naskah lintas situs, dan serangan waktu.
pscanalpha.cookiesamesitescanner.badval=Kuki telah ditetapkan dengan nilai atribut SameSite yang tidak valid, yang berarti cookie tersebut dapat dikirim sebagai hasil permintaan 'permintaan lintas situs'.\nAtribut SameSite adalah ukuran penghitung yang efektif untuk pemalsuan permintaan lintas situs, penyisipan naskah lintas situs, dan serangan waktu.
pscanalpha.cookiesamesitescanner.soln=Memastikan bahwa perlengkapan SameSite diatur baik 'lemah' atau pilihan yang 'ketat' untuk semua cookie.
pscanalpha.cookiesamesitescanner.refs=https\://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site

pscanalpha.examplefile.name=Contoh passive scan rule yang memuat data dari sebuah file
pscanalpha.examplefile.desc=Menambahkan informasi lebih lanjut tentang kerentanan di sini
pscanalpha.examplefile.other=Ini adalah untuk informasi yang tidak sesuai di setiap bagian lain
pscanalpha.examplefile.soln=Gambaran umum tentang bagaimana untuk memecahkan masalah
pscanalpha.examplefile.refs=http\://zaproxy.blogspot.co.uk/2014/04/hacking-zap-3-passive-scan-rules.html

pscanalpha.insecureformload.name=HTTP ke HTTPS Transisi tidak aman di Form Post
pscanalpha.insecureformload.desc=Pemeriksaan ini mencari halaman HTTP yang tidak aman yang menjadi tuan rumah formulir HTTPS. Masalahnya adalah halaman HTTP yang tidak aman dapat dengan mudah dibajak melalui MITM dan formulir HTTPS yang aman dapat diganti atau dipalsukan.
pscanalpha.insecureformload.refs=
pscanalpha.insecureformload.soln=Gunakan HTTPS untuk halaman arahan yang menjadi tuan rumah formulir aman.
pscanalpha.insecureformload.exploit=
pscanalpha.insecureformload.extrainfo=Tanggapan atas permintaan HTTP berikut menyertakan nilai atribut tindakan tag HTTPS\:\n\n{0} Konteksnya adalah\:\n\n{1}

pscanalpha.insecureformpost.name=HTTPS ke HTTP Insecure Transition di Form Post
pscanalpha.insecureformpost.desc=Ceknya mengidentifikasi halaman HTTPS yang aman yang menampung formulir HTTP yang tidak aman. Masalahnya adalah halaman yang aman sedang bertransisi ke halaman yang tidak aman saat data diunggah melalui formulir. Pengguna mungkin mengira mereka mengirimkan data ke halaman yang aman padahal sebenarnya tidak demikian.
pscanalpha.insecureformpost.refs=
pscanalpha.insecureformpost.soln=Pastikan data sensitif hanya dikirim melalui saluran HTTPS yang aman.
pscanalpha.insecureformpost.exploit=
pscanalpha.insecureformpost.extrainfo=Tanggapan terhadap permintaan HTTPS berikut mencakup nilai atribut tindakan tag bentuk HTTP\:\n\n{0} Konteksnya adalah\:\n\n{1}

pscanalpha.usercontrolledcharset.name=Charset Terkendali Pengguna
pscanalpha.usercontrolledcharset.desc=Pemeriksaan ini melihat masukan yang diberikan pengguna dalam parameter string kueri dan data POST untuk mengidentifikasi lokasi deklarasi Content-Type atau meta tag charset yang mungkin dikendalikan pengguna. Deklarasi charset seperti itu harus selalu dinyatakan oleh aplikasi. Jika penyerang bisa mengendalikan charset respon, mereka bisa memanipulasi HTML untuk melakukan XSS atau serangan lainnya.
pscanalpha.usercontrolledcharset.refs=
pscanalpha.usercontrolledcharset.soln=Angkatan UTF-8 di semua deklarasi charset. Jika input pengguna diperlukan untuk memutuskan deklarasi charset, pastikan hanya daftar yang diizinkan yang digunakan.
pscanalpha.usercontrolledcharset.exploit=Penyerang yang mengendalikan nilai elemen charset <meta> dapat mendeklarasikan UTF-7 dan juga mampu memasukkan muatan yang dikontrol pengguna dengan cukup pada awal dokumen HTML agar dimaknai sebagai UTF-7. Dengan mengkodekan muatan mereka dengan UTF-7 penyerang dapat melewati perlindungan XSS sisi server dan skrip embed di halaman.
pscanalpha.usercontrolledcharset.extrainfo=Atribut A (n) [{0}] tag [{1}]\n\nMasukan pengguna yang ditemukan adalah\:\n{2} \= {3}\n\nNilai charset yang dikontrolnya adalah\:\n{4}

pscanalpha.usercontrolledcookie.name=Keracunan Cookie
pscanalpha.usercontrolledcookie.desc=Pemeriksaan ini terlihat pada masukan pengguna yang disediakan di pertanyaan string parameter dan data POST untuk mengidentifikasi di mana cookie parameter mungkin dikendalikan. Ini disebut serangan cookie keracunan, dan menjadi dieksploitasi ketika seorang penyerang dapat memanipulasi cookie dalam berbagai cara. Dalam beberapa kasus ini tidak akan dieksploitasi, namun, mengizinkan parameter URL untuk mengatur cookie nilai-nilai ini umumnya dianggap sebagai bug.
pscanalpha.usercontrolledcookie.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-cookie
pscanalpha.usercontrolledcookie.soln=Jangan izinkan masukan pengguna untuk mengontrol nama dan nilai cookie. Jika beberapa parameter string kueri harus ditetapkan dalam nilai cookie, pastikan untuk memfilter titik koma yang dapat berfungsi sebagai delimitator nama / nilai pasangan.
pscanalpha.usercontrolledcookie.exploit.get=Seorang penyerang mungkin bisa meracuni nilai cookie melalui parameter URL. Cobalah menyuntikkan titik koma untuk melihat apakah Anda dapat menambahkan nilai cookie (misal\: name \= controlledValue; name \= anotherValue;).
pscanalpha.usercontrolledcookie.exploit.post=Seorang penyerang mungkin bisa meracuni nilai cookie melalui parameter POST. Untuk menguji apakah ini masalah yang lebih serius, Anda harus mencoba mengirim ulang permintaan itu sebagai GET, dengan parameter POST disertakan sebagai parmeter string kueri. Misalnya\: http\://nottrusted.com/page?value\=maliciousInput.\n\n
pscanalpha.usercontrolledcookie.extrainfo=Hal ini diidentifikasi pada\:\n\n{0}\n\nMasukan pengguna ditemukan di cookie berikut\:\n{1}\n\nMasukan pengguna adalah\:\n{2} \= {3}

pscanalpha.usercontrolledjavascriptevent.name=Acara JavaScript Terkendali User (XSS)
pscanalpha.usercontrolledjavascriptevent.desc=Pemeriksaan ini melihat masukan yang diberikan pengguna pada parameter string kueri dan data POST untuk mengidentifikasi di mana nilai atribut HTML tertentu dapat dikontrol. Ini menyediakan deteksi hot spot untuk XSS (cross-site scripting) yang memerlukan tinjauan lebih lanjut oleh analis keamanan untuk menentukan exploitability.            
pscanalpha.usercontrolledjavascriptevent.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-javascript-event
pscanalpha.usercontrolledjavascriptevent.soln=Validasi semua input dan sanitasi output sebelum menulis ke Javascript apapun pada * events.
pscanalpha.usercontrolledjavascriptevent.exploit=
pscanalpha.usercontrolledjavascriptevent.extrainfo=Acara javascript yang dikontrol pengguna ditemukan. Eksploitasi perlu ditentukan secara manual. Halaman di URL berikut\:\n\n {0} "termasuk acara Javascript berikut yang mungkin bisa diserang oleh penyerang\: \n\nMasukan pengguna ditemukan pada data berikut dari sebuah acara [ {1}]\:\n {2} \n\nMasukan pengguna adalah\:\n { 3}

pscanalpha.usercontrolledjavascriptproperty.name=Properti JavaScript User Controllable (XSS)
pscanalpha.usercontrolledjavascriptproperty.desc=Cek ini melihat masukan yang diberikan pengguna pada parameter string kueri dan data POST untuk mengidentifikasi URL mana yang memiliki properti javascript tertentu (misalnya, createElement src) mungkin tidak terkendali. Ini menyediakan deteksi hot spot untuk XSS (cross-site scripting) yang memerlukan tinjauan lebih lanjut oleh analis keamanan untuk menentukan exploitability.            
pscanalpha.usercontrolledjavascriptproperty.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-javascript-reference
pscanalpha.usercontrolledjavascriptproperty.soln=Jangan izinkan masukan pengguna untuk mengontrol referensi lokasi sumber javascript.
pscanalpha.usercontrolledjavascriptproperty.exploit=
pscanalpha.usercontrolledjavascriptproperty.extrainfo=Halaman di URL berikut tampaknya berisi masukan pengguna dalam nilai properti javascript\:\n\n {0} Masukan pengguna yang ditemukan adalah\:\n {1} \= {2} \n\nKonteksnya adalah\:\n {3}

pscanalpha.usercontrolledhtmlattributes.name=Attribut Elemen HTML User Controllable (Potensi XSS)
pscanalpha.usercontrolledhtmlattributes.desc=Pemeriksaan ini melihat masukan yang diberikan pengguna pada parameter string kueri dan data POST untuk mengidentifikasi di mana nilai atribut HTML tertentu dapat dikontrol. Ini menyediakan deteksi hot spot untuk XSS (cross-site scripting) yang memerlukan tinjauan lebih lanjut oleh analis keamanan untuk menentukan exploitability.
pscanalpha.usercontrolledhtmlattributes.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-html-attribute
pscanalpha.usercontrolledhtmlattributes.soln=Validasi semua input dan sanitasi output sebelum menulis ke atribut HTML.
pscanalpha.usercontrolledhtmlattributes.exploit=
pscanalpha.usercontrolledhtmlattributes.extrainfo=Nilai atribut HTML yang dikontrol pengguna ditemukan. Cobalah menyuntikkan karakter khusus untuk melihat apakah XSS mungkin dilakukan. Laman di URL berikut\:\n\n {0} \n\nnampaknya menyertakan masukan pengguna di\: atribut \n\n(n) [ {1}] tag [ {2}] \n\nMasukan pengguna yang ditemukan adalah\:\n {3} \= {4} \n\nPengguna yang dikendalikan nilai adalah\:\n {5}

pscanalpha.usercontrolledopenredirect.name=Buka pengalihan
pscanalpha.usercontrolledopenredirect.desc=Pengalihan terbuka adalah salah satu dari kerentanan Sepuluh Teratas OWASP 2010. Pemeriksaan ini melihat masukan yang diberikan pengguna dalam parameter string kueri dan data POST untuk mengidentifikasi kemungkinan pengalihan terbuka. Pengalihan terbuka terjadi saat aplikasi memungkinkan masukan yang diberikan pengguna (misalnya http\://nottrusted.com) untuk mengendalikan pengalihan offsite. Ini umumnya cara yang cukup akurat untuk menemukan di mana 301 atau 302 pengalihan dapat dimanfaatkan oleh serangan spammer atau phishing
pscanalpha.usercontrolledopenredirect.soln=Untuk menghindari open redirect vulnerability, parameter dari application script / program harus divalidasi sebelum mengirim 302 kode HTTP (redirect) ke browser client. Terapkan fungsi redirect yang aman yang hanya mengalihkan ke URI yang relatif, atau daftar domain tepercaya
pscanalpha.usercontrolledopenredirect.exploit=Penyerang dapat menyediakan pengguna dengan tautan berikut\: http\://example.com/example.php?url\=http\://malicious.example.com
pscanalpha.usercontrolledopenredirect.refs=https\://www.owasp.org/index.php/Open_redirect https\://owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards https\://cwe.mitre.org/data/definitions/601.html
pscanalpha.usercontrolledopenredirect.extrainfo.get=Tanggapan 301 atau 302 terhadap permintaan URL berikut tampaknya berisi masukan pengguna di header lokasi\:\n\n
pscanalpha.usercontrolledopenredirect.extrainfo.post=Pengalihan terbuka yang dikendalikan oleh parameter POST terdeteksi. Untuk menguji apakah ini masalah yang lebih serius, Anda harus mencoba mengirim ulang permintaan tersebut sebagai GET, dengan parameter POST disertakan sebagai parameter string kueri. Misalnya\: http\://nottrusted.com/page?url\=http\://lookout.net.\n\nTanggapan 301 atau 302 terhadap permintaan URL berikut tampaknya berisi masukan pengguna di header lokasi\:\n\n
pscanalpha.usercontrolledopenredirect.extrainfo.common={0} \n\nMasukan pengguna yang ditemukan adalah\:\n\n {1} \= {2} \n\nKonteksnya adalah\:\n\n {3}

pscanalpha.sourcecodedisclosure.name=Pengungkapan Kode Sumber
pscanalpha.sourcecodedisclosure.desc=Kode Sumber Aplikasi telah diungkapkan oleh server web
pscanalpha.sourcecodedisclosure.soln=Pastikan bahwa Kode Sumber aplikasi tidak tersedia dengan ekstensi alternatif, dan pastikan kode sumber tidak ada dalam file atau data lain yang dikirim ke server web, atau dilayani oleh server web. 
pscanalpha.sourcecodedisclosure.refs=http\://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-us-government/
pscanalpha.sourcecodedisclosure.extrainfo={0}

pscanalpha.hashdisclosure.name=Pengungkapan Hash
pscanalpha.hashdisclosure.desc=Sebuah hash telah diungkapkan oleh server web
pscanalpha.hashdisclosure.soln=Pastikan bahwa hash yang digunakan untuk melindungi kredensial atau sumber daya lainnya tidak dibocorkan oleh server web atau database. Biasanya tidak ada persyaratan untuk hash password agar dapat diakses ke browser web.      
pscanalpha.hashdisclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure http\://projects.webappsec.org/w/page/13246936/Information% 20Le akage http\://openwall.info/wiki/john / sampel-hash
pscanalpha.hashdisclosure.extrainfo={0}

pscanalpha.timestampdisclosure.name=Pengungkapan Timestamp
pscanalpha.timestampdisclosure.desc=Sebuah timestamp telah diungkapkan oleh aplikasi/server web
pscanalpha.timestampdisclosure.soln=Secara manual konfirmasikan bahwa data timestamp tidak sensitif, dan data tersebut tidak dapat digabungkan untuk mengungkapkan pola yang dapat dieksploitasi.
pscanalpha.timestampdisclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure http\://projects.webappsec.org/w/page/13246936/Information% 20Le akage
pscanalpha.timestampdisclosure.extrainfo={0}, yang mengevaluasi ke\: {1}

pscanalpha.base64disclosure.name=Pengungkapan Base64
pscanalpha.base64disclosure.desc=Data yang dikodekan Base64 telah diungkapkan oleh aplikasi / web server
pscanalpha.base64disclosure.soln=Secara manual konfirmasikan bahwa data Base64 tidak membocorkan informasi sensitif, dan data tersebut tidak dapat digabungkan/digunakan untuk memanfaatkan kerentanan lainnya.
pscanalpha.base64disclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure http\://projects.webappsec.org/w/page/13246936/Information% 20Le akage
pscanalpha.base64disclosure.extrainfo={1}

pscanalpha.base64disclosure.viewstate.name=ASP.NET ViewState Disclosure
pscanalpha.base64disclosure.viewstate.desc=ASP.NET ViewState telah diungkapkan oleh aplikasi / web server
pscanalpha.base64disclosure.viewstate.soln=Secara manual konfirmasikan bahwa ASP.NET ViewState tidak membocorkan informasi sensitif, dan data tersebut tidak dapat digabungkan/digunakan untuk memanfaatkan kerentanan lainnya.
pscanalpha.base64disclosure.viewstate.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure http\://projects.webappsec.org/w/ halaman / 13246936 / Informasi % 20Le akage
pscanalpha.base64disclosure.viewstate.extrainfo={0}

pscanalpha.base64disclosure.viewstatewithoutmac.name=ASP.NET ViewState Integrity
pscanalpha.base64disclosure.viewstatewithoutmac.desc=Aplikasi tidak menggunakan Message Authentication Code (MAC) untuk melindungi integritas ViewState ASP.NET, yang dapat dirusak oleh klien berbahaya
pscanalpha.base64disclosure.viewstatewithoutmac.soln=Pastikan semua ViewStates ASP.NET terlindungi dari gangguan, dengan menggunakan MAC, yang dihasilkan dengan menggunakan algoritma yang aman, dan kunci rahasia di sisi server. Ini adalah konfigurasi default pada instalasi ASP.NET modern, yang mungkin terlalu banyak ditangani secara programatik, atau melalui konfigurasi ASP.NET.
pscanalpha.base64disclosure.viewstatewithoutmac.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx https\://www.jardinesoftware.net/2012/02/06/asp-net-tampering-with-event-validation-part-1 /
pscanalpha.base64disclosure.viewstatewithoutmac.extrainfo={0}

pscanalpha.directorybrowsing.name=Browsing Direktori
pscanalpha.directorybrowsing.desc=Anda bisa melihat daftar isi direktori. Daftar direktori mungkin mengungkapkan skrip tersembunyi, termasuk file, file sumber cadangan, dan lain-lain, yang diakses untuk mengungkapkan informasi sensitif.
pscanalpha.directorybrowsing.soln=Konfigurasikan server web untuk menonaktifkan penjelajahan direktori. 
pscanalpha.directorybrowsing.refs=https\://cwe.mitre.org/data/definitions/548.html
pscanalpha.directorybrowsing.extrainfo={0}

pscanalpha.heartbleed.name=Kerentanan OpenSSL yang Heartbleed (Indikatif)
pscanalpha.heartbleed.desc=Implementasi TLS dan DTLS di OpenSSL 1.0.1 sebelum 1.0.1g tidak menangani paket Ekstensi Heartbeat dengan benar, yang memungkinkan penyerang jarak jauh memperoleh informasi sensitif dari memori proses melalui paket buatan yang memicu buffer over-read, yang berpotensi mengungkapkan informasi sensitif.
pscanalpha.heartbleed.soln=Update ke OpenSSL 1.0.1g atau yang lebih baru. Re-issue sertifikat HTTPS. Ubah kunci privat asimetris dan kunci rahasia bersama, karena ini mungkin telah disusupi, tanpa bukti kompromi dalam file log server.
pscanalpha.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
pscanalpha.heartbleed.extrainfo={0} sedang digunakan Namun perlu diketahui bahwa versi yang dilaporkan dapat berisi perbaikan keamanan portir belakang, sehingga masalah tersebut bisa menjadi false positive. Ini biasa terjadi pada Red Hat, misalnya.

pscanalpha.crossdomain.name=Kesalahan konfigurasi lintas domain
pscanalpha.crossdomain.desc=Loading data browser web dimungkinkan, karena kesalahan konfigurasi Cross Origin Resource Sharing (CORS) pada server web
pscanalpha.crossdomain.soln=Pastikan data sensitif tidak tersedia dengan cara yang tidak berkepentingan (dengan menggunakan daftar putih alamat IP, misalnya).\nKonfigurasikan tajuk HTTP "Akses Kontrol-Izinkan-Asal" ke kumpulan domain yang lebih ketat, atau hapus semua header CORS sama sekali, untuk memungkinkan browser web menerapkan Same Origin Policy (SOP) dengan cara yang lebih ketat.
pscanalpha.crossdomain.refs=http\://www.hpenterprisesecurity.com/vulncat/en/vulncat/vb/html5_overly_permissive_cors_policy.html
pscanalpha.crossdomain.extrainfo=Kesalahan konfigurasi CORS pada server web mengizinkan permintaan baca lintas domain dari domain pihak ketiga yang sewenang-wenang, menggunakan API yang tidak diautentikasi pada domain ini. Implementasi browser web tidak mengizinkan pihak ketiga yang sewenang-wenang untuk membaca tanggapan dari API yang diautentikasi. Hal ini mengurangi risikonya. Kesalahan konfigurasi ini dapat digunakan oleh penyerang untuk mengakses data yang tersedia dengan cara yang tidak berkepentingan, namun menggunakan beberapa bentuk keamanan lainnya, seperti daftar putih alamat IP.

pscanalpha.serverheader.scanner.name=HTTP Server Response Header Scanner
pscanalpha.serverheaderversioninfoleak.name=Server Leaks Version Information melalui "Server" HTTP Response Header Field
pscanalpha.serverheaderversioninfoleak.desc=Server web / aplikasi membocorkan informasi versi melalui header tanggapan "Server" HTTP. Akses terhadap informasi semacam itu dapat mempermudah penyerang untuk mengidentifikasi kerentanan lain yang mungkin dimiliki server web / aplikasi Anda.
pscanalpha.serverheaderinfoleak.name=Server Leaks Aplikasi Webservernya melalui "Server" HTTP Response Header Field
pscanalpha.serverheaderinfoleak.desc=Server web/aplikasi membocorkan aplikasi yang digunakannya sebagai server web melalui header tanggapan "Server" HTTP. Akses terhadap informasi semacam itu dapat mempermudah penyerang untuk mengidentifikasi kerentanan lain yang mungkin dimiliki server web/aplikasi Anda. Informasi ini sendiri, yaitu tanpa string versi, tidak terlalu berbahaya untuk keamanan server, namun informasi ini di bidang header respon hampir selalu tidak berguna dan dengan demikian hanya merupakan vektor serangan usang.
pscanalpha.serverheaderinfoleak.general.refs=http\://httpd.apache.org/docs/current/mod/core.html\#servertokens http\://msdn.microsoft.com/en-us/library/ff648552.aspx\#ht_urlscan_007 http\: //blogs.msdn. com / b / varunm / archive / 2013/04/23 / remove-unwanted-http-response-headers.aspx http\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanalpha.serverheaderinfoleak.general.soln=Pastikan server web, server aplikasi, penyeimbang beban, dan lain-lain dikonfigurasi untuk menekan header "Server" atau memberikan detail umum.

pscanalpha.stricttransportsecurity.scanner.name=Stranger Transport-Security Header yang ketat
pscanalpha.stricttransportsecurity.name=Ketat-Transport-Security Header Not Set
pscanalpha.stricttransportsecurity.desc=HTTP Ketat Transport Security (HSTS) adalah mekanisme kebijakan keamanan web yang menyatakan server web menyatakan bahwa agen pengguna yang mematuhi (seperti browser web) berinteraksi dengannya hanya dengan koneksi HTTPS yang aman (yaitu HTTP berlapis TLS/SSL). HSTS adalah protokol lintasan standar IETF dan ditentukan dalam RFC 6797.
pscanalpha.stricttransportsecurity.refs=https\://www.owasp.org/index.php/HTTP_Strict_Transport_Security http\://s.wikipedia.org/wiki/HTTP_Strict_Transport_Security / stricttransportsecurity http\://tools.ietf.org/html/rfc6797
pscanalpha.stricttransportsecurity.soln=Pastikan server web, server aplikasi, penyeimbang beban, dan lain-lain dikonfigurasi untuk memberlakukan Ketat-Transport-Security.
pscanalpha.stricttransportsecurity.max.age.name=Ketat-Transport-Security Disabled
pscanalpha.stricttransportsecurity.max.age.desc=Header HTTP Strict Transport Security (HSTS) ditemukan, namun berisi petunjuk usia maksimal \= 0 yang menonaktifkan kontrol dan menginstruksikan browser untuk mengatur ulang pengaturan terkait HSTS sebelumnya. Lihat RFC 6797 untuk keterangan lebih lanjut.\nHTTP Ketat Transport Security (HSTS) adalah mekanisme kebijakan keamanan web yang menyatakan server web menyatakan bahwa agen pengguna yang mematuhi (seperti browser web) berinteraksi dengannya hanya dengan koneksi HTTPS yang aman (yaitu HTTP berlapis TLS/SSL).
pscanalpha.stricttransportsecurity.max.age.refs=http\://tools.ietf.org/html/rfc6797\#section-6.2
pscanalpha.stricttransportsecurity.max.age.soln=Tinjau konfigurasi kontrol ini. Pastikan server web, server aplikasi, penyeimbang beban, dan lain-lain dikonfigurasi untuk menetapkan Ketat-Transport-Security dengan nilai batas usia yang sesuai.
pscanalpha.stricttransportsecurity.compliance.multiple.header.name=Ketat-Transport-Security Multiple Header Entries (Tidak sesuai dengan Spesifikasi)
pscanalpha.stricttransportsecurity.compliance.multiple.header.desc=Header HTTP Strict Transport Security (HSTS) ditemukan, sebuah respon dengan beberapa entri header HSTS tidak sesuai dengan spesifikasi (RFC 6797) dan hanya header HSTS pertama yang akan diproses orang lain akan diabaikan oleh agen pengguna atau kebijakan HSTS mungkin salah diterapkan HTTP Strict Transport Security (HSTS) adalah mekanisme kebijakan keamanan web yang memungkinkan server web menyatakan bahwa agen pengguna yang sesuai (seperti browser web) berinteraksi dengannya hanya dengan koneksi HTTPS yang aman (yaitu HTTP berlapis melalui TLS / SSL).
pscanalpha.stricttransportsecurity.compliance.multiple.header.refs=http\://tools.ietf.org/html/rfc6797\#section-8.1
pscanalpha.stricttransportsecurity.compliance.multiple.header.soln=Pastikan hanya satu komponen di tumpukan Anda\: kode, server web, server aplikasi, penyeimbang beban, dsb. Dikonfigurasi untuk mengatur atau menambahkan header HTTP Strict-Transport-Security (HSTS).
pscanalpha.stricttransportsecurity.plain.resp.name=Header Keamanan-Ketat-Ketat pada Respons HTTP Biasa
pscanalpha.stricttransportsecurity.plain.resp.desc=Header Security Strict Transport Security (HSTS) HTTP ditemukan, namun header HSTS diabaikan pada tanggapan polos (non-HTTPS).\nHTTP Ketat Transport Security (HSTS) adalah mekanisme kebijakan keamanan web yang menyatakan server web menyatakan bahwa agen pengguna yang mematuhi (seperti browser web) berinteraksi dengannya hanya dengan koneksi HTTPS yang aman (yaitu HTTP berlapis TLS/SSL).
pscanalpha.stricttransportsecurity.plain.resp.refs=http\://tools.ietf.org/html/rfc6797\#section-8.1
pscanalpha.stricttransportsecurity.plain.resp.soln=Tinjau konfigurasi kontrol ini. Pastikan server web, server aplikasi, penyeimbang beban, dan lain-lain dikonfigurasi untuk menetapkan Ketat-Transport-Security untuk respons HTTPS.
pscanalpha.stricttransportsecurity.compliance.max.age.missing.name=Ketat-Transport-Security Missing Max-Age (Tidak sesuai dengan Spesifikasi)
pscanalpha.stricttransportsecurity.compliance.max.age.missing.desc=Header Security Strict Transport Security (HSTS) HTTP ditemukan, namun tidak ada petunjuk usia max-age (atau direktifnya kehilangan nilai). Lihat RFC 6797 untuk keterangan lebih lanjut.\nHTTP Ketat Transport Security (HSTS) adalah mekanisme kebijakan keamanan web yang menyatakan server web menyatakan bahwa agen pengguna yang mematuhi (seperti browser web) berinteraksi dengannya hanya dengan koneksi HTTPS yang aman (yaitu HTTP berlapis TLS/SSL).
pscanalpha.stricttransportsecurity.compliance.max.age.missing.refs=http\://tools.ietf.org/html/rfc6797\#section-6.2
pscanalpha.stricttransportsecurity.compliance.max.age.missing.soln=Tinjau konfigurasi kontrol ini. Pastikan server web, server aplikasi, penyeimbang beban, dan lain-lain dikonfigurasi untuk menetapkan Ketat-Transport-Security dengan nilai batas usia yang sesuai.
pscanalpha.stricttransportsecurity.compliance.meta.name=Ketat-Transport-Security Ditetapkan melalui META (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.meta.desc=Tag META HTTP Strict Transport Security (HSTS) ditemukan, mendefinisikan HTTP Strict Transport Security (HSTS) melalui tag META secara eksplisit tidak didukung oleh spesifikasi (RFC 6797).
pscanalpha.stricttransportsecurity.compliance.meta.refs=http\://tools.ietf.org/html/rfc6797\#section-8.5
pscanalpha.stricttransportsecurity.compliance.meta.soln=Jangan mencoba untuk mengatur HTTP Strict Transport Security (HSTS) melalui tag META.
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.name=Ketat-Transport-Security Max-Age Malformed (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.desc=Header Security Strict Transport Security (HSTS) HTTP ditemukan, namun berisi tanda kutip sebelum direktif max-age (nilai batas maksimum dapat dikutip, namun perintah itu sendiri tidak dapat dilakukan). Lihat RFC 6797 untuk keterangan lebih lanjut.\nHTTP Ketat Transport Security (HSTS) adalah mekanisme kebijakan keamanan web yang menyatakan server web menyatakan bahwa agen pengguna yang mematuhi (seperti browser web) berinteraksi dengannya hanya dengan koneksi HTTPS yang aman (yaitu HTTP berlapis TLS/SSL).
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.refs=http\://tools.ietf.org/html/rfc6797\#section-6.1
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.soln=Tinjau konfigurasi kontrol ini. Pastikan server web, server aplikasi, penyeimbang beban, dan lain-lain dikonfigurasi untuk mengatur Ketat-Transport-Security dengan format yang sesuai.
pscanalpha.stricttransportsecurity.compliance.malformed.content.name=Ketat-Transport-Security Malformed Content (Tidak sesuai dengan Spesifikasi)
pscanalpha.stricttransportsecurity.compliance.malformed.content.desc=Header HTTP Strict Transport Security (HSTS) ditemukan, namun berisi beberapa konten yang tidak diharapkan (mungkin curly quotes), harapannya adalah konten tersebut dapat dicetak karakter ASCII.
pscanalpha.stricttransportsecurity.compliance.malformed.content.refs=http\://tools.ietf.org/html/rfc6797
pscanalpha.stricttransportsecurity.compliance.malformed.content.soln=Tinjau konfigurasi kontrol ini. Pastikan server web, server aplikasi, penyeimbang beban, dan lain-lain dikonfigurasi untuk mengatur Ketat-Transport-Security dengan konten yang sesuai. 

pscanalpha.xpoweredbyheaderinfoleak.name=Informasi Server Leaks via "X-Powered-By" Header Respon HTTP Field (s)
pscanalpha.xpoweredbyheaderinfoleak.desc=Server web/aplikasi membocorkan informasi melalui satu atau lebih header respon HTTP "X-Powered-By". Akses terhadap informasi semacam itu dapat mempermudah penyerang untuk mengidentifikasi kerangka/komponen lain yang bergantung pada aplikasi web Anda dan kerentanan komponen semacam itu dapat dikenai.
pscanalpha.xpoweredbyheaderinfoleak.refs=http\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx http\://www.troyhunt.com/2012/02/shhh-dont -let-your-response-headers.html
pscanalpha.xpoweredbyheaderinfoleak.soln=Pastikan server web, server aplikasi, penyeimbang beban, dan lain-lain dikonfigurasi untuk menekan header "X-Powered-By".
pscanalpha.xpoweredbyheaderinfoleak.exploit=
pscanalpha.xpoweredbyheaderinfoleak.extrainfo=
pscanalpha.xpoweredbyheaderinfoleak.otherinfo.msg=Header X-Powered-By berikut juga ditemukan\:\n

pscanalpha.contentsecuritypolicymissing.name=Header Kebijakan Keamanan Konten (CSP) Tidak Ditetapkan
pscanalpha.contentsecuritypolicymissing.desc=Content Security Policy (CSP) adalah lapisan keamanan tambahan yang membantu mendeteksi dan mengurangi jenis serangan tertentu, termasuk Cross Site Scripting (XSS) dan serangan injeksi data. Serangan ini digunakan untuk segala hal mulai dari pencurian data hingga penghindaran situs atau penyebaran malware. CSP menyediakan satu set header HTTP standar yang memungkinkan pemilik situs web menyatakan sumber konten yang disetujui yang seharusnya diizinkan memuat pada jenis halaman itu -- JavaScript adalah jenis JavaScript, CSS, bingkai HTML, font, gambar dan objek yang dapat disematkan seperti applet Java, File ActiveX, audio dan video.
pscanalpha.contentsecuritypolicymissing.refs=https\://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps\://www.owasp.org/index.php/Content_Security_Policy\nhttp\://www.w3.org/TR/CSP/\nhttp\://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp\://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp\://caniuse.com/\#feat\=contentsecuritypolicy\nhttp\://content-security-policy.com/
pscanalpha.contentsecuritypolicymissing.soln=Pastikan server web, server aplikasi, penyeimbang beban, dan lain-lain dikonfigurasi untuk mengatur header Content-Security-Policy, untuk mencapai dukungan browser yang optimal\: "Kebijakan Keamanan Konten" untuk Chrome 25+, Firefox 23+ dan Safari 7 +, "X-Content-Security-Policy" untuk Firefox 4.0+ dan Internet Explorer 10+, dan "X-WebKit-CSP" untuk Chrome 14+ dan Safari 6+.
pscanalpha.contentsecuritypolicymissing.exploit=
pscanalpha.contentsecuritypolicymissing.extrainfo=
pscanalpha.contentsecuritypolicymissing.ro.name=Header Laporan Hanya Kebijakan Konten (CSP) Ditemukan Hanya Laporan
pscanalpha.contentsecuritypolicymissing.ro.desc=Tanggapan berisi header Content-Security-Policy-Report-Only, ini mungkin menunjukkan implementasi dalam proses, atau pengawasan dalam mempromosikan pra-Prod ke Prod, dll.\n\nContent Security Policy (CSP) adalah lapisan keamanan tambahan yang membantu mendeteksi dan mengurangi jenis serangan tertentu, termasuk Cross Site Scripting (XSS) dan serangan injeksi data. Serangan ini digunakan untuk segala hal mulai dari pencurian data hingga penghindaran situs atau penyebaran malware. CSP menyediakan satu set header HTTP standar yang memungkinkan pemilik situs web menyatakan sumber konten yang disetujui yang seharusnya diizinkan memuat pada jenis halaman itu - JavaScript adalah jenis JavaScript, CSS, bingkai HTML, font, gambar dan objek yang dapat disematkan seperti applet Java, File ActiveX, audio dan video.
pscanalpha.contentsecuritypolicymissing.ro.refs=https\://www.w3.org/TR/CSP2/\nhttps\://w3c.github.io/webappsec-csp/\nhttp\://caniuse.com/\#feat\=contentsecuritypolicy\nhttp\://content-security-policy.com/

pscanalpha.xbackendserver.name=Informasi Header X-Backend-Server Leak
pscanalpha.xbackendserver.desc=Server membocorkan informasi yang berkaitan dengan sistem backend (seperti nama host atau alamat IP). Berbekal informasi ini penyerang mungkin bisa menyerang sistem lain atau lebih secara langsung/efisien menyerang sistem tersebut.
pscanalpha.xbackendserver.refs=
pscanalpha.xbackendserver.soln=Pastikan server web, server aplikasi, penyeimbang beban, dll dikonfigurasi untuk menekan header X-Backend-Server.
pscanalpha.xbackendserver.exploit=
pscanalpha.xbackendserver.extrainfo=

pscanalpha.insecurecomponent.name=Komponen tidak aman
pscanalpha.insecurecomponent.desc=Berdasarkan analisis pasif respon, komponen tidak aman {0} {1} tampaknya sedang digunakan.\nPeringkat CVSS tertinggi untuk versi produk ini adalah {2}.\nSecara keseluruhan, {3} kerentanan dicatat.\nBeberapa distribusi Linux seperti Red Hat menggunakan praktik mempertahankan nomor versi lama saat perbaikan keamanan "diunggah".\nKasus-kasus ini dicatat sebagai "Positif Palsu", namun harus diverifikasi secara manual.  
pscanalpha.insecurecomponent.refs={0}
pscanalpha.insecurecomponent.soln=Tingkatkan versi dari {0} {1} ke versi stabil terbaru dari produk.\nGunakan kebijakan dan prosedur pengelolaan paket manajer dan paket untuk mengelola versi perangkat lunak yang diinstal.

pscanalpha.bigredirectsscanner.name=Big Redirect Terdeteksi (Informasi Potensial Sensitif Leak)
pscanalpha.bigredirectsscanner.desc=Server telah merespon dengan redirect yang nampaknya memberikan respon yang besar. Ini mungkin menunjukkan bahwa meskipun server mengirim redirect, hal itu juga merespons dengan konten tubuh (yang mungkin termasuk rincian sensitif, PII, dll.).
pscanalpha.bigredirectsscanner.refs=
pscanalpha.bigredirectsscanner.soln=Pastikan tidak ada informasi sensitif yang bocor melalui tanggapan redirect. Tanggapan pengalihan seharusnya hampir tidak ada konten.
pscanalpha.bigredirectsscanner.extrainfo=Lokasi header URI panjang\: {0} [{1}].\nUkuran respons yang diprediksi\: {2}.\nRespon Panjang Tubuh\: {3}.


pscanalpha.storabilitycacheability.name=Kontent Cacheability

pscanalpha.nonstorable.name=Konten Non-Storable
pscanalpha.nonstorable.desc=Isi tanggapan tidak terhindarkan oleh komponen caching seperti server proxy. Jika tanggapan tidak mengandung informasi sensitif, pribadi atau informasi khusus pengguna, mungkin akan mendapat keuntungan dari penyimpanan dan penyimpanan cache, untuk meningkatkan kinerja.
pscanalpha.nonstorable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.nonstorable.soln=Konten dapat ditandai sebagai storable dengan memastikan bahwa kondisi berikut terpenuhi\:\nMetode permintaan harus dipahami oleh cache dan didefinisikan sebagai cacheable ("GET", "HEAD", dan "POST" saat ini didefinisikan sebagai cacheable)\nKode status respons harus dipahami oleh cache (salah satu kelas respons 1XX, 2XX, 3XX, 4XX, atau 5XX umumnya dipahami)\nPerintah cache "no-store" tidak boleh muncul di kolom header request atau response\nUntuk caching dengan cache "shared" seperti cache "proxy", perintah respons "pribadi" tidak boleh muncul dalam tanggapan.\nUntuk caching dengan cache "shared" seperti cache "proxy", kolom header "Otorisasi" tidak boleh muncul dalam permintaan, kecuali jika jawabannya secara eksplisit mengizinkannya (menggunakan salah satu dari "harus-dipalsukan ulang", "publik", atau "s-maxage" Cache-Control response directives)\nSelain kondisi di atas, setidaknya salah satu dari kondisi berikut juga harus dipenuhi oleh respon\:\nIni harus berisi kolom header "Kedaluwarsa"\nIni harus berisi perintah tanggapan "usia maksim"\nUntuk cache "shared" seperti cache "proxy", itu harus berisi perintah tanggapan "s-maxage"\nIni harus berisi "Cache Control Extension" yang memungkinkannya di-cache\nIni harus memiliki kode status yang didefinisikan sebagai cacheable secara default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).   
pscanalpha.nonstorable.extrainfo={0}

pscanalpha.storablenoncacheable.name=Konten Storable tapi Non-Cacheable
pscanalpha.storablenoncacheable.desc=Isi tanggapan storable oleh komponen caching seperti server proxy, namun tidak akan diambil langsung dari cache, tanpa memvalidasi permintaan di hulu, sebagai tanggapan atas permintaan serupa dari pengguna lain. 
pscanalpha.storablenoncacheable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablenoncacheable.soln=
pscanalpha.storablenoncacheable.extrainfo={0}}

pscanalpha.storablecacheable.name=Konten Storable dan Cacheable
pscanalpha.storablecacheable.desc=Isi tanggapan storable oleh komponen caching seperti server proxy, dan dapat diambil langsung dari cache, bukan dari server asal oleh server caching, sebagai tanggapan atas permintaan serupa dari pengguna lain. Jika data respons sensitif, personal atau user-specific, hal ini dapat mengakibatkan informasi sensitif bocor. Dalam beberapa kasus, ini mungkin mengakibatkan pengguna mendapatkan kontrol penuh terhadap sesi pengguna lain, bergantung pada konfigurasi komponen caching yang digunakan di lingkungan mereka. Ini terutama merupakan masalah di mana server caching "shared" seperti cache "proxy" dikonfigurasi pada jaringan lokal. Konfigurasi ini biasanya ditemukan di lingkungan perusahaan atau pendidikan, misalnya.
pscanalpha.storablecacheable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablecacheable.soln=Validasi bahwa respons tidak mengandung informasi sensitif, pribadi atau informasi khusus pengguna. Jika ya, pertimbangkan penggunaan header respons HTTP berikut, untuk membatasi, atau mencegah konten disimpan dan diambil dari cache oleh pengguna lain\:\nCache-Control\: no-cache, no-store, harus-revalidate, private\nPragma\: tidak ada cache\nKedaluwarsa\: 0\nKonfigurasi ini mengarahkan server caching HTTP 1.0 dan HTTP 1.1 yang sesuai untuk tidak menyimpan respons, dan untuk tidak mengambil tanggapan (tanpa validasi) dari cache, sebagai tanggapan atas permintaan serupa. 
pscanalpha.storablecacheable.extrainfo={0}
pscanalpha.storablecacheable.otherinfo.liberallifetimeheuristic=Dengan tidak adanya instruksi seumur hidup caching yang ditentukan secara eksplisit dalam tanggapannya, umur heuristik liberal selama 1 tahun diasumsikan. Ini diijinkan oleh rfc7234.
pscanalpha.storablecacheable.otherinfo.staleretrievenotblocked=Responnya basi, dan tanggapan basi tidak dikonfigurasikan untuk divalidasi ulang atau diblokir, menggunakan respons 'harus-revalidate', 'proxy-revalidate', 's-maxage', atau 'max-age' 'Cache-Control 'arahan.

pscanalpha.retrievedfromcache.name=Diperoleh dari Cache
pscanalpha.retrievedfromcache.desc=Konten diambil dari cache bersama. Jika data respons sensitif, personal atau user-specific, hal ini dapat mengakibatkan informasi sensitif bocor. Dalam beberapa kasus, ini mungkin mengakibatkan pengguna mendapatkan kontrol penuh terhadap sesi pengguna lain, bergantung pada konfigurasi komponen caching yang digunakan di lingkungan mereka. Ini terutama merupakan masalah di mana server caching seperti cache "proxy" dikonfigurasi pada jaringan lokal. Konfigurasi ini biasanya ditemukan di lingkungan perusahaan atau pendidikan, misalnya. 
pscanalpha.retrievedfromcache.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.retrievedfromcache.soln=Validasi bahwa respons tidak mengandung informasi sensitif, pribadi atau informasi khusus pengguna. Jika ya, pertimbangkan penggunaan header respons HTTP berikut, untuk membatasi, atau mencegah konten disimpan dan diambil dari cache oleh pengguna lain\:\nCache-Control\: no-cache, no-store, harus-revalidate, private\nPragma\: tidak ada cache\nKedaluwarsa\: 0\nKonfigurasi ini mengarahkan server caching HTTP 1.0 dan HTTP 1.1 yang sesuai untuk tidak menyimpan respons, dan untuk tidak mengambil tanggapan (tanpa validasi) dari cache, sebagai tanggapan atas permintaan serupa.
pscanalpha.retrievedfromcache.extrainfo={0}
pscanalpha.retrievedfromcache.extrainfo.http11ageheader=Kehadiran header 'Age' menunjukkan bahwa server caching HTTP/1.1 compliant sedang digunakan.

pscanalpha.imagelocationscanner.name=Image Location and Privacy Scanner
pscanalpha.imagelocationscanner.alerttitle=Gambar Mengekspos Lokasi atau Data Privasi
pscanalpha.imagelocationscanner.alertDetailPrefix=Gambar ini menyematkan lokasi atau bocor data terkait privasi\: 
pscanalpha.imagelocationscanner.desc=Gambar itu ditemukan berisi informasi lokasi yang disematkan, seperti koordinat GPS, atau pemaparan privasi lainnya, seperti nomor seri kamera. Bergantung pada konteks gambar di situs web, informasi ini dapat mengungkapkan detail pribadi pengguna sebuah situs. Misalnya, situs yang memungkinkan pengguna mengunggah gambar profil yang diambil di rumah dapat mengekspos alamat rumah.  
pscanalpha.imagelocationscanner.refs=https\://www.veggiespam.com/ils/
pscanalpha.imagelocationscanner.soln=Sebelum membiarkan gambar disimpan di server dan/atau dikirim ke browser, hapus informasi lokasi yang disematkan dari gambar. Ini bisa berarti menghapus semua data Exif atau hanya komponen GPS. Data lain, seperti nomor seri, juga harus dihapus.

pscanalpha.usernameidor.name=Username Hash Ditemukan
pscanalpha.usernameidor.desc=Hash dari nama pengguna ({0}) ditemukan dalam tanggapan. Ini mungkin menunjukkan bahwa aplikasi tunduk pada kerentanan Reference Object Oriented (IDOR) yang tidak aman. Pengujian manual akan diperlukan untuk melihat apakah penemuan ini dapat disalahgunakan.
pscanalpha.usernameidor.otherinfo=Hash adalah {0}, dengan nilai\: {1} 
pscanalpha.usernameidor.soln=Gunakan per pengguna atau referensi objek tidak langsung sesi (buat pemetaan sementara pada saat penggunaan). Atau, pastikan bahwa setiap penggunaan referensi objek langsung terkait dengan pemeriksaan otorisasi untuk memastikan pengguna diberi wewenang untuk objek yang diminta. 
pscanalpha.usernameidor.refs=https\://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References\nhttps\://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004)

pscanalpha.xaspnetversioncanner.name=X-AspNet-Version Tanggapan Pemindai Header
pscanalpha.xaspnetversioncanner.desc=Server kebocoran informasi melalui "X-AspNet-Version"/"X-AspNetMvc-Version" header header respon HTTP(s).
pscanalpha.xaspnetversioncanner.soln=Konfigurasi server sehingga tidak akan mengembalikan header tersebut.
pscanalpha.xaspnetversioncanner.extrainfo=Penyerang dapat menggunakan informasi ini untuk memanfaatkan kerentanan yang diketahui.
pscanalpha.xaspnetversioncanner.refs=https\://www.troyhunt.com/shhh-dont-let-your-response-headers/ https\://blogs.msdn.microsoft.com/varunm/2013/04/23/remove-unwanted-http-response-headers/

pscanalpha.xchromeloggerdata.name=Informasi kebocoran Header X-ChromeLogger-Data (XCOLD)
pscanalpha.xchromeloggerdata.desc=Server membocorkan informasi melalui header tanggapan X-ChromeLogger-Data (atau X-ChromePhp-Data). Isi header tersebut dapat disesuaikan oleh pengembang, namun tidak jarang ditemukan\: lokasi sistem file server, deklarasi vhost, dll.
pscanalpha.xchromeloggerdata.refs=https\://craig.is/writing/chrome-logger
pscanalpha.xchromeloggerdata.soln=Nonaktifkan fungsi ini di Produksi bila mungkin bocor informasi yang bisa dimanfaatkan oleh penyerang. Sebagai alternatif, pastikan bahwa penggunaan fungsionalitas terkait dengan pemeriksaan otorisasi yang kuat dan hanya tersedia bagi administrator atau personil pendukung untuk tujuan pemecahan masalah bukan pengguna umum.
pscanalpha.xchromeloggerdata.otherinfo.msg=Berikut ini merupakan upaya untuk mendasarkan nilai decode6464\:
pscanalpha.xchromeloggerdata.otherinfo.error=Nilai header tidak bisa diterjemahkan di base64\:

pscanalpha.xdebugtoken.name=Kebocoran informasi X-Debug-Token
pscanalpha.xdebugtoken.desc=Tanggapan berisi header X-Debug-Token atau X-Debug-Token-Link. Ini menunjukkan bahwa Symfony's Profiler mungkin sedang digunakan dan memperlihatkan data sensitif.
pscanalpha.xdebugtoken.otherinfo=Dengan mengakses URL dalam bentuk http\://target_host/_profiler/token_value (i.e.\: http\://example.com/_profiler_/123ab4), Anda dapat memperoleh akses ke profiler dan informasi lebih lanjut bocor.
pscanalpha.xdebugtoken.refs=https\://symfony.com/doc/current/cookbook/profiler/profiling_data.html https\://symfony.com/blog/new-in-symfony-2-4-quicker-access-to-the-profiler-when-working-on-an-api
pscanalpha.xdebugtoken.soln=Batasi akses ke Profiler Symfony, baik melalui otentikasi / otorisasi atau pembatasan penyisipan header ke klien tertentu (oleh IP dll).


# This file defines the default (English) variants of all of the internationalised messages

pscanbeta.desc = Passive Scan Rules - beta

pscanbeta.bigredirectsscanner.name=Big Redirect Detected (Potential Sensitive Information Leak)
pscanbeta.bigredirectsscanner.desc=The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, PII, etc.).
pscanbeta.bigredirectsscanner.refs=
pscanbeta.bigredirectsscanner.soln=Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.
pscanbeta.bigredirectsscanner.extrainfo=Location header URI length: {0} [{1}].\nPredicted response size: {2}.\nResponse Body Length: {3}.

pscanbeta.contentsecuritypolicymissing.name=Content Security Policy (CSP) Header Not Set
pscanbeta.contentsecuritypolicymissing.desc=Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanbeta.contentsecuritypolicymissing.refs=https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://www.owasp.org/index.php/Content_Security_Policy\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/
pscanbeta.contentsecuritypolicymissing.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header, to achieve optimal browser support: "Content-Security-Policy" for Chrome 25+, Firefox 23+ and Safari 7+, "X-Content-Security-Policy" for Firefox 4.0+ and Internet Explorer 10+, and "X-WebKit-CSP" for Chrome 14+ and Safari 6+.
pscanbeta.contentsecuritypolicymissing.extrainfo=
pscanbeta.contentsecuritypolicymissing.ro.name=Content Security Policy (CSP) Report-Only Header Found
pscanbeta.contentsecuritypolicymissing.ro.desc=The response contained a Content-Security-Policy-Report-Only header, this may indicate a work-in-progress implementation, or an oversight in promoting pre-Prod to Prod, etc.\n\nContent Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanbeta.contentsecuritypolicymissing.ro.refs=https://www.w3.org/TR/CSP2/\nhttps://w3c.github.io/webappsec-csp/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/

pscanbeta.directorybrowsing.name=Directory Browsing
pscanbeta.directorybrowsing.desc=It is possible to view a listing of the directory contents. Directory listings may reveal hidden scripts, include files , backup source files, etc., which be accessed to reveal sensitive information.
pscanbeta.directorybrowsing.soln=Configure the web server to disable directory browsing. 
pscanbeta.directorybrowsing.refs=https://cwe.mitre.org/data/definitions/548.html
pscanbeta.directorybrowsing.extrainfo={0}

pscanbeta.hashdisclosure.name=Hash Disclosure
pscanbeta.hashdisclosure.desc=A hash was disclosed by the web server
pscanbeta.hashdisclosure.soln=Ensure that hashes that are used to protect credentials or other resources are not leaked by the web server or database. There is typically no requirement for password hashes to be accessible to the web browser.      
pscanbeta.hashdisclosure.refs=https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp://projects.webappsec.org/w/page/13246936/Information%20Leakage\nhttp://openwall.info/wiki/john/sample-hashes
pscanbeta.hashdisclosure.extrainfo={0}

pscanbeta.heartbleed.name=Heartbleed OpenSSL Vulnerability (Indicative)
pscanbeta.heartbleed.desc=The TLS and DTLS implementations in OpenSSL 1.0.1 before 1.0.1g do not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, potentially disclosing sensitive information.	
pscanbeta.heartbleed.soln=Update to OpenSSL 1.0.1g or later. Re-issue HTTPS certificates. Change asymmetric private keys and shared secret keys, since these may have been compromised, with no evidence of compromise in the server log files.
pscanbeta.heartbleed.refs=http://cvedetails.com/cve-details.php?t=1&cve_id=CVE-2014-0160
pscanbeta.heartbleed.extrainfo={0} is in use. Note however that the reported version could contain back-ported security fixes, and so the issue could be a false positive. This is common on Red Hat, for instance.

pscanbeta.insecureformload.name=HTTP to HTTPS Insecure Transition in Form Post
pscanbeta.insecureformload.desc=This check looks for insecure HTTP pages that host HTTPS forms. The issue is that an insecure HTTP page can easily be hijacked through MITM and the secure HTTPS form can be replaced or spoofed.
pscanbeta.insecureformload.refs=
pscanbeta.insecureformload.soln=Use HTTPS for landing pages that host secure forms.
pscanbeta.insecureformload.extrainfo=The response to the following request over HTTP included an HTTPS form tag action attribute value:\r\n\r\n{0}The context was:\r\n\r\n{1}

pscanbeta.insecureformpost.name=HTTPS to HTTP Insecure Transition in Form Post
pscanbeta.insecureformpost.desc=This check identifies secure HTTPS pages that host insecure HTTP forms. The issue is that a secure page is transitioning to an insecure page when data is uploaded through a form. The user may think they're submitting data to a secure page when in fact they are not.
pscanbeta.insecureformpost.refs=
pscanbeta.insecureformpost.soln=Ensure sensitive data is only sent over secured HTTPS channels.
pscanbeta.insecureformpost.extrainfo=The response to the following request over HTTPS included an HTTP form tag action attribute value:\r\n\r\n{0}The context was:\r\n\r\n{1}

pscanbeta.linktarget.name=Reverse Tabnabbing
pscanbeta.linktarget.desc=At least one link on this page is vulnerable to Reverse tabnabbing as it uses a target attribute without using both of the "noopener" and "noreferrer" keywords in the "rel" attribute, which allows the target page to take control of this page.
pscanbeta.linktarget.refs=https://www.owasp.org/index.php/Reverse_Tabnabbing\nhttps://dev.to/ben/the-targetblank-vulnerability-by-example\nhttps://mathiasbynens.github.io/rel-noopener/\nhttps://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c\n
pscanbeta.linktarget.soln=Do not use a target attribute, or if you have to then also add the attribute: rel="noopener noreferrer".

pscanbeta.piiscanner.name = PII Disclosure
pscanbeta.piiscanner.desc = The response contains Personally Identifiable Information, such as CC number, SSN and similar sensitive data.
pscanbeta.piiscanner.extrainfo = Credit Card Type detected: {0}

pscanbeta.retrievedfromcache.name = Retrieved from Cache
pscanbeta.retrievedfromcache.desc = The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. 
pscanbeta.retrievedfromcache.refs = https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanbeta.retrievedfromcache.soln = Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.
pscanbeta.retrievedfromcache.extrainfo = {0}
pscanbeta.retrievedfromcache.extrainfo.http11ageheader = The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.

pscanbeta.serverheader.scanner.name=HTTP Server Response Header Scanner
pscanbeta.serverheaderversioninfoleak.name=Server Leaks Version Information via "Server" HTTP Response Header Field
pscanbeta.serverheaderversioninfoleak.desc=The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
pscanbeta.serverheaderinfoleak.name=Server Leaks its Webserver Application via "Server" HTTP Response Header Field
pscanbeta.serverheaderinfoleak.desc=The web/application server is leaking the application it uses as a webserver via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to. This information alone, i.e. without a version string, is not very dangerous for the security of a server, nevertheless this information in the response header field is almost always useless and thus just an obsolete attacking vector.
pscanbeta.serverheaderinfoleak.general.refs=http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanbeta.serverheaderinfoleak.general.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.

pscanbeta.servletparameterpollutionscanner.name=HTTP Parameter Override
pscanbeta.servletparameterpollutionscanner.desc=Unspecified form action: HTTP parameter override attack potentially possible. This is a known problem with Java Servlets but other platforms may also be vulnerable.
pscanbeta.servletparameterpollutionscanner.soln=All forms must specify the action URL.
pscanbeta.servletparameterpollutionscanner.refs=http://download.oracle.com/javaee-archive/servlet-spec.java.net/jsr340-experts/att-0317/OnParameterPollutionAttacks.pdf

pscanbeta.stricttransportsecurity.scanner.name=Strict-Transport-Security Header Scanner
pscanbeta.stricttransportsecurity.name=Strict-Transport-Security Header Not Set
pscanbeta.stricttransportsecurity.desc=HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
pscanbeta.stricttransportsecurity.refs=https://www.owasp.org/index.php/HTTP_Strict_Transport_Security\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797
pscanbeta.stricttransportsecurity.soln=Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
pscanbeta.stricttransportsecurity.max.age.name=Strict-Transport-Security Disabled
pscanbeta.stricttransportsecurity.max.age.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains the directive max-age=0 which disables the control and instructs browsers to reset any previous HSTS related settings. See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanbeta.stricttransportsecurity.max.age.refs=http://tools.ietf.org/html/rfc6797#section-6.2
pscanbeta.stricttransportsecurity.max.age.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate max-age value.
pscanbeta.stricttransportsecurity.compliance.multiple.header.name=Strict-Transport-Security Multiple Header Entries (Non-compliant with Spec)
pscanbeta.stricttransportsecurity.compliance.multiple.header.desc=HTTP Strict Transport Security (HSTS) headers were found, a response with multiple HSTS header entries is not compliant with the specification (RFC 6797) and only the first HSTS header will be processed others will be ignored by user agents or the HSTS policy may be incorrectly applied.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanbeta.stricttransportsecurity.compliance.multiple.header.refs=http://tools.ietf.org/html/rfc6797#section-8.1
pscanbeta.stricttransportsecurity.compliance.multiple.header.soln=Ensure that only one component in your stack: code, web server, application server, load balancer, etc. is configured to set or add a HTTP Strict-Transport-Security (HSTS) header.
pscanbeta.stricttransportsecurity.plain.resp.name=Strict-Transport-Security Header on Plain HTTP Response
pscanbeta.stricttransportsecurity.plain.resp.desc=A HTTP Strict Transport Security (HSTS) header was found, but HSTS headers are ignored on plain (non-HTTPS) responses.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanbeta.stricttransportsecurity.plain.resp.refs=http://tools.ietf.org/html/rfc6797#section-8.1
pscanbeta.stricttransportsecurity.plain.resp.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security for HTTPS responses.
pscanbeta.stricttransportsecurity.compliance.max.age.missing.name=Strict-Transport-Security Missing Max-Age (Non-compliant with Spec)
pscanbeta.stricttransportsecurity.compliance.max.age.missing.desc=A HTTP Strict Transport Security (HSTS) header was found, but it is missing the max-age directive (or the directive is missing a value). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanbeta.stricttransportsecurity.compliance.max.age.missing.refs=http://tools.ietf.org/html/rfc6797#section-6.2
pscanbeta.stricttransportsecurity.compliance.max.age.missing.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate max-age value.
pscanbeta.stricttransportsecurity.compliance.meta.name=Strict-Transport-Security Defined via META (Non-compliant with Spec)
pscanbeta.stricttransportsecurity.compliance.meta.desc=A HTTP Strict Transport Security (HSTS) META tag was found, defining HTTP Strict Transport Security (HSTS) via a META tag is explicitly not supported by the spec (RFC 6797).
pscanbeta.stricttransportsecurity.compliance.meta.refs=http://tools.ietf.org/html/rfc6797#section-8.5
pscanbeta.stricttransportsecurity.compliance.meta.soln=Do not attempt to set HTTP Strict Transport Security (HSTS) via a META tag.
pscanbeta.stricttransportsecurity.compliance.max.age.malformed.name=Strict-Transport-Security Max-Age Malformed (Non-compliant with Spec)
pscanbeta.stricttransportsecurity.compliance.max.age.malformed.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains quotes preceding the max-age directive (the max-age value can be quoted, but the directive itself cannot be). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanbeta.stricttransportsecurity.compliance.max.age.malformed.refs=http://tools.ietf.org/html/rfc6797#section-6.1
pscanbeta.stricttransportsecurity.compliance.max.age.malformed.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate format.
pscanbeta.stricttransportsecurity.compliance.malformed.content.name=Strict-Transport-Security Malformed Content (Non-compliant with Spec)
pscanbeta.stricttransportsecurity.compliance.malformed.content.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains some content that was not expected (perhaps curly quotes), the expectation is that the content be printable ASCII characters.
pscanbeta.stricttransportsecurity.compliance.malformed.content.refs=http://tools.ietf.org/html/rfc6797
pscanbeta.stricttransportsecurity.compliance.malformed.content.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with appropriate content. 

pscanbeta.usercontrolledcharset.name=User Controllable Charset
pscanbeta.usercontrolledcharset.desc=This check looks at user-supplied input in query string parameters and POST data to identify where Content-Type or meta tag charset declarations might be user-controlled. Such charset declarations should always be declared by the application. If an attacker can control the response charset, they could manipulate the HTML to perform XSS or other attacks. For example, an attacker controlling the <meta> element charset value is able to declare UTF-7 and is also able to include enough user-controlled payload early in the HTML document to have it interpreted as UTF-7. By encoding their payload with UTF-7 the attacker is able to bypass any server-side XSS protections and embed script in the page.
pscanbeta.usercontrolledcharset.refs=
pscanbeta.usercontrolledcharset.soln=Force UTF-8 in all charset declarations. If user-input is required to decide a charset declaration, ensure that only an allowed list is used.
pscanbeta.usercontrolledcharset.extrainfo=A(n) [{0}] tag [{1}] attribute\r\n\r\nThe user input found was:\r\n{2}={3}\r\n\r\nThe charset value it controlled was:\r\n{4}

pscanbeta.usercontrolledcookie.name=Cookie Poisoning
pscanbeta.usercontrolledcookie.desc=This check looks at user-supplied input in query string parameters and POST data to identify where cookie parameters might be controlled. This is called a cookie poisoning attack, and becomes exploitable when an attacker can manipulate the cookie in various ways. In some cases this will not be exploitable, however, allowing URL parameters to set cookie values is generally considered a bug.
pscanbeta.usercontrolledcookie.refs=http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-cookie
pscanbeta.usercontrolledcookie.soln=Do not allow user input to control cookie names and values. If some query string parameters must be set in cookie values, be sure to filter out semicolon's that can serve as name/value pair delimiters.
pscanbeta.usercontrolledcookie.extrainfo.get=An attacker may be able to poison cookie values through URL parameters.  Try injecting a semicolon to see if you can add cookie values (e.g. name=controlledValue;name=anotherValue;).\n\n
pscanbeta.usercontrolledcookie.extrainfo.post=An attacker may be able to poison cookie values through POST parameters. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parameter. For example:  http://nottrusted.com/page?value=maliciousInput.\r\n\r\n
pscanbeta.usercontrolledcookie.extrainfo={0}This was identified at:\r\n\r\n{1}\r\n\r\nUser-input was found in the following cookie:\r\n{2}\r\n\r\nThe user input was:\r\n{3}={4}

pscanbeta.usercontrolledjavascriptevent.name=User Controllable JavaScript Event (XSS)
pscanbeta.usercontrolledjavascriptevent.desc=This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.            
pscanbeta.usercontrolledjavascriptevent.refs=http://websecuritytool.codeplex.com/wikipage?title=Checks#user-javascript-event
pscanbeta.usercontrolledjavascriptevent.soln=Validate all input and sanitize output it before writing to any Javascript on* events.
pscanbeta.usercontrolledjavascriptevent.extrainfo=User-controlled javascript event(s) was found. Exploitability will need to be manually determined. The page at the following URL:\r\n\r\n{0}\"\r\n\r\nincludes the following Javascript event which may be attacker-controllable: \r\n\r\nUser-input was found in the following data of an [{1}] event:\r\n{2}\r\n\r\nThe user input was:\r\n{3}

pscanbeta.usercontrolledhtmlattributes.name=User Controllable HTML Element Attribute (Potential XSS)
pscanbeta.usercontrolledhtmlattributes.desc=This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
pscanbeta.usercontrolledhtmlattributes.refs=http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute
pscanbeta.usercontrolledhtmlattributes.soln=Validate all input and sanitize output it before writing to any HTML attributes.
pscanbeta.usercontrolledhtmlattributes.extrainfo=User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\n{0}\r\n\r\nappears to include user input in: \r\n\r\na(n) [{1}] tag [{2}] attribute \r\n\r\nThe user input found was:\r\n{3}={4}\r\n\r\nThe user-controlled value was:\r\n{5}

pscanbeta.usercontrolledopenredirect.name=Open Redirect
pscanbeta.usercontrolledopenredirect.desc=Open redirects are one of the OWASP 2010 Top Ten vulnerabilities. This check looks at user-supplied input in query string parameters and POST data to identify where open redirects might be possible. Open redirects occur when an application allows user-supplied input (e.g. http://nottrusted.com) to control an offsite redirect. This is generally a pretty accurate way to find where 301 or 302 redirects could be exploited by spammers or phishing attacks.\n\nFor example an attacker could supply a user with the following link: http://example.com/example.php?url=http://malicious.example.com.
pscanbeta.usercontrolledopenredirect.soln=To avoid the open redirect vulnerability, parameters of the application script/program must be validated before sending 302 HTTP code (redirect) to the client browser. Implement safe redirect functionality that only redirects to relative URI's, or a list of trusted domains
pscanbeta.usercontrolledopenredirect.refs=https://www.owasp.org/index.php/Open_redirect\nhttps://owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards\nhttps://cwe.mitre.org/data/definitions/601.html
pscanbeta.usercontrolledopenredirect.extrainfo.get=The 301 or 302 response to a request for the following URL appeared to contain user input in the location header:\r\n\r\n
pscanbeta.usercontrolledopenredirect.extrainfo.post=An open redirect controlled by POST parameters was detected. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parameter. For example: http://nottrusted.com/page?url=http://lookout.net.\r\n\r\nThe 301 or 302 response to a request for the following URL appeared to contain user input in the location header:\r\n\r\n
pscanbeta.usercontrolledopenredirect.extrainfo.common={0}\r\n\r\nThe user input found was:\r\n\r\n{1}={2}\r\n\r\nThe context was:\r\n\r\n{3}

pscanbeta.xbackendserver.name=X-Backend-Server Header Information Leak
pscanbeta.xbackendserver.desc=The server is leaking information pertaining to backend systems (such as hostnames or IP addresses). Armed with this information an attacker may be able to attack other systems or more directly/efficiently attack those systems.
pscanbeta.xbackendserver.refs=
pscanbeta.xbackendserver.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress X-Backend-Server headers.
pscanbeta.xbackendserver.extrainfo=

pscanbeta.xchromeloggerdata.name=X-ChromeLogger-Data (XCOLD) Header Information Leak
pscanbeta.xchromeloggerdata.desc=The server is leaking information through the X-ChromeLogger-Data (or X-ChromePhp-Data) response header. The content of such headers can be customized by the developer, however it is not uncommon to find: server file system locations, vhost declarations, etc.
pscanbeta.xchromeloggerdata.refs=https://craig.is/writing/chrome-logger
pscanbeta.xchromeloggerdata.soln=Disable this functionality in Production when it might leak information that could be leveraged by an attacker. Alternatively ensure that use of the functionality is tied to a strong authorization check and only available to administrators or support personnel for troubleshooting purposes not general users.
pscanbeta.xchromeloggerdata.otherinfo.msg=The following represents an attempt to base64 decode the value:
pscanbeta.xchromeloggerdata.otherinfo.error=Header value could not be base64 decoded:

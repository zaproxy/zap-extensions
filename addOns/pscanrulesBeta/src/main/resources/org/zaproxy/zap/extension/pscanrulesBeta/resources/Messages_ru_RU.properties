pscanbeta.desc = Beta status passive scan rules
pscanbeta.name = Passive Scan Rules - beta

pscanbeta.inpagebanner.name=In Page Banner Information Leak
pscanbeta.inpagebanner.desc=The server returned a version banner string in the response content. Such information leaks may allow attackers to further target specific issues impacting the product and version in use.
pscanbeta.inpagebanner.other=There is a chance that the highlight in the finding is on a value in the headers, versus the actual matched string in the response body.
pscanbeta.inpagebanner.soln=Configure the server to prevent such information leaks. For example\:\nUnder Tomcat this is done via the "server" directive and implementation of custom error pages.\nUnder Apache this is done via the "ServerSignature" and "ServerTokens" directives.
pscanbeta.inpagebanner.refs=https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/

pscanbeta.jsfunction.name=Dangerous JS Functions
pscanbeta.jsfunction.desc=A dangerous JS function seems to be in use that would leave the site vulnerable.
pscanbeta.jsfunction.soln=See the references for security advice on the use of these functions.
pscanbeta.jsfunction.refs=https\://angular.io/guide/security

pscanbeta.jso.name=Java Serialization Object
pscanbeta.jso.desc=Java Serialization seems to be in use. If not correctly validated, an attacker can send a specially crafted object. This can lead to a dangerous "Remote Code Execution". A magic sequence identifying JSO has been detected (Base64\: rO0AB, Raw\: 0xac, 0xed, 0x00, 0x05).
pscanbeta.jso.soln=Deserialization of untrusted data is inherently dangerous and should be avoided.
pscanbeta.jso.refs=https\://www.oracle.com/technetwork/java/seccodeguide-139067.html\#8

pscanbeta.payloader.name=Passive Scan Rules Beta Custom Payloads
pscanbeta.payloader.desc=\u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u0445 \u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. 

pscanbeta.permissionspolicymissing.name=Permissions Policy Header Not Set
pscanbeta.permissionspolicymissing.desc=Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.
pscanbeta.permissionspolicymissing.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy\nhttps\://developers.google.com/web/updates/2018/06/feature-policy\nhttps\://scotthelme.co.uk/a-new-security-header-feature-policy/\nhttps\://w3c.github.io/webappsec-feature-policy/\nhttps\://www.smashingmagazine.com/2018/12/feature-policy/
pscanbeta.permissionspolicymissing.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.

pscanbeta.permissionspolicymissing.deprecated.name=Deprecated Feature Policy Header Set
pscanbeta.permissionspolicymissing.deprecated.desc=The header has now been renamed to Permissions-Policy. 
pscanbeta.permissionspolicymissing.deprecated.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy\nhttps\://scotthelme.co.uk/goodbye-feature-policy-and-hello-permissions-policy/
pscanbeta.permissionspolicymissing.deprecated.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header instead of the Feature-Policy header.

pscanbeta.sri-integrity.name=Sub Resource Integrity Attribute Missing
pscanbeta.sri-integrity.desc=The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content. 
pscanbeta.sri-integrity.soln=Provide a valid integrity attribute to the tag.
pscanbeta.sri-integrity.refs=https\://developer.mozilla.org/en/docs/Web/Security/Subresource_Integrity
pscanbeta.sri-integrity.otherinfo=The following hash was calculated (using base64 encoding of the output of the hash algorithm\: SHA-384) for the script in question {0}

pscanbeta.storabilitycacheability.name = Content Cacheability

pscanbeta.nonstorable.name = Non-Storable Content
pscanbeta.nonstorable.desc = The response contents are not storable by caching components such as proxy servers. If the response does not contain sensitive, personal or user-specific information, it may benefit from being stored and cached, to improve performance.
pscanbeta.nonstorable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanbeta.nonstorable.soln = The content may be marked as storable by ensuring that the following conditions are satisfied\:\nThe request method must be understood by the cache and defined as being cacheable ("GET", "HEAD", and "POST" are currently defined as cacheable)\nThe response status code must be understood by the cache (one of the 1XX, 2XX, 3XX, 4XX, or 5XX response classes are generally understood)\nThe "no-store" cache directive must not appear in the request or response header fields\nFor caching by "shared" caches such as "proxy" caches, the "private" response directive must not appear in the response\nFor caching by "shared" caches such as "proxy" caches, the "Authorization" header field must not appear in the request, unless the response explicitly allows it (using one of the "must-revalidate", "public", or "s-maxage" Cache-Control response directives)\nIn addition to the conditions above, at least one of the following conditions must also be satisfied by the response\:\nIt must contain an "Expires" header field\nIt must contain a "max-age" response directive\nFor "shared" caches such as "proxy" caches, it must contain a "s-maxage" response directive\nIt must contain a "Cache Control Extension" that allows it to be cached\nIt must have a status code that is defined as cacheable by default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).   
pscanbeta.nonstorable.extrainfo = {0}

pscanbeta.storablenoncacheable.name = Storable but Non-Cacheable Content
pscanbeta.storablenoncacheable.desc = The response contents are storable by caching components such as proxy servers, but will not be retrieved directly from the cache, without validating the request upstream, in response to similar requests from other users. 
pscanbeta.storablenoncacheable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanbeta.storablenoncacheable.soln=
pscanbeta.storablenoncacheable.extrainfo = {0}}

pscanbeta.storablecacheable.name = Storable and Cacheable Content
pscanbeta.storablecacheable.desc = The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where "shared" caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.
pscanbeta.storablecacheable.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanbeta.storablecacheable.soln = Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. 
pscanbeta.storablecacheable.extrainfo = {0}
pscanbeta.storablecacheable.otherinfo.liberallifetimeheuristic = In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.
pscanbeta.storablecacheable.otherinfo.staleretrievenotblocked = The response is stale, and stale responses are not configured to be re-validated or blocked, using the 'must-revalidate', 'proxy-revalidate', 's-maxage', or 'max-age' response 'Cache-Control' directives.


pscanbeta.servletparameterpollution.name=\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 HTTP 
pscanbeta.servletparameterpollution.desc=\u041d\u0435\u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0444\u043e\u0440\u043c\u044b\: \u0430\u0442\u0430\u043a\u0430 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 HTTP \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0430. \n\u042d\u0442\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441 \u0441\u0435\u0440\u0432\u043b\u0435\u0442\u0430\u043c\u0438 Java, \u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0443\u044f\u0437\u0432\u0438\u043c\u044b. 
pscanbeta.servletparameterpollution.soln=\u0412\u0441\u0435 \u0444\u043e\u0440\u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c URL-\u0430\u0434\u0440\u0435\u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f. 
pscanbeta.servletparameterpollution.refs=http\://download.oracle.com/javaee-archive/servlet-spec.java.net/jsr340-experts/att-0317/OnParameterPollutionAttacks.pdf

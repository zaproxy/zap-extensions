pscanbeta.desc = Beta durumu pasif tarama kurallar\u0131

pscanbeta.inpagebanner.desc = Sunucu, yan\u0131t i\u00e7eri\u011finde bir versiyon belirten dize d\u00f6nd\u00fc. Bu t\u00fcr bilgi s\u0131z\u0131nt\u0131lar\u0131, sald\u0131rganlar\u0131n kullan\u0131mdaki \u00fcr\u00fcn\u00fc ve ilgili s\u00fcr\u00fcm\u00fc etkileyen bilindik sorunlar\u0131 daha ayr\u0131nt\u0131l\u0131 olarak hedeflemesine neden olabilir.
pscanbeta.inpagebanner.name = In Page Banner Information Leak
pscanbeta.inpagebanner.other = There is a chance that the highlight in the finding is on a value in the headers, versus the actual matched string in the response body.
pscanbeta.inpagebanner.refs = https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/
pscanbeta.inpagebanner.soln = Sunucuyu bu t\u00fcr bilgi s\u0131z\u0131nt\u0131lar\u0131n\u0131 \u00f6nleyecek \u015fekilde yap\u0131land\u0131r\u0131n. \u00d6rne\u011fin\:\nTomcat'te bunu yapman\u0131n yolu, "sunucu" y\u00f6nergesi ve \u00f6zel hata sayfalar\u0131n\u0131n uygulanmas\u0131 yolu iledir.\nApache'de ise, "ServerSignature" ve "ServerTokens" direktifleri kullan\u0131l\u0131r.

pscanbeta.jsfunction.desc = Siteyi savunmas\u0131z b\u0131rakacak tehlikeli bir JS fonksiyonu kullan\u0131l\u0131yor gibi g\u00f6r\u00fcn\u00fcyor.
pscanbeta.jsfunction.name = Tehlikeli JS fonksiyonlar\u0131
pscanbeta.jsfunction.refs = https\://angular.io/guide/security
pscanbeta.jsfunction.soln = Bu fonksiyonlar\u0131n kullan\u0131m\u0131na ili\u015fkin g\u00fcvenlik \u00f6nerileri i\u00e7in referanslara bak\u0131n.

pscanbeta.jso.desc = Java Serialization kullan\u0131mda g\u00f6r\u00fcn\u00fcyor. D\u00fczg\u00fcn \u015fekilde do\u011frulanmazsa bir sald\u0131rgan \u00f6zel haz\u0131rlanm\u0131\u015f bir nesne g\u00f6nderebilir. Bu tehlikeli bir "Remote Code Execution" 'a sebep olabilir. JSO belirlenmesine yarayan \u00f6zel bir dizi tespit edildi (Base64\: rO0AB, Raw\: 0xac, 0xed, 0x00, 0x05).
pscanbeta.jso.name = Java Serialization Object
pscanbeta.jso.refs = https\://www.oracle.com/java/technologies/javase/seccodeguide.html\#8
pscanbeta.jso.soln = G\u00fcvenilmeyen verilerin deserializasyonu do\u011fas\u0131 gere\u011fi tehlikelidir ve bundan ka\u00e7\u0131n\u0131lmal\u0131d\u0131r.

pscanbeta.name = Pasif Tarama Kurallar\u0131 - beta

pscanbeta.nonstorable.desc = Yan\u0131t i\u00e7eri\u011fi gibi proxy sunucular\u0131 olarak \u00f6nbelle\u011fe bile\u015fenleri taraf\u0131ndan depolanabilir de\u011fil. Tepki duyarl\u0131, ki\u015fisel veya kullan\u0131c\u0131ya \u00f6zg\u00fc bilgileri i\u00e7ermiyorsa, bu performans\u0131n\u0131 art\u0131rmak, saklanabilir ve \u00f6nbelle\u011fe al\u0131nmas\u0131n\u0131 yararlanabilir.
pscanbeta.nonstorable.name = Non-Storable Content
pscanbeta.nonstorable.refs = https\://datatracker.ietf.org/doc/html/rfc7234\nhttps\://datatracker.ietf.org/doc/html/rfc7231\nhttps\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html
pscanbeta.nonstorable.soln = The content may be marked as storable by ensuring that the following conditions are satisfied\:\nThe request method must be understood by the cache and defined as being cacheable ("GET", "HEAD", and "POST" are currently defined as cacheable)\nThe response status code must be understood by the cache (one of the 1XX, 2XX, 3XX, 4XX, or 5XX response classes are generally understood)\nThe "no-store" cache directive must not appear in the request or response header fields\nFor caching by "shared" caches such as "proxy" caches, the "private" response directive must not appear in the response\nFor caching by "shared" caches such as "proxy" caches, the "Authorization" header field must not appear in the request, unless the response explicitly allows it (using one of the "must-revalidate", "public", or "s-maxage" Cache-Control response directives)\nIn addition to the conditions above, at least one of the following conditions must also be satisfied by the response\:\nIt must contain an "Expires" header field\nIt must contain a "max-age" response directive\nFor "shared" caches such as "proxy" caches, it must contain a "s-maxage" response directive\nIt must contain a "Cache Control Extension" that allows it to be cached\nIt must have a status code that is defined as cacheable by default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).   

pscanbeta.payloader.desc = Provides support for custom payloads in scan rules.
pscanbeta.payloader.name = Passive Scan Rules Beta Custom Payloads

pscanbeta.permissionspolicymissing.deprecated.desc = The header has now been renamed to Permissions-Policy. 
pscanbeta.permissionspolicymissing.deprecated.name = Deprecated Feature Policy Header Set
pscanbeta.permissionspolicymissing.deprecated.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy\nhttps\://scotthelme.co.uk/goodbye-feature-policy-and-hello-permissions-policy/
pscanbeta.permissionspolicymissing.deprecated.soln = Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header instead of the Feature-Policy header.
pscanbeta.permissionspolicymissing.desc = Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.
pscanbeta.permissionspolicymissing.name = Permissions Policy Header Not Set
pscanbeta.permissionspolicymissing.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy\nhttps\://developer.chrome.com/blog/feature-policy/\nhttps\://scotthelme.co.uk/a-new-security-header-feature-policy/\nhttps\://w3c.github.io/webappsec-feature-policy/\nhttps\://www.smashingmagazine.com/2018/12/feature-policy/
pscanbeta.permissionspolicymissing.soln = Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.

pscanbeta.servletparameterpollution.desc = Unspecified form action\: HTTP parameter override attack potentially possible. This is a known problem with Java Servlets but other platforms may also be vulnerable.
pscanbeta.servletparameterpollution.name = HTTP Parameter Override
pscanbeta.servletparameterpollution.refs = https\://download.oracle.com/javaee-archive/servlet-spec.java.net/jsr340-experts/att-0317/OnParameterPollutionAttacks.pdf
pscanbeta.servletparameterpollution.soln = All forms must specify the action URL.

pscanbeta.site-isolation.coep.desc = Cross-Origin-Embedder-Policy header is a response header that prevents a document from loading any cross-origin resources that don't explicitly grant the document permission (using CORP or CORS).
pscanbeta.site-isolation.coep.name = Cross-Origin-Embedder-Policy Header Missing or Invalid
pscanbeta.site-isolation.coep.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy
pscanbeta.site-isolation.coep.soln = Ensure that the application/web server sets the Cross-Origin-Embedder-Policy header appropriately, and that it sets the Cross-Origin-Embedder-Policy header to 'require-corp' for documents.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Embedder-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-embedder-policy).
pscanbeta.site-isolation.coop.desc = Cross-Origin-Opener-Policy header is a response header that allows a site to control if others included documents share the same browsing context. Sharing the same browsing context with untrusted documents might lead to data leak.
pscanbeta.site-isolation.coop.name = Cross-Origin-Opener-Policy Header Missing or Invalid
pscanbeta.site-isolation.coop.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy
pscanbeta.site-isolation.coop.soln = Ensure that the application/web server sets the Cross-Origin-Opener-Policy header appropriately, and that it sets the Cross-Origin-Opener-Policy header to 'same-origin' for documents.\n'same-origin-allow-popups' is considered as less secured and should be avoided.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Opener-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-opener-policy).
pscanbeta.site-isolation.corp.desc = Cross-Origin-Resource-Policy header is an opt-in header designed to counter side-channels attacks like Spectre. Resource should be specifically set as shareable amongst different origins.
pscanbeta.site-isolation.corp.name = Cross-Origin-Resource-Policy Header Missing or Invalid
pscanbeta.site-isolation.corp.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy
pscanbeta.site-isolation.corp.soln = Ensure that the application/web server sets the Cross-Origin-Resource-Policy header appropriately, and that it sets the Cross-Origin-Resource-Policy header to 'same-origin' for all web pages.\n'same-site' is considered as less secured and should be avoided.\nIf resources must be shared, set the header to 'cross-origin'.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Resource-Policy header (https\://caniuse.com/mdn-http_headers_cross-origin-resource-policy).
pscanbeta.site-isolation.name = Insufficient Site Isolation Against Spectre Vulnerability

pscanbeta.sourcecodedisclosure.desc = Application Source Code was disclosed by the web server
pscanbeta.sourcecodedisclosure.name = Source Code Disclosure
pscanbeta.sourcecodedisclosure.refs = https\://www.wsj.com/articles/BL-CIOB-2999
pscanbeta.sourcecodedisclosure.soln = Ensure that application Source Code is not available with alternative extensions, and ensure that source code is not present within other files or data deployed to the web server, or served by the web server. 

pscanbeta.sri-integrity.desc = The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content. 
pscanbeta.sri-integrity.name = Sub Resource Integrity Attribute Missing
pscanbeta.sri-integrity.otherinfo = The following hash was calculated (using base64 encoding of the output of the hash algorithm\: SHA-384) for the script in question {0}
pscanbeta.sri-integrity.refs = https\://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity
pscanbeta.sri-integrity.soln = Provide a valid integrity attribute to the tag.

pscanbeta.storabilitycacheability.name = Content Cacheability

pscanbeta.storablecacheable.desc = The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where "shared" caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.
pscanbeta.storablecacheable.name = Storable and Cacheable Content
pscanbeta.storablecacheable.otherinfo.liberallifetimeheuristic = In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.
pscanbeta.storablecacheable.otherinfo.staleretrievenotblocked = The response is stale, and stale responses are not configured to be re-validated or blocked, using the 'must-revalidate', 'proxy-revalidate', 's-maxage', or 'max-age' response 'Cache-Control' directives.
pscanbeta.storablecacheable.refs = https\://datatracker.ietf.org/doc/html/rfc7234\nhttps\://datatracker.ietf.org/doc/html/rfc7231\nhttps\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html
pscanbeta.storablecacheable.soln = Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. 

pscanbeta.storablenoncacheable.desc = The response contents are storable by caching components such as proxy servers, but will not be retrieved directly from the cache, without validating the request upstream, in response to similar requests from other users. 
pscanbeta.storablenoncacheable.name = Storable but Non-Cacheable Content
pscanbeta.storablenoncacheable.refs = https\://datatracker.ietf.org/doc/html/rfc7234\nhttps\://datatracker.ietf.org/doc/html/rfc7231\nhttps\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html
pscanbeta.storablenoncacheable.soln=

jwt.settings.title=JWT Settings
jwt.toolmenu.settings=JWT Settings...
ascanrules.jwt.name=JWT Scanner 
ascanrules.jwt.description=Scanner for finding vulnerabilities in JWT implementations.
jwt.settings.hmac.header=<html><h3>HMAC:<h3></html>
jwt.settings.rsa.header=<html><h3>RSA:<h3></html>
jwt.settings.general.header=<html><h3>General:<h3></html>
jwt.settings.rsa.trustStorePath=TrustStore path:
jwt.settings.rsa.trustStorePassword=TrustStore password:
jwt.settings.hmac.bruteforce.theadCount=Thread count for Brute force attack:
jwt.settings.hmac.bruteforce.keylength=Maximum key length:
jwt.settings.button.save=Save
jwt.settings.button.reset=Reset

jwt.settings.hmac.fuzzer.payload.label=Brute force attack Key Fuzzer:
jwt.settings.hmac.fuzzer.payload.add.button=Add payload

jwt.settings.filechooser.button=Select...
jwt.settings.general.ignoreClientSideScan.checkBox=Ignore Client Configuration Scan
jwt.settings.general.customFuzz.jwtField.header=<html><h4>JWT Field</h4></html>
jwt.settings.general.customFuzz.keyField.header=<html><h4>Key Field</h4></html>
jwt.settings.general.customFuzz.signature.header=<html><h4>Signature Required</h4></html>
jwt.settings.general.customFuzz.signingKey.header=<html><h4>Signing Key</h4></html>
jwt.settings.general.customFuzz.payload.header=<html><h4>Payload</h4></html>
jwt.settings.general.customFuzz.tokenHeader=Header
jwt.settings.general.customFuzz.tokenPayload=Payload
jwt.settings.general.customFuzz.addPayload=Add Payload
jwt.settings.general.customFuzz.addFuzzFields=Add
jwt.settings.general.customFuzz.removeFuzzFields=Remove
jwt.settings.general.customFuzz.saveFuzzFields=Save


# Client side JWT storage vulnerabilities
jwt.scanner.client.vulnerability.cookiehttponly.name=No HttpOnly Flag on cookie containing JWT token.
jwt.scanner.client.vulnerability.cookiehttponly.desc=A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
jwt.scanner.client.vulnerability.cookiehttponly.soln=Ensure that the HttpOnly flag is set for all cookies.
jwt.scanner.client.vulnerability.cookiehttponly.refs=http://www.owasp.org/index.php/HttpOnly

jwt.scanner.client.vulnerability.cookiesecureflag.name=Cookie containing JWT token is without Secure Flag.
jwt.scanner.client.vulnerability.cookiesecureflag.desc=A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
jwt.scanner.client.vulnerability.cookiesecureflag.soln=Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.
jwt.scanner.client.vulnerability.cookiesecureflag.refs=http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)


jwt.scanner.client.vulnerability.cookiesamesite.name=Cookie containing JWT token is without SameSite Attribute
jwt.scanner.client.vulnerability.cookiesamesite.desc=A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. \
The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
jwt.scanner.client.vulnerability.cookiesamesite.soln=Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.
jwt.scanner.client.vulnerability.cookiesamesite.refs=https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site

jwt.scanner.client.vulnerability.cookieprefix.name=Cookie containing JWT token is without __Secure- or __Host- prefixes.
jwt.scanner.client.vulnerability.cookieprefix.desc=A cookie has been set without the  __Secure- or __Host- prefixes, which means that the cookie can be added using Set-Cookie header via unencrypted connections or via malicious subdomains.
jwt.scanner.client.vulnerability.cookieprefix.soln=Whenever a cookie contains sensitive information or is a session token, ensure hardening the cookie using cookie prefixes.
jwt.scanner.client.vulnerability.cookieprefix.refs=https://googlechrome.github.io/samples/cookie-prefixes/

jwt.scanner.client.vulnerability.urlparam.name=JWT token is in URL
jwt.scanner.client.vulnerability.urlparam.desc=The request contains JWT token which is leaked in the URL. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.
jwt.scanner.client.vulnerability.urlparam.soln=Do not pass sensitive information in URIs.
jwt.scanner.client.vulnerability.urlparam.refs=https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html

jwt.scanner.client.vulnerability.formparam.name=JWT token is in Form.
jwt.scanner.client.vulnerability.formparam.desc=The request contains JWT token in Form param, as this is not part of cookies so assumption is that token is either present in Local Storage/Session Storage or hidden form field. In case if XSS is there then this way of storing parameter can be dangerous.
jwt.scanner.client.vulnerability.formparam.soln=Ensure that XSS is not there in the application or Use Finger printing technique as mentioned in https://github.com/SasanLabs/JWTExtension#fingerprinting-jwt-token
jwt.scanner.client.vulnerability.formparam.refs=https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html


# Server side JWT token vulnerabilities
jwt.scanner.server.vulnerability.headerFuzzer.noneAlgorithm.name=none hashing algorithm attack
jwt.scanner.server.vulnerability.headerFuzzer.noneAlgorithm.desc=JWT library accepts none hashing algorithm. none hashing algorithm is used by the JWT in case the integrity of token is already verified.so an attacker can alter the token claims and token will be trusted by the application.
jwt.scanner.server.vulnerability.headerFuzzer.noneAlgorithm.soln=Not allowing none hashing algorithm.
jwt.scanner.server.vulnerability.headerFuzzer.noneAlgorithm.refs=https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html

jwt.scanner.server.vulnerability.bruteForce.name=Brute Force attack on HMAC key
jwt.scanner.server.vulnerability.bruteForce.desc=Because of weak HMAC key used for signing JWT it is easy to brute force either by dictionary attack or for small key size generating all the combinations of keys.
jwt.scanner.server.vulnerability.bruteForce.refs=https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html
jwt.scanner.server.vulnerability.bruteForce.soln=Use key sizes which is on a par with current security guidelines and also avoiding meaningful or commonly used words or sentences for keys.

jwt.scanner.server.vulnerability.signatureFuzzer.nullByte.name=Null byte injection attack
jwt.scanner.server.vulnerability.signatureFuzzer.nullByte.desc=Signature bytes after null byte are ignored ie not validated hence JWT validator is vulnerable to null byte injection
jwt.scanner.server.vulnerability.signatureFuzzer.nullByte.refs=http://projects.webappsec.org/w/page/13246949/Null%20Byte%20Injection
jwt.scanner.server.vulnerability.signatureFuzzer.nullByte.soln=validate entire Signature and validating library should not stop validation after null byte.

jwt.scanner.server.vulnerability.signatureFuzzer.algorithmConfusion.name=Algorithm Confusion attack
jwt.scanner.server.vulnerability.signatureFuzzer.algorithmConfusion.desc=JWT library is vulnerable to Algorithm Confusion attack.
jwt.scanner.server.vulnerability.signatureFuzzer.algorithmConfusion.refs=https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/#RSA-or-HMAC-
jwt.scanner.server.vulnerability.signatureFuzzer.algorithmConfusion.soln=https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/#Recommendations-for-Library-Developers

jwt.scanner.server.vulnerability.signatureFuzzer.jwkCustomKey.name=Algorithm JSON Web Key based attack
jwt.scanner.server.vulnerability.signatureFuzzer.jwkCustomKey.desc=JWT library is validating against the provided JSON Web Key which is a user input.
jwt.scanner.server.vulnerability.signatureFuzzer.jwkCustomKey.refs=https://nvd.nist.gov/vuln/detail/CVE-2018-0114
jwt.scanner.server.vulnerability.signatureFuzzer.jwkCustomKey.soln=Validating Library should not depend on user provided input

jwt.scanner.server.vulnerability.payloadFuzzer.nullByte.name=Null byte injection attack
jwt.scanner.server.vulnerability.payloadFuzzer.nullByte.desc=Payload bytes after null byte are ignored ie not included in validation of JWT token hence JWT validator is vulnerable to null byte injection
jwt.scanner.server.vulnerability.payloadFuzzer.nullByte.refs=http://projects.webappsec.org/w/page/13246949/Null%20Byte%20Injection
jwt.scanner.server.vulnerability.payloadFuzzer.nullByte.soln=Entire payload and its fields should be included while validating JWT.

jwt.scanner.server.vulnerability.miscFuzzer.emptyTokens.name=Empty token injection attack
jwt.scanner.server.vulnerability.miscFuzzer.emptyTokens.desc=JWT token without any header, payload and signature is not validated and marked as a valid token which should not happen.
jwt.scanner.server.vulnerability.miscFuzzer.emptyTokens.refs=https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html
jwt.scanner.server.vulnerability.miscFuzzer.emptyTokens.soln=Tokens even if empty should be validated properly




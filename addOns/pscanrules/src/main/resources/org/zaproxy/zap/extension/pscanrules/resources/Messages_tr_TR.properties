pscanrules.desc = Release status passive scan rules
pscanrules.name = Pasif Tarama Kurallar\u0131

pscanrules.payloader.desc=Provides support for custom payloads in scan rules.
pscanrules.payloader.name=Passive Scan Rules Release Custom Payloads

pscanrules.anticlickjacking.name = Anti-clickjacking Header
pscanrules.anticlickjacking.incInCsp = The Content-Security-Policy does include a 'frame-ancestors' element which takes precedence over the X-Frame-Options header, which is why this has been raised with a LOW risk.  
pscanrules.anticlickjacking.missing.name = Missing Anti-clickjacking Header
pscanrules.anticlickjacking.missing.desc = The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.
pscanrules.anticlickjacking.missing.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
pscanrules.anticlickjacking.missing.soln = Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's "frame-ancestors" directive.
pscanrules.anticlickjacking.multiple.header.name = Multiple X-Frame-Options Header Entries
pscanrules.anticlickjacking.multiple.header.desc = X-Frame-Options (XFO) headers were found, a response with multiple XFO header entries may not be predictably treated by all user-agents.
pscanrules.anticlickjacking.multiple.header.refs = https\://tools.ietf.org/html/rfc7034
pscanrules.anticlickjacking.multiple.header.soln = Ensure only a single X-Frame-Options header is present in the response.
pscanrules.anticlickjacking.compliance.meta.name = X-Frame-Options Defined via META (Non-compliant with Spec)
pscanrules.anticlickjacking.compliance.meta.desc = An X-Frame-Options (XFO) META tag was found, defining XFO via a META tag is explicitly not supported by the spec (RFC 7034).
pscanrules.anticlickjacking.compliance.meta.refs = https\://tools.ietf.org/html/rfc7034\#section-4
pscanrules.anticlickjacking.compliance.meta.soln = Ensure X-Frame-Options is set via a response header field.  Alternatively consider implementing Content Security Policy's "frame-ancestors" directive.
pscanrules.anticlickjacking.compliance.malformed.setting.name = X-Frame-Options Setting Malformed
pscanrules.anticlickjacking.compliance.malformed.setting.desc = An X-Frame-Options header was present in the response but the value was not correctly set.
pscanrules.anticlickjacking.compliance.malformed.setting.refs = https\://tools.ietf.org/html/rfc7034\#section-2.1
pscanrules.anticlickjacking.compliance.malformed.setting.soln = Ensure a valid setting is used on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  Alternatively consider implementing Content Security Policy's "frame-ancestors" directive.

pscanrules.authenticationcredentialscaptured.name=Do\u011frulama Kimlik Bilgileri Yakalanan
pscanrules.authenticationcredentialscaptured.desc=An insecure authentication mechanism is in use. This allows an attacker on the network access to the userid and password of the authenticated user. For Basic Authentication, the attacker must merely monitor the network traffic until a Basic Authentication request is received, and then base64 decode the username and password.  For Digest Authentication, the attacker has access to the username, and possibly also the password, if the hash (including a nonce) can be successfully cracked, or if a Man-In-The-Middle attack is mounted.\nThe attacker eavesdrops on the network until an authentication has completed.
pscanrules.authenticationcredentialscaptured.soln=HTTPS kullan\u0131n ve un-\u015fifreli bi\u00e7imde kimli\u011fi veya \u015fifre iletmez g\u00fcvenli bir kimlik do\u011frulama mekanizmas\u0131 kullan\u0131n. Bu \u00f6nemsiz \u015fa\u015f\u0131rtmaca mekanizmas\u0131 kolayca bozuldu \u00e7\u00fcnk\u00fc \u00d6zellikle, Temel Kimlik Do\u011frulama mekanizmas\u0131n\u0131n kullan\u0131m\u0131n\u0131 \u00f6nlemek. 
pscanrules.authenticationcredentialscaptured.refs=https\://owasp.org/www-community/attacks/Brute_force_attack\nhttp\://en.wikipedia.org/wiki/Digest_access_authentication
pscanrules.authenticationcredentialscaptured.alert.basicauth.extrainfo=[ {0} ] [ {1} ] g\u00fcvensiz kimlik do\u011frulama mekanizmas\u0131 kullan\u0131r [ {2} ], ad\u0131n\u0131 if\u015fa [ {3} ] ve \u015fifre [ {4} ].
pscanrules.authenticationcredentialscaptured.alert.digestauth.extrainfo=[ {0} ] [ {1} ] g\u00fcvensiz kimlik do\u011frulama mekanizmas\u0131 kullan\u0131r [ {2} ], ad\u0131n\u0131 if\u015fa [ {3} ] ve ek bilgiler [ {4} ].

pscanrules.bigredirects.name=Big Redirect Detected (Potential Sensitive Information Leak)
pscanrules.bigredirects.desc=The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, PII, etc.).
pscanrules.bigredirects.refs=
pscanrules.bigredirects.soln=Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.
pscanrules.bigredirects.extrainfo=Location header URI length\: {0} [{1}].\nPredicted response size\: {2}.\nResponse Body Length\: {3}.

pscanrules.charsetmismatch.variant.no_mismatch_metacontenttype_missing=(Meta \u0130\u00e7erik T\u00fcr\u00fc Karakter K\u00fcmesi Eksik)
pscanrules.charsetmismatch.name=Karakter uyu\u015fmazl\u0131\u011f\u0131
pscanrules.charsetmismatch.variant.header_metacontentype_mismatch=(Ba\u015fl\u0131\u011fa Kar\u015f\u0131 Meta \u0130\u00e7erik T\u00fcr\u00fc Karakter K\u00fcmesi)
pscanrules.charsetmismatch.variant.header_metacharset_mismatch=(Ba\u015fl\u0131\u011fa Kar\u015f\u0131 Meta Karakter K\u00fcmesi)
pscanrules.charsetmismatch.variant.metacontenttype_metacharset_mismatch=(Meta Karakter K\u00fcmesine Kar\u015f\u0131 Meta \u0130\u00e7erik T\u00fcr\u00fc Karakter K\u00fcmesi)
pscanrules.charsetmismatch.desc=This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there's a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content's correct character set.\n\nAn attacker could manipulate content on the page to be interpreted in an encoding of their choice. For example, if an attacker can control content at the beginning of the page, they could inject script using UTF-7 encoded text and manipulate some browsers into interpreting that text.
pscanrules.charsetmismatch.soln=Kuvvet UTF-8 XML HTTP ba\u015fl\u0131k ve meta etiketleri hem veya kodlama beyanlar t\u00fcm metin i\u00e7erik i\u00e7in.
pscanrules.charsetmismatch.refs=http\://code.google.com/p/browsersec/wiki/Part2\#Character_set_handling_and_detection
pscanrules.charsetmismatch.extrainfo.html.no_mismatch_metacontenttype_missing=Karakter k\u00fcmesi yaln\u0131zca META karakter setiyle tan\u0131mlan\u0131r, META i\u00e7erik t\u00fcr\u00fc taraf\u0131ndan tan\u0131mlanacak karakter k\u00fcmesini bekleyen daha eski istemciler bu i\u00e7eri\u011fi do\u011fru \u015fekilde g\u00f6r\u00fcnt\u00fcleyemez.
pscanrules.charsetmismatch.extrainfo.html.header_metacontentype_mismatch=HTTP \u00dcstbilgisi ile META i\u00e7erik t\u00fcr\u00fc kodlama bildirimleri aras\u0131nda bir karakter k\u00fcmesi uyumsuzlu\u011fu vard\u0131\: [{0}] ve [{1}] e\u015fle\u015fmiyor.
pscanrules.charsetmismatch.extrainfo.html.header_metacharset_mismatch=HTTP \u00dcstbilgisi ile META karakter k\u00fcmesi kodlama bildirimleri aras\u0131nda bir karakter k\u00fcmesi uyumsuzlu\u011fu vard\u0131\: [{0}] ve [{1}] e\u015fle\u015fmiyor.
pscanrules.charsetmismatch.extrainfo.html.metacontenttype_metacharset_mismatch=META i\u00e7erik t\u00fcr\u00fc ile META karakter k\u00fcmesi kodlama bildirimleri aras\u0131nda bir karakter k\u00fcmesi uyumsuzlu\u011fu vard\u0131\: [{0}] ve [{1}] e\u015fle\u015fmiyor.
pscanrules.charsetmismatch.extrainfo.xml=HTTP \u00dcstbilgi ve XML kodlama bildirimi aras\u0131nda bir charset uyumsuzlu\u011fu vard\u0131\: [ {0} ] ve [ {1} ] uyu\u015fmuyor.

pscanrules.contentsecuritypolicymissing.name=Content Security Policy (CSP) Header Not Set
pscanrules.contentsecuritypolicymissing.desc=Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanrules.contentsecuritypolicymissing.refs=https\://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps\://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp\://www.w3.org/TR/CSP/\nhttp\://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp\://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp\://caniuse.com/\#feat\=contentsecuritypolicy\nhttp\://content-security-policy.com/
pscanrules.contentsecuritypolicymissing.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header, to achieve optimal browser support\: "Content-Security-Policy" for Chrome 25+, Firefox 23+ and Safari 7+, "X-Content-Security-Policy" for Firefox 4.0+ and Internet Explorer 10+, and "X-WebKit-CSP" for Chrome 14+ and Safari 6+.
pscanrules.contentsecuritypolicymissing.extrainfo=
pscanrules.contentsecuritypolicymissing.ro.name=Content Security Policy (CSP) Report-Only Header Found
pscanrules.contentsecuritypolicymissing.ro.desc=The response contained a Content-Security-Policy-Report-Only header, this may indicate a work-in-progress implementation, or an oversight in promoting pre-Prod to Prod, etc.\n\nContent Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanrules.contentsecuritypolicymissing.ro.refs=https\://www.w3.org/TR/CSP2/\nhttps\://w3c.github.io/webappsec-csp/\nhttp\://caniuse.com/\#feat\=contentsecuritypolicy\nhttp\://content-security-policy.com/

pscanrules.cookiesamesite.name = Cookie without SameSite Attribute
pscanrules.cookiesamesite.none.name = Cookie with SameSite Attribute None
pscanrules.cookiesamesite.desc=Bir \u00e7erez, SameSite \u00f6zniteli\u011fi olmadan ayarlan\u0131r; bu, \u00e7erezin bir "site \u00e7ap\u0131nda" talep sonucunda g\u00f6nderilebilece\u011fi anlam\u0131na gelir. SameSite \u00f6zniteli\u011fi, siteler aras\u0131 iste\u011fi sahtekarl\u0131k, site \u00e7ap\u0131nda komut dosyas\u0131 dahil etme ve zamanlama sald\u0131r\u0131lar\u0131 i\u00e7in etkili bir kar\u015f\u0131 \u00f6nlemdir.
pscanrules.cookiesamesite.none.desc=A cookie has been set with its SameSite attribute set to "none", which means that the cookie can be sent as a result of a 'cross-site' request. \nThe SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
pscanrules.cookiesamesite.badval.name = Cookie with Invalid SameSite Attribute
pscanrules.cookiesamesite.badval.desc=Bir \u00e7erez ge\u00e7ersiz bir SameSite \u00f6znitelik de\u011feri ile ayarland\u0131; bu, \u00e7erezin bir "site \u00e7ap\u0131nda" talep sonucu g\u00f6nderilebilece\u011fi anlam\u0131na geliyor. SameSite \u00f6zniteli\u011fi, siteler aras\u0131 iste\u011fi sahtekarl\u0131k, site \u00e7ap\u0131nda komut dosyas\u0131 dahil etme ve zamanlama sald\u0131r\u0131lar\u0131 i\u00e7in etkili bir kar\u015f\u0131 \u00f6nlemdir.
pscanrules.cookiesamesite.soln=SameSite \u00f6zniteli\u011finin t\u00fcm \u00e7erezler i\u00e7in 'gev\u015fek' veya ideal olarak 'kat\u0131' olarak ayarland\u0131\u011f\u0131ndan emin olun.
pscanrules.cookiesamesite.refs=https\://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site

pscanrules.crossdomain.name=Etki Alanlar\u0131 Aras\u0131 yanl\u0131\u015f yap\u0131land\u0131r\u0131lmas\u0131
pscanrules.crossdomain.desc=Etki Alanlar\u0131 Aras\u0131 yanl\u0131\u015f yap\u0131land\u0131r\u0131lmas\u0131
pscanrules.crossdomain.soln=Bu hassas veriler kimli\u011fi do\u011frulanmam\u0131\u015f bir \u015fekilde (\u00f6rne\u011fin, IP adresi, beyaz-liste kullanarak) mevcut olmad\u0131\u011f\u0131ndan emin olun. Etki daha k\u0131s\u0131tlay\u0131c\u0131 dizi "Eri\u015fim Kontrol-izin-K\u00f6keni" HTTP ba\u015fl\u0131\u011f\u0131n\u0131 yap\u0131land\u0131rma ya da web taray\u0131c\u0131s\u0131 daha k\u0131s\u0131tlay\u0131c\u0131 bir \u015fekilde ayn\u0131 K\u00f6keni Politikas\u0131 (SOP) uygulamak i\u00e7in izin, tamamen t\u00fcm CORS ba\u015fl\u0131klar\u0131n\u0131 \u00e7\u0131kar\u0131n.
pscanrules.crossdomain.refs=https\://vulncat.fortify.com/en/detail?id\=desc.config.dotnet.html5_overly_permissive_cors_policy
pscanrules.crossdomain.extrainfo=Web sunucusu \u00fczerinde CORS yanl\u0131\u015f yap\u0131land\u0131rma etki alanlar\u0131 aras\u0131 bu etki kimli\u011fi do\u011frulanmam\u0131\u015f API'leri kullanarak keyfi \u00fc\u00e7\u00fcnc\u00fc taraf etki alanlar\u0131ndan istekleri, okuma verir. Web taray\u0131c\u0131s\u0131 uygulamalar\u0131, ancak kimli\u011fi do\u011frulanm\u0131\u015f API'ler yan\u0131t\u0131 okumak i\u00e7in keyfi \u00fc\u00e7\u00fcnc\u00fc taraflar\u0131n izin vermez. Bu biraz riskini azalt\u0131r. Bu yanl\u0131\u015f yap\u0131land\u0131rma do\u011frulanmam\u0131\u015f bir \u015fekilde kullan\u0131labilir verilere eri\u015fmek i\u00e7in bir sald\u0131rgan taraf\u0131ndan kullan\u0131labilir, ancak hangi IP adresinin beyaz liste olarak, g\u00fcvenlik di\u011fer baz\u0131 form kullan\u0131r.

pscanrules.cookielooselyscoped.name=Gev\u015fek Scoped \u00c7erez
pscanrules.cookielooselyscoped.desc=\u00c7erezler etki alan\u0131 veya yolu ile kapsaml\u0131 edilebilir. Bu onay, bir \u00e7erez uygulanan etki scope.The alan\u0131 kapsam\u0131 ile sadece endi\u015fe etki eri\u015febilir belirler. \u00d6rne\u011fin, bir \u00e7erez bir alt \u00f6rn www.nottrusted.com veya gev\u015fek bir \u00fcst etki, \u00f6rne\u011fin nottrusted.com i\u00e7in kapsaml\u0131 kesinlikle kapsaml\u0131 olabilir. Bu durumda, herhangi bir alt etki alan\u0131 nottrusted.com tan\u0131mlama eri\u015febilir. Gev\u015fek kapsaml\u0131 \u00e7erezler google.com ve live.com gibi mega-uygulamalar yayg\u0131nd\u0131r.
pscanrules.cookielooselyscoped.soln=Bir FQDN (Tam Etki Alan\u0131 Ad\u0131) Her zaman kapsam tan\u0131mlama.
pscanrules.cookielooselyscoped.refs=https\://tools.ietf.org/html/rfc6265\#section-4.1\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html\nhttp\://code.google.com/p/browsersec/wiki/Part2\#Same-origin_policy_for_cookies
pscanrules.cookielooselyscoped.extrainfo=Kar\u015f\u0131la\u015ft\u0131rma i\u00e7in kullan\u0131lan men\u015fe alan\u0131 oldu\: {0} {1} \n\n
pscanrules.cookielooselyscoped.extrainfo.cookie={0}\n

pscanrules.directorybrowsing.name=Dizin Tarama
pscanrules.directorybrowsing.desc=It is possible to view a listing of the directory contents. Directory listings may reveal hidden scripts, include files , backup source files, etc., which be accessed to reveal sensitive information.
pscanrules.directorybrowsing.soln=Configure the web server to disable directory browsing. 
pscanrules.directorybrowsing.refs=https\://cwe.mitre.org/data/definitions/548.html
pscanrules.directorybrowsing.extrainfo={0}

pscanrules.hashdisclosure.name=Hash Disclosure
pscanrules.hashdisclosure.desc=A hash was disclosed by the web server.
pscanrules.hashdisclosure.soln=Ensure that hashes that are used to protect credentials or other resources are not leaked by the web server or database. There is typically no requirement for password hashes to be accessible to the web browser.      
pscanrules.hashdisclosure.refs=http\://projects.webappsec.org/w/page/13246936/Information%20Leakage\nhttp\://openwall.info/wiki/john/sample-hashes
pscanrules.hashdisclosure.extrainfo={0}

pscanrules.heartbleed.name=Heartbleed OpenSSL Vulnerability (Indicative)
pscanrules.heartbleed.desc=The TLS and DTLS implementations in OpenSSL 1.0.1 before 1.0.1g do not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, potentially disclosing sensitive information.\t
pscanrules.heartbleed.soln=Daha sonra OpenSSL 1.0.1g veya g\u00fcncelleyin. Yeniden sorunu HTTPS sertifikalar\u0131. Bu tehlikeye olabilir \u00e7\u00fcnk\u00fc sunucu g\u00fcnl\u00fck dosyalar\u0131ndaki uzla\u015fma hi\u00e7bir kan\u0131t ile, asimetrik \u00f6zel anahtarlar\u0131 ve payla\u015f\u0131lan gizli anahtarlar\u0131 de\u011fi\u015ftirin.
pscanrules.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
pscanrules.heartbleed.extrainfo={0} is in use. Note however that the reported version could contain back-ported security fixes, and so the issue could be a false positive. This is common on Red Hat, for instance.

pscanrules.informationdisclosuredebugerrors.name=Bilginin A\u00e7\u0131\u011fa \u00c7\u0131kmas\u0131 - Hata Mesajlar\u0131 Hata Ay\u0131klama
pscanrules.informationdisclosuredebugerrors.desc=Yan\u0131t, ASP.NET gibi platformlar taraf\u0131ndan d\u00f6nd\u00fcr\u00fclen genel hata iletilerini ve IIS ve Apache gibi Web sunucular\u0131n\u0131 i\u00e7eriyor gibi g\u00f6r\u00fcn\u00fcyor. S\u0131k kullan\u0131lan hata ay\u0131klama mesajlar\u0131n\u0131n bir listesini yap\u0131land\u0131rabilirsiniz.
pscanrules.informationdisclosuredebugerrors.soln=\u00dcretmeye ge\u00e7meden \u00f6nce hata ay\u0131klama mesajlar\u0131n\u0131 devre d\u0131\u015f\u0131 b\u0131rak\u0131n.

pscanrules.informationdisclosureinurl.name=Information Disclosure - Sensitive Information in URL
pscanrules.informationdisclosureinurl.desc=\u0130ste\u011fin, URL'de s\u0131zd\u0131r\u0131lm\u0131\u015f hassas bilgileri i\u00e7erdi\u011fi g\u00f6r\u00fcld\u00fc. Bu, PCI ve \u00e7o\u011fu kurulu\u015f uyum politikas\u0131n\u0131 ihlal edebilir. Ortam\u0131n\u0131za \u00f6zg\u00fc de\u011ferleri eklemek veya kald\u0131rmak i\u00e7in bu denetimin dizelerinin listesini yap\u0131land\u0131rabilirsiniz.
pscanrules.informationdisclosureinurl.otherinfo.sensitiveinfo=The URL contains potentially sensitive information. The following string was found via the pattern\: {0}\n{1}
pscanrules.informationdisclosureinurl.otherinfo.cc=URL, kredi kart\u0131 bilgileri i\u00e7eriyor gibi g\u00f6r\u00fcn\u00fcyor.
pscanrules.informationdisclosureinurl.otherinfo.email=URL eposta adresi(ler) i\u00e7eriyor.
pscanrules.informationdisclosureinurl.otherinfo.ssn=URL, ABD Sosyal G\u00fcvenlik Numaras\u0131(lar\u0131) i\u00e7eriyor gibi g\u00f6r\u00fcn\u00fcyor
pscanrules.informationdisclosureinurl.soln=Hassas bilgileri URL'lerde ge\u00e7irmeyin.

pscanrules.informationdisclosurereferrer.name=Bilginin A\u00e7\u0131\u011fa \u00c7\u0131kmas\u0131 - HTTP Y\u00f6nlendirme Ba\u015fl\u0131\u011f\u0131nda Hassas Bilgiler
pscanrules.informationdisclosurereferrer.desc=HTTP ba\u015fl\u0131\u011f\u0131, potansiyel hassas bir parametreyi ba\u015fka bir alana s\u0131zd\u0131rm\u0131\u015f olabilir. Bu, PCI ve \u00e7o\u011fu kurulu\u015f uyum politikas\u0131n\u0131 ihlal edebilir. Ortam\u0131n\u0131za \u00f6zg\u00fc de\u011ferleri eklemek veya kald\u0131rmak i\u00e7in bu denetimin dizelerinin listesini yap\u0131land\u0131rabilirsiniz.
pscanrules.informationdisclosurereferrer.otherinfo.sensitiveinfo=HTTP y\u00f6nlendiren ba\u015fl\u0131k alan\u0131ndaki URL, hassas bilgiler i\u00e7eriyor gibi g\u00f6r\u00fcn\u00fcyor.
pscanrules.informationdisclosurereferrer.otherinfo.cc=HTTP y\u00f6nlendiren ba\u015fl\u0131k alan\u0131ndaki URL, kredi kart\u0131 bilgileri i\u00e7eriyor gibi g\u00f6r\u00fcn\u00fcyor.
pscanrules.informationdisclosurereferrer.otherinfo.email=HTTP y\u00f6nlendiren ba\u015fl\u0131k alan\u0131ndaki URL, e-posta adresi(leri) i\u00e7eriyor.
pscanrules.informationdisclosurereferrer.otherinfo.ssn=HTTP y\u00f6nlendiren ba\u015fl\u0131k alan\u0131ndaki URL, ABD Sosyal G\u00fcvenlik Numaras\u0131(lar\u0131) i\u00e7eriyor gibi g\u00f6r\u00fcn\u00fcyor.
pscanrules.informationdisclosurereferrer.soln=Hassas bilgileri URL'lerde ge\u00e7irmeyin.
pscanrules.informationdisclosurereferrer.bin.field=Bank Identification Number\:
pscanrules.informationdisclosurereferrer.brand.field=Brand\:
pscanrules.informationdisclosurereferrer.category.field=Category\:
pscanrules.informationdisclosurereferrer.issuer.field=Yay\u0131nc\u0131\:

pscanrules.informationdisclosuresuspiciouscomments.name=Bilginin A\u00e7\u0131\u011fa \u00c7\u0131kmas\u0131 - \u015e\u00fcpheli Yorumlar
pscanrules.informationdisclosuresuspiciouscomments.desc=The response appears to contain suspicious comments which may help an attacker. Note\: Matches made within script blocks or files are against the entire content not only comments.
pscanrules.informationdisclosuresuspiciouscomments.otherinfo=The following pattern was used\: {0} and was detected in the element starting with\: "{1}", see evidence field for the suspicious comment/snippet.
pscanrules.informationdisclosuresuspiciouscomments.otherinfo2=The following pattern was used\: {0} and was detected {2} times, the first in the element starting with\: "{1}", see evidence field for the suspicious comment/snippet.
pscanrules.informationdisclosuresuspiciouscomments.soln=Bir sald\u0131rgana yard\u0131mc\u0131 olabilecek bilgileri d\u00f6nd\u00fcren t\u00fcm yorumlar\u0131 kald\u0131r\u0131n ve alttaki ba\u015fvurulan problemleri d\u00fczeltin.

pscanrules.insecureformload.name=HTTP to HTTPS Insecure Transition in Form Post
pscanrules.insecureformload.desc=This check looks for insecure HTTP pages that host HTTPS forms. The issue is that an insecure HTTP page can easily be hijacked through MITM and the secure HTTPS form can be replaced or spoofed.
pscanrules.insecureformload.refs=
pscanrules.insecureformload.soln=Use HTTPS for landing pages that host secure forms.
pscanrules.insecureformload.extrainfo=The response to the following request over HTTP included an HTTPS form tag action attribute value\:\r\n\r\n{0}The context was\:\r\n\r\n{1}

pscanrules.insecureformpost.name=HTTPS to HTTP Insecure Transition in Form Post
pscanrules.insecureformpost.desc=This check identifies secure HTTPS pages that host insecure HTTP forms. The issue is that a secure page is transitioning to an insecure page when data is uploaded through a form. The user may think they're submitting data to a secure page when in fact they are not.
pscanrules.insecureformpost.refs=
pscanrules.insecureformpost.soln=Ensure sensitive data is only sent over secured HTTPS channels.
pscanrules.insecureformpost.extrainfo=The response to the following request over HTTPS included an HTTP form tag action attribute value\:\r\n\r\n{0}The context was\:\r\n\r\n{1}

pscanrules.insecureauthentication.name=Zay\u0131f Kimlik Do\u011frulama Y\u00f6ntemi
pscanrules.insecureauthentication.desc=HTTP Temel ya da \u00f6zet kimlik do\u011frulamas\u0131 g\u00fcvenli olmayan ba\u011flant\u0131 \u00fczerinden kullan\u0131l\u0131r olmu\u015ftur. kimlik okuyun ve sonra a\u011fa eri\u015fimi olan bir ki\u015fi taraf\u0131ndan yeniden kullan\u0131labilir.
pscanrules.insecureauthentication.soln=HTTPS kullanarak ba\u011flant\u0131y\u0131 korumak veya daha g\u00fc\u00e7l\u00fc bir kimlik do\u011frulama mekanizmas\u0131 kullan\u0131n
pscanrules.insecureauthentication.refs=https\://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html

pscanrules.insecurejsfviewstate.name=G\u00fcvensiz JSF ViewState
pscanrules.insecurejsfviewstate.desc=a\u015fa\u011f\u0131daki URL'den yan\u0131t\u0131 yok kriptografik koruma olan bir ViewState de\u011feri i\u00e7erir.
pscanrules.insecurejsfviewstate.soln=Ortam\u0131n\u0131za bir MAC \u00f6zg\u00fc olan G\u00fcvenli viewstate
pscanrules.insecurejsfviewstate.refs=https\://www.trustwave.com/spiderlabs/advisories/TWSL2010-001.txt
pscanrules.insecurejsfviewstate.extrainfo=JSF ViewState [ {0} ] g\u00fcvensiz

pscanrules.linktarget.name=Reverse Tabnabbing
pscanrules.linktarget.desc=At least one link on this page is vulnerable to Reverse tabnabbing as it uses a target attribute without using both of the "noopener" and "noreferrer" keywords in the "rel" attribute, which allows the target page to take control of this page.
pscanrules.linktarget.refs=https\://owasp.org/www-community/attacks/Reverse_Tabnabbing\nhttps\://dev.to/ben/the-targetblank-vulnerability-by-example\nhttps\://mathiasbynens.github.io/rel-noopener/\nhttps\://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c
pscanrules.linktarget.soln=Do not use a target attribute, or if you have to then also add the attribute\: rel\="noopener noreferrer".

pscanrules.modernapp.name=Modern Web Application
pscanrules.modernapp.desc=The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.
pscanrules.modernapp.other.links=Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.
pscanrules.modernapp.other.self=Links have been found with a target of '_self' - this is often used by modern frameworks to force a full page reload.
pscanrules.modernapp.other.nolinks=No links have been found while there are scripts, which is an indication that this is a modern web application.
pscanrules.modernapp.other.noscript=A noScript tag has been found, which is an indication that the application works differently with JavaScript enabled compared to when it is not.
pscanrules.modernapp.soln=This is an informational alert and so no changes are required.

pscanrules.noanticsrftokens.name=Anti-CSRF belirte\u00e7leri olmamas\u0131
pscanrules.noanticsrftokens.desc=Hay\u0131r Anti-CSRF belirte\u00e7leri HTML g\u00f6nderme formunda bulundu.
pscanrules.noanticsrftokens.alert.extrainfo=Bilinen Anti-CSRF belirte\u00e7leri {0} a\u015fa\u011f\u0131daki HTML formlar\u0131 bulundu\: {1} .  
pscanrules.noanticsrftokens.extrainfo.annotation=Form, bir anti-CSRF Token'e ihtiya\u00e7 duymad\u0131\u011f\u0131n\u0131 belirten bir g\u00fcvenlik a\u00e7\u0131klamas\u0131 oldu\u011fu i\u00e7in bu bir bilgilendirme uyar\u0131s\u0131d\u0131r. Bu, a\u00e7\u0131klaman\u0131n do\u011fru oldu\u011fundan emin olmak i\u00e7in manuel olarak test edilmelidir.

pscanrules.pii.name = PII Disclosure
pscanrules.pii.desc = The response contains Personally Identifiable Information, such as CC number, SSN and similar sensitive data.
pscanrules.pii.extrainfo = Credit Card Type detected\: {0}
pscanrules.pii.bin.field=Bank Identification Number\:
pscanrules.pii.brand.field=Brand\:
pscanrules.pii.category.field=Category\:
pscanrules.pii.issuer.field=Yay\u0131nc\u0131\:

pscanrules.retrievedfromcache.name = Retrieved from Cache
pscanrules.retrievedfromcache.desc = The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. 
pscanrules.retrievedfromcache.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanrules.retrievedfromcache.soln = Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.
pscanrules.retrievedfromcache.extrainfo = {0}
pscanrules.retrievedfromcache.extrainfo.http11ageheader = The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.

pscanrules.serverheader.rule.name=HTTP Server Response Header
pscanrules.serverheaderversioninfoleak.name=Server Leaks Version Information via "Server" HTTP Response Header Field
pscanrules.serverheaderversioninfoleak.desc=The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
pscanrules.serverheaderinfoleak.name=Server Leaks its Webserver Application via "Server" HTTP Response Header Field
pscanrules.serverheaderinfoleak.desc=The web/application server is leaking the application it uses as a webserver via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to. This information alone, i.e. without a version string, is not very dangerous for the security of a server, nevertheless this information in the response header field is almost always useless and thus just an obsolete attacking vector.
pscanrules.serverheaderinfoleak.general.refs=http\://httpd.apache.org/docs/current/mod/core.html\#servertokens\nhttp\://msdn.microsoft.com/en-us/library/ff648552.aspx\#ht_urlscan_007\nhttp\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanrules.serverheaderinfoleak.general.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.

pscanrules.stricttransportsecurity.rule.name=Strict-Transport-Security Header
pscanrules.stricttransportsecurity.name=Strict-Transport-Security Header Not Set
pscanrules.stricttransportsecurity.desc=HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
pscanrules.stricttransportsecurity.refs=https\://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps\://owasp.org/www-community/Security_Headers\nhttp\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp\://caniuse.com/stricttransportsecurity\nhttp\://tools.ietf.org/html/rfc6797
pscanrules.stricttransportsecurity.soln=Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
pscanrules.stricttransportsecurity.max.age.name=Strict-Transport-Security Disabled
pscanrules.stricttransportsecurity.max.age.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains the directive max-age\=0 which disables the control and instructs browsers to reset any previous HSTS related settings. See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanrules.stricttransportsecurity.max.age.refs=http\://tools.ietf.org/html/rfc6797\#section-6.2
pscanrules.stricttransportsecurity.max.age.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate max-age value.
pscanrules.stricttransportsecurity.compliance.multiple.header.name=Strict-Transport-Security Multiple Header Entries (Non-compliant with Spec)
pscanrules.stricttransportsecurity.compliance.multiple.header.desc=HTTP Strict Transport Security (HSTS) headers were found, a response with multiple HSTS header entries is not compliant with the specification (RFC 6797) and only the first HSTS header will be processed others will be ignored by user agents or the HSTS policy may be incorrectly applied.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanrules.stricttransportsecurity.compliance.multiple.header.refs=http\://tools.ietf.org/html/rfc6797\#section-8.1
pscanrules.stricttransportsecurity.compliance.multiple.header.soln=Ensure that only one component in your stack\: code, web server, application server, load balancer, etc. is configured to set or add a HTTP Strict-Transport-Security (HSTS) header.
pscanrules.stricttransportsecurity.plain.resp.name=Strict-Transport-Security Header on Plain HTTP Response
pscanrules.stricttransportsecurity.plain.resp.desc=A HTTP Strict Transport Security (HSTS) header was found, but HSTS headers are ignored on plain (non-HTTPS) responses.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanrules.stricttransportsecurity.plain.resp.refs=http\://tools.ietf.org/html/rfc6797\#section-8.1
pscanrules.stricttransportsecurity.plain.resp.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security for HTTPS responses.
pscanrules.stricttransportsecurity.compliance.max.age.missing.name=Strict-Transport-Security Missing Max-Age (Non-compliant with Spec)
pscanrules.stricttransportsecurity.compliance.max.age.missing.desc=A HTTP Strict Transport Security (HSTS) header was found, but it is missing the max-age directive (or the directive is missing a value). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanrules.stricttransportsecurity.compliance.max.age.missing.refs=http\://tools.ietf.org/html/rfc6797\#section-6.2
pscanrules.stricttransportsecurity.compliance.max.age.missing.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate max-age value.
pscanrules.stricttransportsecurity.compliance.meta.name=Strict-Transport-Security Defined via META (Non-compliant with Spec)
pscanrules.stricttransportsecurity.compliance.meta.desc=A HTTP Strict Transport Security (HSTS) META tag was found, defining HTTP Strict Transport Security (HSTS) via a META tag is explicitly not supported by the spec (RFC 6797).
pscanrules.stricttransportsecurity.compliance.meta.refs=http\://tools.ietf.org/html/rfc6797\#section-8.5
pscanrules.stricttransportsecurity.compliance.meta.soln=Do not attempt to set HTTP Strict Transport Security (HSTS) via a META tag.
pscanrules.stricttransportsecurity.compliance.max.age.malformed.name=Strict-Transport-Security Max-Age Malformed (Non-compliant with Spec)
pscanrules.stricttransportsecurity.compliance.max.age.malformed.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains quotes preceding the max-age directive (the max-age value can be quoted, but the directive itself cannot be). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanrules.stricttransportsecurity.compliance.max.age.malformed.refs=http\://tools.ietf.org/html/rfc6797\#section-6.1
pscanrules.stricttransportsecurity.compliance.max.age.malformed.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate format.
pscanrules.stricttransportsecurity.compliance.malformed.content.name=Strict-Transport-Security Malformed Content (Non-compliant with Spec)
pscanrules.stricttransportsecurity.compliance.malformed.content.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains some content that was not expected (perhaps curly quotes), the expectation is that the content be printable ASCII characters.
pscanrules.stricttransportsecurity.compliance.malformed.content.refs=http\://tools.ietf.org/html/rfc6797
pscanrules.stricttransportsecurity.compliance.malformed.content.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with appropriate content. 

pscanrules.timestampdisclosure.name=Zaman Damgas\u0131 Bilgilendirme
pscanrules.timestampdisclosure.desc=Bir zaman damgas\u0131 uygulama / web sunucusu taraf\u0131ndan if\u015fa edildi
pscanrules.timestampdisclosure.soln=El ile zaman damgas\u0131 veri duyarl\u0131 olmad\u0131\u011f\u0131n\u0131 ve veri s\u00f6m\u00fcr\u00fclebilir desenleri if\u015fa etmek toplanm\u0131\u015f olamaz teyit etmektedir.
pscanrules.timestampdisclosure.refs=http\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanrules.timestampdisclosure.extrainfo={0} , de\u011ferlendirir hangi\: {1}

pscanrules.usercontrolledcharset.name=User Controllable Charset
pscanrules.usercontrolledcharset.desc=This check looks at user-supplied input in query string parameters and POST data to identify where Content-Type or meta tag charset declarations might be user-controlled. Such charset declarations should always be declared by the application. If an attacker can control the response charset, they could manipulate the HTML to perform XSS or other attacks. For example, an attacker controlling the <meta> element charset value is able to declare UTF-7 and is also able to include enough user-controlled payload early in the HTML document to have it interpreted as UTF-7. By encoding their payload with UTF-7 the attacker is able to bypass any server-side XSS protections and embed script in the page.
pscanrules.usercontrolledcharset.refs=
pscanrules.usercontrolledcharset.soln=Force UTF-8 in all charset declarations. If user-input is required to decide a charset declaration, ensure that only an allowed list is used.
pscanrules.usercontrolledcharset.extrainfo=A(n) [{0}] tag [{1}] attribute\r\n\r\nThe user input found was\:\r\n{2}\={3}\r\n\r\nThe charset value it controlled was\:\r\n{4}

pscanrules.usercontrolledcookie.name=Cookie Poisoning
pscanrules.usercontrolledcookie.desc=This check looks at user-supplied input in query string parameters and POST data to identify where cookie parameters might be controlled. This is called a cookie poisoning attack, and becomes exploitable when an attacker can manipulate the cookie in various ways. In some cases this will not be exploitable, however, allowing URL parameters to set cookie values is generally considered a bug.
pscanrules.usercontrolledcookie.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-cookie
pscanrules.usercontrolledcookie.soln=Do not allow user input to control cookie names and values. If some query string parameters must be set in cookie values, be sure to filter out semicolon's that can serve as name/value pair delimiters.
pscanrules.usercontrolledcookie.extrainfo.get=An attacker may be able to poison cookie values through URL parameters.  Try injecting a semicolon to see if you can add cookie values (e.g. name\=controlledValue;name\=anotherValue;).\n\n
pscanrules.usercontrolledcookie.extrainfo.post=An attacker may be able to poison cookie values through POST parameters. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parameter. For example\:  http\://nottrusted.com/page?value\=maliciousInput.\r\n\r\n
pscanrules.usercontrolledcookie.extrainfo={0}This was identified at\:\r\n\r\n{1}\r\n\r\nUser-input was found in the following cookie\:\r\n{2}\r\n\r\nThe user input was\:\r\n{3}\={4}

pscanrules.usercontrolledjavascriptevent.name=User Controllable JavaScript Event (XSS)
pscanrules.usercontrolledjavascriptevent.desc=This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.            
pscanrules.usercontrolledjavascriptevent.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-javascript-event
pscanrules.usercontrolledjavascriptevent.soln=Validate all input and sanitize output it before writing to any Javascript on* events.
pscanrules.usercontrolledjavascriptevent.extrainfo=User-controlled javascript event(s) was found. Exploitability will need to be manually determined. The page at the following URL\:\r\n\r\n{0}"\r\n\r\nincludes the following Javascript event which may be attacker-controllable\: \r\n\r\nUser-input was found in the following data of an [{1}] event\:\r\n{2}\r\n\r\nThe user input was\:\r\n{3}

pscanrules.usercontrolledhtmlattributes.name=User Controllable HTML Element Attribute (Potential XSS)
pscanrules.usercontrolledhtmlattributes.desc=This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
pscanrules.usercontrolledhtmlattributes.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-html-attribute
pscanrules.usercontrolledhtmlattributes.soln=Validate all input and sanitize output it before writing to any HTML attributes.
pscanrules.usercontrolledhtmlattributes.extrainfo=User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL\:\r\n\r\n{0}\r\n\r\nappears to include user input in\: \r\n\r\na(n) [{1}] tag [{2}] attribute \r\n\r\nThe user input found was\:\r\n{3}\={4}\r\n\r\nThe user-controlled value was\:\r\n{5}

pscanrules.usercontrolledopenredirect.name=Open Redirect
pscanrules.usercontrolledopenredirect.desc=Open redirects are one of the OWASP 2010 Top Ten vulnerabilities. This check looks at user-supplied input in query string parameters and POST data to identify where open redirects might be possible. Open redirects occur when an application allows user-supplied input (e.g. http\://nottrusted.com) to control an offsite redirect. This is generally a pretty accurate way to find where 301 or 302 redirects could be exploited by spammers or phishing attacks.\n\nFor example an attacker could supply a user with the following link\: http\://example.com/example.php?url\=http\://malicious.example.com.
pscanrules.usercontrolledopenredirect.soln=To avoid the open redirect vulnerability, parameters of the application script/program must be validated before sending 302 HTTP code (redirect) to the client browser. Implement safe redirect functionality that only redirects to relative URI's, or a list of trusted domains
pscanrules.usercontrolledopenredirect.refs=https\://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\nhttps\://cwe.mitre.org/data/definitions/601.html
pscanrules.usercontrolledopenredirect.extrainfo.get=The 301 or 302 response to a request for the following URL appeared to contain user input in the location header\:\r\n\r\n
pscanrules.usercontrolledopenredirect.extrainfo.post=An open redirect controlled by POST parameters was detected. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parameter. For example\: http\://nottrusted.com/page?url\=http\://lookout.net.\r\n\r\nThe 301 or 302 response to a request for the following URL appeared to contain user input in the location header\:\r\n\r\n
pscanrules.usercontrolledopenredirect.extrainfo.common={0}\r\n\r\nThe user input found was\:\r\n\r\n{1}\={2}\r\n\r\nThe context was\:\r\n\r\n{3}

pscanrules.usernameidor.name = Kullan\u0131c\u0131 Ad\u0131 Anlams\u0131z Bulundu
pscanrules.usernameidor.desc = Yan\u0131tta bir kullan\u0131c\u0131 ad\u0131 sa\u011flanmas\u0131 ({0}) bulundu. Bu, uygulaman\u0131n G\u00fcvensiz Bir Do\u011frudan Nesne Ba\u015fvurusu (IDOR) g\u00fcvenlik a\u00e7\u0131\u011f\u0131 bulundu\u011funu g\u00f6sterebilir. Bu ke\u015ffin suiistimal edilip edilemeyece\u011fini g\u00f6rmek i\u00e7in manuel test gerekecek.
pscanrules.usernameidor.otherinfo = The hash was an {0}, with value\: {1} 
pscanrules.usernameidor.soln = Kullan\u0131c\u0131 veya oturum ba\u015f\u0131na dolayl\u0131 nesne ba\u015fvurular\u0131 kullan\u0131n (kullan\u0131m s\u0131ras\u0131nda ge\u00e7ici bir e\u015fleme olu\u015fturun). Veya do\u011frudan nesne ba\u015fvurusunun her kullan\u0131m\u0131n\u0131n, kullan\u0131c\u0131n\u0131n istenen nesne i\u00e7in yetkili oldu\u011fundan emin olmak i\u00e7in bir yetkilendirme denetimine ba\u011fland\u0131\u011f\u0131ndan emin olun. 
pscanrules.usernameidor.refs = https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References.html

pscanrules.xaspnetversion.name = X-AspNet-Version Response Header
pscanrules.xaspnetversion.desc =  Sunucu "X-AspNet-Version"/"X-AspNetMvc-Version" HTTP cevap ba\u015fl\u0131k alan\u0131 (alanlar\u0131) \u00fczerinden bilgi s\u0131zd\u0131r\u0131yor.
pscanrules.xaspnetversion.soln = Sunucuyu bu \u00fcstbilgileri d\u00f6d\u00fcrmeyecek \u015fekilde yap\u0131land\u0131r\u0131n.
pscanrules.xaspnetversion.extrainfo = Bir sald\u0131rgan, bilinen a\u00e7\u0131klardan faydalanmak i\u00e7in bu bilgiyi kullanabilir.
pscanrules.xaspnetversion.refs = https\://www.troyhunt.com/shhh-dont-let-your-response-headers/\nhttps\://blogs.msdn.microsoft.com/varunm/2013/04/23/remove-unwanted-http-response-headers/

pscanrules.xbackendserver.name=X-Backend-Server Header Information Leak
pscanrules.xbackendserver.desc=The server is leaking information pertaining to backend systems (such as hostnames or IP addresses). Armed with this information an attacker may be able to attack other systems or more directly/efficiently attack those systems.
pscanrules.xbackendserver.refs=
pscanrules.xbackendserver.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress X-Backend-Server headers.
pscanrules.xbackendserver.extrainfo=

pscanrules.xchromeloggerdata.name=X-ChromeLogger-Data (XCOLD) Header Information Leak
pscanrules.xchromeloggerdata.desc=The server is leaking information through the X-ChromeLogger-Data (or X-ChromePhp-Data) response header. The content of such headers can be customized by the developer, however it is not uncommon to find\: server file system locations, vhost declarations, etc.
pscanrules.xchromeloggerdata.refs=https\://craig.is/writing/chrome-logger
pscanrules.xchromeloggerdata.soln=Disable this functionality in Production when it might leak information that could be leveraged by an attacker. Alternatively ensure that use of the functionality is tied to a strong authorization check and only available to administrators or support personnel for troubleshooting purposes not general users.
pscanrules.xchromeloggerdata.otherinfo.msg=The following represents an attempt to base64 decode the value\:
pscanrules.xchromeloggerdata.otherinfo.error=Header value could not be base64 decoded\:

pscanrules.xdebugtoken.name=X-Debug-Token Bilgi S\u0131z\u0131nt\u0131s\u0131
pscanrules.xdebugtoken.desc=Yan\u0131t, X-Debug-Token veya X-Debug-Token-Link ba\u015fl\u0131\u011f\u0131 i\u00e7eriyordu. Bu, Symfony'nin Profiler'\u0131n hassas verilerin kullan\u0131mda oldu\u011funu ve g\u00f6sterildi\u011fini g\u00f6sterir.
pscanrules.xdebugtoken.otherinfo=http\://target_host/_profiler/token_value (\u00f6r\: http\://example.com/_profiler_/123ab4) formundaki bir URL'ye eri\u015ferek, profil sa\u011flay\u0131c\u0131ya ve daha fazla s\u0131zan bilgiye eri\u015fime sahip olabilirsiniz.
pscanrules.xdebugtoken.refs=https\://symfony.com/doc/current/cookbook/profiler/profiling_data.html\nhttps\://symfony.com/blog/new-in-symfony-2-4-quicker-access-to-the-profiler-when-working-on-an-api
pscanrules.xdebugtoken.soln=Limit access to Symfony's Profiler, either via authentication/authorization or limiting inclusion of the header to specific clients (by IP, etc.).

pscanrules.xpoweredbyheaderinfoleak.name=Sunucu "X-Powered-By" \u00fczerinden bilgiler Ka\u00e7aklar HTTP yan\u0131t \u00fcstbilgisi Field (ler)
pscanrules.xpoweredbyheaderinfoleak.desc=Web / uygulama sunucusu, bir veya daha fazla "X-Powered-By" HTTP cevap ba\u015fl\u0131klar\u0131n\u0131n yoluyla bilgi s\u0131zd\u0131r\u0131yor. B\u00f6yle bilgiye eri\u015fim, web uygulamas\u0131 ba\u011f\u0131ml\u0131 olan di\u011fer \u00e7er\u00e7eveler / bile\u015fenleri tan\u0131mlayan sald\u0131rganlar\u0131n kolayla\u015ft\u0131rabilir ve g\u00fcvenlik a\u00e7\u0131klar\u0131 gibi bile\u015fenler tabi olabilir.
pscanrules.xpoweredbyheaderinfoleak.refs=http\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx http\://www.troyhunt.com/2012/02/shhh-dont -Art\u0131k-your-tepki-headers.html
pscanrules.xpoweredbyheaderinfoleak.soln=Vb web sunucusu, uygulama sunucusu, y\u00fck dengeleyici, "X-Powered-By" ba\u015fl\u0131klar\u0131n\u0131 \u00f6nlemek i\u00e7in yap\u0131land\u0131r\u0131lm\u0131\u015f oldu\u011fundan emin olun.
pscanrules.xpoweredbyheaderinfoleak.extrainfo=
pscanrules.xpoweredbyheaderinfoleak.otherinfo.msg=The following X-Powered-By headers were also found\:\r\n

pscanrules.xcontenttypeoptions.name = X-Content-Type-Options Header Missing
pscanrules.xcontenttypeoptions.desc = The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
pscanrules.xcontenttypeoptions.otherinfo = This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.
pscanrules.xcontenttypeoptions.refs = http\://msdn.microsoft.com/en-us/library/ie/gg622941%28v\=vs.85%29.aspx\nhttps\://owasp.org/www-community/Security_Headers
pscanrules.xcontenttypeoptions.soln = Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.

pscanrules.applicationerrors.name = Application Error Disclosure
pscanrules.applicationerrors.desc = This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.
pscanrules.applicationerrors.soln = Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.

pscanrules.cachecontrol.name = Re-examine Cache-control Directives
pscanrules.cachecontrol.desc = The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.
pscanrules.cachecontrol.soln = For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".
pscanrules.cachecontrol.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html\#web-content-caching\nhttps\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps\://grayduck.mn/2021/09/13/cache-control-recommendations/

pscanrules.contenttypemissing.name = Content-Type Header Missing
pscanrules.contenttypemissing.name.empty = Content-Type Header Empty
pscanrules.contenttypemissing.desc = The Content-Type header was either missing or empty.
pscanrules.contenttypemissing.soln=Ensure each page is setting the specific and appropriate content-type value for the content being delivered.
pscanrules.contenttypemissing.refs=http\://msdn.microsoft.com/en-us/library/ie/gg622941%28v\=vs.85%29.aspx

pscanrules.cookiehttponly.name = Cookie No HttpOnly Flag
pscanrules.cookiehttponly.desc=A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
pscanrules.cookiehttponly.soln=Ensure that the HttpOnly flag is set for all cookies.
pscanrules.cookiehttponly.refs=https\://owasp.org/www-community/HttpOnly

pscanrules.cookiesecureflag.name = Cookie Without Secure Flag
pscanrules.cookiesecureflag.desc=A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
pscanrules.cookiesecureflag.soln=Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.
pscanrules.cookiesecureflag.refs=https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html

pscanrules.crossdomainscriptinclusion.name = Cross-Domain JavaScript Source File Inclusion
pscanrules.crossdomainscriptinclusion.desc=The page includes one or more script files from a third-party domain.
pscanrules.crossdomainscriptinclusion.soln=Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.

pscanrules.csp.name=CSP
pscanrules.csp.desc=Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanrules.csp.otherinfo.extended=\n\nThe directive(s)\: {0} are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.
pscanrules.csp.refs=http\://www.w3.org/TR/CSP2/\nhttp\://www.w3.org/TR/CSP/\nhttp\://caniuse.com/\#search\=content+security+policy\nhttp\://content-security-policy.com/\nhttps\://github.com/shapesecurity/salvation\nhttps\://developers.google.com/web/fundamentals/security/csp\#policy_applies_to_a_wide_variety_of_resources
pscanrules.csp.soln=Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.
pscanrules.csp.notices.name=Notices
pscanrules.csp.notices.errors=Hatalar\:
pscanrules.csp.notices.warnings=Warnings\:
pscanrules.csp.notices.infoitems=Info Items\:
pscanrules.csp.scriptsrc.unsafe.name=script-src unsafe-inline
pscanrules.csp.scriptsrc.unsafe.otherinfo=script-src includes unsafe-inline.
pscanrules.csp.scriptsrc.unsafe.hashes.name=script-src unsafe-hashes
pscanrules.csp.scriptsrc.unsafe.hashes.refs=https\://www.w3.org/TR/CSP3/\#unsafe-hashes-usage\nhttps\://content-security-policy.com/examples/allow-inline-script/
pscanrules.csp.scriptsrc.unsafe.hashes.otherinfo=script-src includes unsafe-hashes, an attacker will be able to use any of the code covered by such hashes.
pscanrules.csp.stylesrc.unsafe.name=style-src unsafe-inline
pscanrules.csp.stylesrc.unsafe.otherinfo=style-src includes unsafe-inline.
pscanrules.csp.stylesrc.unsafe.hashes.name=style-src unsafe-hashes
pscanrules.csp.stylesrc.unsafe.hashes.refs=https\://www.w3.org/TR/CSP3/\#unsafe-hashes-usage\nhttps\://content-security-policy.com/examples/allow-inline-style/
pscanrules.csp.stylesrc.unsafe.hashes.otherinfo=style-src includes unsafe-hashes, an attacker will be able to use any of the code covered by such hashes.
pscanrules.csp.wildcard.name=Wildcard Directive
pscanrules.csp.wildcard.otherinfo=The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined\: \n{0}
pscanrules.csp.xcsp.name=X-Content-Security-Policy
pscanrules.csp.xcsp.otherinfo=The header X-Content-Security-Policy was found on this response. While it is a good sign that CSP is implemented to some degree the policy specified in this header has not been analyzed by ZAP. To ensure full support by modern browsers ensure that the Content-Security-Policy header is defined and attached to responses.
pscanrules.csp.xwkcsp.name=X-WebKit-CSP
pscanrules.csp.xwkcsp.otherinfo=The header X-WebKit-CSP was found on this response. While it is a good sign that CSP is implemented to some degree the policy specified in this header has not been analyzed by ZAP. To ensure full support by modern browsers ensure that the Content-Security-Policy header is defined and attached to responses.
pscanrules.csp.malformed.name=Malformed Policy (Non-ASCII)
pscanrules.csp.malformed.otherinfo=A non-ASCII character was encountered while attempting to parse the policy, thus rendering it invalid (no further evaluation occurred). The following invalid characters were collected\: {0}

pscanrules.mixedcontent.name = Secure Pages Include Mixed Content
pscanrules.mixedcontent.name.inclscripts = Secure Pages Include Mixed Content (Including Scripts)
pscanrules.mixedcontent.desc=The page includes mixed content, that is content accessed via HTTP instead of HTTPS.
pscanrules.mixedcontent.soln=A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.
pscanrules.mixedcontent.refs=https\://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html

pscanrules.infoprivateaddressdisclosure.name = Private IP Disclosure
pscanrules.infoprivateaddressdisclosure.desc = A private IP (such as 10.x.x.x, 172.x.x.x, 192.168.x.x) or an Amazon EC2 private hostname (for example, ip-10-0-56-78) has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.
pscanrules.infoprivateaddressdisclosure.soln = Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP/PHP comment instead of HTML/JavaScript comment which can be seen by client browsers.
pscanrules.infoprivateaddressdisclosure.refs = https\://tools.ietf.org/html/rfc1918

pscanrules.infosessionidurl.name = Session ID in URL Rewrite
pscanrules.infosessionidurl.desc = URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.
pscanrules.infosessionidurl.soln = For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite.
pscanrules.infosessionidurl.refs = http\://seclists.org/lists/webappsec/2002/Oct-Dec/0111.html
pscanrules.infosessionidurl.referrer.alert = Referer Exposes Session ID
pscanrules.infosessionidurl.referrer.desc = A hyperlink pointing to another host name was found. As session ID URL rewrite is used, it may be disclosed in referer header to external hosts.
pscanrules.infosessionidurl.referrer.soln = This is a risk if the session ID is sensitive and the hyperlink refers to an external or third party host. For secure content, put session ID in secured session cookie.

pscanrules.viewstate.name=Viewstate
pscanrules.viewstate.soln=Sa\u011flanan bilgilerin gizli olmad\u0131\u011f\u0131n\u0131 do\u011frulay\u0131n.
pscanrules.viewstate.oldver.name=Eski Asp.Net S\u00fcr\u00fcm\u00fc Kullan\u0131mda
pscanrules.viewstate.oldver.desc=This website uses ASP.NET version 1.0 or 1.1.\n\n
pscanrules.viewstate.oldver.soln=Me\u015fgul yap\u0131n\u0131n halen Microsoft taraf\u0131ndan desteklendi\u011finden emin olun.
pscanrules.viewstate.nomac.unsure.name=MAC \u0130mzas\u0131 olmayan (G\u00fcvensiz) Viewstate
pscanrules.viewstate.nomac.unsure.desc=This website uses ASP.NET's Viewstate but maybe without any MAC.\n\n
pscanrules.viewstate.nomac.unsure.soln=Bu web sitesindeki t\u00fcm sayfalar i\u00e7in MAC ayarland\u0131\u011f\u0131ndan emin olun.
pscanrules.viewstate.nomac.unsure.refs=http\://msdn.microsoft.com/en-us/library/ff649308.aspx
pscanrules.viewstate.nomac.sure.name=MAC \u0130mzas\u0131 olmayan (G\u00fcvenli) Viewstate
pscanrules.viewstate.nomac.sure.desc=This website uses ASP.NET's Viewstate but without any MAC.\n\n
pscanrules.viewstate.nomac.sure.soln=Bu web sitesindeki t\u00fcm sayfalar i\u00e7in MAC ayarland\u0131\u011f\u0131ndan emin olun.
pscanrules.viewstate.nomac.sure.refs=http\://msdn.microsoft.com/en-us/library/ff649308.aspx
pscanrules.viewstate.split.name=Viewstate'\u0131 Kullan\u0131mda Ay\u0131r
pscanrules.viewstate.split.desc=This website uses ASP.NET's Viewstate and its value is split into several chunks.\n
pscanrules.viewstate.split.soln=Hi\u00e7biri - bu varsay\u0131lan ayar olmad\u0131\u011f\u0131 i\u00e7in sunucuyu y\u00f6neten ki\u015filer yap\u0131land\u0131rmay\u0131 de\u011fi\u015ftirmi\u015f olabilir.
pscanrules.viewstate.content.email.name=Viewstate'te Bulunan epostalar
pscanrules.viewstate.content.email.desc=A\u015fa\u011f\u0131daki e-postalar\u0131n g\u00f6r\u00fcn\u00fc\u015f alan\u0131nda seri hale getirilmi\u015f oldu\u011fu bulundu\:
pscanrules.viewstate.content.email.pattern.source=Eposta kal\u0131b\u0131 - http\://www.regular-expressions.info/regexbuddy/email.htm
pscanrules.viewstate.content.ip.name=Viewstate i\u00e7inde Bulunan Potansiyel IP Adresleri
pscanrules.viewstate.content.ip.desc=G\u00f6r\u00fcn\u00fcm durumu alan\u0131nda a\u015fa\u011f\u0131daki potansiyel IP adresleri seri hale getirilmi\u015ftir\:
pscanrules.viewstate.content.ip.pattern.source=IP kal\u0131b\u0131 - http\://www.regular-expressions.info/examples.html

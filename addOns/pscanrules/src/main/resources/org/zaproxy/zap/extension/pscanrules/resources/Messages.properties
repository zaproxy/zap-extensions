# This file defines the default (English) variants of all of the internationalised messages

pscanrules.desc = Passive Scan Rules

pscanrules.payloader.desc=Provides support for custom payloads in scan rules.
pscanrules.payloader.name=Passive Scan Rules Release Custom Payloads

pscanrules.authenticationcredentialscaptured.name=Authentication Credentials Captured
pscanrules.authenticationcredentialscaptured.desc=An insecure authentication mechanism is in use. This allows an attacker on the network access to the userid and password of the authenticated user. For Basic Authentication, the attacker must merely monitor the network traffic until a Basic Authentication request is received, and then base64 decode the username and password.  For Digest Authentication, the attacker has access to the username, and possibly also the password, if the hash (including a nonce) can be successfully cracked, or if a Man-In-The-Middle attack is mounted.\nThe attacker eavesdrops on the network until an authentication has completed.
pscanrules.authenticationcredentialscaptured.soln=Use HTTPS, and use a secure authentication mechanism that does not transmit the userid or password in an un-encrypted fashion.  In particular, avoid use of the Basic Authentication mechanism, since this trivial obfuscation mechanism is easily broken. 
pscanrules.authenticationcredentialscaptured.refs=https://www.owasp.org/index.php/Top_10_2010-A3\nhttps://www.owasp.org/index.php/Testing_for_Brute_Force_%28OWASP-AT-004%29\nhttps://www.owasp.org/index.php/Category:Authentication_Vulnerability\nhttp://en.wikipedia.org/wiki/Digest_access_authentication
pscanrules.authenticationcredentialscaptured.alert.basicauth.extrainfo=[{0}] [{1}] uses insecure authentication mechanism [{2}], revealing username [{3}] and password [{4}].
pscanrules.authenticationcredentialscaptured.alert.digestauth.extrainfo=[{0}] [{1}] uses insecure authentication mechanism [{2}], revealing username [{3}] and additional information [{4}].

pscanrules.charsetmismatch.variant.no_mismatch_metacontenttype_missing=(Meta Content-Type Charset Missing)
pscanrules.charsetmismatch.name=Charset Mismatch
pscanrules.charsetmismatch.variant.header_metacontentype_mismatch=(Header Versus Meta Content-Type Charset)
pscanrules.charsetmismatch.variant.header_metacharset_mismatch=(Header Versus Meta Charset)
pscanrules.charsetmismatch.variant.metacontenttype_metacharset_mismatch=(Meta Charset Versus Meta Content-Type Charset)
pscanrules.charsetmismatch.desc=This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there's a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content's correct character set.\n\nAn attacker could manipulate content on the page to be interpreted in an encoding of their choice. For example, if an attacker can control content at the beginning of the page, they could inject script using UTF-7 encoded text and manipulate some browsers into interpreting that text.
pscanrules.charsetmismatch.soln=Force UTF-8 for all text content in both the HTTP header and meta tags in HTML or encoding declarations in XML.
pscanrules.charsetmismatch.refs=http://code.google.com/p/browsersec/wiki/Part2#Character_set_handling_and_detection
pscanrules.charsetmismatch.extrainfo.html.no_mismatch_metacontenttype_missing=Charset is defined only by META charset, older clients that expect character set to be defined by META content-type may not correctly display this content.
pscanrules.charsetmismatch.extrainfo.html.header_metacontentype_mismatch=There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [{0}] and [{1}] do not match.
pscanrules.charsetmismatch.extrainfo.html.header_metacharset_mismatch=There was a charset mismatch between the HTTP Header and the META charset encoding declaration: [{0}] and [{1}] do not match.
pscanrules.charsetmismatch.extrainfo.html.metacontenttype_metacharset_mismatch=There was a charset mismatch between the META charset and the META content-type encoding declaration: [{0}] and [{1}] do not match.
pscanrules.charsetmismatch.extrainfo.xml=There was a charset mismatch between the HTTP Header and the XML encoding declaration: [{0}] and [{1}] do not match.

pscanrules.cookiesamesitescanner.name = Cookie Without SameSite Attribute
pscanrules.cookiesamesitescanner.desc=A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. \
The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
pscanrules.cookiesamesitescanner.badval=A cookie has been set with an invalid SameSite attribute value, which means that the cookie can be sent as a result of a 'cross-site' request. \
The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
pscanrules.cookiesamesitescanner.soln=Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.
pscanrules.cookiesamesitescanner.refs=https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site

pscanrules.crossdomain.name=Cross-Domain Misconfiguration
pscanrules.crossdomain.desc=Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server
pscanrules.crossdomain.soln=Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.
pscanrules.crossdomain.refs=http://www.hpenterprisesecurity.com/vulncat/en/vulncat/vb/html5_overly_permissive_cors_policy.html
pscanrules.crossdomain.extrainfo=The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.

pscanrules.cookielooselyscoped.name=Loosely Scoped Cookie
pscanrules.cookielooselyscoped.desc=Cookies can be scoped by domain or path. This check is only concerned with domain scope.The domain scope applied to a cookie determines which domains can access it. For example, a cookie can be scoped strictly to a subdomain e.g. www.nottrusted.com, or loosely scoped to a parent domain e.g. nottrusted.com. In the latter case, any subdomain of nottrusted.com can access the cookie. Loosely scoped cookies are common in mega-applications like google.com and live.com. Cookies set from a subdomain like app.foo.bar are transmitted only to that domain by the browser. However, cookies scoped to a parent-level domain may be transmitted to the parent, or any subdomain of the parent.
pscanrules.cookielooselyscoped.soln=Always scope cookies to a FQDN (Fully Qualified Domain Name).
pscanrules.cookielooselyscoped.refs=https://tools.ietf.org/html/rfc6265#section-4.1\nhttps://www.owasp.org/index.php/Testing_for_cookies_attributes_(OTG-SESS-002)\nhttp://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_cookies
pscanrules.cookielooselyscoped.extrainfo=The origin domain used for comparison was: \r\n{0}\r\n{1}
pscanrules.cookielooselyscoped.extrainfo.cookie={0}\r\n

pscanrules.headerxssprotectionscanner.name = Web Browser XSS Protection Not Enabled
pscanrules.headerxssprotectionscanner.desc = Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
pscanrules.headerxssprotectionscanner.refs = https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/
pscanrules.headerxssprotectionscanner.extrainfo = The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
pscanrules.headerxssprotectionscanner.soln = Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.

pscanrules.informationdisclosuredebugerrors.name=Information Disclosure - Debug Error Messages
pscanrules.informationdisclosuredebugerrors.desc=The response appeared to contain common error messages returned by platforms such as ASP.NET, and Web-servers such as IIS and Apache. You can configure the list of common debug messages.
pscanrules.informationdisclosuredebugerrors.soln=Disable debugging messages before pushing to production.

pscanrules.informationdisclosureinurl.name=Information Disclosure - Sensitive Information in URL
pscanrules.informationdisclosureinurl.desc=The request appeared to contain sensitive information leaked in the URL. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.
pscanrules.informationdisclosureinurl.otherinfo.sensitiveinfo=The URL contains potentially sensitive information.
pscanrules.informationdisclosureinurl.otherinfo.cc=The URL appears to contain credit card information.
pscanrules.informationdisclosureinurl.otherinfo.email=The URL contains email address(es).
pscanrules.informationdisclosureinurl.otherinfo.ssn=The URL appears to contain US Social Security Number(s)
pscanrules.informationdisclosureinurl.soln=Do not pass sensitive information in URIs.

pscanrules.informationdisclosurereferrerscanner.name=Information Disclosure - Sensitive Information in HTTP Referrer Header
pscanrules.informationdisclosurereferrerscanner.desc=The HTTP header may have leaked a potentially sensitive parameter to another domain. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.
pscanrules.informationdisclosurereferrerscanner.otherinfo.sensitiveinfo=The URL in the HTTP referrer header field appears to contain sensitive information.
pscanrules.informationdisclosurereferrerscanner.otherinfo.cc=The URL in the HTTP referrer header field appears to contain credit card information.
pscanrules.informationdisclosurereferrerscanner.otherinfo.email=The URL in the HTTP referrer header field contains email address(es).
pscanrules.informationdisclosurereferrerscanner.otherinfo.ssn=The URL in the HTTP referrer header field appears to contain US Social Security Number(s).
pscanrules.informationdisclosurereferrerscanner.soln=Do not pass sensitive information in URIs.

pscanrules.informationdisclosuresuspiciouscomments.name=Information Disclosure - Suspicious Comments
pscanrules.informationdisclosuresuspiciouscomments.desc=The response appears to contain suspicious comments which may help an attacker.
pscanrules.informationdisclosuresuspiciouscomments.soln=Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.

pscanrules.insecureauthentication.name=Weak Authentication Method
pscanrules.insecureauthentication.desc=HTTP basic or digest authentication has been used over an unsecured connection. The credentials can be read and then reused by someone with access to the network.
pscanrules.insecureauthentication.soln=Protect the connection using HTTPS or use a stronger authentication mechanism
pscanrules.insecureauthentication.refs=www.owasp.org/index.php/Category:Authentication_Vulnerability

pscanrules.insecurejsfviewstate.name=Insecure JSF ViewState
pscanrules.insecurejsfviewstate.desc=The response at the following URL contains a ViewState value that has no cryptographic protections.
pscanrules.insecurejsfviewstate.soln=Secure VIEWSTATE with a MAC specific to your environment
pscanrules.insecurejsfviewstate.refs=https://www.trustwave.com/spiderlabs/advisories/TWSL2010-001.txt
pscanrules.insecurejsfviewstate.extrainfo=JSF ViewState [{0}] is insecure

pscanrules.noanticsrftokens.name=Absence of Anti-CSRF Tokens
pscanrules.noanticsrftokens.desc=No Anti-CSRF tokens were found in a HTML submission form.
pscanrules.noanticsrftokens.alert.extrainfo=No known Anti-CSRF token {0} was found in the following HTML form: {1}.
pscanrules.noanticsrftokens.extrainfo.annotation=This is an informational alert as the form has a security annotation indicating that it does not need an anti-CSRF Token. This should be tested manually to ensure the annotation is correct.

pscanrules.timestampdisclosure.name=Timestamp Disclosure
pscanrules.timestampdisclosure.desc=A timestamp was disclosed by the application/web server
pscanrules.timestampdisclosure.soln=Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.
pscanrules.timestampdisclosure.refs=https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanrules.timestampdisclosure.extrainfo={0}, which evaluates to: {1}

pscanrules.usernameidor.name = Username Hash Found
pscanrules.usernameidor.desc = A hash of a username ({0}) was found in the response. This may indicate that the application is subject to an Insecure Direct Object Reference (IDOR) vulnerability. Manual testing will be required to see if this discovery can be abused.
pscanrules.usernameidor.otherinfo = The hash was an {0}, with value: {1} 
pscanrules.usernameidor.soln = Use per user or session indirect object references (create a temporary mapping at time of use). Or, ensure that each use of a direct object reference is tied to an authorization check to ensure the user is authorized for the requested object. 
pscanrules.usernameidor.refs = https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References\nhttps://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004)

pscanrules.xaspnetversioncanner.name = X-AspNet-Version Response Header Scanner
pscanrules.xaspnetversioncanner.desc =  Server leaks information via "X-AspNet-Version"/"X-AspNetMvc-Version" HTTP response header field(s).
pscanrules.xaspnetversioncanner.soln = Configure the server so it will not return those headers.
pscanrules.xaspnetversioncanner.extrainfo = An attacker can use this information to exploit known vulnerabilities.
pscanrules.xaspnetversioncanner.refs = https://www.troyhunt.com/shhh-dont-let-your-response-headers/\nhttps://blogs.msdn.microsoft.com/varunm/2013/04/23/remove-unwanted-http-response-headers/

pscanrules.xdebugtoken.name=X-Debug-Token Information Leak
pscanrules.xdebugtoken.desc=The response contained an X-Debug-Token or X-Debug-Token-Link header. This indicates that Symfony's Profiler may be in use and exposing sensitive data.
pscanrules.xdebugtoken.otherinfo=By accessing a URL in the form http://target_host/_profiler/token_value (i.e.: http://example.com/_profiler_/123ab4), you may gain access to the profiler and further leaked information.
pscanrules.xdebugtoken.refs=https://symfony.com/doc/current/cookbook/profiler/profiling_data.html\nhttps://symfony.com/blog/new-in-symfony-2-4-quicker-access-to-the-profiler-when-working-on-an-api
pscanrules.xdebugtoken.soln=Limit access to Symfony's Profiler, either via authentication/authorization or limiting inclusion of the header to specific clients (by IP, etc.).

pscanrules.xpoweredbyheaderinfoleak.name=Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)
pscanrules.xpoweredbyheaderinfoleak.desc=The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
pscanrules.xpoweredbyheaderinfoleak.refs=http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanrules.xpoweredbyheaderinfoleak.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
pscanrules.xpoweredbyheaderinfoleak.extrainfo=
pscanrules.xpoweredbyheaderinfoleak.otherinfo.msg=The following X-Powered-By headers were also found:\r\n

pscanrules.xframeoptionsscanner.name = X-Frame-Options Header Scanner
pscanrules.xframeoptionsscanner.incInCsp = The Content-Security-Policy does include a 'frame-ancestors' element which takes precedence over the X-Frame-Options header, which is why this has been raised with a LOW risk.  
pscanrules.xframeoptionsscanner.missing.name = X-Frame-Options Header Not Set
pscanrules.xframeoptionsscanner.missing.desc = X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.
pscanrules.xframeoptionsscanner.missing.refs = http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
pscanrules.xframeoptionsscanner.missing.soln = Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
pscanrules.xframeoptionsscanner.multiple.header.name = Multiple X-Frame-Options Header Entries
pscanrules.xframeoptionsscanner.multiple.header.desc = X-Frame-Options (XFO) headers were found, a response with multiple XFO header entries may not be predictably treated by all user-agents.
pscanrules.xframeoptionsscanner.multiple.header.refs = https://tools.ietf.org/html/rfc7034
pscanrules.xframeoptionsscanner.multiple.header.soln = Ensure only a single X-Frame-Options header is present in the response.
pscanrules.xframeoptionsscanner.compliance.meta.name = X-Frame-Options Defined via META (Non-compliant with Spec)
pscanrules.xframeoptionsscanner.compliance.meta.desc = An X-Frame-Options (XFO) META tag was found, defining XFO via a META tag is explicitly not supported by the spec (RFC 7034).
pscanrules.xframeoptionsscanner.compliance.meta.refs = https://tools.ietf.org/html/rfc7034#section-4
pscanrules.xframeoptionsscanner.compliance.meta.soln = Ensure X-Frame-Options is set via a response header field.
pscanrules.xframeoptionsscanner.compliance.malformed.setting.name = X-Frame-Options Setting Malformed
pscanrules.xframeoptionsscanner.compliance.malformed.setting.desc = An X-Frame-Options header was present in the response but the value was not correctly set.
pscanrules.xframeoptionsscanner.compliance.malformed.setting.refs = https://tools.ietf.org/html/rfc7034#section-2.1
pscanrules.xframeoptionsscanner.compliance.malformed.setting.soln = Ensure a valid setting is used on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).

pscanrules.xcontenttypeoptionsscanner.name = X-Content-Type-Options Header Missing
pscanrules.xcontenttypeoptionsscanner.desc = The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
pscanrules.xcontenttypeoptionsscanner.otherinfo = This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scanner will not alert on client or server error responses.
pscanrules.xcontenttypeoptionsscanner.refs = http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers
pscanrules.xcontenttypeoptionsscanner.soln = Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.

pscanrules.applicationerrorscanner.name = Application Error Disclosure
pscanrules.applicationerrorscanner.desc = This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.
pscanrules.applicationerrorscanner.soln = Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.

pscanrules.cachecontrolscanner.name = Incomplete or No Cache-control and Pragma HTTP Header Set
pscanrules.cachecontrolscanner.desc = The cache-control and pragma HTTP header have not been set properly or are missing allowing the browser and proxies to cache content.
pscanrules.cachecontrolscanner.soln = Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate; and that the pragma HTTP header is set with no-cache.
pscanrules.cachecontrolscanner.refs = https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching

pscanrules.contenttypemissingscanner.name = Content-Type Header Missing
pscanrules.contenttypemissingscanner.name.empty = Content-Type Header Empty
pscanrules.contenttypemissingscanner.desc = The Content-Type header was either missing or empty.
pscanrules.contenttypemissingscanner.soln=Ensure each page is setting the specific and appropriate content-type value for the content being delivered.
pscanrules.contenttypemissingscanner.refs=http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx

pscanrules.cookiehttponlyscanner.name = Cookie No HttpOnly Flag
pscanrules.cookiehttponlyscanner.desc=A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
pscanrules.cookiehttponlyscanner.soln=Ensure that the HttpOnly flag is set for all cookies.
pscanrules.cookiehttponlyscanner.refs=http://www.owasp.org/index.php/HttpOnly

pscanrules.cookiesecureflagscanner.name = Cookie Without Secure Flag
pscanrules.cookiesecureflagscanner.desc=A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
pscanrules.cookiesecureflagscanner.soln=Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.
pscanrules.cookiesecureflagscanner.refs=http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)

pscanrules.crossdomainscriptinclusionscanner.name = Cross-Domain JavaScript Source File Inclusion
pscanrules.crossdomainscriptinclusionscanner.desc=The page includes one or more script files from a third-party domain.
pscanrules.crossdomainscriptinclusionscanner.soln=Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.

pscanrules.cspscanner.name=CSP Scanner
pscanrules.cspscanner.desc=Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanrules.cspscanner.refs=http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation
pscanrules.cspscanner.soln=Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.
pscanrules.cspscanner.notices.name=Notices
pscanrules.cspscanner.notices.errors=Errors:
pscanrules.cspscanner.notices.warnings=Warnings:
pscanrules.cspscanner.notices.infoitems=Info Items:
pscanrules.cspscanner.scriptsrc.unsafe.name=script-src unsafe-inline
pscanrules.cspscanner.scriptsrc.unsafe.desc=script-src includes unsafe-inline.
pscanrules.cspscanner.stylesrc.unsafe.name=style-src unsafe-inline
pscanrules.cspscanner.stylesrc.unsafe.desc=style-src includes unsafe-inline.
pscanrules.cspscanner.wildcard.name=Wildcard Directive
pscanrules.cspscanner.wildcard.desc=The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \n{0}
pscanrules.cspscanner.xcsp.name=X-Content-Security-Policy
pscanrules.cspscanner.xcsp.desc=The header X-Content-Security-Policy was found on this response. While it is a good sign that CSP is implemented to some degree the policy specified in this header has not been analyzed by ZAP. To ensure full support by modern browsers ensure that the Content-Security-Policy header is defined and attached to responses.
pscanrules.cspscanner.xwkcsp.name=X-WebKit-CSP
pscanrules.cspscanner.xwkcsp.desc=The header X-WebKit-CSP was found on this response. While it is a good sign that CSP is implemented to some degree the policy specified in this header has not been analyzed by ZAP. To ensure full support by modern browsers ensure that the Content-Security-Policy header is defined and attached to responses.

pscanrules.mixedcontentscanner.name = Secure Pages Include Mixed Content
pscanrules.mixedcontentscanner.name.inclscripts = Secure Pages Include Mixed Content (Including Scripts)
pscanrules.mixedcontentscanner.desc=The page includes mixed content, that is content accessed via HTTP instead of HTTPS.
pscanrules.mixedcontentscanner.soln=A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.
pscanrules.mixedcontentscanner.refs=https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet

pscanrules.testinfoprivateaddressdisclosure.name = Private IP Disclosure
pscanrules.testinfoprivateaddressdisclosure.desc = A private IP (such as 10.x.x.x, 172.x.x.x, 192.168.x.x) or an Amazon EC2 private hostname (for example, ip-10-0-56-78) has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.
pscanrules.testinfoprivateaddressdisclosure.soln = Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP/PHP comment instead of HTML/JavaScript comment which can be seen by client browsers.
pscanrules.testinfoprivateaddressdisclosure.refs = https://tools.ietf.org/html/rfc1918

pscanrules.testinfosessionidurl.name = Session ID in URL Rewrite
pscanrules.testinfosessionidurl.desc = URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.
pscanrules.testinfosessionidurl.soln = For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite.
pscanrules.testinfosessionidurl.refs = http://seclists.org/lists/webappsec/2002/Oct-Dec/0111.html
pscanrules.testinfosessionidurl.referrer.alert = Referer Exposes Session ID
pscanrules.testinfosessionidurl.referrer.desc = A hyperlink pointing to another host name was found. As session ID URL rewrite is used, it may be disclosed in referer header to external hosts.
pscanrules.testinfosessionidurl.referrer.soln = This is a risk if the session ID is sensitive and the hyperlink refers to an external or third party host. For secure content, put session ID in secured session cookie.

pscanrules.viewstatescanner.name=Viewstate Scanner
pscanrules.viewstatescanner.soln=Verify the provided information isn't confidential.
pscanrules.viewstatescanner.oldver.name=Old Asp.Net Version in Use
pscanrules.viewstatescanner.oldver.desc=*** EXPERIMENTAL ***\nThis website uses ASP.NET version 1.0 or 1.1.\n\n
pscanrules.viewstatescanner.oldver.soln=Ensure the engaged framework is still supported by Microsoft.
pscanrules.viewstatescanner.nomac.unsure.name=Viewstate without MAC Signature (Unsure)
pscanrules.viewstatescanner.nomac.unsure.desc=*** EXPERIMENTAL ***\nThis website uses ASP.NET's Viewstate but maybe without any MAC.\n\n
pscanrules.viewstatescanner.nomac.unsure.soln=Ensure the MAC is set for all pages on this website.
pscanrules.viewstatescanner.nomac.unsure.refs=http://msdn.microsoft.com/en-us/library/ff649308.aspx
pscanrules.viewstatescanner.nomac.sure.name=Viewstate without MAC Signature (Sure)
pscanrules.viewstatescanner.nomac.sure.desc=*** EXPERIMENTAL ***\nThis website uses ASP.NET's Viewstate but without any MAC.\n\n
pscanrules.viewstatescanner.nomac.sure.soln=Ensure the MAC is set for all pages on this website.
pscanrules.viewstatescanner.nomac.sure.refs=http://msdn.microsoft.com/en-us/library/ff649308.aspx
pscanrules.viewstatescanner.split.name=Split Viewstate in Use
pscanrules.viewstatescanner.split.desc=*** EXPERIMENTAL ***\nThis website uses ASP.NET's Viewstate and its value is split into several chunks.\n
pscanrules.viewstatescanner.split.soln=None - the guys running the server may have tuned the configuration as this isn't the default setting.
pscanrules.viewstatescanner.content.email.name=Emails Found in the Viewstate
pscanrules.viewstatescanner.content.email.desc=The following emails were found being serialized in the viewstate field:
pscanrules.viewstatescanner.content.email.pattern.source=Email pattern - http://www.regular-expressions.info/regexbuddy/email.html
pscanrules.viewstatescanner.content.ip.name=Potential IP Addresses Found in the Viewstate
pscanrules.viewstatescanner.content.ip.desc=The following potential IP addresses were found being serialized in the viewstate field:
pscanrules.viewstatescanner.content.ip.pattern.source=IP pattern - http://www.regular-expressions.info/examples.html

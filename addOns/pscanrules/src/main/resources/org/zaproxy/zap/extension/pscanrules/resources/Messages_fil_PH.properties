pscanrules.desc = Mga Passive na Panuntunan ng Scan

pscanrules.payloader.desc=Provides support for custom payloads in scan rules.
pscanrules.payloader.name=Passive Scan Rules Release Custom Payloads

pscanrules.authenticationcredentialscaptured.name=Nakuha ang mga Kredensyal ng Pagkakakilanlan
pscanrules.authenticationcredentialscaptured.desc=An insecure authentication mechanism is in use. This allows an attacker on the network access to the userid and password of the authenticated user. For Basic Authentication, the attacker must merely monitor the network traffic until a Basic Authentication request is received, and then base64 decode the username and password.  For Digest Authentication, the attacker has access to the username, and possibly also the password, if the hash (including a nonce) can be successfully cracked, or if a Man-In-The-Middle attack is mounted.\nThe attacker eavesdrops on the network until an authentication has completed.
pscanrules.authenticationcredentialscaptured.soln=Gumamit ng HTTPS, at gumamit ng secure na mekanismo ng pagpapatunay na hindi nagpapadala ng userid o password sa isang naka-naka-encrypt na paraan. Sa partikular, iwasan ang paggamit ng mekanismo ng Basic Authentication, dahil ang napakaliit na mekanismo ng pagkapaso na ito ay madaling sira. 
pscanrules.authenticationcredentialscaptured.refs=https\://owasp.org/www-community/attacks/Brute_force_attack\nhttp\://en.wikipedia.org/wiki/Digest_access_authentication
pscanrules.authenticationcredentialscaptured.alert.basicauth.extrainfo=[{0}] [{1}] gumagamit ng insecure authentication mechanism [{2}], inilalantad ang username [{3}] at password [{4}].
pscanrules.authenticationcredentialscaptured.alert.digestauth.extrainfo=[{0}] [{1}] gumagamit ng insecure authentication mechanism [{2}], inilalantad ang username [{3}] at karagdagang impormasyon [{4}].

pscanrules.charsetmismatch.variant.no_mismatch_metacontenttype_missing=(Ang Meta na nilalaman-uri ng Charset ay nawawala)
pscanrules.charsetmismatch.name=Charset Mismatch
pscanrules.charsetmismatch.variant.header_metacontentype_mismatch=(Header Kumpara sa Meta Nilalaman-Uri ng Charset)
pscanrules.charsetmismatch.variant.header_metacharset_mismatch=(Header Kumpara sa Meta Charset)
pscanrules.charsetmismatch.variant.metacontenttype_metacharset_mismatch=(Meta Charset Kumpara sa Meta Nilalaman-Uri ng Charset)
pscanrules.charsetmismatch.desc=This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there's a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content's correct character set.\n\nAn attacker could manipulate content on the page to be interpreted in an encoding of their choice. For example, if an attacker can control content at the beginning of the page, they could inject script using UTF-7 encoded text and manipulate some browsers into interpreting that text.
pscanrules.charsetmismatch.soln=Puwersa UTF-8 para sa lahat ng nilalaman ng teksto sa parehong HTTP header at mga meta tag sa HTML o mga deklarasyon ng pag-encode sa XML.
pscanrules.charsetmismatch.refs=http\://code.google.com/p/browsersec/wiki/Part2\#Character_set_handling_and_detection
pscanrules.charsetmismatch.extrainfo.html.no_mismatch_metacontenttype_missing=Ang Charset ay tinukoy lamang ng META charset, mga mas lumang mga kliyente na umaasa na ang character set na tinukoy ng META nilalaman-uri ay hindi maaaring maipakita nang tama ang nilalamang ito.
pscanrules.charsetmismatch.extrainfo.html.header_metacontentype_mismatch=Nagkaroon ng mismatch ng charset sa pagitan ng HTTP Header at ang mga deklarasyon ng encoding na nilalaman ng META\: Hindi tumutugma ang [{0}] at [{1}].
pscanrules.charsetmismatch.extrainfo.html.header_metacharset_mismatch=Nagkaroon ng mismatch na charset sa pagitan ng HTTP Header at ang deklarasyon ng encoding ng META na\: [{0}] at [{1}] ay hindi tumutugma.
pscanrules.charsetmismatch.extrainfo.html.metacontenttype_metacharset_mismatch=Nagkaroon ng mismatch ng charset sa pagitan ng META charset at ang deklarasyon ng encoding na nilalaman ng META\: Hindi tumutugma ang [{0}].
pscanrules.charsetmismatch.extrainfo.xml=Nagkaroon ng isang mismatch na charset sa pagitan ng HTTP Header at ang deklarasyon ng encoding ng XML\: hindi tumutugma sa [{0}] at [{1}].

pscanrules.cookiesamesite.name = Cookie without SameSite Attribute
pscanrules.cookiesamesite.none.name = Cookie with SameSite Attribute None
pscanrules.cookiesamesite.desc=Isang cookie ang naitakda nang walang SameSite na katangian, na nangangahulugang ang cookie ay maaaring maipadala bilang resulta ng isang 'cross-site' na kahilingan.\nAng katangian ng SameSite ay isang epektibong panukalang counter sa pag-request ng cross-site na palsipikado, pagsasama ng cross-site script, at mga pag-atake sa pag-time.
pscanrules.cookiesamesite.none.desc=A cookie has been set with its SameSite attribute set to "none", which means that the cookie can be sent as a result of a 'cross-site' request. \nThe SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
pscanrules.cookiesamesite.badval.name = Cookie with Invalid SameSite Attribute
pscanrules.cookiesamesite.badval.desc=Ang cookie ay naitakda na may di-wastong halaga ng attribute na SameSite, na nangangahulugang maaaring ipadala ang cookie bilang resulta ng isang 'cross-site' na kahilingan.\nAng katangian ng SameSite ay isang epektibong panukalang counter sa pag-request ng cross-site na palsipikado, pagsasama ng cross-site script, at mga pag-atake sa tamang oras.
pscanrules.cookiesamesite.soln=Tiyakin na ang SameSite na katangian ay naka-set sa alinman sa 'lax' o sa isip 'mahigpit' para sa lahat ng cookies.
pscanrules.cookiesamesite.refs=https\://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site

pscanrules.crossdomain.name=Pag-configure ng Cross-Domain
pscanrules.crossdomain.desc=Maaaring posible ang pag-load ng data ng browser ng web, dahil sa misconfiguration ng Cross Origin Resource Sharing (CORS) sa web server
pscanrules.crossdomain.soln=Tiyakin na ang sensitibong datos ay hindi magagamit sa isang hindi awtorisadong paraan (gamit ang IP address na white-listing, halimbawa).\nI-configure ang header ng HTTP na "Access-Control-Allow-Origin" sa isang mas mahigpit na hanay ng mga domain, o alisin ang lahat ng mga header ng CORS, upang payagan ang web browser na ipatupad ang Parehong Patakaran sa Pinagmulan (SOP) sa mas mahigpit na paraan.
pscanrules.crossdomain.refs=http\://www.hpenterprisesecurity.com/vulncat/en/vulncat/vb/html5_overly_permissive_cors_policy.html
pscanrules.crossdomain.extrainfo=Pinapayagan ng maling pag-configure ng CORS sa web server ang mga hiling na cross-domain na nabasa mula sa mga arbitrary na mga domain ng ikatlong partido, gamit ang mga hindi awtorisadong API sa domain na ito. Gayunpaman, hindi pinapahintulutan ng mga pagpapatupad ng web browser ang mga arbitrary na third party na basahin ang tugon mula sa napatotohanan na mga API. Binabawasan nito ang panganib. Ang misconfiguration na ito ay maaaring gamitin ng isang magsasalakay upang ma-access ang data na magagamit sa isang unauthenticated paraan, ngunit na gumagamit ng ilang iba pang paraan ng seguridad, tulad ng IP address white-listing.

pscanrules.cookielooselyscoped.name=Maluwag na Scoped Cookie
pscanrules.cookielooselyscoped.desc=Ang mga cookie ay maaaring ma-scoped ng domain o landas. Ang tseke na ito ay nag-aalala lamang sa sakop ng domain. Ang saklaw ng domain na inilapat sa isang cookie ay tumutukoy kung aling mga domain ang maaaring ma-access ito. Halimbawa, ang isang cookie ay mahigpit na ma-scoped sa isang subdomain hal. Halimbawa. www.nottrusted.com, o maluwag na naka-iskop sa isang domain ng magulang e.g. nottrusted.com. Sa huling kaso, ang anumang subdomain ng nottrusted.com ay maaaring ma-access ang cookie. Ang maluwag na scoped cookies ay karaniwang sa mega-mga application tulad ng google.com at live.com. Ang mga cookie na itinakda mula sa isang subdomain tulad ng app.foo.bar ay ipinapadala lamang sa domain na iyon ng browser. Gayunpaman, ang mga cookies na may scoped sa isang domain sa antas ng magulang ay maaaring ipadala sa magulang, o anumang subdomain ng magulang.
pscanrules.cookielooselyscoped.soln=Laging sakupin ang mga cookies sa isang FQDN (Ganap na Kwalipikadong Pangalan ng Domain).
pscanrules.cookielooselyscoped.refs=https\://tools.ietf.org/html/rfc6265\#section-4.1\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html\nhttp\://code.google.com/p/browsersec/wiki/Part2\#Same-origin_policy_for_cookies
pscanrules.cookielooselyscoped.extrainfo=Ang orihinal na domain na ginamit sa paghahambing ay\:\n{0}\n{1}
pscanrules.cookielooselyscoped.extrainfo.cookie={0} \n

pscanrules.informationdisclosuredebugerrors.name=Pagbubunyag ng impormasyon - pag debug ng mali sa mga mensahe
pscanrules.informationdisclosuredebugerrors.desc=Ang sagot ay nag pakita na naglalaman ng karaniwang mga mensahe ng mali na ibinalik ng mga platform tulad ng ASP.NET, at Web-server tulad ng IIS at Apache. Maaari mong i-ayos ang listahan ng mga karaniwang mga mensahe ng debug.
pscanrules.informationdisclosuredebugerrors.soln=Huwag paganahin ang mga mensahe sa debugging bago itulak ang produksyon.

pscanrules.informationdisclosureinurl.name=Information Disclosure - Sensitive Information in URL
pscanrules.informationdisclosureinurl.desc=Ang kahilingan ay lumabas upang maglaman ng sensitibong impormasyon na leaked sa URL. Maaari itong lumabag sa PCI at karamihan sa mga patakaran sa pagsunod sa organisasyon. Maaari mong i-ayos ang listahan ng mga string para sa check na ito upang idagdag o alisin ang mga tukoy na halaga sa iyong kapaligiran.
pscanrules.informationdisclosureinurl.otherinfo.sensitiveinfo=The URL contains potentially sensitive information. The following string was found via the pattern\: {0}\n{1}
pscanrules.informationdisclosureinurl.otherinfo.cc=Ang URL ay lilitaw na nalalaman ng mga inpormasyon sa credit card.
pscanrules.informationdisclosureinurl.otherinfo.email=Ang URL ay naglalaman ng mga email address(es).
pscanrules.informationdisclosureinurl.otherinfo.ssn=Lumilitaw ang URL na naglalaman ng (mga) Numero ng Social Security ng US
pscanrules.informationdisclosureinurl.soln=Huwag ipasa ang sensitibong impormasyon sa URIs.

pscanrules.informationdisclosurereferrer.name=Pagbubunyag ng impormasyon - sensitibong impormasyon sa ulunan ng HTTP Referrer
pscanrules.informationdisclosurereferrer.desc=Ang ulunan ng HTTP ay maaaring tumagas ng potensyal na sensitibong parameter sa ibang domain. Maaari itong lumabag sa PCI at karamihan sa mga patakaran sa pagsunod sa organisasyon. Maaari mong i-ayos ang listahan ng mga string para sa check na ito upang idagdag o alisin ang mga tukoy na halaga sa iyong kapaligiran.
pscanrules.informationdisclosurereferrer.otherinfo.sensitiveinfo=Ang URL sa ulunan ng HTTP referrer ay lilitaw na naglalaman ng sensitibong impormasyon.
pscanrules.informationdisclosurereferrer.otherinfo.cc=Ang URL sa ulunan ng HTTP referrer ay lilitaw na naglalaman ng mga impormasyon sa credit card.
pscanrules.informationdisclosurereferrer.otherinfo.email=Ang URL sa ulunan ng HTTPS referrers ay naglalaman ng email address(es).
pscanrules.informationdisclosurereferrer.otherinfo.ssn=Ang URL sa larangan ng mga header ng referrer ng HTTP ay lilitaw na naglalaman ng mga Social Security Number(s) ng US.
pscanrules.informationdisclosurereferrer.soln=Huwag ipasa ang sensitibong impormasyon sa URIs.
pscanrules.informationdisclosurereferrer.bin.field=Bank Identification Number\:
pscanrules.informationdisclosurereferrer.brand.field=Brand\:
pscanrules.informationdisclosurereferrer.category.field=Category\:
pscanrules.informationdisclosurereferrer.issuer.field=Ang taga issue\:

pscanrules.informationdisclosuresuspiciouscomments.name=Pagbubunyag ng impormasyon - Mga kahinahinalang Komento
pscanrules.informationdisclosuresuspiciouscomments.desc=The response appears to contain suspicious comments which may help an attacker. Note\: Matches made within script blocks or files are against the entire content not only comments.
pscanrules.informationdisclosuresuspiciouscomments.otherinfo=The following pattern was used\: {0} and was detected in the element starting with\: "{1}", see evidence field for the suspicious comment/snippet.
pscanrules.informationdisclosuresuspiciouscomments.otherinfo2=The following pattern was used\: {0} and was detected {2} times, the first in the element starting with\: "{1}", see evidence field for the suspicious comment/snippet.
pscanrules.informationdisclosuresuspiciouscomments.soln=Alisin ang lahat ng mga komento na nagbabalik ng impormasyon na maaaring makatulong sa isang magsasalakay at ayusin ang anumang mga nakapailalim na mga problema na tinutukoy nila.

pscanrules.insecureauthentication.name=Mahinang Paraan ng Pagpapatunay
pscanrules.insecureauthentication.desc=Ang pangunahing HTTP o digest authentication ay ginamit sa isang hindi ligtas na koneksyon. Ang mga kredensyal ay maaaring basahin at pagkatapos ay magamit muli ng isang taong may access sa network.
pscanrules.insecureauthentication.soln=Protektahan ang koneksyon gamit ang HTTPS o gumamit ng mas malakas na mekanismo ng pagpapatunay
pscanrules.insecureauthentication.refs=https\://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html

pscanrules.insecurejsfviewstate.name=Hindi matatag na mga JSF ViewState
pscanrules.insecurejsfviewstate.desc=Ang sagot sa mga sumusunod na URL ay naglalaman ng isang ViewState na halaga na walang cryptographic proteksiyon.
pscanrules.insecurejsfviewstate.soln=Siguruhin ang VIEWSTATE na may partikular na MAC sa iyong kapaligiran
pscanrules.insecurejsfviewstate.refs=https\://www.trustwave.com/spiderlabs/advisories/TWSL2010-001.txt
pscanrules.insecurejsfviewstate.extrainfo=SF ViewState [{0}] ay hindi matatag

pscanrules.noanticsrftokens.name=Kawalan ng mga Tokens ng Anti-CSRF
pscanrules.noanticsrftokens.desc=Walang nakitang mga token ng Anti-CSRF sa isang form sa pagsumite ng HTML.
pscanrules.noanticsrftokens.alert.extrainfo=Walang kilalang Anti-CSRF hudyat na {0} ay matatagpuan sa mga sumusunod na form ng HTML\: {1}.
pscanrules.noanticsrftokens.extrainfo.annotation=Ito ay isang alerto sa impormasyon na ang porma ay may isang anotasyon ng seguridad na nagpapahiwatig na hindi nito kailangan ang Token ng anti-CSRF. Ito ay dapat manu-manong sinubukan upang matiyak na ang anotasyon ay tama.

pscanrules.timestampdisclosure.name=Ang pagbubunyag ng Timestamp
pscanrules.timestampdisclosure.desc=Ang isang timestamp ay isiwalat ng application / web server
pscanrules.timestampdisclosure.soln=Isa isahing kumpirmahin ang datod ng timestamp ay hindi sensitibo, at ang data ay hindi maaaring pagsamahin upang ibunyag ang mga magagamit na mga pattern.
pscanrules.timestampdisclosure.refs=http\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanrules.timestampdisclosure.extrainfo={0}, na sinusuri sa\: {1}

pscanrules.usernameidor.name = Ang username ng hash ay natagpuan
pscanrules.usernameidor.desc = Ang username ng hash ({0}) ay natagpuan ang kasagutan. maaari itong magpahiwatig na ang application ay napapailalim sa isang Insecure Direct Object Reference (IDOR) kahinaan. Kinakailangan ang manu-manong pagsusuri upang makita kung ang pagtuklas na ito ay maaaring abusuhin.
pscanrules.usernameidor.otherinfo = Ang hash ay isang {0}, na may halaga\: {1} 
pscanrules.usernameidor.soln = Gamitin ang bawat taga-gamit o hindi direktang sanggunian ng session (lgumawa ng isang pansamantalang pagma-map sa oras ng paggamit). O kaya, tiyakin na ang bawat paggamit ng direktang sanggunian sa bagay ay nakatali sa pag-susuri ng awtorisasyon upang matiyak na awtorisado ang gumagamit para sa hiniling na bagay. 
pscanrules.usernameidor.refs = https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References.html

pscanrules.xaspnetversion.name = X-AspNet-Version Response Header
pscanrules.xaspnetversion.desc =  Ang impormasyon ng server ay na-ilabas sa pamamagitan ng "X-AspNet-Version"/"X-AspNetMvc-Version" HTTP response header field(s).
pscanrules.xaspnetversion.soln = I-saayos ang server upang hindi maibabalik ang mga header na iyon.
pscanrules.xaspnetversion.extrainfo = Pweding gamitin ng isang magsasalakay ang impormasyong ito upang panandaliang kilalanin ang mga kahinaan.
pscanrules.xaspnetversion.refs = https\://www.troyhunt.com/shhh-dont-let-your-response-headers/\nhttps\://blogs.msdn.microsoft.com/varunm/2013/04/23/remove-unwanted-http-response-headers/

pscanrules.xdebugtoken.name=Ang inpormasyon ng X-Debug-Token ay nailabas
pscanrules.xdebugtoken.desc=Ang kasagutan ay naglalaman ng header ng X-Debug-Token o X-Debug-Token-Link. Ito ay nagpapahiwatig na ang Profiler ng Symfony ay pweding gamitin at pagsisiwalat ng sensitibong datos.
pscanrules.xdebugtoken.otherinfo=Sa pamamagitan ng pag-daan ng isang URL sa form http\://target_host/_profiler/token_value (i.e.\: http\://example.com/_profiler_/123ab4), ikaw ay maaaring makakuha ng daan sa profiler at karagdagang nailabas na impormasyon.
pscanrules.xdebugtoken.refs=https\://symfony.com/doc/current/cookbook/profiler/profiling_data.html\nhttps\://symfony.com/blog/new-in-symfony-2-4-quicker-access-to-the-profiler-when-working-on-an-api
pscanrules.xdebugtoken.soln=Limit access to Symfony's Profiler, either via authentication/authorization or limiting inclusion of the header to specific clients (by IP, etc.).

pscanrules.xpoweredbyheaderinfoleak.name=Ang Server leaks na impormasyon sa pamamagitan ng "X-Powered-By" na HTTP Response Header na mga Patlang
pscanrules.xpoweredbyheaderinfoleak.desc=Ang server ng web / application ay pumapasok ng impormasyon sa pamamagitan ng isa o higit pang mga header ng tugon ng "X-Powered-By" HTTP. Ang pag-access sa naturang impormasyon ay maaaring mapadali ang mga mang-aatake na tumutukoy sa iba pang mga framework / component na nakasalalay sa iyong web application at ang mga kahinaan ng mga nasabing bahagi ay maaaring sumailalim.
pscanrules.xpoweredbyheaderinfoleak.refs=http\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanrules.xpoweredbyheaderinfoleak.soln=Siguraduhin na ang iyong wev server, aplikasyon server, taga-balanse ng load, atbp ay isinaayos upang maisagawa ang "X-Powered-By" na mga header.
pscanrules.xpoweredbyheaderinfoleak.extrainfo=
pscanrules.xpoweredbyheaderinfoleak.otherinfo.msg=Ang mga sumusunod na X-Powered-By na mga header ay natagpuan din\:\n

pscanrules.xframeoptions.name = X-Frame-Options Header
pscanrules.xframeoptions.incInCsp = The Content-Security-Policy does include a 'frame-ancestors' element which takes precedence over the X-Frame-Options header, which is why this has been raised with a LOW risk.  
pscanrules.xframeoptions.missing.name = X-Frame-Options Header Not Set
pscanrules.xframeoptions.missing.desc = X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.
pscanrules.xframeoptions.missing.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
pscanrules.xframeoptions.missing.soln = Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's "frame-ancestors" directive. 
pscanrules.xframeoptions.multiple.header.name = Multiple X-Frame-Options Header Entries
pscanrules.xframeoptions.multiple.header.desc = X-Frame-Options (XFO) headers were found, a response with multiple XFO header entries may not be predictably treated by all user-agents.
pscanrules.xframeoptions.multiple.header.refs = https\://tools.ietf.org/html/rfc7034
pscanrules.xframeoptions.multiple.header.soln = Ensure only a single X-Frame-Options header is present in the response.
pscanrules.xframeoptions.compliance.meta.name = X-Frame-Options Defined via META (Non-compliant with Spec)
pscanrules.xframeoptions.compliance.meta.desc = An X-Frame-Options (XFO) META tag was found, defining XFO via a META tag is explicitly not supported by the spec (RFC 7034).
pscanrules.xframeoptions.compliance.meta.refs = https\://tools.ietf.org/html/rfc7034\#section-4
pscanrules.xframeoptions.compliance.meta.soln = Ensure X-Frame-Options is set via a response header field.  Alternatively consider implementing Content Security Policy's "frame-ancestors" directive.
pscanrules.xframeoptions.compliance.malformed.setting.name = X-Frame-Options Setting Malformed
pscanrules.xframeoptions.compliance.malformed.setting.desc = An X-Frame-Options header was present in the response but the value was not correctly set.
pscanrules.xframeoptions.compliance.malformed.setting.refs = https\://tools.ietf.org/html/rfc7034\#section-2.1
pscanrules.xframeoptions.compliance.malformed.setting.soln = Ensure a valid setting is used on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  Alternatively consider implementing Content Security Policy's "frame-ancestors" directive.

pscanrules.xcontenttypeoptions.name = X-Content-Type-Options Header Missing
pscanrules.xcontenttypeoptions.desc = The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
pscanrules.xcontenttypeoptions.otherinfo = This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.
pscanrules.xcontenttypeoptions.refs = http\://msdn.microsoft.com/en-us/library/ie/gg622941%28v\=vs.85%29.aspx\nhttps\://owasp.org/www-community/Security_Headers
pscanrules.xcontenttypeoptions.soln = Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.

pscanrules.applicationerrors.name = Application Error Disclosure
pscanrules.applicationerrors.desc = This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.
pscanrules.applicationerrors.soln = Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.

pscanrules.cachecontrol.name = Incomplete or No Cache-control Header Set
pscanrules.cachecontrol.desc = The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.
pscanrules.cachecontrol.soln = Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.
pscanrules.cachecontrol.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html\#web-content-caching\nhttps\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control

pscanrules.contenttypemissing.name = Content-Type Header Missing
pscanrules.contenttypemissing.name.empty = Content-Type Header Empty
pscanrules.contenttypemissing.desc = The Content-Type header was either missing or empty.
pscanrules.contenttypemissing.soln=Ensure each page is setting the specific and appropriate content-type value for the content being delivered.
pscanrules.contenttypemissing.refs=http\://msdn.microsoft.com/en-us/library/ie/gg622941%28v\=vs.85%29.aspx

pscanrules.cookiehttponly.name = Cookie No HttpOnly Flag
pscanrules.cookiehttponly.desc=A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
pscanrules.cookiehttponly.soln=Ensure that the HttpOnly flag is set for all cookies.
pscanrules.cookiehttponly.refs=https\://owasp.org/www-community/HttpOnly

pscanrules.cookiesecureflag.name = Cookie Without Secure Flag
pscanrules.cookiesecureflag.desc=A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
pscanrules.cookiesecureflag.soln=Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.
pscanrules.cookiesecureflag.refs=https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html

pscanrules.crossdomainscriptinclusion.name = Cross-Domain JavaScript Source File Inclusion
pscanrules.crossdomainscriptinclusion.desc=The page includes one or more script files from a third-party domain.
pscanrules.crossdomainscriptinclusion.soln=Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.

pscanrules.csp.name=CSP
pscanrules.csp.desc=Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanrules.csp.desc.extended=\n\nThe directive(s)\: {0} are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.
pscanrules.csp.refs=http\://www.w3.org/TR/CSP2/\nhttp\://www.w3.org/TR/CSP/\nhttp\://caniuse.com/\#search\=content+security+policy\nhttp\://content-security-policy.com/\nhttps\://github.com/shapesecurity/salvation\nhttps\://developers.google.com/web/fundamentals/security/csp\#policy_applies_to_a_wide_variety_of_resources
pscanrules.csp.soln=Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.
pscanrules.csp.notices.name=Notices
pscanrules.csp.notices.errors=Ang mga mali\:
pscanrules.csp.notices.warnings=Warnings\:
pscanrules.csp.notices.infoitems=Info Items\:
pscanrules.csp.scriptsrc.unsafe.name=script-src unsafe-inline
pscanrules.csp.scriptsrc.unsafe.desc=script-src includes unsafe-inline.
pscanrules.csp.stylesrc.unsafe.name=style-src unsafe-inline
pscanrules.csp.stylesrc.unsafe.desc=style-src includes unsafe-inline.
pscanrules.csp.wildcard.name=Wildcard Directive
pscanrules.csp.wildcard.desc=The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined\: \n{0}
pscanrules.csp.xcsp.name=X-Content-Security-Policy
pscanrules.csp.xcsp.desc=The header X-Content-Security-Policy was found on this response. While it is a good sign that CSP is implemented to some degree the policy specified in this header has not been analyzed by ZAP. To ensure full support by modern browsers ensure that the Content-Security-Policy header is defined and attached to responses.
pscanrules.csp.xwkcsp.name=X-WebKit-CSP
pscanrules.csp.xwkcsp.desc=The header X-WebKit-CSP was found on this response. While it is a good sign that CSP is implemented to some degree the policy specified in this header has not been analyzed by ZAP. To ensure full support by modern browsers ensure that the Content-Security-Policy header is defined and attached to responses.

pscanrules.mixedcontent.name = Secure Pages Include Mixed Content
pscanrules.mixedcontent.name.inclscripts = Secure Pages Include Mixed Content (Including Scripts)
pscanrules.mixedcontent.desc=The page includes mixed content, that is content accessed via HTTP instead of HTTPS.
pscanrules.mixedcontent.soln=A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.
pscanrules.mixedcontent.refs=https\://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html

pscanrules.infoprivateaddressdisclosure.name = Private IP Disclosure
pscanrules.infoprivateaddressdisclosure.desc = A private IP (such as 10.x.x.x, 172.x.x.x, 192.168.x.x) or an Amazon EC2 private hostname (for example, ip-10-0-56-78) has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.
pscanrules.infoprivateaddressdisclosure.soln = Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP/PHP comment instead of HTML/JavaScript comment which can be seen by client browsers.
pscanrules.infoprivateaddressdisclosure.refs = https\://tools.ietf.org/html/rfc1918

pscanrules.infosessionidurl.name = Session ID in URL Rewrite
pscanrules.infosessionidurl.desc = URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.
pscanrules.infosessionidurl.soln = For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite.
pscanrules.infosessionidurl.refs = http\://seclists.org/lists/webappsec/2002/Oct-Dec/0111.html
pscanrules.infosessionidurl.referrer.alert = Referer Exposes Session ID
pscanrules.infosessionidurl.referrer.desc = A hyperlink pointing to another host name was found. As session ID URL rewrite is used, it may be disclosed in referer header to external hosts.
pscanrules.infosessionidurl.referrer.soln = This is a risk if the session ID is sensitive and the hyperlink refers to an external or third party host. For secure content, put session ID in secured session cookie.

pscanrules.viewstate.name=Viewstate
pscanrules.viewstate.soln=Patunayan ang ibinigay na impormasyon ay hindi kumpidensyal.
pscanrules.viewstate.oldver.name=Umang bersyon ng Asp.Net Version sa paggamit
pscanrules.viewstate.oldver.desc=*** PAGSUBOK ***\nAng website na ito ay gumagamit ng ASP.NET bersyon1.0 o 1.1.\n\n
pscanrules.viewstate.oldver.soln=Tiyakin na ang nakalakip na balangkas ay sinusuportahan pa rin ng Microsoft.
pscanrules.viewstate.nomac.unsure.name=Viewstate nang walang MAC Lagda (Hindi sigurado)
pscanrules.viewstate.nomac.unsure.desc=*** PAGSUBOK ***\nAng website na ito ay gumagamit ng ASP.NET's Viewstate ngunit marahil nang walang anumang MAC.\n\n
pscanrules.viewstate.nomac.unsure.soln=Tiyaking naka-set ang MAC para sa lahat ng mga pahina sa website na ito.
pscanrules.viewstate.nomac.unsure.refs=http\://msdn.microsoft.com/en-us/library/ff649308.aspx
pscanrules.viewstate.nomac.sure.name=Viewstate nang walang MAC Lagda (Oo)
pscanrules.viewstate.nomac.sure.desc=*** PAGSUBOK ***\nAng website na ito ay gumagamit ng Viewstate ng ASP.NET ngunit walang anumang MAC.\n\n
pscanrules.viewstate.nomac.sure.soln=Tiyaking naka-set ang MAC para sa lahat ng mga pahina sa website na ito.
pscanrules.viewstate.nomac.sure.refs=http\://msdn.microsoft.com/en-us/library/ff649308.aspx
pscanrules.viewstate.split.name=Hatiin ang Viewstate sa Paggamit
pscanrules.viewstate.split.desc=*** PAGSUBOK ***\nAng website na ito ay gumagamit ng ASP.NET's Viewstate at ang halaga nito ay nahahati sa maraming mga chunks.\n
pscanrules.viewstate.split.soln=Wala - ang mga guys na tumatakbo sa server ay maaaring nag-tuned sa pagsasaayos dahil hindi ito ang default na setting.
pscanrules.viewstate.content.email.name=Natagpuan ang mga email sa Viewstate
pscanrules.viewstate.content.email.desc=Ang mga sumusunod na email ay natagpuan na inilalathala nang baha-bahagi sa field ng viewstate\:
pscanrules.viewstate.content.email.pattern.source=Pattern ng email - http\://www.regular-expressions.info/regexbuddy/email.html
pscanrules.viewstate.content.ip.name=Mga Potensibong IP Address na Natagpuan sa Viewstate
pscanrules.viewstate.content.ip.desc=Ang mga sumusunod na potensyal na IP address ay natagpuan na inilalathala nang baha-bahagi sa field ng viewstate\:
pscanrules.viewstate.content.ip.pattern.source=Disenyo ng IP - http\://www.regular-expressions.info/examples.html

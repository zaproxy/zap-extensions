pscanrules.anticlickjacking.compliance.malformed.setting.desc = Una cabecera X-Frame-Option est\u00e1 presente en la repuesta pero su valor configurado no es correcto.
pscanrules.anticlickjacking.compliance.malformed.setting.name = Configuraci\u00f3n X-Frame-Options mal formada
pscanrules.anticlickjacking.compliance.malformed.setting.refs = https\://tools.ietf.org/html/rfc7034\#section-2.1
pscanrules.anticlickjacking.compliance.malformed.setting.soln = Aseg\u00farese de que se utilice una configuraci\u00f3n v\u00e1lida en todas las p\u00e1ginas web devueltas por su sitio (si espera que la p\u00e1gina est\u00e9 enmarcada solo por p\u00e1ginas en su servidor (por ejemplo, es parte de un FRAMESET), querr\u00e1 usar SAMEORIGIN; de lo contrario, si nunca espera que la p\u00e1gina est\u00e9 enmarcada, debe usar DENY. Alternativamente, considere implementar la directiva "frame-ancestors" de la pol\u00edtica de seguridad de contenido (CSP).
pscanrules.anticlickjacking.compliance.meta.desc = Se encontr\u00f3 una etiqueta META de X-Frame-Options (XFO), la especificaci\u00f3n (RFC 7034) no admite expl\u00edcitamente la definici\u00f3n de XFO a trav\u00e9s de una etiqueta META.
pscanrules.anticlickjacking.compliance.meta.name = X-Frame-Options definidaas a trav\u00e9s de META (No conformes con las especificaciones)
pscanrules.anticlickjacking.compliance.meta.refs = https\://tools.ietf.org/html/rfc7034\#section-4
pscanrules.anticlickjacking.compliance.meta.soln = Aseg\u00farese de que X-Frame-Options est\u00e9 configurado a trav\u00e9s de un campo de encabezado de respuesta. Alternativamente, considere implementar la directiva "frame-ancestors" en la pol\u00edtica CSP (Content Security Policy).
pscanrules.anticlickjacking.incInCsp = La pol\u00edtica de seguridad de contenido (CSP) incluye el elemento ''frame-ancestors'''' que tiene prioridad sobre la cabecera X-Frame-Options, por lo que se ha planteado con un riesgo BAJO.
pscanrules.anticlickjacking.missing.desc = La respuesta no incluye Content-Security-Policy con la directiva 'frame-ancestors' ni X-Frame-Options para proteger contra ataques de 'ClickJacking'.
pscanrules.anticlickjacking.missing.name = Falta de cabecera Anti-Clickjacking
pscanrules.anticlickjacking.missing.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
pscanrules.anticlickjacking.missing.soln = Los navegadores web modernos admiten los encabezados HTTP Content-Security-Policy y X-Frame-Options. Aseg\u00farese de que uno de ellos est\u00e9 configurado en todas las p\u00e1ginas web devueltas por su sitio/aplicaci\u00f3n.\nSi espera que la p\u00e1gina est\u00e9 enmarcada solo por p\u00e1ginas en su servidor (por ejemplo, es parte de un FRAMESET), querr\u00e1 usar SAMEORIGIN; de lo contrario, si nunca espera que la p\u00e1gina est\u00e9 enmarcada, debe usar DENY. Alternativamente, considere implementar la directiva "frame-ancestros" de la pol\u00edtica de seguridad de contenido.
pscanrules.anticlickjacking.multiple.header.desc = Se encontraron encabezados X-Frame-Options (XFO), una respuesta con m\u00faltiples entradas de cabeceras XFO puede no ser tratada de manera predecible por todos los user-agent.
pscanrules.anticlickjacking.multiple.header.name = M\u00faltiples entradas de cabeceras X-Frame-Options
pscanrules.anticlickjacking.multiple.header.refs = https\://tools.ietf.org/html/rfc7034
pscanrules.anticlickjacking.multiple.header.soln = Aseg\u00farese de que s\u00f3lo haya una cabecera X-Frame-Options en la respuesta.
pscanrules.anticlickjacking.name = Cabecera Anti-Clickjacking

pscanrules.applicationerrors.desc = Esta p\u00e1gina contiene un mensaje de error/advertencia que podr\u00eda revelar informaci\u00f3n sensible como la ubicaci\u00f3n del archivo que produjo la excepci\u00f3n no controlada. Esta informaci\u00f3n puede ser usada para lanzas futuros ataques contra la aplicaci\u00f3n web. La alerta podr\u00eda ser una falso positivo si el mensaje de error es encontrado dentro de una p\u00e1gina de documentaci\u00f3n.
pscanrules.applicationerrors.name = Divulgaci\u00f3n de error de aplicaci\u00f3n
pscanrules.applicationerrors.soln = Revisar el c\u00f3digo de fuente de esta p\u00e1gina. Implementaci\u00f3n de p\u00e1ginas de error personalizadas. Considerar implementar un mecanismos para proveer una \u00fanica referencia/identificaci\u00f3n de error para el cliente (navegador) mientras insertando los detalles en el sitio del navegador y no exponi\u00e9ndolos al usuario.

pscanrules.authenticationcredentialscaptured.alert.basicauth.extrainfo = [{0}] [{1}] utiliza el mecanismo de autenticaci\u00f3n inseguro [{2}], revelando el nombre de usuario [{3}] y contrase\u00f1a [{4}].
pscanrules.authenticationcredentialscaptured.alert.digestauth.extrainfo = [{0}] [{1}] utiliza el mecanismo de autenticaci\u00f3n inseguro [{2}], revelando el nombre de usuario [{3}] e informaci\u00f3n adicional [{4}].
pscanrules.authenticationcredentialscaptured.desc = Se est\u00e1 utilizando un mecanismo de autenticaci\u00f3n no seguro. Esto permite que un atacante en la red acceda al ID de usuario y la contrase\u00f1a del usuario autenticado. Para la autenticaci\u00f3n b\u00e1sica, el atacante simplemente debe monitorizar el tr\u00e1fico de la red hasta que se reciba una solicitud de autenticaci\u00f3n b\u00e1sica y luego decodificar en base64 el nombre de usuario y la contrase\u00f1a. Para la autenticaci\u00f3n Digest, el atacante tiene acceso al nombre de usuario y posiblemente tambi\u00e9n a la contrase\u00f1a, si el hash (incluido un nonce) se puede descifrar con \u00e9xito o si se monta un ataque Man-In-The-Middle.\nEl atacante escucha a escondidas la red hasta que se completa una autenticaci\u00f3n.
pscanrules.authenticationcredentialscaptured.name = Credenciales de autenticaci\u00f3n capturadas
pscanrules.authenticationcredentialscaptured.refs = https\://owasp.org/www-community/attacks/Brute_force_attack\nhttps\://en.wikipedia.org/wiki/Digest_access_authentication
pscanrules.authenticationcredentialscaptured.soln = Utilice HTTPS y un mecanismo de autenticaci\u00f3n segura que no transmita el ID de usuario o la contrase\u00f1a sin cifrarlos.  En particular, evite el uso del mecanismo HTTP de autenticaci\u00f3n b\u00e1sica ya que este utiliza un mecanismo de ofuscaci\u00f3n trivial, que se rompe f\u00e1cilmente. 

pscanrules.bigredirects.desc = El servidor ha respondido con una redirecci\u00f3n que parece proporcionar una respuesta larga. Esto puede indicar que aunque el servidor envi\u00f3 una redirecci\u00f3n, tambi\u00e9n respondi\u00f3 con el contenido del cuerpo (que puede incluir detalles confidenciales, PII, etc.).
pscanrules.bigredirects.extrainfo = Longitud del URI de la cabecera Location\: {0} [{1}].\nTama\u00f1o de respuesta previsto\: {2}.\nLongitud del cuerpo de respuesta\: {3}.
pscanrules.bigredirects.multi.desc = El servidor respondi\u00f3 con una redirecci\u00f3n que parece contener varios enlaces. Esto puede indicar que, aunque el servidor envi\u00f3 una redirecci\u00f3n, tambi\u00e9n respondi\u00f3 con enlaces de contenido del cuerpo (que pueden incluir detalles confidenciales, PII, direcciones a paneles de administraci\u00f3n, etc.).
pscanrules.bigredirects.multi.extrainfo = The response contained {0} occurrences of "HREF".
pscanrules.bigredirects.multi.name = Multiple HREFs Redirect Detected (Potential Sensitive Information Leak)
pscanrules.bigredirects.name = Gran redirecci\u00f3n detectada (posible fuga de informaci\u00f3n confidencial)
pscanrules.bigredirects.soln = Aseg\u00farese de que no se filtre informaci\u00f3n confidencial a trav\u00e9s de las respuestas de redirecci\u00f3n. Las respuestas de redireccionamiento casi no deben tener contenido.

pscanrules.cachecontrol.desc = The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.
pscanrules.cachecontrol.name = Re-examine Cache-control Directives
pscanrules.cachecontrol.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html\#web-content-caching\nhttps\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps\://grayduck.mn/2021/09/13/cache-control-recommendations/
pscanrules.cachecontrol.soln = For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".

pscanrules.charsetmismatch.desc = Esta verificaci\u00f3n identifica las respuestas donde la cabecera  HTTP Content-Type declara un juego de caracteres diferente del definido por el cuerpo del HTML o XML. Cuando hay una discrepancia en el juego de caracteres entre el encabezado HTTP y el cuerpo del contenido, los navegadores web pueden verse forzados a entrar en un modo de rastreo de contenido no deseado para determinar el juego de caracteres correcto del contenido.\n\nUn atacante podr\u00eda manipular el contenido de la p\u00e1gina para interpretarlo en una codificaci\u00f3n de su elecci\u00f3n. Por ejemplo, si un atacante puede controlar el contenido al principio de la p\u00e1gina, podr\u00eda inyectar un script con texto codificado en UTF-7 y manipular algunos navegadores para que interpreten ese texto.
pscanrules.charsetmismatch.extrainfo.html.header_metacharset_mismatch = Hubo un desajuste de conjunto de caracteres entre el encabezado HTTP La declaraci\u00f3n de codificaci\u00f3n del conjunto de caracteres META\: [{0}] y [{1}] no coinciden.
pscanrules.charsetmismatch.extrainfo.html.header_metacontentype_mismatch = Hubo un desajuste de conjunto de caracteres entre el encabezado HTTP y las declaraciones de codificaci\u00f3n de tipo de contenido META\: [{0}] y [{1}] no coinciden.
pscanrules.charsetmismatch.extrainfo.html.metacontenttype_metacharset_mismatch = Hubo un desajuste de conjunto de caracteres entre el conjunto de caracteres META y la declaraci\u00f3n de codificaci\u00f3n del tipo de contenido META\: [{0}] y [{1}] no coinciden.
pscanrules.charsetmismatch.extrainfo.html.no_mismatch_metacontenttype_missing = El conjunto de caracteres es definido solo por el conjunto de caracteres META, los clientes m\u00e1s antiguos que esperan que el conjunto de caracteres sea definido por tipo de contenido META podr\u00edan no mostrar correctamente este contenido.
pscanrules.charsetmismatch.extrainfo.xml = Hubo un desajuste en el conjunto de caracteres entre el encabezado HTTP y la declaraci\u00f3n de c\u00f3digo XML\: [{0}] y [{1}] no coinciden.
pscanrules.charsetmismatch.name = Incompatibilidad de caracteres
pscanrules.charsetmismatch.refs = https\://code.google.com/p/browsersec/wiki/Part2\#Character_set_handling_and_detection
pscanrules.charsetmismatch.soln = Forzar UTF-8 para todo el contenido de texto tanto en el encabezado HTPP y etiquetas meta en HTML o declaraciones de codificaci\u00f3n en XML.
pscanrules.charsetmismatch.variant.header_metacharset_mismatch = (Encabezado contra Conjunto de Caracteres Meta)
pscanrules.charsetmismatch.variant.header_metacontentype_mismatch = (Encabezado contra Conjunto de Caracteres de Tipo de Contenido Meta)
pscanrules.charsetmismatch.variant.metacontenttype_metacharset_mismatch = (Conjunto de Caracteres Meta contra Conjunto de Caracteres de Tipo de Contenido Meta)
pscanrules.charsetmismatch.variant.no_mismatch_metacontenttype_missing = (Falta el Conjunto de Caracteres de Tipo de Contenido Meta)

pscanrules.contentsecuritypolicymissing.desc = La Pol\u00edtica de seguridad de contenido (CSP) es una capa adicional de seguridad que ayuda a detectar y mitigar ciertos tipos de ataques, incluidos Cross Site Scripting (XSS) y ataques de inyecci\u00f3n de datos. Estos ataques se utilizan para todo, desde el robo de datos hasta la desfiguraci\u00f3n del sitio o la distribuci\u00f3n de malware. CSP proporciona un conjunto de encabezados HTTP est\u00e1ndar que permiten a los propietarios de sitios web declarar fuentes de contenido aprobadas que los navegadores deber\u00edan poder cargar en esa p\u00e1gina; los tipos cubiertos son JavaScript, CSS, marcos HTML, fuentes, im\u00e1genes y objetos incrustados como applets de Java, ActiveX, archivos de audio y video.
pscanrules.contentsecuritypolicymissing.name = Cabecera Content Security Policy (CSP) no configurada
pscanrules.contentsecuritypolicymissing.obs.desc = Las cabeceras "X-Content-Security-Policy" y "X-WebKit-CSP" y no se recomiendan.
pscanrules.contentsecuritypolicymissing.obs.name = Cabecera Content Security Policy (CSP) obsoleta encontrada
pscanrules.contentsecuritypolicymissing.refs = https\://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps\://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps\://www.w3.org/TR/CSP/\nhttps\://w3c.github.io/webappsec-csp/\nhttps\://web.dev/articles/csp\nhttps\://caniuse.com/\#feat\=contentsecuritypolicy\nhttps\://content-security-policy.com/
pscanrules.contentsecuritypolicymissing.ro.desc = La respuesta conten\u00eda una cabecera Content-Security-Policy-Report-Only, esto puede indicar una implementaci\u00f3n en progreso o un descuido en la promoci\u00f3n de pre-Prod a Prod, etc.\n\nLa Pol\u00edtica de seguridad de contenido (CSP) es una capa adicional de seguridad que ayuda a detectar y mitigar ciertos tipos de ataques, incluidos Cross Site Scripting (XSS) y ataques de inyecci\u00f3n de datos. Estos ataques se utilizan para todo, desde el robo de datos hasta la desfiguraci\u00f3n del sitio o la distribuci\u00f3n de malware. CSP proporciona un conjunto de encabezados HTTP est\u00e1ndar que permiten a los propietarios de sitios web declarar fuentes de contenido aprobadas que los navegadores deber\u00edan poder cargar en esa p\u00e1gina; los tipos cubiertos son JavaScript, CSS, marcos HTML, fuentes, im\u00e1genes y objetos incrustados como applets de Java, ActiveX, archivos de audio y video.
pscanrules.contentsecuritypolicymissing.ro.name = Cabecera Content Security Policy (CSP) Report-Only detectada
pscanrules.contentsecuritypolicymissing.ro.refs = https\://www.w3.org/TR/CSP2/\nhttps\://w3c.github.io/webappsec-csp/\nhttps\://caniuse.com/\#feat\=contentsecuritypolicy\nhttps\://content-security-policy.com/
pscanrules.contentsecuritypolicymissing.soln = Aseg\u00farese de que su servidor web, servidor de aplicaciones, balanceador de carga, etc. est\u00e9 configurado para establecer la cabecera Content-Security-Policy.

pscanrules.contenttypemissing.desc = La cabecera Content-Type falta o est\u00e1 vacia.
pscanrules.contenttypemissing.name = Cabecera Content-Type Perdida
pscanrules.contenttypemissing.name.empty = Cabecera Content-Type Vacia
pscanrules.contenttypemissing.refs = https\://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v\=vs.85)
pscanrules.contenttypemissing.soln = Aseg\u00farese de que cada p\u00e1gina establezca el valor de tipo de contenido espec\u00edfico y apropiado para el contenido que se entrega.

pscanrules.cookiehttponly.desc = A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
pscanrules.cookiehttponly.name = Cookie No HttpOnly Flag
pscanrules.cookiehttponly.refs = https\://owasp.org/www-community/HttpOnly
pscanrules.cookiehttponly.soln = Ensure that the HttpOnly flag is set for all cookies.

pscanrules.cookielooselyscoped.desc = Las Cookies pueden ser delimitadas por dominio o ruta. Esta comprobaci\u00f3n solo se considera con \u00e1mbito de dominio. El \u00e1mbito de dominio aplicado a una cookie determina cuales dominios lo pueden acceder. Por ejemplo, una cookie puede ser delimitada estrictamente a un subdominio por ejemplo, www.nottrusted.com, o libremente delimitada a un dominio padre por ejemplo, nottrusted.com. En el \u00faltimo caso, cualquier subdominio de nottrusted.com puede acceder a la cookie. Las cookies libremente delimitadas son comunes en mega-aplicaciones como google.com y live.com. las cookies establecidas desde un subdominio como app.foo.bar son transmitidas solo al dominio del navegador. Sin embargo, las cookies delimitadas a un dominio de nivel de padre podr\u00eda ser transmitida al padre, o cualquier subdominio del padre.
pscanrules.cookielooselyscoped.extrainfo = El dominio de origen usado para comparaciones era\:\n{0}\n{1}
pscanrules.cookielooselyscoped.extrainfo.cookie = {0}\n
pscanrules.cookielooselyscoped.name = Amplia gama de Cookies
pscanrules.cookielooselyscoped.refs = https\://tools.ietf.org/html/rfc6265\#section-4.1\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html\nhttps\://code.google.com/p/browsersec/wiki/Part2\#Same-origin_policy_for_cookies
pscanrules.cookielooselyscoped.soln = Siempre delimitar las cookies a FQDN (Nombre de Dominio Completamente Calificado).

pscanrules.cookiesamesite.badval.desc = A cookie has been set with an invalid SameSite attribute value, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
pscanrules.cookiesamesite.badval.name = Cookie con atributo SameSite incorrecto
pscanrules.cookiesamesite.desc = A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
pscanrules.cookiesamesite.name = Cookie sin el atributo SameSite
pscanrules.cookiesamesite.none.desc = A cookie has been set with its SameSite attribute set to "none", which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
pscanrules.cookiesamesite.none.name = Cookie con el atributo SameSite a None
pscanrules.cookiesamesite.refs = https\://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site
pscanrules.cookiesamesite.soln = Aseg\u00farese que el atributo SameSite est\u00e1 establecido como 'lax' o idealmente 'strict' para todas las cookies.

pscanrules.cookiesecureflag.desc = A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
pscanrules.cookiesecureflag.name = Cookie Without Secure Flag
pscanrules.cookiesecureflag.refs = https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html
pscanrules.cookiesecureflag.soln = Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.

pscanrules.crossdomain.desc = Descargas de datos del navegador web podr\u00eda ser posible, debido a una desconfiguraci\u00f3n del intercambio de recursos cruzados de origen (CORS) en el servidor web
pscanrules.crossdomain.extrainfo = La desconfiguraci\u00f3n CORS en el servidor web permite a dominios cruzados leer peticiones de dominios de terceros arbitrariamente, usando APIs sin autenticaci\u00f3n en este dominio. Las implementaciones de navegador web no permiten a terceros arbitrarios leer la respuesta de APIs autenticados, de todas formas. Esto reduce el riesgo de alguna forma. Esta desconfiguraci\u00f3n podr\u00eda ser usada por un atacante para acceder a datos que est\u00e1 disponible en una manera sin autenticaci\u00f3n, pero que usa otra forma de seguridad, tal como la direcci\u00f3n IP lista-blanca.
pscanrules.crossdomain.name = Configuraci\u00f3n Incorrecta Cross-Domain
pscanrules.crossdomain.refs = https\://vulncat.fortify.com/en/detail?id\=desc.config.dotnet.html5_overly_permissive_cors_policy
pscanrules.crossdomain.soln = Aseg\u00farese que los datos sensibles no est\u00e1n disponibles de manera no autenticada (usando direcci\u00f3n IP listado-blanco, por ejemplo). Configurar el encabezado HTTP ''''Access-Control-Allow-Origin" a un conjunto de dominios m\u00e1s restrictivo, o remover completamente todos los encabezados CORS, para permitir que el navegador web refuerce la pol\u00edtica de mismo origen (SOP) en una manera mas restrictiva.

pscanrules.crossdomainscriptinclusion.desc = The page includes one or more script files from a third-party domain.
pscanrules.crossdomainscriptinclusion.name = Cross-Domain JavaScript Source File Inclusion
pscanrules.crossdomainscriptinclusion.soln = Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.

pscanrules.csp.both.desc = The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.
pscanrules.csp.both.name = Header & Meta
pscanrules.csp.desc = Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanrules.csp.malformed.name = Malformed Policy (Non-ASCII)
pscanrules.csp.malformed.otherinfo = A non-ASCII character was encountered while attempting to parse the policy, thus rendering it invalid (no further evaluation occurred). The following invalid characters were collected\: {0}
pscanrules.csp.meta.bad.directive.desc = The policy specified via meta element contains either or both the sandbox or frame-ancestors directive, which are not permitted inside meta CSP definitions.
pscanrules.csp.meta.bad.directive.name = Meta Policy Invalid Directive
pscanrules.csp.name = CSP
pscanrules.csp.notices.errors = Errores\:
pscanrules.csp.notices.infoitems = Info Items\:
pscanrules.csp.notices.name = Avisos
pscanrules.csp.notices.warnings = Advertencias\:
pscanrules.csp.otherinfo.extended = \n\nThe directive(s)\: {0} are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.
pscanrules.csp.refs = https\://www.w3.org/TR/CSP/\nhttps\://caniuse.com/\#search\=content+security+policy\nhttps\://content-security-policy.com/\nhttps\://github.com/HtmlUnit/htmlunit-csp\nhttps\://developers.google.com/web/fundamentals/security/csp\#policy_applies_to_a_wide_variety_of_resources
pscanrules.csp.scriptsrc.unsafe.eval.name = script-src unsafe-eval
pscanrules.csp.scriptsrc.unsafe.eval.otherinfo = script-src includes unsafe-eval.
pscanrules.csp.scriptsrc.unsafe.hashes.name = script-src unsafe-hashes
pscanrules.csp.scriptsrc.unsafe.hashes.otherinfo = script-src includes unsafe-hashes, an attacker will be able to use any of the code covered by such hashes.
pscanrules.csp.scriptsrc.unsafe.hashes.refs = https\://www.w3.org/TR/CSP3/\#unsafe-hashes-usage\nhttps\://content-security-policy.com/examples/allow-inline-script/
pscanrules.csp.scriptsrc.unsafe.name = script-src unsafe-inline
pscanrules.csp.scriptsrc.unsafe.otherinfo = script-src incluye unsafe-inline.
pscanrules.csp.soln = Aseg\u00farese de que su servidor web, servidor de aplicaci\u00f3n, equilibrador de carga, etc. est\u00e1 configurado apropiadamente para establecer la cabecera de Pol\u00edtica de Seguridad de Contenido.
pscanrules.csp.stylesrc.unsafe.hashes.name = style-src unsafe-hashes
pscanrules.csp.stylesrc.unsafe.hashes.otherinfo = style-src includes unsafe-hashes, an attacker will be able to use any of the code covered by such hashes.
pscanrules.csp.stylesrc.unsafe.hashes.refs = https\://www.w3.org/TR/CSP3/\#unsafe-hashes-usage\nhttps\://content-security-policy.com/examples/allow-inline-style/
pscanrules.csp.stylesrc.unsafe.name = style-src unsafe-inline
pscanrules.csp.stylesrc.unsafe.otherinfo = style-src includes unsafe-inline.
pscanrules.csp.wildcard.name = Wildcard Directive
pscanrules.csp.wildcard.otherinfo = The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined\: \n{0}
pscanrules.csp.xcsp.name = X-Content-Security-Policy
pscanrules.csp.xcsp.otherinfo = The header X-Content-Security-Policy was found on this response. While it is a good sign that CSP is implemented to some degree the policy specified in this header has not been analyzed by ZAP. To ensure full support by modern browsers ensure that the Content-Security-Policy header is defined and attached to responses.
pscanrules.csp.xwkcsp.name = X-WebKit-CSP
pscanrules.csp.xwkcsp.otherinfo = The header X-WebKit-CSP was found on this response. While it is a good sign that CSP is implemented to some degree the policy specified in this header has not been analyzed by ZAP. To ensure full support by modern browsers ensure that the Content-Security-Policy header is defined and attached to responses.

pscanrules.desc = Estado de versiones de las reglas pasivas

pscanrules.directorybrowsing.desc = It is possible to view a listing of the directory contents. Directory listings may reveal hidden scripts, include files, backup source files, etc., which can be accessed to reveal sensitive information.
pscanrules.directorybrowsing.extrainfo = Web server identified\: {0}
pscanrules.directorybrowsing.name = Directory Browsing (Exploraci\u00f3n de directorios)
pscanrules.directorybrowsing.refs = https\://cwe.mitre.org/data/definitions/548.html
pscanrules.directorybrowsing.soln = Configure the web server to disable directory browsing.

pscanrules.hashdisclosure.desc = El servidor web revel\u00f3 un hash.
pscanrules.hashdisclosure.name = Divulgaci\u00f3n de hash
pscanrules.hashdisclosure.refs = https\://openwall.info/wiki/john/sample-hashes
pscanrules.hashdisclosure.soln = Aseg\u00farese de que el servidor web o la base de datos no revele los hashes que se utilizan para proteger las credenciales u otros recursos. Por lo general, no existe ning\u00fan requisito para que los hashes de contrase\u00f1as sean accesibles para el navegador web.

pscanrules.heartbleed.desc = Las implementaciones de TLS y DTLS en OpenSSL 1.0.1 antes de 1.0.1g no gestionan correctamente los paquetes de Heartbeat Extension, lo que permite a los atacantes remotos obtener informaci\u00f3n confidencial de la memoria del proceso a trav\u00e9s de paquetes manipulados que provocan una sobrelectura del b\u00fafer, lo que podr\u00eda revelar informaci\u00f3n confidencial.
pscanrules.heartbleed.extrainfo = {0} est\u00e1 en uso. Sin embargo, tenga en cuenta que la versi\u00f3n informada podr\u00eda contener correcciones de seguridad antiguas (back-ported) , por lo que el problema podr\u00eda ser un falso positivo. Esto es com\u00fan en Red Hat, por ejemplo.
pscanrules.heartbleed.name = Vulnerabilidad de OpenSSL de Heartbleed (indicativo)
pscanrules.heartbleed.refs = https\://nvd.nist.gov/vuln/detail/CVE-2014-0160
pscanrules.heartbleed.soln = Actualice a OpenSSL 1.0.1g o superior. Vuelva a emitir los certificados HTTPS. Cambie las claves privadas asim\u00e9tricas y las claves secretas compartidas, ya que pueden haber sido comprometidas, sin que haya evidencia de ello en los archivos de registro del servidor.

pscanrules.infoprivateaddressdisclosure.desc = A private IP (such as 10.x.x.x, 172.x.x.x, 192.168.x.x) or an Amazon EC2 private hostname (for example, ip-10-0-56-78) has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.
pscanrules.infoprivateaddressdisclosure.name = Private IP Disclosure
pscanrules.infoprivateaddressdisclosure.refs = https\://tools.ietf.org/html/rfc1918
pscanrules.infoprivateaddressdisclosure.soln = Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP/PHP comment instead of HTML/JavaScript comment which can be seen by client browsers.

pscanrules.informationdisclosuredebugerrors.desc = La respuesta parec\u00eda contener mensajes de errores comunes devueltos por plataformas como ASP.NET, y los servidores web tales como ISS y Apache. Usted puede configurar la lista de mensajes comunes de depuraci\u00f3n.
pscanrules.informationdisclosuredebugerrors.name = Divulgaci\u00f3n de informaci\u00f3n - Mensajes de error de depuraci\u00f3n
pscanrules.informationdisclosuredebugerrors.soln = Inhabilitar mensajes de depuraci\u00f3n antes de empujar a la producci\u00f3n.

pscanrules.informationdisclosureinurl.desc = La petici\u00f3n aparentaba contener informaci\u00f3n sensible divulgada en el URL. Esto puede violar el PCI y las pol\u00edticas de cumplimiento m\u00e1s organizadas. Usted puede configurar la lista de cadenas para que esta comprobaci\u00f3n agregue o remueva espec\u00edficos valores de su entorno.
pscanrules.informationdisclosureinurl.name = Divulgaci\u00f3n de Informaci\u00f3n - Informaci\u00f3n sensible en URL
pscanrules.informationdisclosureinurl.otherinfo.cc = El URL aparente contener informaci\u00f3n de tarjetas de cr\u00e9dito.
pscanrules.informationdisclosureinurl.otherinfo.email = El URL contiene direcci\u00f3n(es) de correo electr\u00f3nico.
pscanrules.informationdisclosureinurl.otherinfo.sensitiveinfo = La URL contiene informaci\u00f3n potencialmente confidencial. Se encontr\u00f3 la siguiente cadena a trav\u00e9s del patr\u00f3n\: {0}\n{1}
pscanrules.informationdisclosureinurl.otherinfo.ssn = El URL parece contener N\u00famero(s) de Seguridad Social de Estados Unidos
pscanrules.informationdisclosureinurl.soln = No pase informaci\u00f3n sensible en URIs.

pscanrules.informationdisclosurereferrer.bin.field = N\u00famero de identificaci\u00f3n bancaria\:
pscanrules.informationdisclosurereferrer.brand.field = Marca\:
pscanrules.informationdisclosurereferrer.category.field = Categor\u00eda\:
pscanrules.informationdisclosurereferrer.desc = El encabezado HTTP podr\u00eda haber filtrado un par\u00e1metro potencialmente sensible a otro dominio. Esto puede violar el PCI y las pol\u00edticas de cumplimientos m\u00e1s organizadas. Puede configurar la lista de cadenas para que esta comprobaci\u00f3n agregue o remueva espec\u00edficos valores de su entorno.
pscanrules.informationdisclosurereferrer.issuer.field = Editor\:
pscanrules.informationdisclosurereferrer.name = Divulgaci\u00f3n de Informaci\u00f3n - Informaci\u00f3n sensible en el Encabezado de Referencia HTTP
pscanrules.informationdisclosurereferrer.otherinfo.cc = El URL en el campo de encabezado de referencia HTTP aparenta contener informaci\u00f3n de tarjetas de cr\u00e9dito.
pscanrules.informationdisclosurereferrer.otherinfo.email = EL URLE en el campo de encabezado de referencia HTTP contiene direcci\u00f3n(es) de correo electr\u00f3nico.
pscanrules.informationdisclosurereferrer.otherinfo.sensitiveinfo = El URL en el campo de encabezado de referencia HTTP aparenta contener informaci\u00f3n sensible.
pscanrules.informationdisclosurereferrer.otherinfo.ssn = El URL en el campo de encabezado de referencia aparenta contener n\u00famero(s) de seguridad social de Estados Unidos.
pscanrules.informationdisclosurereferrer.soln = No pase informaci\u00f3n sensible en URIs.

pscanrules.informationdisclosuresuspiciouscomments.desc = La respuesta parece contener comentarios sospechosos que pueden ayudar a un atacante. Nota\: Las coincidencias realizadas dentro de los scripts o archivos se refieren a todo el contenido, no solo a los comentarios.
pscanrules.informationdisclosuresuspiciouscomments.name = Divulgaci\u00f3n de informaci\u00f3n - Comentarios sospechosos
pscanrules.informationdisclosuresuspiciouscomments.otherinfo = The following pattern was used\: {0} and was detected in the element starting with\: "{1}", see evidence field for the suspicious comment/snippet.
pscanrules.informationdisclosuresuspiciouscomments.otherinfo2 = The following pattern was used\: {0} and was detected {2} times, the first in the element starting with\: "{1}", see evidence field for the suspicious comment/snippet.
pscanrules.informationdisclosuresuspiciouscomments.soln = Eliminar todos los comentarios que devuelvan informaci\u00f3n que podr\u00eda ayudar a un atacante y arreglar cualquier problema subyacente al que se refieran.

pscanrules.infosessionidurl.desc = URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.
pscanrules.infosessionidurl.name = Session ID in URL Rewrite
pscanrules.infosessionidurl.referrer.alert = Referer Exposes Session ID
pscanrules.infosessionidurl.referrer.desc = A hyperlink pointing to another host name was found. As session ID URL rewrite is used, it may be disclosed in referer header to external hosts.
pscanrules.infosessionidurl.referrer.soln = This is a risk if the session ID is sensitive and the hyperlink refers to an external or third party host. For secure content, put session ID in secured session cookie.
pscanrules.infosessionidurl.refs = https\://seclists.org/webappsec/2002/q4/111
pscanrules.infosessionidurl.soln = For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite.

pscanrules.insecureauthentication.desc = M\u00e9todo HTTP de autenticaci\u00f3n b\u00e1sica o por compendio (hash) ha sido utilizado sobre una conexi\u00f3n no segura. Las credenciales pueden ser le\u00eddas y luego reutilizadas por alguien con acceso a la red.
pscanrules.insecureauthentication.name = M\u00e9todo de autenticaci\u00f3n d\u00e9bil
pscanrules.insecureauthentication.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html
pscanrules.insecureauthentication.soln = Protege la conexi\u00f3n usando el protocolo HTTPS o alg\u00fan mecanismo de autenticaci\u00f3n fuerte

pscanrules.insecureformload.desc = This check looks for insecure HTTP pages that host HTTPS forms. The issue is that an insecure HTTP page can easily be hijacked through MITM and the secure HTTPS form can be replaced or spoofed.
pscanrules.insecureformload.extrainfo = The response to the following request over HTTP included an HTTPS form tag action attribute value\:\n\n{0}\nThe context was\:\n\n{1}
pscanrules.insecureformload.name = HTTP to HTTPS Insecure Transition in Form Post
pscanrules.insecureformload.refs=[cadena vac\u00eda]
pscanrules.insecureformload.soln = Use HTTPS for landing pages that host secure forms.

pscanrules.insecureformpost.desc = This check identifies secure HTTPS pages that host insecure HTTP forms. The issue is that a secure page is transitioning to an insecure page when data is uploaded through a form. The user may think they're submitting data to a secure page when in fact they are not.
pscanrules.insecureformpost.extrainfo = The response to the following request over HTTPS included an HTTP form tag action attribute value\:\n\n{0}\nThe context was\:\n\n{1}
pscanrules.insecureformpost.name = HTTPS to HTTP Insecure Transition in Form Post
pscanrules.insecureformpost.refs=[cadena vac\u00eda]
pscanrules.insecureformpost.soln = Ensure sensitive data is only sent over secured HTTPS channels.

pscanrules.insecurejsfviewstate.desc = La respuesta a la siguiente direcci\u00f3n URL contiene un valor ViewState que no posee ninguna protecci\u00f3n criptogr\u00e1fica.
pscanrules.insecurejsfviewstate.extrainfo = JSF ViewState [{0}] es inseguro
pscanrules.insecurejsfviewstate.name = JSF ViewState inseguro
pscanrules.insecurejsfviewstate.refs = https\://www.trustwave.com/spiderlabs/advisories/TWSL2010-001.txt
pscanrules.insecurejsfviewstate.soln = VIEWSTATE seguro utilizando un MAC espec\u00edfico a tu entorno

pscanrules.linktarget.desc = At least one link on this page is vulnerable to Reverse tabnabbing as it uses a target attribute without using both of the "noopener" and "noreferrer" keywords in the "rel" attribute, which allows the target page to take control of this page.
pscanrules.linktarget.name = Reverse Tabnabbing
pscanrules.linktarget.refs = https\://owasp.org/www-community/attacks/Reverse_Tabnabbing\nhttps\://dev.to/ben/the-targetblank-vulnerability-by-example\nhttps\://mathiasbynens.github.io/rel-noopener/\nhttps\://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c
pscanrules.linktarget.soln = Do not use a target attribute, or if you have to then also add the attribute\: rel\="noopener noreferrer".

pscanrules.mixedcontent.desc = The page includes mixed content, that is content accessed via HTTP instead of HTTPS.
pscanrules.mixedcontent.name = Secure Pages Include Mixed Content
pscanrules.mixedcontent.name.inclscripts = Secure Pages Include Mixed Content (Including Scripts)
pscanrules.mixedcontent.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html
pscanrules.mixedcontent.soln = A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.

pscanrules.modernapp.desc = The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.
pscanrules.modernapp.name = Modern Web Application
pscanrules.modernapp.other.links = Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.
pscanrules.modernapp.other.nolinks = No links have been found while there are scripts, which is an indication that this is a modern web application.
pscanrules.modernapp.other.noscript = A noScript tag has been found, which is an indication that the application works differently with JavaScript enabled compared to when it is not.
pscanrules.modernapp.other.self = Links have been found with a target of '_self' - this is often used by modern frameworks to force a full page reload.
pscanrules.modernapp.soln = This is an informational alert and so no changes are required.

pscanrules.name = Reglas de la exploraci\u00f3n pasiva

pscanrules.noanticsrftokens.alert.extrainfo = Ninguna ficha (token) Anti-CSRF {0} fue encontrada en los siguientes formularios HTML\: {1}.  
pscanrules.noanticsrftokens.desc = No se encontraron tokens Anti-CSRF en un formulario de env\u00edo HTML.
pscanrules.noanticsrftokens.extrainfo.annotation = Esta es una alerta informativa, porque el formulario tiene una anotaci\u00f3n de seguridad que indica que no necesita un token anti-CSRF. Esto debe probarse manualmente para asegurar que la anotaci\u00f3n es correcta.
pscanrules.noanticsrftokens.name = Ausencia de Ttokens Anti-CSRF

pscanrules.payloader.desc = Proporciona soporte para las cargas \u00fatiles personalizadas en las reglas de escaneo.
pscanrules.payloader.name = Lanzamiento de reglas de escaneo pasivo  cargas \u00fatiles personalizadas

pscanrules.pii.bin.field = N\u00famero de identificaci\u00f3n bancaria\:
pscanrules.pii.brand.field = Marca\:
pscanrules.pii.category.field = Categor\u00eda\:
pscanrules.pii.desc = The response contains Personally Identifiable Information, such as CC number, SSN and similar sensitive data.
pscanrules.pii.extrainfo = Credit Card Type detected\: {0}
pscanrules.pii.issuer.field = Editor\:
pscanrules.pii.name = PII Disclosure
pscanrules.pii.soln = Check the response for the potential presence of personally identifiable information (PII), ensure nothing sensitive is leaked by the application.

pscanrules.retrievedfromcache.desc = The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. 
pscanrules.retrievedfromcache.extrainfo.http11ageheader = The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.
pscanrules.retrievedfromcache.name = Retrieved from Cache
pscanrules.retrievedfromcache.refs = https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttps\://www.rfc-editor.org/rfc/rfc9110.html
pscanrules.retrievedfromcache.soln = Validar que la respuesta no contenga informaci\u00f3n sensible, personal o espec\u00edfica del usuario. Si es as\u00ed, considere el uso de los siguientes encabezados de respuesta HTTP para limitar o evitar que otro usuario almacene y recupere el contenido de la memoria cach\u00e9\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nEsta configuraci\u00f3n indica a los servidores de almacenamiento en cach\u00e9 compatibles con HTTP 1.0 y HTTP 1.1 que no almacenen la respuesta y que no recuperen la respuesta (sin validaci\u00f3n) del cach\u00e9, en respuesta a una solicitud similar.

pscanrules.serverheader.rule.name = HTTP Server Response Header

pscanrules.serverheaderinfoleak.desc = The web/application server is leaking the application it uses as a webserver via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to. This information alone, i.e. without a version string, is not very dangerous for the security of a server, nevertheless this information in the response header field is almost always useless and thus just an obsolete attacking vector.
pscanrules.serverheaderinfoleak.general.refs = https\://httpd.apache.org/docs/current/mod/core.html\#servertokens\nhttps\://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v\=pandp.10)\nhttps\://www.troyhunt.com/shhh-dont-let-your-response-headers/
pscanrules.serverheaderinfoleak.general.soln = Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
pscanrules.serverheaderinfoleak.name = Server Leaks its Webserver Application via "Server" HTTP Response Header Field

pscanrules.serverheaderversioninfoleak.desc = The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
pscanrules.serverheaderversioninfoleak.name = Server Leaks Version Information via "Server" HTTP Response Header Field

pscanrules.stricttransportsecurity.compliance.malformed.content.desc = A HTTP Strict Transport Security (HSTS) header was found, but it contains some content that was not expected (perhaps curly quotes), the expectation is that the content be printable ASCII characters.
pscanrules.stricttransportsecurity.compliance.malformed.content.name = Cabecera Strict-Transport-Security Content  Mal formado (Non-compliant with Spec)
pscanrules.stricttransportsecurity.compliance.malformed.content.refs = https\://datatracker.ietf.org/doc/html/rfc6797
pscanrules.stricttransportsecurity.compliance.malformed.content.soln = Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with appropriate content. 
pscanrules.stricttransportsecurity.compliance.max.age.malformed.desc = Se encontr\u00f3 una cabecera HTTP Strict Transport Security (HSTS), pero contiene comillas que preceden a la directiva de edad m\u00e1xima (el valor de edad m\u00e1xima se puede citar, pero la directiva en s\u00ed no). Consulte RFC 6797 para obtener m\u00e1s detalles.\nHTTP Strict Transport Security (HSTS) es un mecanismo de pol\u00edtica de seguridad web mediante el cual un servidor web declara que los agentes de usuario que cumplen (como un navegador web) deben interactuar con \u00e9l utilizando s\u00f3lo conexiones HTTPS seguras (es decir, HTTP en capas sobre TLS/SSL).
pscanrules.stricttransportsecurity.compliance.max.age.malformed.name = Cabecera Strict-Transport-Security Max-Age Mal formado (No cumple con las especificaciones)
pscanrules.stricttransportsecurity.compliance.max.age.malformed.refs = https\://datatracker.ietf.org/doc/html/rfc6797\#section-6.1
pscanrules.stricttransportsecurity.compliance.max.age.malformed.soln = Revise la configuraci\u00f3n de este control. Aseg\u00farese de que su servidor web, servidor de aplicaciones, balanceador de carga, etc. est\u00e9n configurados para establecer Strict-Transport-Security con un formato adecuado.
pscanrules.stricttransportsecurity.compliance.max.age.missing.desc = Se encontr\u00f3 una cabecera HTTP Strict Transport Security (HSTS), pero falta la directiva max-age (o falta un valor en la directiva). Consulte RFC 6797 para obtener m\u00e1s detalles.\nHTTP Strict Transport Security (HSTS) es un mecanismo de pol\u00edtica de seguridad web mediante el cual un servidor web declara que los agentes de usuario que cumplen (como un navegador web) deben interactuar con \u00e9l utilizando s\u00f3lo conexiones HTTPS seguras (es decir, HTTP en capas sobre TLS/SSL).
pscanrules.stricttransportsecurity.compliance.max.age.missing.name = Strict-Transport-Security Sin Max-Age (No cumple con las especificaciones)
pscanrules.stricttransportsecurity.compliance.max.age.missing.refs = https\://datatracker.ietf.org/doc/html/rfc6797\#section-6.2
pscanrules.stricttransportsecurity.compliance.max.age.missing.soln = Revise la configuraci\u00f3n de este control. Aseg\u00farese de que su servidor web, servidor de aplicaciones, balanceador de carga, etc. est\u00e9 configurado para establecer Strict-Transport-Security con un valor de edad m\u00e1xima adecuado.
pscanrules.stricttransportsecurity.compliance.meta.desc = Se encontr\u00f3 una etiqueta META HTTP Strict Transport Security (HSTS), que define HTTP Strict Transport Security (HSTS) a trav\u00e9s de una etiqueta META expl\u00edcitamente no es compatible con la especificaci\u00f3n (RFC 6797).
pscanrules.stricttransportsecurity.compliance.meta.name = Strict-Transport-Security Definido por medio de etiqueta META (No cumple con las especificaciones)
pscanrules.stricttransportsecurity.compliance.meta.refs = https\://datatracker.ietf.org/doc/html/rfc6797\#section-8.5
pscanrules.stricttransportsecurity.compliance.meta.soln = No intente configurar HTTP Strict Transport Security (HSTS) a trav\u00e9s de una etiqueta META.
pscanrules.stricttransportsecurity.compliance.multiple.header.desc = Se encontraron cabeceras HTTP Strict Transport Security (HSTS), una respuesta con m\u00faltiples entradas de encabezado HSTS no cumple con la especificaci\u00f3n (RFC 6797) y s\u00f3lo se procesar\u00e1 el primer encabezado HSTS. Los dem\u00e1s ser\u00e1n ignorados por los navegadores o la pol\u00edtica HSTS puede ser aplicado incorrectamente.\nHTTP Strict Transport Security (HSTS) es un mecanismo de pol\u00edtica de seguridad web mediante el cual un servidor web declara que los agentes de usuario que cumplen (como un navegador web) deben interactuar con \u00e9l utilizando s\u00f3lo conexiones HTTPS seguras (es decir, HTTP en capas sobre TLS/SSL).
pscanrules.stricttransportsecurity.compliance.multiple.header.name = Strict-Transport-Security M\u00faltiples Cabeceras (No cumple con las especificaciones)
pscanrules.stricttransportsecurity.compliance.multiple.header.refs = https\://datatracker.ietf.org/doc/html/rfc6797\#section-8.1
pscanrules.stricttransportsecurity.compliance.multiple.header.soln = Aseg\u00farese de que s\u00f3lo un componente en su pila\: c\u00f3digo, servidor web, servidor de aplicaciones, balanceador de carga, etc. est\u00e9 configurado para establecer o agregar un encabezado HTTP Strict-Transport-Security (HSTS).
pscanrules.stricttransportsecurity.desc = HTTP Strict Transport Security (HSTS) es un mecanismo de pol\u00edtica de seguridad web mediante el cual un servidor web declara que los agentes de usuario conformes (como un navegador web) deben interactuar con \u00e9l utilizando \u00fanicamente conexiones HTTPS seguras (es decir, HTTP superpuesto a TLS/SSL). HSTS es un protocolo de seguimiento de est\u00e1ndares del IETF y se especifica en RFC 6797.
pscanrules.stricttransportsecurity.max.age.desc = Se encontr\u00f3 un encabezado HTTP Strict Transport Security (HSTS), pero contiene la directiva max-age\=0 que desactiva el control e indica a los navegadores que restablezcan cualquier configuraci\u00f3n anterior relacionada con HSTS. Consulte RFC 6797 para obtener m\u00e1s detalles.\nHTTP Strict Transport Security (HSTS) es un mecanismo de pol\u00edtica de seguridad web mediante el cual un servidor web declara que los agentes de usuario que cumplen (como un navegador web) deben interactuar con \u00e9l utilizando s\u00f3lo conexiones HTTPS seguras (ej., HTTP sobre TLS/SSL).
pscanrules.stricttransportsecurity.max.age.name = Strict-Transport-Security Deshabilitado
pscanrules.stricttransportsecurity.max.age.refs = https\://datatracker.ietf.org/doc/html/rfc6797\#section-6.2
pscanrules.stricttransportsecurity.max.age.soln = Revise la configuraci\u00f3n de este control. Aseg\u00farese de que su servidor web, servidor de aplicaciones, balanceador de carga, etc. est\u00e9 configurado para establecer Strict-Transport-Security con un valor de edad m\u00e1xima adecuado.
pscanrules.stricttransportsecurity.name = Strict-Transport-Security Header Not Set
pscanrules.stricttransportsecurity.plain.resp.desc = Se encontr\u00f3 un cabecera HTTP Strict Transport Security (HSTS), pero las cabeceras HSTS se ignoran en las respuestas de texto plano (no HTTPS).\nHTTP Strict Transport Security (HSTS) es un mecanismo de pol\u00edtica de seguridad web mediante el cual un servidor web declara que los agentes de usuario que cumplen (como un navegador web) deben interactuar con \u00e9l utilizando solo conexiones HTTPS seguras (es decir, HTTP en capas sobre TLS/SSL).
pscanrules.stricttransportsecurity.plain.resp.name = Cabecera Strict-Transport-Security en una respuesta HTTP en texto plano
pscanrules.stricttransportsecurity.plain.resp.refs = https\://datatracker.ietf.org/doc/html/rfc6797\#section-8.1
pscanrules.stricttransportsecurity.plain.resp.soln = Revise la configuraci\u00f3n de este control. Aseg\u00farese de que su servidor web, servidor de aplicaciones, balanceador de carga, etc. est\u00e9n configurados para establecer la cabecera Strict-Transport-Security en las respuestas HTTPS.
pscanrules.stricttransportsecurity.refs = https\://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps\://owasp.org/www-community/Security_Headers\nhttps\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps\://caniuse.com/stricttransportsecurity\nhttps\://datatracker.ietf.org/doc/html/rfc6797
pscanrules.stricttransportsecurity.rule.name = Strict-Transport-Security Header
pscanrules.stricttransportsecurity.soln = Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.

pscanrules.timestampdisclosure.desc = Una marca de tiempo ha sido divulgada por el servidor de la aplicaci\u00f3n/el navegador
pscanrules.timestampdisclosure.extrainfo = {0}, que eval\u00faa a\: {1}
pscanrules.timestampdisclosure.name = Divulgaci\u00f3n de la marca de hora
pscanrules.timestampdisclosure.refs = https\://cwe.mitre.org/data/definitions/200.html
pscanrules.timestampdisclosure.soln = Confirmar manualmente que los datos de marca de hora no son sensibles, y que los datos no pueden ser agregados a patrones explotables de divulgaci\u00f3n.

pscanrules.usercontrolledcharset.desc = This check looks at user-supplied input in query string parameters and POST data to identify where Content-Type or meta tag charset declarations might be user-controlled. Such charset declarations should always be declared by the application. If an attacker can control the response charset, they could manipulate the HTML to perform XSS or other attacks. For example, an attacker controlling the <meta> element charset value is able to declare UTF-7 and is also able to include enough user-controlled payload early in the HTML document to have it interpreted as UTF-7. By encoding their payload with UTF-7 the attacker is able to bypass any server-side XSS protections and embed script in the page.
pscanrules.usercontrolledcharset.extrainfo = A(n) [{0}] tag [{1}] attribute\n\nThe user input found was\:\n{2}\={3}\n\nThe charset value it controlled was\:\n{4}
pscanrules.usercontrolledcharset.name = Juego de caracteres controlado por el usuario
pscanrules.usercontrolledcharset.refs=[cadena vac\u00eda]
pscanrules.usercontrolledcharset.soln = Fuerza UTF-8 en todas las declaraciones de conjuntos de caracteres. Si se requiere la entrada del usuario para decidir una declaraci\u00f3n de juego de caracteres, aseg\u00farese de que s\u00f3lo se use una lista permitida.

pscanrules.usercontrolledcookie.desc = This check looks at user-supplied input in query string parameters and POST data to identify where cookie parameters might be controlled. This is called a cookie poisoning attack, and becomes exploitable when an attacker can manipulate the cookie in various ways. In some cases this will not be exploitable, however, allowing URL parameters to set cookie values is generally considered a bug.
pscanrules.usercontrolledcookie.extrainfo = {0}This was identified at\:\n\n{1}\n\nUser-input was found in the following cookie\:\n{2}\n\nThe user input was\:\n{3}\={4}
pscanrules.usercontrolledcookie.extrainfo.get = An attacker may be able to poison cookie values through URL parameters.  Try injecting a semicolon to see if you can add cookie values (e.g. name\=controlledValue;name\=anotherValue;).\n\n
pscanrules.usercontrolledcookie.extrainfo.post = An attacker may be able to poison cookie values through POST parameters. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parameter. For example\:  https\://nottrusted.com/page?value\=maliciousInput.\n\n
pscanrules.usercontrolledcookie.name = Envenenamiento de Cookie
pscanrules.usercontrolledcookie.refs = https\://en.wikipedia.org/wiki/HTTP_cookie\nhttps\://cwe.mitre.org/data/definitions/565.html
pscanrules.usercontrolledcookie.soln = Do not allow user input to control cookie names and values. If some query string parameters must be set in cookie values, be sure to filter out semicolon's that can serve as name/value pair delimiters.

pscanrules.usercontrolledhtmlattributes.desc = This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
pscanrules.usercontrolledhtmlattributes.extrainfo = User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL\:\n\n{0}\n\nappears to include user input in\: \n\na(n) [{1}] tag [{2}] attribute \n\nThe user input found was\:\n{3}\={4}\n\nThe user-controlled value was\:\n{5}
pscanrules.usercontrolledhtmlattributes.name = User Controllable HTML Element Attribute (Potential XSS)
pscanrules.usercontrolledhtmlattributes.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
pscanrules.usercontrolledhtmlattributes.soln = Validate all input and sanitize output it before writing to any HTML attributes.

pscanrules.usercontrolledjavascriptevent.desc = This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
pscanrules.usercontrolledjavascriptevent.extrainfo = User-controlled javascript event(s) was found. Exploitability will need to be manually determined. The page at the following URL\:\n\n{0}\n\nincludes the following Javascript event which may be attacker-controllable\: \n\nUser-input was found in the following data of an [{1}] event\:\n{2}\n\nThe user input was\:\n{3}
pscanrules.usercontrolledjavascriptevent.name = User Controllable JavaScript Event (XSS)
pscanrules.usercontrolledjavascriptevent.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
pscanrules.usercontrolledjavascriptevent.soln = Validate all input and sanitize output it before writing to any Javascript on* events.

pscanrules.usercontrolledopenredirect.desc = Open redirects are one of the OWASP 2010 Top Ten vulnerabilities. This check looks at user-supplied input in query string parameters and POST data to identify where open redirects might be possible. Open redirects occur when an application allows user-supplied input (e.g. https\://nottrusted.com) to control an offsite redirect. This is generally a pretty accurate way to find where 301 or 302 redirects could be exploited by spammers or phishing attacks.\n\nFor example an attacker could supply a user with the following link\: https\://example.com/example.php?url\=https\://malicious.example.com.
pscanrules.usercontrolledopenredirect.extrainfo.common = {0}\n\nThe user input found was\:\n\n{1}\={2}\n\nThe context was\:\n\n{3}
pscanrules.usercontrolledopenredirect.extrainfo.get = The 301 or 302 response to a request for the following URL appeared to contain user input in the location header\:\n\n
pscanrules.usercontrolledopenredirect.extrainfo.post = An open redirect controlled by POST parameters was detected. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parameter. For example\: https\://nottrusted.com/page?url\=https\://lookout.net.\n\nThe 301 or 302 response to a request for the following URL appeared to contain user input in the location header\:\n\n
pscanrules.usercontrolledopenredirect.name = Open Redirect
pscanrules.usercontrolledopenredirect.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\nhttps\://cwe.mitre.org/data/definitions/601.html
pscanrules.usercontrolledopenredirect.soln = To avoid the open redirect vulnerability, parameters of the application script/program must be validated before sending 302 HTTP code (redirect) to the client browser. Implement safe redirect functionality that only redirects to relative URI's, or a list of trusted domains

pscanrules.usernameidor.desc = Un hash de un nombre usuario ({0}) fue encontrado en la respuesta. Esto podr\u00eda indicar que la aplicaci\u00f3n esta sujeta a una vulnerabilidad Insecure Direct Object Reference (IDOR). Pruebas manuales ser\u00e1n requeridas para ver si este descubrimiento puede ser abusado.
pscanrules.usernameidor.name = Username Hash Found
pscanrules.usernameidor.otherinfo = The hash was an {0}, with value\: {1} 
pscanrules.usernameidor.refs = https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References.html
pscanrules.usernameidor.soln = Use per user or session indirect object references (create a temporary mapping at time of use). Or, ensure that each use of a direct object reference is tied to an authorization check to ensure the user is authorized for the requested object. 

pscanrules.viewstate.content.email.desc = Los siguientes correos electr\u00f3nicos fueron encontrados siendo enumerados por serie en el campo de Viewstate\:
pscanrules.viewstate.content.email.name = Se han encontrado correos electr\u00f3nicos en el Viewstate
pscanrules.viewstate.content.email.pattern.source = Email pattern - https\://www.regular-expressions.info/email.html
pscanrules.viewstate.content.ip.desc = Las siguientes potenciales direcciones IP fueron encontradas siendo enumeradas por serie en el campo de Viewstate\:
pscanrules.viewstate.content.ip.name = Direcciones IP potenciales encontradas en el Viewstate
pscanrules.viewstate.content.ip.pattern.source = Patrones IP - https\://www.regular-expressions.info/ip.html
pscanrules.viewstate.name = Viewstate
pscanrules.viewstate.nomac.sure.desc = This website uses ASP.NET's Viewstate but without any MAC.\n\n
pscanrules.viewstate.nomac.sure.name = Viewstate sin firma de MAC (Seguro)
pscanrules.viewstate.nomac.sure.refs = https\://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff649308(v\=pandp.10)
pscanrules.viewstate.nomac.sure.soln = Aseg\u00farese que el MAC est\u00e1 establecido para todas las p\u00e1ginas en este sitio web.
pscanrules.viewstate.nomac.unsure.desc = This website uses ASP.NET's Viewstate but maybe without any MAC.\n\n
pscanrules.viewstate.nomac.unsure.name = Viewstate sin Firma de MAC (Inseguro)
pscanrules.viewstate.nomac.unsure.refs = https\://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff649308(v\=pandp.10)
pscanrules.viewstate.nomac.unsure.soln = Aseg\u00farese que el MAC est\u00e1 establecido para todas las p\u00e1ginas en este sitio web.
pscanrules.viewstate.oldver.desc = This website uses ASP.NET version 1.0 or 1.1.\n\n
pscanrules.viewstate.oldver.name = Antigua versi\u00f3n de Asp.Net en uso
pscanrules.viewstate.oldver.soln = Asegure que el marco comprometido a\u00fan es apoyado por Microsoft.
pscanrules.viewstate.soln = Verificar que la informaci\u00f3n dada no es confidencial.
pscanrules.viewstate.split.desc = This website uses ASP.NET's Viewstate and its value is split into several chunks.\n
pscanrules.viewstate.split.name = Separar el Viewstate en Uso
pscanrules.viewstate.split.soln = Ninguno - los chicos corriendo el servidor podr\u00edan haber concertado la configuraci\u00f3n como si este no fuera la configuraci\u00f3n predeterminada.

pscanrules.xaspnetversion.desc = El servidor divulga informaci\u00f3n mediante campo(s) de encabezado de respuesta HTTP "X-AspNet-Version"/"X-AspNetMvc-Version".
pscanrules.xaspnetversion.extrainfo = An attacker can use this information to exploit known vulnerabilities.
pscanrules.xaspnetversion.name = X-AspNet-Version Response Header
pscanrules.xaspnetversion.refs = https\://www.troyhunt.com/shhh-dont-let-your-response-headers/\nhttps\://blogs.msdn.microsoft.com/varunm/2013/04/23/remove-unwanted-http-response-headers/
pscanrules.xaspnetversion.soln = Configure the server so it will not return those headers.

pscanrules.xbackendserver.desc = The server is leaking information pertaining to backend systems (such as hostnames or IP addresses). Armed with this information an attacker may be able to attack other systems or more directly/efficiently attack those systems.
pscanrules.xbackendserver.extrainfo=[cadena vac\u00eda]
pscanrules.xbackendserver.name = X-Backend-Server Header Information Leak
pscanrules.xbackendserver.refs=[cadena vac\u00eda]
pscanrules.xbackendserver.soln = Ensure that your web server, application server, load balancer, etc. is configured to suppress X-Backend-Server headers.

pscanrules.xchromeloggerdata.desc = The server is leaking information through the X-ChromeLogger-Data (or X-ChromePhp-Data) response header. The content of such headers can be customized by the developer, however it is not uncommon to find\: server file system locations, vhost declarations, etc.
pscanrules.xchromeloggerdata.name = X-ChromeLogger-Data (XCOLD) Header Information Leak
pscanrules.xchromeloggerdata.otherinfo.error = Header value could not be base64 decoded\:
pscanrules.xchromeloggerdata.otherinfo.msg = The following represents an attempt to base64 decode the value\:
pscanrules.xchromeloggerdata.refs = https\://craig.is/writing/chrome-logger
pscanrules.xchromeloggerdata.soln = Disable this functionality in Production when it might leak information that could be leveraged by an attacker. Alternatively ensure that use of the functionality is tied to a strong authorization check and only available to administrators or support personnel for troubleshooting purposes not general users.

pscanrules.xcontenttypeoptions.desc = The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
pscanrules.xcontenttypeoptions.name = X-Content-Type-Options Header Missing
pscanrules.xcontenttypeoptions.otherinfo = This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.
pscanrules.xcontenttypeoptions.refs = https\://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v\=vs.85)\nhttps\://owasp.org/www-community/Security_Headers
pscanrules.xcontenttypeoptions.soln = Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.

pscanrules.xdebugtoken.desc = The response contained an X-Debug-Token or X-Debug-Token-Link header. This indicates that Symfony's Profiler may be in use and exposing sensitive data.
pscanrules.xdebugtoken.name = X-Debug-Token Information Leak
pscanrules.xdebugtoken.otherinfo = By accessing a URL in the form https\://target_host/_profiler/token_value (i.e.\: https\://example.com/_profiler_/123ab4), you may gain access to the profiler and further leaked information.
pscanrules.xdebugtoken.refs = https\://Symfony.com/doc/Current/Cookbook/Profiler/profiling_data.html \nhttps\://symfony.com/blog/new-in-symfony-2-4-quicker-access-to-the-profiler-when-working-on-an-api
pscanrules.xdebugtoken.soln = Limit access to Symfony's Profiler, either via authentication/authorization or limiting inclusion of the header to specific clients (by IP, etc.).

pscanrules.xpoweredbyheaderinfoleak.desc = El servidor de la web/aplicaci\u00f3n est\u00e1 divulgando informaci\u00f3n mediante uno o m\u00e1s encabezados de respuesta HTTP ''''X-Powered-By''''. El acceso a tal informaci\u00f3n podr\u00eda facilitarle a los atacantes la identificaci\u00f3n de otros marcos/componentes de los que su aplicaci\u00f3n web depende y las vulnerabilidades a las que pueden estar sujetos tales componentes.
pscanrules.xpoweredbyheaderinfoleak.extrainfo=[cadena vac\u00eda]
pscanrules.xpoweredbyheaderinfoleak.name = El servidor divulga informaci\u00f3n mediante un campo(s) de encabezado de respuesta HTTP ''''X-Powered-By''''
pscanrules.xpoweredbyheaderinfoleak.otherinfo.msg = Los siguientes encabezados X-Powered-By tambi\u00e9n han sido encontrados\:\n
pscanrules.xpoweredbyheaderinfoleak.refs = https\://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework\nhttps\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanrules.xpoweredbyheaderinfoleak.soln = Aseg\u00farese que su servidor web, servidor de aplicaci\u00f3n, equilibrador de carga, etc. est\u00e1 configurado para suprimir encabezados ''''X-Powered-By".

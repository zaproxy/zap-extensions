pscanrules.desc = R\u00e8gles d'analyse passive

pscanrules.payloader.desc=Provides support for custom payloads in scan rules.
pscanrules.payloader.name=Passive Scan Rules Release Custom Payloads

pscanrules.authenticationcredentialscaptured.name=Informations d'authentification captur\u00e9es
pscanrules.authenticationcredentialscaptured.desc=An insecure authentication mechanism is in use. This allows an attacker on the network access to the userid and password of the authenticated user. For Basic Authentication, the attacker must merely monitor the network traffic until a Basic Authentication request is received, and then base64 decode the username and password.  For Digest Authentication, the attacker has access to the username, and possibly also the password, if the hash (including a nonce) can be successfully cracked, or if a Man-In-The-Middle attack is mounted.\nThe attacker eavesdrops on the network until an authentication has completed.
pscanrules.authenticationcredentialscaptured.soln=Utilisez HTTPS, et utilisez un m\u00e9canisme d'authentification s\u00e9curis\u00e9 qui ne transmette pas le nom d'utilisateur ou le mot de passe de mani\u00e8re non-encrypt\u00e9e. En particulier, \u00e9vitez l'utilisation de m\u00e9canisme basique d'authentification, \u00e9tant donn\u00e9 que ce m\u00e9canisme d'obfuscation trivial est facilement cassable.
pscanrules.authenticationcredentialscaptured.refs=https\://owasp.org/www-community/attacks/Brute_force_attack\nhttp\://en.wikipedia.org/wiki/Digest_access_authentication
pscanrules.authenticationcredentialscaptured.alert.basicauth.extrainfo=[{0}] [{1}] utilise un m\u00e9canisme d''authentification vuln\u00e9rable [{2}], r\u00e9v\u00e9lant le nom d''utilisateur [{3}] et le mot de passe [{4}].
pscanrules.authenticationcredentialscaptured.alert.digestauth.extrainfo=[{0}] [{1}] utilise un m\u00e9canisme d''authentification vuln\u00e9rable [{2}], r\u00e9v\u00e9lant le nom d''utilisateur [{3}] et des informations suppl\u00e9mentaires [{4}].

pscanrules.charsetmismatch.variant.no_mismatch_metacontenttype_missing=(Meta Content-Type Charset Missing)
pscanrules.charsetmismatch.name=Incompatibilit\u00e9 de charset
pscanrules.charsetmismatch.variant.header_metacontentype_mismatch=(Header Versus Meta Content-Type Charset)
pscanrules.charsetmismatch.variant.header_metacharset_mismatch=(Header Versus Meta Charset)
pscanrules.charsetmismatch.variant.metacontenttype_metacharset_mismatch=(Meta Charset Versus Meta Content-Type Charset)
pscanrules.charsetmismatch.desc=This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there's a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content's correct character set.\n\nAn attacker could manipulate content on the page to be interpreted in an encoding of their choice. For example, if an attacker can control content at the beginning of the page, they could inject script using UTF-7 encoded text and manipulate some browsers into interpreting that text.
pscanrules.charsetmismatch.soln=Forcer UTF-8 pour tous les contenus texte dans l'en-t\u00eate HTTP et dans les meta-balises, ou pour coder les d\u00e9clarations XML.
pscanrules.charsetmismatch.refs=http\://code.google.com/p/browsersec/wiki/Part2\#Character_set_handling_and_detection
pscanrules.charsetmismatch.extrainfo.html.no_mismatch_metacontenttype_missing=Charset is defined only by META charset, older clients that expect character set to be defined by META content-type may not correctly display this content.
pscanrules.charsetmismatch.extrainfo.html.header_metacontentype_mismatch=There was a charset mismatch between the HTTP Header and the META content-type encoding declarations\: [{0}] and [{1}] do not match.
pscanrules.charsetmismatch.extrainfo.html.header_metacharset_mismatch=There was a charset mismatch between the HTTP Header and the META charset encoding declaration\: [{0}] and [{1}] do not match.
pscanrules.charsetmismatch.extrainfo.html.metacontenttype_metacharset_mismatch=There was a charset mismatch between the META charset and the META content-type encoding declaration\: [{0}] and [{1}] do not match.
pscanrules.charsetmismatch.extrainfo.xml=Il y avait une incompatibilit\u00e9 de jeu de caract\u00e8res entre l''en-t\u00eate HTTP et le d\u00e9claration de codage XML\: [{0}] et [{1}] ne correspondent pas.

pscanrules.cookiesamesite.name = Cookie without SameSite Attribute
pscanrules.cookiesamesite.none.name = Cookie with SameSite Attribute None
pscanrules.cookiesamesite.desc=Un cookie a \u00e9t\u00e9 d\u00e9finie sans les SameSite attribut, ce qui signifie que le cookie peut \u00eatre envoy\u00e9 en tant que r\u00e9sultat d'un 'cross-site' la demande. \nLe SameSite attribut est une lutte efficace contre mesure cross-site request forgery, cross-site inclusion de script, et le timing des attaques.
pscanrules.cookiesamesite.none.desc=A cookie has been set with its SameSite attribute set to "none", which means that the cookie can be sent as a result of a 'cross-site' request. \nThe SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
pscanrules.cookiesamesite.badval.name = Cookie with Invalid SameSite Attribute
pscanrules.cookiesamesite.badval.desc=Un cookie a \u00e9t\u00e9 fix\u00e9 avec une d\u00e9faillance de SameSite valeur de l'attribut, ce qui signifie que le cookie peut \u00eatre envoy\u00e9 en tant que r\u00e9sultat d'un 'cross-site' la demande. \nLe SameSite attribut est une lutte efficace contre mesure cross-site request forgery, cross-site inclusion de script, et le timing des attaques.
pscanrules.cookiesamesite.soln=Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.
pscanrules.cookiesamesite.refs=https\://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site

pscanrules.crossdomain.name=Mauvaise configuration inter-domaines
pscanrules.crossdomain.desc=Navigateur Web chargement de donn\u00e9es peut \u00eatre possible, en raison d'une Origine de la Croix de Partage de Ressources (CORS) mauvaise configuration sur le serveur web
pscanrules.crossdomain.soln=Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.
pscanrules.crossdomain.refs=http\://www.hpenterprisesecurity.com/vulncat/en/vulncat/vb/html5_overly_permissive_cors_policy.html
pscanrules.crossdomain.extrainfo=De la CORS mauvaise configuration sur le serveur web permet \u00e0 la croix-domaine de demandes de lecture de l'arbitraire tiers domaines, non authentifi\u00e9 \u00e0 l'aide d'Api sur ce domaine. Navigateur Web impl\u00e9mentations ne permettent pas de l'arbitraire des tiers pour lire la r\u00e9ponse d'authentification APIs, cependant. Cela r\u00e9duit quelque peu le risque. Cette erreur de configuration peut \u00eatre utilis\u00e9 par un attaquant d'acc\u00e9der \u00e0 des donn\u00e9es qui sont disponibles dans un non authentifi\u00e9 de mani\u00e8re, mais qui utilise une autre forme de s\u00e9curit\u00e9, telles que l'adresse IP de liste-blanche.

pscanrules.cookielooselyscoped.name=Cookie faiblement coupl\u00e9
pscanrules.cookielooselyscoped.desc=Les cookies peuvent \u00eatre limit\u00e9s par le domaine ou le chemin d'acc\u00e8s. Cette v\u00e9rification ne concerne que le p\u00e9rim\u00e8tre de domaine. Le p\u00e9rim\u00e8tre de domaine appliqu\u00e9 \u00e0 un cookie d\u00e9termine quels domaines peuvent acc\u00e9der \u00e0 ce cookie. Par exemple, un cookie peut \u00eatre limit\u00e9 strictement \u00e0 un sous-domaine, p.ex. www.nottrusted.com, ou faiblement limit\u00e9 \u00e0 un domaine parent, p.ex. nottrusted.com. Dans ce dernier cas, n'importe quel sous-domaine de nottrusted.com peut acc\u00e9der au cookie. Des cookies faiblement limit\u00e9s sont fr\u00e9quents dans les m\u00e9ga-applications, comme google.com et live.com.
pscanrules.cookielooselyscoped.soln=Toujours limiter les cookies \u00e0 un FQDN (Fully Qualified Domain Name).
pscanrules.cookielooselyscoped.refs=https\://tools.ietf.org/html/rfc6265\#section-4.1\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html\nhttp\://code.google.com/p/browsersec/wiki/Part2\#Same-origin_policy_for_cookies
pscanrules.cookielooselyscoped.extrainfo=Le domaine d''origine utilis\u00e9 pour la comparaison \u00e9tait \:\n{0}\n{1}
pscanrules.cookielooselyscoped.extrainfo.cookie={0}\n\n

pscanrules.informationdisclosuredebugerrors.name=Information Disclosure - Debug Error Messages
pscanrules.informationdisclosuredebugerrors.desc=The response appeared to contain common error messages returned by platforms such as ASP.NET, and Web-servers such as IIS and Apache. You can configure the list of common debug messages.
pscanrules.informationdisclosuredebugerrors.soln=Disable debugging messages before pushing to production.

pscanrules.informationdisclosureinurl.name=Information Disclosure - Sensitive Information in URL
pscanrules.informationdisclosureinurl.desc=The request appeared to contain sensitive information leaked in the URL. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.
pscanrules.informationdisclosureinurl.otherinfo.sensitiveinfo=The URL contains potentially sensitive information. The following string was found via the pattern\: {0}\n{1}
pscanrules.informationdisclosureinurl.otherinfo.cc=L\u2019URL semble contenir des informations de carte de cr\u00e9dit.
pscanrules.informationdisclosureinurl.otherinfo.email=L\u2019URL contient une/des adresse(s) e-mail.
pscanrules.informationdisclosureinurl.otherinfo.ssn=The URL appears to contain US Social Security Number(s)
pscanrules.informationdisclosureinurl.soln=Ne transmettez pas d'informations sensibles dans les URIs.

pscanrules.informationdisclosurereferrer.name=Divulgation d\u2019information - informations sensibles dans l\u2019en-t\u00eate HTTP Referrer
pscanrules.informationdisclosurereferrer.desc=The HTTP header may have leaked a potentially sensitive parameter to another domain. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.
pscanrules.informationdisclosurereferrer.otherinfo.sensitiveinfo=The URL in the HTTP referrer header field appears to contain sensitive information.
pscanrules.informationdisclosurereferrer.otherinfo.cc=The URL in the HTTP referrer header field appears to contain credit card information.
pscanrules.informationdisclosurereferrer.otherinfo.email=The URL in the HTTP referrer header field contains email address(es).
pscanrules.informationdisclosurereferrer.otherinfo.ssn=The URL in the HTTP referrer header field appears to contain US Social Security Number(s).
pscanrules.informationdisclosurereferrer.soln=Ne transmettez pas d'informations sensibles dans les URIs.
pscanrules.informationdisclosurereferrer.bin.field=Bank Identification Number\:
pscanrules.informationdisclosurereferrer.brand.field=Brand\:
pscanrules.informationdisclosurereferrer.category.field=Category\:
pscanrules.informationdisclosurereferrer.issuer.field=\u00c9metteur\:

pscanrules.informationdisclosuresuspiciouscomments.name=Information Disclosure - Suspicious Comments
pscanrules.informationdisclosuresuspiciouscomments.desc=The response appears to contain suspicious comments which may help an attacker. Note\: Matches made within script blocks or files are against the entire content not only comments.
pscanrules.informationdisclosuresuspiciouscomments.otherinfo=The following pattern was used\: {0} and was detected in the element starting with\: "{1}", see evidence field for the suspicious comment/snippet.
pscanrules.informationdisclosuresuspiciouscomments.otherinfo2=The following pattern was used\: {0} and was detected {2} times, the first in the element starting with\: "{1}", see evidence field for the suspicious comment/snippet.
pscanrules.informationdisclosuresuspiciouscomments.soln=Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.

pscanrules.insecureauthentication.name=M\u00e9thode d'Authentification Faible
pscanrules.insecureauthentication.desc=Du HTTP basique ou de l'authentification simple a \u00e9t\u00e9 utilis\u00e9 sur une connexion non-s\u00e9curis\u00e9e. Les informations de s\u00e9curit\u00e9 ont pu \u00eatre lue et r\u00e9utilis\u00e9e par une personne ayant acc\u00e8s au r\u00e9seau.
pscanrules.insecureauthentication.soln=Prot\u00e9gez la connexion en utilisant HTTPS ou utilisez un m\u00e9canisme d'authenfication plus fort
pscanrules.insecureauthentication.refs=https\://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html

pscanrules.insecurejsfviewstate.name=JSF ViewState non-s\u00e9curis\u00e9
pscanrules.insecurejsfviewstate.desc=La r\u00e9ponse \u00e0 l'URL suivante contient une valeur ViewState qui n'a aucune protection cryptographique.
pscanrules.insecurejsfviewstate.soln=S\u00e9curisez VIEWSTATE avec un MAC sp\u00e9cifique \u00e0 votre environnement
pscanrules.insecurejsfviewstate.refs=https\://www.trustwave.com/spiderlabs/advisories/TWSL2010-001.txt
pscanrules.insecurejsfviewstate.extrainfo=Le JSF ViewState [{0}] n''est pas s\u00e9curis\u00e9

pscanrules.noanticsrftokens.name=Absence de Jetons Anti-CSRF
pscanrules.noanticsrftokens.desc=Aucun jetons Anti-CSRF n'ont \u00e9t\u00e9 trouv\u00e9s dans un formulaire HTML.
pscanrules.noanticsrftokens.alert.extrainfo=Aucun jetons Anti-CSRF connus {0} n''a \u00e9t\u00e9 trouv\u00e9 dans le formulaire HTML suivant\: {1}.  
pscanrules.noanticsrftokens.extrainfo.annotation=Ceci est une alerte informative car le formulaire a une annotation de s\u00e9curit\u00e9 indiquant qu'il n'a pas besoin de jeton anti-CSRF. Ceci devrait \u00eatre test\u00e9 manuellement pour \u00eatre s\u00fbr que cette annotation est correcte.

pscanrules.timestampdisclosure.name=Timestamp Disclosure
pscanrules.timestampdisclosure.desc=A timestamp was disclosed by the application/web server
pscanrules.timestampdisclosure.soln=V\u00e9rifier manuellement que l'horodatage des donn\u00e9es n'est pas sensible, et que les donn\u00e9es ne peuvent pas \u00eatre agr\u00e9g\u00e9s \u00e0 divulguer des mod\u00e8les exploitables.
pscanrules.timestampdisclosure.refs=http\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanrules.timestampdisclosure.extrainfo={0}, which evaluates to\: {1}

pscanrules.usernameidor.name = Username Hash Found
pscanrules.usernameidor.desc = A hash of a username ({0}) was found in the response. This may indicate that the application is subject to an Insecure Direct Object Reference (IDOR) vulnerability. Manual testing will be required to see if this discovery can be abused.
pscanrules.usernameidor.otherinfo = The hash was an {0}, with value\: {1} 
pscanrules.usernameidor.soln = D'utilisation par utilisateur ou de la session indirects r\u00e9f\u00e9rences de l'objet (cr\u00e9er un mappage temporaire au moment de l'utilisation). Ou, s'assurer que chaque utilisation d'un objet direct de r\u00e9f\u00e9rence est li\u00e9e \u00e0 une demande d'autorisation pour s'assurer que l'utilisateur est autoris\u00e9 pour l'objet demand\u00e9. 
pscanrules.usernameidor.refs = https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References.html

pscanrules.xaspnetversion.name = X-AspNet-Version Response Header
pscanrules.xaspnetversion.desc =  Server leaks information via "X-AspNet-Version"/"X-AspNetMvc-Version" HTTP response header field(s).
pscanrules.xaspnetversion.soln = Configure the server so it will not return those headers.
pscanrules.xaspnetversion.extrainfo = Un attaquant peut utiliser ces informations pour exploiter les vuln\u00e9rabilit\u00e9s connues.
pscanrules.xaspnetversion.refs = https\://www.troyhunt.com/shhh-dont-let-your-response-headers/\nhttps\://blogs.msdn.microsoft.com/varunm/2013/04/23/remove-unwanted-http-response-headers/

pscanrules.xdebugtoken.name=X-Debug-Token Information Leak
pscanrules.xdebugtoken.desc=The response contained an X-Debug-Token or X-Debug-Token-Link header. This indicates that Symfony's Profiler may be in use and exposing sensitive data.
pscanrules.xdebugtoken.otherinfo=By accessing a URL in the form http\://target_host/_profiler/token_value (i.e.\: http\://example.com/_profiler_/123ab4), you may gain access to the profiler and further leaked information.
pscanrules.xdebugtoken.refs=https\://symfony.com/doc/current/cookbook/profiler/profiling_data.html\nhttps\://symfony.com/blog/new-in-symfony-2-4-quicker-access-to-the-profiler-when-working-on-an-api
pscanrules.xdebugtoken.soln=Limit access to Symfony's Profiler, either via authentication/authorization or limiting inclusion of the header to specific clients (by IP, etc.).

pscanrules.xpoweredbyheaderinfoleak.name=Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)
pscanrules.xpoweredbyheaderinfoleak.desc=Le web/serveur d'application est une fuite de l'information, via un ou plusieurs "X-Powered-By" t\u00eates de r\u00e9ponse HTTP. L'acc\u00e8s \u00e0 ces informations peut faciliter les attaquants d'identifier d'autres frameworks/composants de votre application web est tributaire et les vuln\u00e9rabilit\u00e9s de tels composants peuvent \u00eatre soumis.
pscanrules.xpoweredbyheaderinfoleak.refs=http\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanrules.xpoweredbyheaderinfoleak.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
pscanrules.xpoweredbyheaderinfoleak.extrainfo=\ 
pscanrules.xpoweredbyheaderinfoleak.otherinfo.msg=The following X-Powered-By headers were also found\:\r\n

pscanrules.xframeoptions.name = X-Frame-Options Header
pscanrules.xframeoptions.incInCsp = The Content-Security-Policy does include a 'frame-ancestors' element which takes precedence over the X-Frame-Options header, which is why this has been raised with a LOW risk.  
pscanrules.xframeoptions.missing.name = X-Frame-Options Header Not Set
pscanrules.xframeoptions.missing.desc = X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.
pscanrules.xframeoptions.missing.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
pscanrules.xframeoptions.missing.soln = Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's "frame-ancestors" directive. 
pscanrules.xframeoptions.multiple.header.name = Multiple X-Frame-Options Header Entries
pscanrules.xframeoptions.multiple.header.desc = X-Frame-Options (XFO) headers were found, a response with multiple XFO header entries may not be predictably treated by all user-agents.
pscanrules.xframeoptions.multiple.header.refs = https\://tools.ietf.org/html/rfc7034
pscanrules.xframeoptions.multiple.header.soln = Ensure only a single X-Frame-Options header is present in the response.
pscanrules.xframeoptions.compliance.meta.name = X-Frame-Options Defined via META (Non-compliant with Spec)
pscanrules.xframeoptions.compliance.meta.desc = An X-Frame-Options (XFO) META tag was found, defining XFO via a META tag is explicitly not supported by the spec (RFC 7034).
pscanrules.xframeoptions.compliance.meta.refs = https\://tools.ietf.org/html/rfc7034\#section-4
pscanrules.xframeoptions.compliance.meta.soln = Ensure X-Frame-Options is set via a response header field.  Alternatively consider implementing Content Security Policy's "frame-ancestors" directive.
pscanrules.xframeoptions.compliance.malformed.setting.name = X-Frame-Options Setting Malformed
pscanrules.xframeoptions.compliance.malformed.setting.desc = An X-Frame-Options header was present in the response but the value was not correctly set.
pscanrules.xframeoptions.compliance.malformed.setting.refs = https\://tools.ietf.org/html/rfc7034\#section-2.1
pscanrules.xframeoptions.compliance.malformed.setting.soln = Ensure a valid setting is used on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  Alternatively consider implementing Content Security Policy's "frame-ancestors" directive.

pscanrules.xcontenttypeoptions.name = X-Content-Type-Options Header Missing
pscanrules.xcontenttypeoptions.desc = The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
pscanrules.xcontenttypeoptions.otherinfo = This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.
pscanrules.xcontenttypeoptions.refs = http\://msdn.microsoft.com/en-us/library/ie/gg622941%28v\=vs.85%29.aspx\nhttps\://owasp.org/www-community/Security_Headers
pscanrules.xcontenttypeoptions.soln = Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.

pscanrules.applicationerrors.name = Application Error Disclosure
pscanrules.applicationerrors.desc = This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.
pscanrules.applicationerrors.soln = Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.

pscanrules.cachecontrol.name = Incomplete or No Cache-control Header Set
pscanrules.cachecontrol.desc = The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.
pscanrules.cachecontrol.soln = Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.
pscanrules.cachecontrol.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html\#web-content-caching\nhttps\://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control

pscanrules.contenttypemissing.name = Content-Type Header Missing
pscanrules.contenttypemissing.name.empty = Content-Type Header Empty
pscanrules.contenttypemissing.desc = The Content-Type header was either missing or empty.
pscanrules.contenttypemissing.soln=Ensure each page is setting the specific and appropriate content-type value for the content being delivered.
pscanrules.contenttypemissing.refs=http\://msdn.microsoft.com/en-us/library/ie/gg622941%28v\=vs.85%29.aspx

pscanrules.cookiehttponly.name = Cookie No HttpOnly Flag
pscanrules.cookiehttponly.desc=A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
pscanrules.cookiehttponly.soln=Ensure that the HttpOnly flag is set for all cookies.
pscanrules.cookiehttponly.refs=https\://owasp.org/www-community/HttpOnly

pscanrules.cookiesecureflag.name = Cookie Without Secure Flag
pscanrules.cookiesecureflag.desc=A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
pscanrules.cookiesecureflag.soln=Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.
pscanrules.cookiesecureflag.refs=https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html

pscanrules.crossdomainscriptinclusion.name = Cross-Domain JavaScript Source File Inclusion
pscanrules.crossdomainscriptinclusion.desc=The page includes one or more script files from a third-party domain.
pscanrules.crossdomainscriptinclusion.soln=Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.

pscanrules.csp.name=CSP
pscanrules.csp.desc=Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanrules.csp.desc.extended=\n\nThe directive(s)\: {0} are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.
pscanrules.csp.refs=http\://www.w3.org/TR/CSP2/\nhttp\://www.w3.org/TR/CSP/\nhttp\://caniuse.com/\#search\=content+security+policy\nhttp\://content-security-policy.com/\nhttps\://github.com/shapesecurity/salvation\nhttps\://developers.google.com/web/fundamentals/security/csp\#policy_applies_to_a_wide_variety_of_resources
pscanrules.csp.soln=Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.
pscanrules.csp.notices.name=Notices
pscanrules.csp.notices.errors=Errors\:
pscanrules.csp.notices.warnings=Warnings\:
pscanrules.csp.notices.infoitems=Info Items\:
pscanrules.csp.scriptsrc.unsafe.name=script-src unsafe-inline
pscanrules.csp.scriptsrc.unsafe.desc=script-src includes unsafe-inline.
pscanrules.csp.stylesrc.unsafe.name=style-src unsafe-inline
pscanrules.csp.stylesrc.unsafe.desc=style-src includes unsafe-inline.
pscanrules.csp.wildcard.name=Wildcard Directive
pscanrules.csp.wildcard.desc=The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined\: \n{0}
pscanrules.csp.xcsp.name=X-Content-Security-Policy
pscanrules.csp.xcsp.desc=The header X-Content-Security-Policy was found on this response. While it is a good sign that CSP is implemented to some degree the policy specified in this header has not been analyzed by ZAP. To ensure full support by modern browsers ensure that the Content-Security-Policy header is defined and attached to responses.
pscanrules.csp.xwkcsp.name=X-WebKit-CSP
pscanrules.csp.xwkcsp.desc=The header X-WebKit-CSP was found on this response. While it is a good sign that CSP is implemented to some degree the policy specified in this header has not been analyzed by ZAP. To ensure full support by modern browsers ensure that the Content-Security-Policy header is defined and attached to responses.

pscanrules.mixedcontent.name = Secure Pages Include Mixed Content
pscanrules.mixedcontent.name.inclscripts = Secure Pages Include Mixed Content (Including Scripts)
pscanrules.mixedcontent.desc=The page includes mixed content, that is content accessed via HTTP instead of HTTPS.
pscanrules.mixedcontent.soln=A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.
pscanrules.mixedcontent.refs=https\://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html

pscanrules.infoprivateaddressdisclosure.name = Private IP Disclosure
pscanrules.infoprivateaddressdisclosure.desc = A private IP (such as 10.x.x.x, 172.x.x.x, 192.168.x.x) or an Amazon EC2 private hostname (for example, ip-10-0-56-78) has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.
pscanrules.infoprivateaddressdisclosure.soln = Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP/PHP comment instead of HTML/JavaScript comment which can be seen by client browsers.
pscanrules.infoprivateaddressdisclosure.refs = https\://tools.ietf.org/html/rfc1918

pscanrules.infosessionidurl.name = Session ID in URL Rewrite
pscanrules.infosessionidurl.desc = URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.
pscanrules.infosessionidurl.soln = For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite.
pscanrules.infosessionidurl.refs = http\://seclists.org/lists/webappsec/2002/Oct-Dec/0111.html
pscanrules.infosessionidurl.referrer.alert = Referer Exposes Session ID
pscanrules.infosessionidurl.referrer.desc = A hyperlink pointing to another host name was found. As session ID URL rewrite is used, it may be disclosed in referer header to external hosts.
pscanrules.infosessionidurl.referrer.soln = This is a risk if the session ID is sensitive and the hyperlink refers to an external or third party host. For secure content, put session ID in secured session cookie.

pscanrules.viewstate.name=Viewstate
pscanrules.viewstate.soln=Verify the provided information isn't confidential.
pscanrules.viewstate.oldver.name=Old Asp.Net Version in Use
pscanrules.viewstate.oldver.desc=*** EXPERIMENTAL ***\nThis website uses ASP.NET version 1.0 or 1.1.\n\n
pscanrules.viewstate.oldver.soln=Ensure the engaged framework is still supported by Microsoft.
pscanrules.viewstate.nomac.unsure.name=Viewstate without MAC Signature (Unsure)
pscanrules.viewstate.nomac.unsure.desc=*** EXPERIMENTAL ***\nThis website uses ASP.NET's Viewstate but maybe without any MAC.\n\n
pscanrules.viewstate.nomac.unsure.soln=Ensure the MAC is set for all pages on this website.
pscanrules.viewstate.nomac.unsure.refs=http\://msdn.microsoft.com/en-us/library/ff649308.aspx
pscanrules.viewstate.nomac.sure.name=Viewstate without MAC Signature (Sure)
pscanrules.viewstate.nomac.sure.desc=*** EXPERIMENTAL ***\nThis website uses ASP.NET's Viewstate but without any MAC.\n\n
pscanrules.viewstate.nomac.sure.soln=Ensure the MAC is set for all pages on this website.
pscanrules.viewstate.nomac.sure.refs=http\://msdn.microsoft.com/en-us/library/ff649308.aspx
pscanrules.viewstate.split.name=Split Viewstate in Use
pscanrules.viewstate.split.desc=*** EXPERIMENTAL ***\nThis website uses ASP.NET's Viewstate and its value is split into several chunks.\n
pscanrules.viewstate.split.soln=None - the guys running the server may have tuned the configuration as this isn't the default setting.
pscanrules.viewstate.content.email.name=Emails Found in the Viewstate
pscanrules.viewstate.content.email.desc=The following emails were found being serialized in the viewstate field\:
pscanrules.viewstate.content.email.pattern.source=Email pattern - http\://www.regular-expressions.info/regexbuddy/email.html
pscanrules.viewstate.content.ip.name=Potential IP Addresses Found in the Viewstate
pscanrules.viewstate.content.ip.desc=The following potential IP addresses were found being serialized in the viewstate field\:
pscanrules.viewstate.content.ip.pattern.source=IP pattern - http\://www.regular-expressions.info/examples.html

ascanbeta.desc = Reglas de escaneo activas - beta

ascanbeta.backupfiledisclosure.name = Divulgaci\u00f3n del archivo de respaldo
ascanbeta.backupfiledisclosure.desc = Una copia de seguridad del archivo fue divulgada por el servidor web
ascanbeta.backupfiledisclosure.soln = No editar archivos in-situ en el servidor web y aseg\u00farese de que se eliminan archivos no necesarios (incluyendo archivos ocultos) desde el servidor web.
ascanbeta.backupfiledisclosure.evidence = Una copia de [{0}] est\u00e1 disponible en [{1}]
ascanbeta.backupfiledisclosure.refs = https\://cwe.mitre.org/data/definitions/530.html\n\
https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.html

ascanbeta.cloudmetadata.name = Cloud Metadata Potentially Exposed
ascanbeta.cloudmetadata.desc = The Cloud Metadata Attack attempts to abuse a misconfigured NGINX server in order to access the instance metadata maintained by cloud service providers such as AWS, GCP and Azure.\n\
\n\
All of these providers provide metadata via an internal unroutable IP address '169.254.169.254' - this can be exposed by incorrectly configured NGINX servers and accessed by using this IP address in the Host header field.
ascanbeta.cloudmetadata.otherinfo = Based on the successful response status code cloud metadata may have been returned in the response. Check the response data to see if any cloud metadata has been returned.\n\
\n\
The meta data returned can include information that would allow an attacker to completely compromise the system.
ascanbeta.cloudmetadata.refs = https\://www.nginx.com/blog/trust-no-one-perils-of-trusting-user-input/
ascanbeta.cloudmetadata.soln = Do not trust any user data in NGINX configs. In this case it is probably the use of the $host variable which is set from the 'Host' header and can be controlled by an attacker.

ascanbeta.cookieslack.name = Cookie Slack Detector
ascanbeta.cookieslack.desc = Repeated GET requests\: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.
ascanbeta.cookieslack.otherinfo.intro = Cookies that don't have expected effects can reveal flaws in application logic. In the worst case, this can reveal where authentication via cookie token(s) is not actually enforced.\n\

ascanbeta.cookieslack.session.warning = NOTE\: Because of its name this cookie may be important, but dropping it appears to have no effect\: [{0}] \n\

ascanbeta.cookieslack.affect.response.yes = These cookies affected the response\: 
ascanbeta.cookieslack.affect.response.no = These cookies did NOT affect the response\: 
ascanbeta.cookieslack.session.destroyed = Dropping this cookie appears to have invalidated the session\: [{0}] A follow-on request with all original cookies still had a different response than the original request. \n\

ascanbeta.cookieslack.separator = ,
ascanbeta.cookieslack.endline = \n\


ascanbeta.crossdomain.name = Desconfiguraci\u00f3n de Dominio cruzado
#the refs cannot be customised for each sub-category (Adobe, Silverlight, etc.)
ascanbeta.crossdomain.refs = http\://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html\n\
http\://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf\n\
http\://msdn.microsoft.com/en-US/library/cc197955%28v\=vs.95%29.aspx\n\
http\://msdn.microsoft.com/en-us/library/cc838250%28v\=vs.95%29.aspx
ascanbeta.crossdomain.adobe.read.name = Desconfiguraci\u00f3n de Dominio cruzado - Adobe - Leer
ascanbeta.crossdomain.adobe.send.name = Desconfiguraci\u00f3n de Dominio Cruzado - Adobe - Enviar
ascanbeta.crossdomain.adobe.desc = La falsificaci\u00f3n de solicitud entre sitios basada en Flash / Silverlight puede ser posible debido a una configuraci\u00f3n incorrecta en el servidor web. 
ascanbeta.crossdomain.adobe.read.soln = Configure el archivo crossdomain.xml para restringir la lista de dominios que pueden realizar solicitudes de lectura entre dominios a este servidor web, usando <allow-access-from domain\="example.com">. S\u00f3lo debe conceder acceso a "*" (todos los dominios) si est\u00e1 seguro de que este servicio no hospeda ning\u00fan dato controlado, personalizado o privado.
ascanbeta.crossdomain.adobe.read.extrainfo = El servidor web permite las solicitudes de lectura de datos entre dominios maliciosos procedentes de componentes Flash/Silverlight servidos desde cualquier dominio de terceros, hacia este dominio. Si el nombre de usuario de la v\u00edctima ha iniciado sesi\u00f3n en este servicio, las solicitudes de lectura maliciosa se procesan utilizando los privilegios de la v\u00edctima y pueden resultar en que los datos de este servicio sean comprometidos por un sitio web de terceros no autorizados, a trav\u00e9s del navegador web de la v\u00edctima. Esto es muy probable que sea un problema si se est\u00e1 utilizando una implementaci\u00f3n de sesi\u00f3n que se basa en cookies. 
ascanbeta.crossdomain.adobe.send.soln = Configure el archivo crossdomain.xml para restringir la lista de dominios que pueden realizar solicitudes de env\u00edo entre dominios (pero no necesariamente ser le\u00eddas) a este servidor web, utilizando <allow-http-request-headers-from domain\="example.com" headers\="Authorization,X-Blahh">. S\u00f3lo debe conceder acceso a "*" (todos los dominios) si est\u00e1 seguro de que este servicio no es vulnerable a ataques de falsificaci\u00f3n de solicitudes de sitios cruzados (CSRF).
ascanbeta.crossdomain.adobe.send.extrainfo = El servidor web permite que los datos maliciosos entre dominios env\u00eden (pero no necesariamente se lean) solicitudes procedentes de componentes Flash/Silverlight servidos desde cualquier dominio de terceras partes, a este dominio. Si el nombre de usuario de la v\u00edctima ha iniciado sesi\u00f3n en este servicio, las solicitudes de env\u00edo maliciosos se procesan utilizando los privilegios de la v\u00edctima y pueden resultar en ataques de tipo falsificaci\u00f3n (CSRF) de solicitud de sitio cruzado, a trav\u00e9s del explorador web de la v\u00edctima. Esto es muy posible que sea un problema si se est\u00e1 utilizando una implementaci\u00f3n de sesi\u00f3n basada en cookies.
ascanbeta.crossdomain.silverlight.name = Desconfiguraci\u00f3n de Dominio Cruzado - LuzPlateada
ascanbeta.crossdomain.silverlight.desc = Puede ser posible la falsificaci\u00f3n de solicitudes entre sitios basada en Silverlight, debido a una configuraci\u00f3n err\u00f3nea en el servidor web.
ascanbeta.crossdomain.silverlight.soln = Configure el archivo clientaccesspolicy.xml para restringir la lista de dominios que pueden realizar solicitudes entre dominios a este servidor web, mediante <domain uri\="https\://example.com"/>. S\u00f3lo debe conceder acceso a "*" (todos los dominios) si est\u00e1 seguro de que este servicio no hospeda ning\u00fan dato controlado, personalizado o privado.
ascanbeta.crossdomain.silverlight.extrainfo = Un servidor web con los componentes de Silverlight, servidos desde cualquier dominio de terceros, a este dominio, le permite solicitudes maliciosas de dominios cruzados. Si la v\u00edctima est\u00e1 conectada a este servicio, las solicitudes maliciosas se har\u00e1n usando los privilegios de la v\u00edctima, y adem\u00e1s se puede hacer que los datos del servicio sean expuestos por un sitio web de terceros sin autorizaci\u00f3n, usando los navegadores web de la v\u00edctima. Esto puede resultar en ataques de tipo "Cross Site Request Forgery" (CSRF). Esto ser\u00e1 un problema muy probable, si una sesi\u00f3n basada en Cookie est\u00e1 en implementada y en uso.

ascanbeta.csrftoken.name=Anti-CSRF Tokens Check
ascanbeta.csrftoken.extrainfo.annotation = Esta es una alerta informativa, porque el formulario tiene una anotaci\u00f3n de seguridad que indica que no necesita un token anti-CSRF. Esto debe probarse manualmente para asegurar que la anotaci\u00f3n es correcta.

ascanbeta.envfiles.name = .env Information Leak
ascanbeta.envfiles.desc = One or more .env files seems to have been located on the server. These files often expose infrastructure or administrative account credentials, API or APP keys, or other sensitive configuration information. 
ascanbeta.envfiles.otherinfo = Based on response status code the .env file may be protected by an authentication or authorization mechanism.
ascanbeta.envfiles.refs = https\://www.google.com/search?q\=db_password+filetype%3Aenv\n\
https\://mobile.twitter.com/svblxyz/status/1045013939904532482
ascanbeta.envfiles.soln = Ensure the .env file is not accessible.

ascanbeta.getforpost.name=GET for POST
ascanbeta.getforpost.desc=A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to Cross-Site Scripting (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible.
ascanbeta.getforpost.soln=Ensure that only POST is accepted where POST is expected.

ascanbeta.heartbleed.name=Vulnerabilidades de OpenSLL HeartBleed
ascanbeta.heartbleed.desc=La implementaci\u00f3n de TLS en OpenSSL 1.0.1 antes de 1.0.1g, no maneja adecuadamente los paquetes de extensi\u00f3n de latido, lo que permite a los atacantes remotos obtener informaci\u00f3n confidencial de la memoria de proceso mediante paquetes hechos a mano que desencadenan un b\u00fafer de lectura excesiva, para potencialmente revelar informaci\u00f3n confidencial.
ascanbeta.heartbleed.soln=Actualice a OpenSSL 1.0. 1g o luego. Vuelva a emitir los certificados de HTTPS. Modificar las claves que son privadas y asim\u00e9tricas y tambi\u00e9n las claves secretadas compartidas, ya que estos pueden estar comprometidos, sin evidencia de compromiso en los archivos de registro del servidor.
ascanbeta.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
ascanbeta.heartbleed.extrainfo=Este problema se confirm\u00f3 mediante la recopilaci\u00f3n de datos del servidor, utilizando{0}. Es poco probable que sea un falso positivo.

ascanbeta.hidden.files.name = Hidden File Finder
ascanbeta.hidden.files.alert.name = Hidden File Found
ascanbeta.hidden.files.desc = A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.
ascanbeta.hidden.files.otherinfo = {0}
ascanbeta.hidden.files.refs = https\://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html
ascanbeta.hidden.files.soln = Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.

ascanbeta.HTTPParamPoll.name = Infecci\u00f3n de los par\u00e1metros HTTP
ascanbeta.HTTPParamPoll.desc = Los ataques de "par\u00e1metros de contaminaci\u00f3n HTTP" (HPP) funcionan inyectando delimitadores de cadenas de consulta, que han sido codificadas en los otros par\u00e1metros ya existentes. De una aplicaci\u00f3n web no desinfectar en \u00e9xito la entrada del usuario, entonces un usuario malintencionado pudiera poner en peligro la l\u00f3gica de la aplicaci\u00f3n, para as\u00ed realizar ataques desde el cliente o desde el servidor. Las consecuencias de los ataques HPP es que el atacante pudiera anular por completo los par\u00e1metros codificados HTTP ya existentes, y as\u00ed modificar el comportamiento de una aplicaci\u00f3n, evadir los puntos de verificaci\u00f3n de validaci\u00f3n de entrada y adem\u00e1s poder acceder y explotar las variables que puedan estar m\u00e1s all\u00e1 del alcance directo del mismo.
ascanbeta.HTTPParamPoll.sol =  Desinfectar la entrada del usuario de forma correcta para los delimitadores de los par\u00e1metros
ascanbeta.HTTPParamPoll.alert.attack = Infecci\u00f3n de los par\u00e1metros HTTP
ascanbeta.HTTPParamPoll.extrainfo = http\://www.google.com/search?q\=http+parameter+pollution

ascanbeta.httponlysite.name = HTTP Only Site
ascanbeta.httponlysite.desc = The site is only served under HTTP and not HTTPS.
ascanbeta.httponlysite.soln = Configure your web or application server to use SSL (https).
ascanbeta.httponlysite.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\n\
https\://letsencrypt.org/
ascanbeta.httponlysite.otherinfo = {0}\n\
ZAP attempted to connect via\: {1}
ascanbeta.httponlysite.otherinfo.connectionfail = Failed to connect.
ascanbeta.httponlysite.otherinfo.differenthosts = Different Hosts.
ascanbeta.httponlysite.otherinfo.redirectionlimit = Redirection limit reached.
ascanbeta.httponlysite.otherinfo.noredirection = There was no automatic redirection.
ascanbeta.httponlysite.otherinfo.nossl = Site has no SSL/TLS support.
ascanbeta.httponlysite.otherinfo.redirecttohttp = Redirected to HTTP.
ascanbeta.httponlysite.otherinfo.urinotencoded = Redirection URI couldn't be encoded.

ascanbeta.httpoxy.name = Httpoxy - Proxy Header Misuse
ascanbeta.httpoxy.desc = The server initiated a proxied request via the proxy specified in the HTTP Proxy header of the request.\n\
Httpoxy typically affects code running in CGI or CGI like environments.\n\
\n\
This may allow attackers to\:\n\
\n\
* Proxy the outgoing HTTP requests made by the web application\n\
\n\
* Direct the server to open outgoing connections to an address and port of their choosing or\n\
\n\
* Tie up server resources by forcing the vulnerable software to use a malicious proxy
ascanbeta.httpoxy.otherinfo = An outgoing message to {0} was proxied via the host and port that ZAP injected into the HTTP Proxy header.
ascanbeta.httpoxy.soln = The best immediate mitigation is to block Proxy request headers as early as possible, and before they hit your application.
ascanbeta.httpoxy.refs = https\://httpoxy.org/

ascanbeta.httpsashttp.name = HTTPS Content Available via HTTP
ascanbeta.httpsashttp.desc = Content which was initially accessed via HTTPS (i.e.\: using SSL/TLS encryption) is also accessible via HTTP (without encryption). 
ascanbeta.httpsashttp.soln = Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.
ascanbeta.httpsashttp.refs = https\://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\n\
https\://owasp.org/www-community/Security_Headers\n\
http\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\n\
http\://caniuse.com/stricttransportsecurity\n\
http\://tools.ietf.org/html/rfc6797
ascanbeta.httpsashttp.otherinfo=ZAP attempted to connect via\: {0}

ascanbeta.insecurehttpmethod.name = M\u00e9todo HTTP inseguro
ascanbeta.insecurehttpmethod.detailed.name = M\u00e9todo inseguro de HTTP - {0}
ascanbeta.insecurehttpmethod.potentiallyinsecure = response code {0} for potentially insecure HTTP METHOD
ascanbeta.insecurehttpmethod.insecure = response code {0} for insecure HTTP METHOD
ascanbeta.insecurehttpmethod.desc = El m\u00e9todo HTTP inseguro [{0}] est\u00e1 activado en este servidor web, para este recurso. Depende de la configuraci\u00f3n del servidor web y de la implementaci\u00f3n subyacente, responsable de proporcionar el recurso, pudiera ser explotable o no. Es posible que los m\u00e9todos TRACK y TRACE sean utilizados por un atacante, para as\u00ed ganar acceso a la cookie de la sesi\u00f3n/token de autorizaci\u00f3n que tiene un usuario de la aplicaci\u00f3n, incluyendo si la cookie de sesi\u00f3n est\u00e1 protegida con el indicador ''HttpOnly''. El ataque sea exitoso si el usuario de la aplicaci\u00f3n debe usar un navegador web antiguo o un navegador web que tenga la vulnerabilidad que omita la Pol\u00edtica de Origen (SOP). Tambi\u00e9n el m\u00e9todo ''CONNECT'' lo puede usar un cliente web para crear un t\u00fanel HTTP hacia sitios web o hacia servicios de terceros.
ascanbeta.insecurehttpmethod.trace.exploitable.desc = El m\u00e9todo HTTP inseguro [{0}] est\u00e1 habilitado para este recurso y es explotable. Un atacante puede utilizar los m\u00e9todos "Track and Trace" para obtener acceso a la cookie del token o sesi\u00f3n de autorizaci\u00f3n de un usuario de la aplicaci\u00f3n, incluso si la cookie de sesi\u00f3n est\u00e1 protegida con el indicador ''HttpOnly''. Para que el ataque tenga \u00e9xito, el usuario de la aplicaci\u00f3n debe utilizar normalmente un explorador web antiguo o un explorador web que tenga una vulnerabilidad de "bypass" de la misma directiva de origen (SOP).
ascanbeta.insecurehttpmethod.trace.exploitable.extrainfo = Se ha enviado una solicitud RASTRO para esta solicitud, con un valor de cookie personalizado [{0}]. Este valor de la cookie se propag\u00f3 en la respuesta HTTP, lo que confirma la existencia de la vulnerabilidad.
ascanbeta.insecurehttpmethod.connect.exploitable.desc = El m\u00e9todo HTTP insegurp [{0}] se encuentra habilitado para este recurso, y es explotable. Se encontr\u00f3 que era probable establecer una conexi\u00f3n de socket en el t\u00fanel dirigido a un servicio de terceros, utilizando este m\u00e9todo HTTP. Esto podr\u00e1 permitir que el servidor se utilice como un retransmisor de spam an\u00f3nimo, o como un proxy web, evadiendo de estar forma las restricciones de la red. Tambi\u00e9n podr\u00e1 permitir que se utilice para poder establecer una VPN en el t\u00fanel, expandiendo de un forma efectiva el per\u00edmetro de la red para poder incluir los componentes no confiables. 
ascanbeta.insecurehttpmethod.extrainfo = El m\u00e9todo OPCIONES revel\u00f3 los siguientes m\u00e9todos HTTP habilitados para este recurso\: [{0}]
ascanbeta.insecurehttpmethod.connect.exploitable.extrainfo = El m\u00e9todo CONNECT se us\u00f3 para establecer una conexi\u00f3n de socket a [{0}], a trav\u00e9s del servidor web.
ascanbeta.insecurehttpmethod.soln = Deshabilite m\u00e9todos inseguros como TRACK, TRACE y CONNECT en el servidor web, y aseg\u00farese de que la implementaci\u00f3n del servicio subyacente no admita m\u00e9todos inseguros.
ascanbeta.insecurehttpmethod.delete.exploitable.desc = This method is most commonly used in REST services, It is used to delete a resource.
ascanbeta.insecurehttpmethod.delete.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see http\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.options.exploitable.desc = This is a diagnostic method and should never be turned on in production mode.
ascanbeta.insecurehttpmethod.options.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods
ascanbeta.insecurehttpmethod.put.exploitable.desc = This method was originally intended for file managemant operations. It is now most commonly used in REST services, PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource..
ascanbeta.insecurehttpmethod.put.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see http\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.patch.exploitable.desc = This method is now most commonly used in REST services, PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource.
ascanbeta.insecurehttpmethod.patch.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see http\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.webdav.exploitable.desc = This HTTP method is a WEBDAV method\: {0}. If this server is not offering any WEBDAV services, these methods should not be available.
ascanbeta.insecurehttpmethod.webdav.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods


ascanbeta.integeroverflow.name = Falla de desbordamiento de enteros
ascanbeta.integeroverflow.desc = Hay una condici\u00f3n de desbordamiento de enteros cuando un entero, que no se ha comprobado de manera correcta desde la secuencia de entrada, se utiliza dentro de un programa compilado. 
ascanbeta.integeroverflow.soln = Reescriba el programa de fondo utilizando la comprobaci\u00f3n correcta del tama\u00f1o de la entrada del integrado, para evitar los desbordamientos y errores de divisiones por 0. Esto requerir\u00e1 una recompilaci\u00f3n del ejecutable de fondo.
ascanbeta.integeroverflow.refs = http\://projects.webappsec.org/w/page/13246946/Integer%20Overflows
ascanbeta.integeroverflow.error1 = Desbordamiento potencial de entero. El c\u00f3digo de estado se modific\u00f3 en la entrada de una cadena larga de enteros que son aleatorios.
ascanbeta.integeroverflow.error2 = Desbordamiento potencial de entero. El c\u00f3digo de estado se modific\u00f3 en la entrada de una cadena larga de ceros.
ascanbeta.integeroverflow.error3 = Desbordamiento potencial de entero. El c\u00f3digo de estado se modific\u00f3 en la entrada de una cadena larga de unidades.
ascanbeta.integeroverflow.error4 = Desbordamiento potencial de entero. El c\u00f3digo de estado se modific\u00f3 en la entrada de una cadena larga de nueves.

ascanbeta.noanticsrftokens.name=Ausencia de fichas (tokens) Anti-CSRF
ascanbeta.noanticsrftokens.desc=No se encontraron fichas (tokens) Anti-CSRF en un formulario HTML.

ascanbeta.payloader.desc=Provides support for custom payloads in scan rules.
ascanbeta.payloader.name=Active Scan Rules Beta Custom Payloads

ascanbeta.proxydisclosure.name=Proxy Disclosure
ascanbeta.proxydisclosure.desc={0} proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n\
 - A list of targets for an attack against the application.\n\
 - Potential vulnerabilities on the proxy servers that service the application.\n\
 - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. 
ascanbeta.proxydisclosure.soln=Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\n\
Disable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\n\
Configure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\n\
Configure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n\

ascanbeta.proxydisclosure.refs=https\://tools.ietf.org/html/rfc7231\#section-5.1.2
ascanbeta.proxydisclosure.attack=TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.
ascanbeta.proxydisclosure.extrainfo.unknown=Desconocido
ascanbeta.proxydisclosure.extrainfo.proxyserver.header=Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between OWASP ZAP and the application/web server\: 
ascanbeta.proxydisclosure.extrainfo.proxyserver= - {0}
ascanbeta.proxydisclosure.extrainfo.webserver.header=The following web/application server has been identified\: 
ascanbeta.proxydisclosure.extrainfo.webserver= - {0}
ascanbeta.proxydisclosure.extrainfo.silentproxyserver.header=The following 'silent' proxy servers were identified. Due to their behaviour, it is not known at which point in the network topology these proxy servers reside\:
ascanbeta.proxydisclosure.extrainfo.silentproxyserver= - {0}
ascanbeta.proxydisclosure.extrainfo.traceenabled=The 'TRACE' method is enabled on one or more of the proxy servers, or on the origin server. This method leaks all information submitted from the web browser and proxies back to the user agent. This may facilitate 'Cross Site Tracing' attacks. 

ascanbeta.relativepathconfusion.name=Relative Path Confusion
ascanbeta.relativepathconfusion.desc=The web server is configured to serve responses to ambiguous URLs in a manner that is likely to lead to confusion about the correct "relative path" for the URL. Resources (CSS, images, etc.) are also specified in the page response using relative, rather than absolute URLs. In an attack, if the web browser parses the "cross-content" response in a permissive manner, or can be tricked into permissively parsing the "cross-content" response, using techniques such as framing, then the web browser may be fooled into interpreting HTML as CSS (or other content types), leading to an XSS vulnerability.
ascanbeta.relativepathconfusion.soln=Web servers and frameworks should be updated to be configured to not serve responses to ambiguous URLs in such a way that the relative path of such URLs could be mis-interpreted by components on either the client side, or server side.\n\
Within the application, the correct use of the "<base>" HTML tag in the HTTP response will unambiguously specify the base URL for all relative URLs in the document.\n\
Use the "Content-Type" HTTP response header to make it harder for the attacker to force the web browser to mis-interpret the content type of the response.\n\
Use the "X-Content-Type-Options\: nosniff" HTTP response header to prevent the web browser from "sniffing" the content type of the response.\n\
Use a modern DOCTYPE such as "<\!doctype html>" to prevent the page from being rendered in the web browser using "Quirks Mode", since this results in the content type being ignored by the web browser.\n\
Specify the "X-Frame-Options" HTTP response header to prevent Quirks Mode from being enabled in the web browser using framing attacks. 
ascanbeta.relativepathconfusion.refs=http\://www.thespanner.co.uk/2014/03/21/rpo/\n\
https\://hsivonen.fi/doctype/\n\
http\://www.w3schools.com/tags/tag_base.asp
ascanbeta.relativepathconfusion.extrainfo.morethanonebasetag=More than one <base> tag was specified in the HTML <head> tag to define the location for relative URLs, which is not valid.
ascanbeta.relativepathconfusion.extrainfo.nobasetag=No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.
ascanbeta.relativepathconfusion.extrainfo.contenttypeenabled=A Content Type of "{0}" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledexplicitly=Quirks Mode is explicitly enabled via <meta http-equiv\="{0}", allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitly=Quirks Mode is implicitly enabled via the use of an old DOCTYPE with PUBLIC id "{0}", allowing the specified Content Type to be bypassed in some web browsers.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitlynodoctype=Quirks Mode is implicitly enabled via the absence of a DOCTYPE, allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.extrainfo.nocontenttype=No Content Type was specified, so Quirks Mode is not required to exploit the vulnerability in the web browser. 
ascanbeta.relativepathconfusion.extrainfo.framingallowed=No X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed.

ascanbeta.remotecodeexecution.cve-2012-1823.name = Ejecuci\u00f3n remota de c\u00f3digo - CVE-2012-1823
ascanbeta.remotecodeexecution.cve-2012-1823.desc = Ciertas versiones de PHP, cuando se configuran para ejecutarse mediante CGI, no manejan correctamente las cadenas de consulta que carecen de un car\u00e1cter "\=", lo que permite la ejecuci\u00f3n arbitraria de c\u00f3digo. En este caso, un comando del sistema operativo fue causado para ser ejecutado en el servidor web, y los resultados fueron devueltos al navegador web. 
ascanbeta.remotecodeexecution.cve-2012-1823.soln = Actualice a la \u00faltima versi\u00f3n estable de PHP, o use el servidor web Apache y el m\u00f3dulo mod_rewrite para filtrar las solicitudes maliciosas utilizando las directivas "RewriteCond" y "RewriteRule".

ascanbeta.sessionfixation.name=Fijaci\u00f3n de Sesi\u00f3n
ascanbeta.sessionfixation.desc=Es posible fijar la sesi\u00f3n. De ocurrir ese problema con una URL de inicio de sesi\u00f3n (en donde el usuario es autenticado en la aplicaci\u00f3n), la URL pudiera ser proporcionada por un atacante, con una identificaci\u00f3n de sesi\u00f3n fija, a la v\u00edctima, para as\u00ed tomar la identidad de la v\u00edctima, usando la identificaci\u00f3n de sesi\u00f3n otorgada. Si el problema ocurriera con una p\u00e1gina que no es para el inicio de sesi\u00f3n, la URL y la identificaci\u00f3n de sesi\u00f3n fija solamente pudieran ser utilizados por un atacante para rastrear acciones de un usuario que no est\u00e9 autenticado. De producirse la vulnerabilidad en un campo de cookies o en un campo de formulario (par\u00e1metro POST) en vez de en un par\u00e1metro URL (GET), tambi\u00e9n ser\u00e1 necesaria otra vulnerabilidad para poder configurar el campo de cookies en el navegador de la v\u00edctima, para permitir que la vulnerabilidad sea explotada.
ascanbeta.sessionfixation.soln=1) Prevenir que el atacante adquiera un ID de sesi\u00f3n, mediante el uso identificadores de sesi\u00f3n estrictos, y asignando \u00fanicamente identificadores de sesi\u00f3n, cuando se autentica con \u00e9xito en la aplicaci\u00f3n.\n\
2) El servidor deber\u00e1 siempre crear una nueva identificaci\u00f3n de sesi\u00f3n, en cada autenticaci\u00f3n, sin importar si ya existe una sesi\u00f3n que ya est\u00e1 en funcionamiento.\n\
3) Vincular una identificaci\u00f3n de sesi\u00f3n con algo que combine un atributo de cliente identificable, como una direcci\u00f3n IP, o el certificado de SSL del cliente.\n\
4) Cuando se destruyen las sesiones, se deben destruir en ambos, tanto en el servidor, como en el cliente.\n\
5) Agregar un mecanismo de cierre de sesi\u00f3n que destruya las sesiones anteriores del cliente.\n\
6) Agregar tiempos de espera de sesi\u00f3n exactos.\n\
7) Dejar de usar URLs basadas en cookies o en identificaci\u00f3n de sesi\u00f3n basada en formularios, porque estos estos \u00faltimos suelen requerir m\u00e1s vulnerabilidades que un atacante puede aprovechar\n\

ascanbeta.sessionfixation.refs=https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication\n\
https\://owasp.org/www-community/attacks/Session_fixation\n\
http\://www.acros.si/papers/session_fixation.pdf\n\
http\://www.technicalinfo.net/papers/WebBasedSessionManagement.html
ascanbeta.sessionfixation.alert.cookie.extrainfo=La Cookie se configura en respuesta cuando el campo de la cookie [{0}] se encuentra establecido en NULL\: [{1}]\n\
La Cookie se configura en respuesta con el valor de la cookie otorgada (v\u00e1lida) en la solicitud [{1}] \: [{2}]
ascanbeta.sessionfixation.alert.cookie.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.\n\
\n\
This issue should be manually validated by checking that the session token set on the logon page is still valid once logged in, and that the token can be used to directly access a page/resource which should require the user to be logged in.
ascanbeta.sessionfixation.alert.url.extrainfo=Un valor de una sesi\u00f3n predecible aparece en las URL que se encuentran en el resultado HTML cuando el par\u00e1metro URL/pseudo par\u00e1metro URL [{0}] se establece en NULL\: [{1}]\n\
Cuando se utiliza esta sesi\u00f3n que es ''prestada\u00b4[{1}] en una solicitud posterior para esta misma URL, no se origina una sesi\u00f3n nueva.
ascanbeta.sessionfixation.alert.url.extrainfo.loginpage=La Url en la que se descubri\u00f3 el problema se marc\u00f3 como una p\u00e1gina de inicio de sesi\u00f3n.
ascanbeta.sessionfixation.alert.attack={0} campo\: [{1}]
#Exposed Session Id messages
ascanbeta.sessionidexposedinurl.name=La identificaci\u00f3n de la sesi\u00f3n est\u00e1 expuesta
ascanbeta.sessionidexposedinurl.desc=Un identificador de sesi\u00f3n en la direcci\u00f3n URL es expuesto. Al compartir dicha URL del sitio web (que contiene el identificador de sesi\u00f3n), un nombre de usuario de un ingenuo puediera estar concediendo inadvertidamente el acceso a sus datos, comprometiendo su confidencialidad, integridad y disponibilidad. Las direcciones URL que contienen el identificador de sesi\u00f3n tambi\u00e9n aparecen en los marcadores del explorador web, los archivos de registro del servidor web y los archivos de registro del servidor proxy. 
ascanbeta.sessionidexposedinurl.soln=Use una implementaci\u00f3n de administraci\u00f3n de sesi\u00f3n m\u00e1s segura, como la que utiliza cookies de sesi\u00f3n, que no se comparten tan f\u00e1cilmente sin aviso, y que normalmente no aparecen en los archivos de registro del servidor o en los marcadores del explorador Web.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexposedinurl.refs=https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidexposedinurl.alert.extrainfo=El campo {0} [{1}] contiene un identificador de la sesi\u00f3n que est\u00e1 expuesta [{2}]
ascanbeta.sessionidexposedinurl.alert.extrainfo.loginpage=La Url en la que se descubri\u00f3 el problema se marc\u00f3 como una p\u00e1gina de inicio de sesi\u00f3n.
ascanbeta.sessionidexposedinurl.alert.attack={0} campo\: [{1}]
#Session Id Cookie not sent securely
ascanbeta.sessionidsentinsecurely.name=La ID de la sesi\u00f3n fue transmitida de una manera insegura
ascanbeta.sessionidsentinsecurely.desc=Se puede enviar una identificaci\u00f3n de sesi\u00f3n, usando un mecanismo inseguro. Si una cookie es enviada en la solicitud, significa que se est\u00e1 utilizando HTTP, en lugar de HTTPS. Si una cookie enviada por el servidor como una respuesta (cuando la URL es modificada al configurar el campo en el par\u00e1metro NULL), significa que este indicador 'seguro' no est\u00e1 configurado, lo que le permite enviar la cookie m\u00e1s tarde por HTTP, y no a trav\u00e9s de HTTPS. Esto le da acceso a un esp\u00eda pasivo, en la ruta de la red, a que tenga acceso completo a la sesi\u00f3n de la v\u00edctima.  
ascanbeta.sessionidsentinsecurely.soln=1) Use la \u00faltima versi\u00f3n disponible de SSL/TLS (para HTTPS) para todas las p\u00e1ginas en las que se comunique un identificador de sesi\u00f3n entre el navegador y el servidor Web.\n\
2) No permita que la comunicaci\u00f3n sea forzada al protocolo HTTP no encriptado.\n\
3) Utilice el indicador 'Secure' (seguro) al establecer una cookie que contenga un identificador de sesi\u00f3n, para as\u00ed impedir su posterior transmisi\u00f3n mediante un mecanismo inseguro.\n\
4) Remita las solicitudes de p\u00e1ginas HTTP no seguras a la p\u00e1gina equivalente de HTTPS seguro.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidsentinsecurely.refs=https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidsentinsecurely.alert.extrainfo=el identificador de la sesi\u00f3n {0} campo [{1}], el valor [{2}] quizas pueda enviarse por medio de un mecanismo que es inseguro.  
ascanbeta.sessionidsentinsecurely.alert.extrainfo.secureflagnotset=El indicador 'seguro' no se configur\u00f3 en la cookie de sesi\u00f3n proporcionada por el servidor.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.loginpage=La Url en la que se descubri\u00f3 el problema se marc\u00f3 como una p\u00e1gina de inicio de sesi\u00f3n.
ascanbeta.sessionidsentinsecurely.alert.attack={0} campo\: [{1}]
#Session Id Cookie accessible by JavaScript
ascanbeta.sessionidaccessiblebyjavascript.name=La cookie de la ID de la sesi\u00f3n accesible para JavaScript
ascanbeta.sessionidaccessiblebyjavascript.desc=Un cookie de ID de sesi\u00f3n enviado por el servidor (cuando la URL se modifica el estableciendo del campo de par\u00e1metros con el nombre en null) puede ser accedida por JavaScript en el cliente. En conjunci\u00f3n con otra vulnerabilidad, esto puede permitir que la sesi\u00f3n sea secuestrada.  
ascanbeta.sessionidaccessiblebyjavascript.soln=1) Utilice el indicador 'httponly' cuando se modifique la cookie que contenga una identificaci\u00f3n de la sesi\u00f3n, para poder prevenir que JavaScript ingrese a ella en el navegador web.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidaccessiblebyjavascript.refs=[cadena vac\u00eda]
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo=se puede ingresar al identificador de la sesi\u00f3n {0} campo [{1}], valor [{2}] utilizando JavaScript en el navegador web
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo.loginpage=La Url en la que se descubri\u00f3 el problema se marc\u00f3 como una p\u00e1gina de inicio de sesi\u00f3n.
ascanbeta.sessionidaccessiblebyjavascript.alert.attack={0} campo\: [{1}]
#Session Id Cookie Expiry
ascanbeta.sessionidexpiry.name=El tiempo de terminaci\u00f3n de la ID de la sesi\u00f3n/Max-Age es demasiado
ascanbeta.sessionidexpiry.desc=La cookie de una ID de sesi\u00f3n enviada por el servidor (cuando la URL se modifica estableciendo el campo de par\u00e1metros con el nombre en null) se establece para que sea v\u00e1lida durante un per\u00edodo de tiempo excesivo. Esto puede ser explotado por un atacante si el usuario se olvida de desconectarse, si la funcionalidad de cierre de sesi\u00f3n no acaba correctamente con el per\u00edodo de sesiones, o si el identificador de sesi\u00f3n est\u00e1 comprometido por otros medios.     
ascanbeta.sessionidexpiry.soln=1) Utiliza las directivas de cookies 'Expire' o 'Max-Age' al establecer una cookie que contenga un identificador de sesi\u00f3n, para evitar que est\u00e9 disponible por per\u00edodos prolongados.\n\
2) Aseg\u00farese de que la funcionalidad de cierre de sesi\u00f3n existe y que termina correctamente el per\u00edodo de sesiones.\n\
3) Utilizar otras medidas preventivas para asegurar que si un identificador de sesi\u00f3n est\u00e1 comprometido, no pueda ser explotado.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexpiry.refs=[cadena vac\u00eda]
ascanbeta.sessionidexpiry.alert.extrainfo=se puede ingresar al identificador de la sesi\u00f3n {0} campo [{1}], valor [{2}] hasta el valor [{3}] (ya que la cookie se obtuvo en {4}), a menos de que se elimine la sesi\u00f3n.
ascanbeta.sessionidexpiry.alert.extrainfo.loginpage=La Url en la que se descubri\u00f3 el problema se marc\u00f3 como una p\u00e1gina de inicio de sesi\u00f3n.
ascanbeta.sessionidexpiry.alert.attack={0} campo\: [{1}]
ascanbeta.sessionidexpiry.browserclose=navegador cerrado
ascanbeta.sessionidexpiry.timemorethanoneweek=M\u00e1s de una semana
ascanbeta.sessionidexpiry.timemorethanoneday=M\u00e1s de un d\u00eda
ascanbeta.sessionidexpiry.timemorethanonehour=M\u00e1s de una hora
ascanbeta.sessionidexpiry.timelessthanonehour=Menos de una hora
ascanbeta.sessionidexpiry.timeexpired=Caducado

ascanbeta.shellshock.name = Ejecuci\u00f3n remota de c\u00f3digo - Shell Shock
ascanbeta.shellshock.desc = El servidor est\u00e1 ejecutando una versi\u00f3n del Bash shell que permite a los atacantes remotos ejecutar un c\u00f3digo arbitrario 
ascanbeta.shellshock.extrainfo = Desde la CVE-2014-6271\: El GNU Bash a 4.3 es el que procesa cadenas de caracteres de entorno, posteriores a las definiciones de funci\u00f3n en los valores variables, lo que permite a un atacante remoto ejecutar un c\u00f3digo a su antojo a trav\u00e9s de un entorno dise\u00f1ado para ellos, como se ve con los vectores que involucran la funci\u00f3n "ForceCommand" en el "OpenSSH" sshd, tambi\u00e9n en m\u00f3dulos mod_cgi y mod_cgid, presentes en el Servidor Apache HTTP, adem\u00e1s de los scripts ejecutados por los clientes DHCP que hayan sido especificados, y as\u00ed como el resto de situaciones en las que es establecido el entorno, por el cual ocurre una ejecuci\u00f3n de Bash a trav\u00e9s de un l\u00edmite de privilegios, conocido tambi\u00e9n como "ShellShock". NOTA\: La primera soluci\u00f3n a este problema era incorrecta; Se asign\u00f3 el CVE-2014-7169 para tapar la vulnerabilidad que todav\u00eda est\u00e1 presente despu\u00e9s de la correcci\u00f3n no correcta.
ascanbeta.shellshock.soln = Actualizar bash en el servidor, a la \u00faltima versi\u00f3n
ascanbeta.shellshock.ref = http\://web.nvd.nist.gov/view/vuln/detail?vulnId\=CVE-2014-6271 \n\
http\://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html
ascanbeta.shellshock.timingbased.evidence = Usando el ataque, se indujo y detect\u00f3 un retraso de [{0}] milisegundos

ascanbeta.sourcecodedisclosure.desc = El c\u00f3digo fuente de la p\u00e1gina actual se dio a conocer por el servidor web
ascanbeta.sourcecodedisclosure.lfibased.name = Source Code Disclosure - File Inclusion
ascanbeta.sourcecodedisclosure.lfibased.soln = Ensure that arbitrary files specified by the user are not included in the output
ascanbeta.sourcecodedisclosure.lfibased.extrainfo = The output for the source code filename [{0}] differs sufficiently from that of the random parameter [{1}], at [{2}%], compared to a threshold of [{3}%]
ascanbeta.sourcecodedisclosure.lfibased.evidence=[cadena vac\u00eda]

ascanbeta.sourcecodedisclosure.gitbased.name = Source Code Disclosure - Git 
ascanbeta.sourcecodedisclosure.gitbased.soln = Ensure that Git metadata files are not deployed to the web server or application server
ascanbeta.sourcecodedisclosure.gitbased.extrainfo=[cadena vac\u00eda]
ascanbeta.sourcecodedisclosure.gitbased.evidence = The source code for [{0}] was extracted using [{1}]

ascanbeta.sqlinjection.mysql.name=Inyecci\u00f3n SQL - MySQL
ascanbeta.sqlinjection.hypersonic.name=Inyecci\u00f3n SQL - SQL hipers\u00f3nico
ascanbeta.sqlinjection.oracle.name=Inyecci\u00f3n SQL - Or\u00e1culo
ascanbeta.sqlinjection.postgres.name=Inyecci\u00f3n SQL - PostgreSQL
ascanbeta.sqlinjection.desc=Falla por Inyecci\u00f3n SQL puede ser posible
ascanbeta.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place. \n\
In general, type check all data on the server side.\n\
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\n\
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\n\
If database Stored Procedures can be used, use them.\n\
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\n\
Do not create dynamic SQL queries using simple string concatenation.\n\
Escape all data received from the client.\n\
Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\n\
Apply the privilege of least privilege by using the least privileged database user possible.\n\
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\n\
Grant the minimum database access that is necessary for the application.
ascanbeta.sqlinjection.refs=https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
#ascanbeta.sqlinjection.alert.errorbased.attack={1}
ascanbeta.sqlinjection.alert.errorbased.differentiation.attack=Valor Original\: [{0}]. Valor Modificado\: [{1}]. Valor de Control\: [{2}]
ascanbeta.sqlinjection.alert.booleanbased.attack=campo\: [{0}], valor [{1}]
ascanbeta.sqlinjection.alert.unionbased.attack=[{0}] campo\: [{1}], valor [{2}]
ascanbeta.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] probable, dado fragmento del mensaje de error [{1}] en resultados HTML
ascanbeta.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] probable, dado fragmento [{1}] del mensaje tipo UNION en resultados HTML
ascanbeta.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Mensaje no modificado retorn\u00f3 estado HTTP [{0}], mensaje modificado retorn\u00f3 estado HTTP [{1}]
ascanbeta.sqlinjection.alert.errorbased.differentiation.extrainfo=Mensaje no modificado retorn\u00f3 estado HTTP [{0}] y longitud [{1}]; Mensaje modificado retorn\u00f3 estado HTTP [{2}] y longitud [{3}]. Un tercer mensaje (con valor sin inyecci\u00f3n SQL) retorn\u00f3 estado HTTP [{4}] y longitud [{5}]
ascanbeta.sqlinjection.alert.booleanbased.extrainfo=Los resultados de la p\u00e1gina fueron manipulados con \u00e9xito usando las condiciones l\u00f3gicas [{0}] y [{1}]
ascanbeta.sqlinjection.alert.timebased.extrainfo=El tiempo de consulta es controlable a trav\u00e9s del valor del par\u00e1metro [{0}], el cual caus\u00f3 que la solicitud tomara [{1}] milisegundos, mientras que la consulta original, no modificada, tom\u00f3 [{2}] [{3}] milisegundos 

ascanbeta.sqlinjection.mssql.name=SQL Injection - MsSQL
ascanbeta.sqlinjection.mssql.desc=Falla por Inyecci\u00f3n SQL puede ser posible
ascanbeta.sqlinjection.mssql.soln=Do not trust client side input, even if there is client side validation in place. \n\
In general, type check all data on the server side.\n\
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\n\
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\n\
If database Stored Procedures can be used, use them.\n\
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\n\
Do not create dynamic SQL queries using simple string concatenation.\n\
Escape all data received from the client.\n\
Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\n\
Apply the privilege of least privilege by using the least privileged database user possible.\n\
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\n\
Grant the minimum database access that is necessary for the application.
ascanbeta.sqlinjection.mssql.refs=https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
ascanbeta.sqlinjection.mssql.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds.

ascanbeta.sqlinjection.sqlite.name=SQL Injection - SQLite
ascanbeta.sqlinjection.sqlite.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, parameter value [{2}], which caused the request to take [{3}] milliseconds, when the original unmodified query with value [{4}] took [{5}] milliseconds.
ascanbeta.sqlinjection.sqlite.alert.errorbased.extrainfo=The following known SQLite error message was provoked\: [{0}].
ascanbeta.sqlinjection.sqlite.alert.versionnumber.extrainfo=Using a UNION based SQL Injection attack, and by exploiting SQLite''s dynamic typing mechanism, the SQLite version was determined to be [{0}].\n\
With string-based injection points, full SQLite version information can be extracted, but with numeric injection points, only partial SQLite version information can be extracted.\n\
More information on SQLite version [{0}] is available at http\://www.sqlite.org/changes.html

ascanbeta.useragent.name=User Agent Fuzzer
ascanbeta.useragent.desc=Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.
ascanbeta.useragent.refs=https\://owasp.org/wstg
ascanbeta.useragent.useragentparmname=Header User-Agent

ascanbeta.traceaxd.name = Trace.axd Information Leak
ascanbeta.traceaxd.desc = The ASP.NET Trace Viewer (trace.axd) was found to be available. This component can leak a significant amount of valuable information.
ascanbeta.traceaxd.otherinfo = Based on response status code Trace Viewer may be protected by an authentication or authorization mechanism.  
ascanbeta.traceaxd.refs = https\://msdn.microsoft.com/en-us/library/bb386420.aspx\n\
https\://msdn.microsoft.com/en-us/library/wwh16c6c.aspx\n\
https\://www.dotnetperls.com/trace
ascanbeta.traceaxd.soln = Consider whether or not Trace Viewer is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization.


ascanbeta.sourcecodedisclosurecve-2012-1823.name = Divulgaci\u00f3n del c\u00f3digo fuente - CVE-2012-1823
ascanbeta.sourcecodedisclosurecve-2012-1823.desc = Existen versiones de PHP, que cuando est\u00e1n configuradas para ejecutarse con CGI, no pueden manejar de manera correcta las cadenas de consulta, que no cuentan con el car\u00e1cter "\=", permitiendo as\u00ed que c\u00f3digo fuente de PHP sea revelado, adem\u00e1s de la ejecuci\u00f3n de cualquier c\u00f3digo. En casos como este se sirvieron directamente en el navegador web los contenidos del archivo PHP. Esta salida seguramente contendr\u00e1 PHP, pero tambi\u00e9n pudiera contener HTML directo.
ascanbeta.sourcecodedisclosurecve-2012-1823.soln = Actualice a la \u00faltima versi\u00f3n estable de PHP, o utilice el servidor web Apache y el m\u00f3dulo mod_rewrite para filtrar solicitudes maliciosas mediante las directivas "RewriteCond" y "RewriteRule".

ascanbeta.sourcecodedisclosure.svnbased.name = Divulgaci\u00f3n del c\u00f3digo fuente - SVN
ascanbeta.sourcecodedisclosure.svnbased.soln = Aseg\u00farese de que los archivos de metadatos SVN no se implementen en el servidor web o servidor de aplicaciones
ascanbeta.sourcecodedisclosure.svnbased.extrainfo = El c\u00f3digo fuente de [{0}] se encontr\u00f3 en [{1}]

ascanbeta.usernameenumeration.name=Posible enumeraci\u00f3n de nombre de usuario
ascanbeta.usernameenumeration.desc=Se pueden enumerar los nombres de usuario, basados en distintas respuestas de HTTP, al momento que se proporcionan  los nombres de usuario v\u00e1lidos e inv\u00e1lidos. Esto aumenta much\u00edsimo la posibilidad de \u00e9xito de ataques de contrase\u00f1a realizados por fuerza bruta, contra el sistema. Se debe tener en cuenta que se pueden disminuir los falsos positivos incrementando la opci\u00f3n 'Fuerza de ataque' en ZAP. Debe comprobar manualmente el campo "Otra Informaci\u00f3n" para saber si esto es un problema. realmente. 
ascanbeta.usernameenumeration.soln=No debe divulgar detalles sobre si un nombre de usuario es v\u00e1lido o no es v\u00e1lido. En particular, para intentos fallidos de inicio de sesi\u00f3n, no distinga entre un usuario no v\u00e1lido y una contrase\u00f1a no v\u00e1lida en el mensaje de error, el t\u00edtulo de la p\u00e1gina, el contenido de la p\u00e1gina, los encabezados HTTP o la l\u00f3gica de redirecci\u00f3n.
ascanbeta.usernameenumeration.refs=https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account.html\n\
http\://sebastian-schinzel.de/_download/ifip-sec2011.pdf
ascanbeta.usernameenumeration.alert.extrainfo=El par\u00e1metro [{0}] [{1}] se encarga de filtrar la informaci\u00f3n acerca de si un usuario existe. Las [{5}] diferencias que se encuentra en el resultado, para e lvalor del nombre de usuario original v\u00e1lido [{2}], y el valor del nombre de usuario no v\u00e1lido [{3}] son\: [{4}]
ascanbeta.usernameenumeration.alert.attack=Manipule el [{0}] campo\: [{1}] y controle la salida 

ascanbeta.paddingoracle.name=Relleno gen\u00e9rico del Or\u00e1culo
ascanbeta.paddingoracle.desc=By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely 'padding oracle' vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This rule should detect the MS10-070 padding oracle vulnerability in ASP.net if CustomErrors are enabled for that.
ascanbeta.paddingoracle.soln=Debe actualizar el software del servidor que ha sido afectado o sino modificar las secuencias de comandos para as\u00ed validar correctamente los datos cifrados, antes de volver a intentar el descifrado.
ascanbeta.paddingoracle.refs=http\://netifera.com/research/ \n\
http\://www.microsoft.com/technet/security/bulletin/ms10-070.mspx \n\
http\://www.mono-project.com/Vulnerabilities\#ASP.NET_Padding_Oracle \n\
https\://bugzilla.redhat.com/show_bug.cgi?id\=623799

ascanbeta.elinjection.name = Inyecci\u00f3n Expresi\u00f3n de Lenguaje
ascanbeta.elinjection.desc = El software construye todo o parte de una instrucci\u00f3n de lenguaje de expresi\u00f3n (EL) en una p\u00e1gina de servidor Java (JSP) con entrada influenciado externamente de un componente upstream, pero no neutraliza o incorrectamente neutraliza elementos especiales que podr\u00edan modificar la declaraci\u00f3n de EL previsto antes de ejecutarse. En ciertas versiones de Spring 3.0.5 y anteriores, hab\u00eda una vulnerabilidad (CVE-2011-2730) en que lenguaje de expresi\u00f3n de etiquetas se evaluar\u00edan dos veces, que expone con eficacia cualquier aplicaci\u00f3n de la inyecci\u00f3n EL. Sin embargo, incluso para las versiones posteriores, esta debilidad es posible dependiendo de la configuraci\u00f3n.
ascanbeta.elinjection.soln = Realizar la mejores pr\u00e1cticas de validaci\u00f3n de datos de entrada en la que no se conf\u00eda y para garantizar que se aplica la codificaci\u00f3n de salida cuando llega datos sobre la capa EL, para que el metacaracter sea encontrado por el int\u00e9rprete dentro del contenido del usuario antes de la evaluaci\u00f3n. Los patrones m\u00e1s evidentes para detectar incluyen ${ y \#{, pero puede ser posible codificar o fragmento estos datos.
ascanbeta.elinjection.refs = https\://owasp.org/www-community/vulnerabilities/Expression_Language_Injection\n\
http\://cwe.mitre.org/data/definitions/917.html

ascanbeta.xsltinjection.name = XSLT Injection
ascanbeta.xsltinjection.desc = Injection using XSL transformations may be possible, and may allow an attacker to read system information, read and write files, or execute arbitrary code.
ascanbeta.xsltinjection.refs = https\://www.contextis.com/blog/xslt-server-side-injection-attacks
ascanbeta.xsltinjection.soln = Sanitize and analyze every user input coming from any client-side.
ascanbeta.xsltinjection.error.otherinfo = The response to sending an XSLT token included error messages that may indicate a vulnerability to XSLT injections.
ascanbeta.xsltinjection.vendor.otherinfo = The XSLT processor vendor name "{0}" was returned after an injection request.
ascanbeta.xsltinjection.portscan.otherinfo = Port scanning may be possible.
ascanbeta.xsltinjection.command.otherinfo = Command execution may be possible.

ascanbeta.xxe.name=XML External Entity Attack

ascanbeta.xpathinjection.name=XPath Injection

ascanbeta.HTTPParamPoll.desc = Los ataques de Contaminaci\u00f3n de Par\u00e1metros HTTP (HTTP Parameter Pollution HPP) consisten en inyectar delimitadores de cadenas de consulta codificados en otros par\u00e1metros existentes. Si una aplicaci\u00f3n web no sanea adecuadamente la entrada del usuario, un usuario malintencionado puede comprometer la l\u00f3gica de la aplicaci\u00f3n para realizar ataques del lado del cliente o del lado del servidor. Una consecuencia de los ataques HPP es que el atacante puede anular los par\u00e1metros HTTP existentes codificados para modificar el comportamiento de una aplicaci\u00f3n, eludir los puntos de control de validaci\u00f3n de entrada, y acceder y posiblemente explotar variables que pueden estar fuera del alcance directo.
ascanbeta.HTTPParamPoll.extrainfo = https\://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution
ascanbeta.HTTPParamPoll.name = Contaminaci\u00f3n de Par\u00e1metros HTTP (HPP)
ascanbeta.HTTPParamPoll.sol = Sanea adecuadamente la entrada del usuario para delimitador los par\u00e1metros.

ascanbeta.backupfiledisclosure.desc = El servidor web revel\u00f3 una copia de seguridad del archivo.
ascanbeta.backupfiledisclosure.name = Divulgaci\u00f3n de Archivo de Backup
ascanbeta.backupfiledisclosure.otherinfo = Una copia de [{0}] est\u00e1 disponible en [{1}]
ascanbeta.backupfiledisclosure.refs = https\://cwe.mitre.org/data/definitions/530.html\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.html
ascanbeta.backupfiledisclosure.soln = No editar archivos in-situ en el servidor web y aseg\u00farese de que los archivos innecesarios (incluyendo archivos ocultos) se eliminen del servidor web.

ascanbeta.cookieslack.affect.response.no = Estas cookies NO influyen en la respuesta\: 
ascanbeta.cookieslack.affect.response.yes = Estas cookies afectan a la respuesta\: 
ascanbeta.cookieslack.desc = Peticiones GET repetidas\: crean una cookie diferente, seguida de una solicitud normal con todas las cookies para estabilizar la sesi\u00f3n, compara las respuestas con el GET original. Esto puede revelar \u00e1reas donde la autenticaci\u00f3n o los atributos basados en cookies no se apliquen.
ascanbeta.cookieslack.endline = \n
ascanbeta.cookieslack.name = Detector de Cookie Slack
ascanbeta.cookieslack.otherinfo.intro = Las cookies que no tienen efectos esperados pueden revelar defectos en la l\u00f3gica de la aplicaci\u00f3n. En el peor de los casos, esto puede revelar donde la autenticaci\u00f3n por token(s) de cookies no se aplican realmente. 
ascanbeta.cookieslack.separator = ,
ascanbeta.cookieslack.session.destroyed = Eliminar esta cookie parece haber invalidado la sesi\u00f3n\: [{0}] Una solicitud posterior con todas las cookies originales a\u00fan tuvo una respuesta diferente a la solicitud original.
ascanbeta.cookieslack.session.warning = NOTA\: Debido a su nombre, esta cookie puede ser importante, pero eliminarla parece no tener efecto\: [{0}]\n

ascanbeta.cors.info.desc = Cross-Origin Resource Sharing (CORS) es un mecanismo basado en cabeceras HTTP que permite a un servidor indicar cualquier otro origen (dominio, esquema o puerto) distinto del suyo desde el que un navegador debe permitir la carga de recursos. Mitiga la Pol\u00edtica del Mismo Origen (Same-Origin Policy SOP).
ascanbeta.cors.info.name = CORS Header
ascanbeta.cors.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\nhttps\://portswigger.net/web-security/cors
ascanbeta.cors.soln = Si un recurso web contiene informaci\u00f3n confidencial, el origen debe especificarse adecuadamente en la cabecera Access-Control-Allow-Origin. Solo los sitios web de confianza que necesiten este recurso deben especificarse en el encabezado, con el protocolo m\u00e1s seguro posible.
ascanbeta.cors.vuln.desc = Esta configuraci\u00f3n incorrecta de CORS podr\u00eda permitir que un atacante realice consultas AJAX al sitio web vulnerable desde una p\u00e1gina maliciosa cargada por el user agent de la v\u00edctima.\nPara realizar consultas AJAX autenticadas, el servidor debe especificar el encabezado "Access-Control-Allow-Credentials\: true" y el encabezado "Access-Control-Allow-Origin" debe establecerse en nulo o el dominio de la p\u00e1gina maliciosa. Incluso si esta configuraci\u00f3n incorrecta no permite solicitudes AJAX autenticadas, a\u00fan se puede acceder a contenido confidencial no autenticado (por ejemplo, sitios web de intranet).\nUna p\u00e1gina maliciosa puede pertenecer a un sitio web malicioso, pero tambi\u00e9n a un sitio web de confianza, pero con fallos (por ejemplo, XSS, compatibilidad con HTTP sin TLS que permite la inyecci\u00f3n de c\u00f3digo a trav\u00e9s de MITM, etc.).
ascanbeta.cors.vuln.name = Configuraci\u00f3n Incorrecta de CORS

ascanbeta.crossdomain.adobe.desc = La falsificaci\u00f3n de solicitudes entre sitios basada en Flash/Silverlight puede ser posible debido a una configuraci\u00f3n incorrecta en el servidor web.
ascanbeta.crossdomain.adobe.read.extrainfo = El servidor web permite solicitudes maliciosas de lectura de datos entre dominios originadas desde componentes Flash/Silverlight servidos desde cualquier dominio de terceros a este dominio. Si el usuario v\u00edctima est\u00e1 conectado a este servicio, las solicitudes de lectura maliciosas se procesan utilizando los privilegios de la v\u00edctima y pueden resultar en que los datos de este servicio sean comprometidos por un sitio web de terceros no autorizado, a trav\u00e9s del navegador web de la v\u00edctima. Esto es particularmente probable que sea un problema si se est\u00e1 utilizando una implementaci\u00f3n de sesi\u00f3n basada en cookies.
ascanbeta.crossdomain.adobe.read.name = Configuraci\u00f3n incorrecta Cross-Domain - Adobe - Read
ascanbeta.crossdomain.adobe.read.soln = Configure el archivo crossdomain.xml para restringir la lista de dominios que pueden realizar peticiones de lectura entre dominios a este servidor web, usando <allow-access-from domain\="example.com">. S\u00f3lo debe conceder acceso a "*" (todos los dominios) si est\u00e1 seguro de que este servicio no hospeda ning\u00fan dato controlado, personalizado o privado.
ascanbeta.crossdomain.adobe.send.extrainfo = El servidor web permite peticiones maliciosas de env\u00edo de datos entre dominios (pero no necesariamente de lectura) originadas desde componentes Flash/Silverlight servidos desde cualquier dominio de terceros, a este dominio. Si el usuario v\u00edctima ha iniciado sesi\u00f3n en este servicio, las solicitudes de env\u00edo maliciosas se procesan utilizando los privilegios de la v\u00edctima, y pueden dar lugar a ataques del tipo Cross Site Request Forgery (CSRF), a trav\u00e9s del navegador web de la v\u00edctima. Esto es particularmente probable que sea un problema si se utiliza una implementaci\u00f3n de sesi\u00f3n basada en cookies.
ascanbeta.crossdomain.adobe.send.name = Configuraci\u00f3n Incorrecta Cross-Domain - Adobe - Send
ascanbeta.crossdomain.adobe.send.soln = Configure el archivo crossdomain.xml para restringir la lista de dominios a los que se permite realizar peticiones cross-domain de env\u00edo (pero no necesariamente de lectura) a este servidor web, utilizando <allow-http-request-headers-from domain\="ejemplo.com" headers\="Authorization,X-Blahh">. S\u00f3lo debe conceder acceso a "*" (todos los dominios) si est\u00e1 seguro de que este servicio no es vulnerable a ataques Cross Site Request Forger (CSRF).
ascanbeta.crossdomain.name = Configuraci\u00f3n Incorrecta Cross-Domain
ascanbeta.crossdomain.refs = https\://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf\nhttps\://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc197955(v\=vs.95)\nhttps\://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc838250(v\=vs.95)
ascanbeta.crossdomain.silverlight.desc = Es posible que se produzca una falsificaci\u00f3n de petici\u00f3n entre sitios basada en Silverlight, debido a una configuraci\u00f3n incorrecta en el servidor web.
ascanbeta.crossdomain.silverlight.extrainfo = El servidor web permite peticiones maliciosas entre dominios originadas desde componentes Silverlight servidos desde cualquier dominio de terceros, a este dominio. Si el usuario v\u00edctima ha iniciado sesi\u00f3n en este servicio, las peticiones maliciosas se procesan utilizando los privilegios de la v\u00edctima, y pueden dar lugar a que los datos de este servicio se vean comprometidos por un sitio web de terceros no autorizado, a trav\u00e9s de los navegadores web de la v\u00edctima. Tambi\u00e9n puede dar lugar a ataques del tipo Cross Site Request Forgery (CSRF). Esto es particularmente probable que sea un problema si se utiliza una implementaci\u00f3n de sesi\u00f3n basada en cookies.
ascanbeta.crossdomain.silverlight.name = Configuraci\u00f3n Incorrecta Cross-Domain - Silverlight
ascanbeta.crossdomain.silverlight.soln = Configure el archivo clientaccesspolicy.xml para restringir la lista de dominios que pueden realizar solicitudes entre dominios a este servidor web, mediante <domain uri\="https\://example.com"/>. S\u00f3lo debe conceder acceso a "*" (todos los dominios) si est\u00e1 seguro de que este servicio no hospeda ning\u00fan dato controlado, personalizado o privado.

ascanbeta.csrftoken.extrainfo.annotation = Esta es una alerta informativa, porque el formulario tiene una anotaci\u00f3n de seguridad que indica que no necesita un token anti-CSRF. Esto debe comprobarse de manera manual para asegurar que la anotaci\u00f3n es correcta.
ascanbeta.csrftoken.name = Comprobaci\u00f3n de Tokens Anti-CSRF

ascanbeta.desc = Reglas de escaneo activo en estado Beta

ascanbeta.elinjection.desc = El software construye todo o parte de una instrucci\u00f3n de lenguaje de expresi\u00f3n (EL) en una p\u00e1gina de servidor Java (JSP) con entrada influenciado externamente de un componente upstream, pero no neutraliza o incorrectamente neutraliza elementos especiales que podr\u00edan modificar la declaraci\u00f3n de EL previsto antes de ejecutarse. En ciertas versiones de Spring 3.0.5 y anteriores, hab\u00eda una vulnerabilidad (CVE-2011-2730) en que lenguaje de expresi\u00f3n de etiquetas se evaluar\u00edan dos veces, que expone con eficacia cualquier aplicaci\u00f3n de la inyecci\u00f3n EL. Sin embargo, incluso para las versiones posteriores, esta debilidad es posible dependiendo de la configuraci\u00f3n.
ascanbeta.elinjection.name = Inyecci\u00f3n Expresi\u00f3n de Lenguaje
ascanbeta.elinjection.refs = https\://owasp.org/www-community/vulnerabilities/Expression_Language_Injection\nhttps\://cwe.mitre.org/data/definitions/917.html
ascanbeta.elinjection.soln = Realizar la mejores pr\u00e1cticas de validaci\u00f3n de datos de entrada en la que no se conf\u00eda y para garantizar que se aplica la codificaci\u00f3n de salida cuando llega datos sobre la capa EL, para que el metacaracter sea encontrado por el int\u00e9rprete dentro del contenido del usuario antes de la evaluaci\u00f3n. Los patrones m\u00e1s evidentes para detectar incluyen ${ y \#{, pero puede ser posible codificar o fragmento estos datos.

ascanbeta.entityExpansion.desc = Una expansi\u00f3n de entidad exponencial, o ataque de "billon laughs" es un tipo de ataque de denegaci\u00f3n de servicio (DoS). Est\u00e1 dirigido a analizadores sint\u00e1cticos como XML o YAML que permiten expansiones en macros.
ascanbeta.entityExpansion.name = Expansi\u00f3n de entidad exponencial (Billion Laughs Attack)
ascanbeta.entityExpansion.other = La solicitud HTTP de ataque recibi\u00f3 una respuesta despu\u00e9s de {0} segundos.
ascanbeta.entityExpansion.refs = https\://en.wikipedia.org/wiki/Billion_laughs_attack\nhttps\://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\nhttps\://cwe.mitre.org/data/definitions/776.html
ascanbeta.entityExpansion.soln = La defensa contra este tipo de ataque incluye limitar la memoria asignada a un analizador sint\u00e1ctico si la p\u00e9rdida del documento no es importante, o tratar las entidades simb\u00f3licamente y expandirlas de forma perezosa solo cuando (y en la medida en que) se vaya a usar su contenido.

ascanbeta.forbiddenBypass.desc = Es posible saltarse los endpoints 403, la regla de escaneo envi\u00f3 un payload que hizo que la respuesta mostrara que era accesible (c\u00f3digo de estado 200).
ascanbeta.forbiddenBypass.name = Bypassing 403
ascanbeta.forbiddenBypass.refs = https\://www.acunetix.com/blog/articles/a-fresh-look-on-reverse-proxy-related-attacks/\nhttps\://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf\nhttps\://www.contextis.com/en/blog/server-technologies-reverse-proxy-bypass

ascanbeta.httponlysite.desc = El sitio solo se sirve bajo HTTP y no HTTPS.
ascanbeta.httponlysite.name = Sitio Solo HTTP
ascanbeta.httponlysite.otherinfo = {0}\nZAP intent\u00f3 conectarse a trav\u00e9s de\: {1}
ascanbeta.httponlysite.otherinfo.connectionfail = Fallo al conectar.
ascanbeta.httponlysite.otherinfo.differenthosts = Hosts Diferentes.
ascanbeta.httponlysite.otherinfo.noredirection = No hubo redirecci\u00f3n autom\u00e1tica.
ascanbeta.httponlysite.otherinfo.nossl = El sitio no tiene soporte para SSL/TLS.
ascanbeta.httponlysite.otherinfo.redirectionlimit = L\u00edmite de redirecci\u00f3n alcanzado.
ascanbeta.httponlysite.otherinfo.redirecttohttp = Redirigido a HTTP.
ascanbeta.httponlysite.otherinfo.urinotencoded = No se pudo codificar el URI de redirecci\u00f3n.
ascanbeta.httponlysite.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\nhttps\://letsencrypt.org/
ascanbeta.httponlysite.soln = Configure su servidor web o de aplicaciones para que utilice SSL (https).

ascanbeta.httpoxy.desc = El servidor inici\u00f3 una solicitud proxy a trav\u00e9s del proxy especificado en el encabezado HTTP Proxy de la solicitud. Httpoxy t\u00edpicamente afecta al c\u00f3digo que se ejecuta en entornos CGI o similares a CGI.\nEsto puede permitir a los atacantes\:\n* Utilizar como proxy las solicitudes HTTP salientes realizadas por la aplicaci\u00f3n web\n* Dirigir al servidor para abrir conexiones salientes a una direcci\u00f3n y puerto de su elecci\u00f3n o\n* Agotar los recursos del servidor al obligar al software vulnerable a usar un proxy malicioso.
ascanbeta.httpoxy.name = Httpoxy - Uso indebido de la Cabecera del Proxy
ascanbeta.httpoxy.otherinfo = Se envi\u00f3 un mensaje saliente a {0} a trav\u00e9s del host y el puerto que ZAP inyect\u00f3 en el encabezado del proxy HTTP.
ascanbeta.httpoxy.refs = https\://httpoxy.org/
ascanbeta.httpoxy.skipped = la extensi\u00f3n de Red est\u00e1 deshabilitada
ascanbeta.httpoxy.soln = La mejor mitigaci\u00f3n inmediata es bloquear las cabeceras de petici\u00f3n Proxy lo antes posible, y antes de que lleguen a su aplicaci\u00f3n.

ascanbeta.httpsashttp.desc = El contenido al que se accedi\u00f3 inicialmente a trav\u00e9s de HTTPS (es decir, utilizando cifrado SSL/TLS) tambi\u00e9n es accesible a trav\u00e9s de HTTP (sin cifrado).
ascanbeta.httpsashttp.name = Contenido HTTPS Disponible v\u00eda HTTP
ascanbeta.httpsashttp.otherinfo = ZAP intent\u00f3 conectarse a trav\u00e9s de\: {0}
ascanbeta.httpsashttp.refs = https\://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps\://owasp.org/www-community/Security_Headers\nhttps\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps\://caniuse.com/stricttransportsecurity\nhttps\://datatracker.ietf.org/doc/html/rfc6797
ascanbeta.httpsashttp.soln = Aseg\u00farese de que su servidor web, servidor de aplicaciones, balanceador de carga, etc. est\u00e9 configurado para servir dicho contenido solo a trav\u00e9s de HTTPS. Considere implementar, seguridad de transporte estricta para HTTP.

ascanbeta.insecurehttpmethod.connect.exploitable.desc = El m\u00e9todo HTTP inseguro [{0}] est\u00e1 habilitado para este recurso y es explotable. Se encontr\u00f3 que era posible establecer una conexi\u00f3n de socket tunelizada a un servicio de terceros, utilizando este m\u00e9todo HTTP. Esto permitir\u00eda que el servicio se utilizara como un spam relay an\u00f3nimo o como un proxy web, evitando las restricciones de la red. Tambi\u00e9n permite que se use para establecer una VPN tunelizada, extendiendo efectivamente el per\u00edmetro de la red para incluir componentes no confiables.
ascanbeta.insecurehttpmethod.connect.exploitable.extrainfo = El m\u00e9todo CONNECT se us\u00f3 para establecer una conexi\u00f3n de socket a [{0}], a trav\u00e9s del servidor web.
ascanbeta.insecurehttpmethod.delete.exploitable.desc = Este m\u00e9todo se usa en los servicios REST, para eliminar un recurso.
ascanbeta.insecurehttpmethod.delete.exploitable.extrainfo = Revisa la discusi\u00f3n en stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, para comprender las operaciones de REST revisa https\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.desc = El m\u00e9todo HTTP inseguro [{0}] est\u00e1 activado en este servidor web, para este recurso. Depende de la configuraci\u00f3n del servidor web y de la implementaci\u00f3n subyacente, responsable de proporcionar el recurso, pudiera ser explotable o no. Es posible que los m\u00e9todos TRACK y TRACE sean utilizados por un atacante, para as\u00ed ganar acceso a la cookie de la sesi\u00f3n/token de autorizaci\u00f3n que tiene un usuario de la aplicaci\u00f3n, incluyendo si la cookie de sesi\u00f3n est\u00e1 protegida con el indicador ''HttpOnly''. El ataque sea exitoso si el usuario de la aplicaci\u00f3n debe usar un navegador web antiguo o un navegador web que tenga la vulnerabilidad que omita la Pol\u00edtica de Origen (SOP). Tambi\u00e9n el m\u00e9todo ''CONNECT'' lo puede usar un cliente web para crear un t\u00fanel HTTP hacia sitios web o hacia servicios de terceros.
ascanbeta.insecurehttpmethod.detailed.name = M\u00e9todo inseguro de HTTP - {0}
ascanbeta.insecurehttpmethod.extrainfo = El m\u00e9todo OPCIONES revel\u00f3 los siguientes m\u00e9todos HTTP habilitados para este recurso\: [{0}]
ascanbeta.insecurehttpmethod.insecure = c\u00f3digo de respuesta {0} para HTTP METHOD inseguro
ascanbeta.insecurehttpmethod.name = M\u00e9todo HTTP Inseguro
ascanbeta.insecurehttpmethod.options.exploitable.desc = Este es un m\u00e9todo de diagn\u00f3stico y nunca debe activarse en el modo de producci\u00f3n.
ascanbeta.insecurehttpmethod.options.exploitable.extrainfo = Consulte la discusi\u00f3n en stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods
ascanbeta.insecurehttpmethod.patch.exploitable.desc = Este m\u00e9todo ahora se usa m\u00e1s com\u00fanmente en los servicios REST, PATCH se usa para las capacidades de **modificar**. La solicitud PATCH solo debe contener los cambios en el recurso, no el recurso completo.
ascanbeta.insecurehttpmethod.patch.exploitable.extrainfo = Revisa la discusi\u00f3n en stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, para comprender las operaciones de REST revisa https\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.potentiallyinsecure = C\u00f3digo de respuesta {0} para el M\u00c9TODO HTTP potencialmente inseguro
ascanbeta.insecurehttpmethod.put.exploitable.desc = Este m\u00e9todo fue originalmente dise\u00f1ado para operaciones de gesti\u00f3n de archivos. Ahora se usa m\u00e1s com\u00fanmente en servicios REST, PUT se utiliza con mayor frecuencia para capacidades de **actualizaci\u00f3n**, haciendo PUT a un URI de recurso conocido con el cuerpo de la solicitud que contiene la representaci\u00f3n reci\u00e9n actualizada del recurso original.
ascanbeta.insecurehttpmethod.put.exploitable.extrainfo = Revisa la discusi\u00f3n en stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, para comprender las operaciones de REST revisa https\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.soln = Deshabilite m\u00e9todos inseguros como TRACK, TRACE y CONNECT en el servidor web, y aseg\u00farese de que la implementaci\u00f3n del servicio subyacente no admita m\u00e9todos inseguros.
ascanbeta.insecurehttpmethod.trace.exploitable.desc = El m\u00e9todo HTTP inseguro [{0}] est\u00e1 habilitado para este recurso y es explotable. Un atacante puede utilizar los m\u00e9todos "Track and Trace" para obtener acceso a la cookie del token o sesi\u00f3n de autorizaci\u00f3n de un usuario de la aplicaci\u00f3n, incluso si la cookie de sesi\u00f3n est\u00e1 protegida con el indicador ''HttpOnly''. Para que el ataque tenga \u00e9xito, el usuario de la aplicaci\u00f3n debe utilizar normalmente un explorador web antiguo o un explorador web que tenga una vulnerabilidad de "bypass" de la misma directiva de origen (SOP).
ascanbeta.insecurehttpmethod.trace.exploitable.extrainfo = Se ha enviado una solicitud TRACE para esta solicitud, con un valor de cookie personalizado [{0}]. Este valor de la cookie se propag\u00f3 en la respuesta HTTP, lo que confirma la existencia de la vulnerabilidad.
ascanbeta.insecurehttpmethod.webdav.exploitable.desc = Este m\u00e9todo HTTP es un m\u00e9todo WEBDAV\: {0}. Si este servidor no ofrece ning\u00fan servicio WEBDAV, estos m\u00e9todos no deber\u00edan estar disponibles.
ascanbeta.insecurehttpmethod.webdav.exploitable.extrainfo = Consulte la discusi\u00f3n en stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods

ascanbeta.integeroverflow.desc = Existe una condici\u00f3n de desbordamiento de enteros (integer overflow) cuando un entero utilizado en un programa compilado se extiende m\u00e1s all\u00e1 de los l\u00edmites del rango y no se ha verificado correctamente desde el flujo de datos de entrada.
ascanbeta.integeroverflow.error1 = Posible desbordamiento de enteros. El c\u00f3digo de estado cambi\u00f3 al ingresar una larga cadena de enteros aleatorios.
ascanbeta.integeroverflow.error2 = Posible desbordamiento de enteros. El c\u00f3digo de estado cambi\u00f3 al ingresar una larga cadena de ceros.
ascanbeta.integeroverflow.error3 = Posible desbordamiento de enteros. El c\u00f3digo de estado cambi\u00f3 al ingresar una larga cadena de unos.
ascanbeta.integeroverflow.error4 = Posible desbordamiento de enteros. El c\u00f3digo de estado cambi\u00f3 al ingresar una larga cadena de nueves.
ascanbeta.integeroverflow.name = Error Desbordamiento de Enteros
ascanbeta.integeroverflow.refs = https\://en.wikipedia.org/wiki/Integer_overflow\nhttps\://cwe.mitre.org/data/definitions/190.html
ascanbeta.integeroverflow.soln = Para evitar desbordamientos y errores de divisi\u00f3n por 0 (cero) en la aplicaci\u00f3n, por favor reescriba el programa backend, comprobando si los valores de los enteros que se est\u00e1n procesando est\u00e1n dentro del rango permitido por la aplicaci\u00f3n. Esto requerir\u00e1 una recompilaci\u00f3n del ejecutable del backend.

ascanbeta.name = Reglas de Escaneo Activo - beta

ascanbeta.noanticsrftokens.desc = No se encontraron tokens Anti-CSRF en un formulario de env\u00edo HTML.
ascanbeta.noanticsrftokens.name = Ausencia de Ttokens Anti-CSRF

ascanbeta.oobxss.name = Fuera de Banda XSS
ascanbeta.oobxss.skipped = no se ha seleccionado ning\u00fan servicio de Escaneo Activo OAST.

ascanbeta.proxydisclosure.attack = M\u00e9todos TRACE, OPTIONS con cabecera 'Max-Forwards'. Metodo TRACK.
ascanbeta.proxydisclosure.desc = Se detectaron o identificaron {0} servidor(es) proxy. Esta informaci\u00f3n ayuda a un posible atacante a determinar\n- Una lista de objetivos para un ataque contra la aplicaci\u00f3n.\n - Vulnerabilidades potenciales en los servidores proxy que dan servicio a la aplicaci\u00f3n.\n - La presencia o ausencia de cualquier componente basado en proxy que pueda causar que los ataques contra la aplicaci\u00f3n sean detectados, prevenidos o mitigados.
ascanbeta.proxydisclosure.extrainfo.proxyserver = - {0}
ascanbeta.proxydisclosure.extrainfo.proxyserver.header = Usando los m\u00e9todos TRACE, OPTIONS y TRACK, se han identificado los siguientes servidores proxy entre ZAP y el servidor de aplicaciones/web\:
ascanbeta.proxydisclosure.extrainfo.silentproxyserver = - {0}
ascanbeta.proxydisclosure.extrainfo.silentproxyserver.header = Se identificaron los siguientes servidores proxy 'silent' (silenciosos). Debido a su comportamiento, no se sabe en qu\u00e9 punto en la topolog\u00eda de red residen estos servidores proxy\:
ascanbeta.proxydisclosure.extrainfo.traceenabled = El m\u00e9todo 'TRACE' est\u00e1 habilitado en uno o m\u00e1s de los servidores proxy, o en el servidor de origen. Este m\u00e9todo filtra toda la informaci\u00f3n enviada desde el navegador web y los proxies de vuelta al agente de usuario. Esto puede facilitar ataques de 'Rastreo entre sitios' (Cross Site Tracing).
ascanbeta.proxydisclosure.extrainfo.unknown = Desconocido
ascanbeta.proxydisclosure.extrainfo.webserver = - {0}
ascanbeta.proxydisclosure.extrainfo.webserver.header = Se ha identificado el siguiente servidor web/de aplicaciones\:
ascanbeta.proxydisclosure.name = Disvulgaci\u00f3n de Proxy
ascanbeta.proxydisclosure.refs = https\://tools.ietf.org/html/rfc7231\#section-5.1.2
ascanbeta.proxydisclosure.soln = Desactivar el m\u00e9todo 'TRACE' en los servidores proxy, as\u00ed como el servidor web/aplicaci\u00f3n de origen. \nDesactivar el m\u00e9todo 'OPTIONS' en los servidores proxy, as\u00ed como el servidor web/aplicaci\u00f3n de origen, si no es necesario para otros fines, tales como 'CORS' (Cross Origin Resource Sharing). \nConfigure los servidores web y de aplicaciones con p\u00e1ginas de error personalizadas, para evitar que se filtren al usuario p\u00e1ginas de error espec\u00edficas del producto "fingerprintable" (huella) en caso de errores HTTP, como solicitudes "TRACK" para p\u00e1ginas inexistentes.\nConfigure todos los proxies, servidores de aplicaciones y servidores web para evitar la divulgaci\u00f3n de la informaci\u00f3n sobre tecnolog\u00eda y versi\u00f3n en las cabeceras de respuesta HTTP "Server" y "X-Powered-By".\n

ascanbeta.relativepathconfusion.desc = El servidor web est\u00e1 configurado para servir respuestas a URL ambiguas de forma que se pueda confundir la "path relative" (ruta relativa) correcta de la URL. Los recursos (CSS, im\u00e1genes, etc.) tambi\u00e9n se especifican en la respuesta de la p\u00e1gina utilizando URL relativas, en lugar de absolutas. En un ataque, si el navegador web analiza la respuesta de "contenido cruzado" de forma permisiva, o puede ser enga\u00f1ado para que analice de forma permisiva la respuesta de "cross-content" (contenido cruzado), utilizando t\u00e9cnicas como el framing, entonces el navegador web puede ser enga\u00f1ado para que interprete HTML como CSS (u otros tipos de contenido), dando lugar a una vulnerabilidad XSS.
ascanbeta.relativepathconfusion.extrainfo.contenttypeenabled = Se especific\u00f3 un tipo de contenido de "{0}". Si el navegador web est\u00e1 empleando reglas de an\u00e1lisis estrictas, esto evitar\u00e1 que los ataques de contenido cruzado tengan \u00e9xito. El modo Quirks en el navegador web deshabilitar\u00eda el an\u00e1lisis estricto.
ascanbeta.relativepathconfusion.extrainfo.framingallowed = No se ha especificado ninguna cabecera X-Frame-Options, por lo que la p\u00e1gina se puede enmarcar, y esto se puede utilizar para activar el Modo Quirks, permitiendo eludir el Content Type especificado.
ascanbeta.relativepathconfusion.extrainfo.morethanonebasetag = Se ha especificado m\u00e1s de una etiqueta <base> en la etiqueta HTML <head> para definir la ubicaci\u00f3n de las URL relativas, lo cual no es v\u00e1lido.
ascanbeta.relativepathconfusion.extrainfo.nobasetag = No se especific\u00f3 ninguna etiqueta <base> en la etiqueta HTML <head> para definir la ubicaci\u00f3n de las URL relativas.
ascanbeta.relativepathconfusion.extrainfo.nocontenttype = No se especific\u00f3 ning\u00fan tipo de contenido, por lo que no se requiere el modo Quirks para explotar la vulnerabilidad en el navegador web.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledexplicitly = El modo Quirks se activa expl\u00edcitamente mediante <meta http-equiv\="{0}", lo que permite omitir el Content Type especificado.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitly = El modo Quirks se habilita impl\u00edcitamente mediante el uso de un DOCTYPE antiguo con PUBLIC id "{0}", lo que permite omitir el Content Type especificado en algunos navegadores web.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitlynodoctype = El modo Quirks se activa impl\u00edcitamente mediante la ausencia de un DOCTYPE, lo que permite eludir el Content Type especificado.
ascanbeta.relativepathconfusion.name = Confusi\u00f3n de Ruta Relativa
ascanbeta.relativepathconfusion.refs = https\://arxiv.org/abs/1811.00917\nhttps\://hsivonen.fi/doctype/\nhttps\://www.w3schools.com/tags/tag_base.asp
ascanbeta.relativepathconfusion.soln = Los servidores web y Frameworks deben actualizarse para configurarse de manera que no sirvan respuestas a URLs ambiguas de tal manera que la ruta relativa de dichas URLs pueda ser mal interpretada por componentes en el lado del cliente o del servidor.\nDentro de la aplicaci\u00f3n, el uso correcto de la etiqueta HTML "<base>" en la respuesta HTTP especificar\u00e1 sin ambig\u00fcedades la URL base para todas las URLs relativas en el documento.\nUse el encabezado de respuesta HTTP "Content-Type" para dificultar que el atacante fuerce al navegador web a interpretar mal el tipo de contenido de la respuesta.\nUse el encabezado de respuesta HTTP "X-Content-Type-Options\: nosniff" para evitar que el navegador web "olfatee" el tipo de contenido de la respuesta.\nUse un DOCTYPE moderno como "<\!doctype html>" para evitar que la p\u00e1gina se renderice en el navegador web usando el "Modo Quirks", ya que esto resulta en que el navegador web ignore el tipo de contenido.\nEspecifique el encabezado de respuesta HTTP "X-Frame-Options" para evitar que el Modo Quirks se habilite en el navegador web usando ataques de framing.

ascanbeta.sessionfixation.alert.attack = {0} campo\: [{1}]
ascanbeta.sessionfixation.alert.cookie.extrainfo = La Cookie se configura en respuesta cuando el campo de la cookie [{0}] se encuentra establecido en NULL\: [{1}]\nLa Cookie se configura en respuesta con el valor de la cookie otorgada (v\u00e1lida) en la petici\u00f3n [{1}] \: [{2}]
ascanbeta.sessionfixation.alert.cookie.extrainfo.loginpage = La URL en la que se descubri\u00f3 el problema estaba marcada como p\u00e1gina de inicio de sesi\u00f3n.\n\nEste problema debe validarse manualmente comprobando que el token de sesi\u00f3n establecido en la p\u00e1gina de inicio de sesi\u00f3n sigue siendo v\u00e1lido una vez iniciada la sesi\u00f3n, y que el token puede utilizarse para acceder directamente a una p\u00e1gina/recurso que deber\u00eda requerir que el usuario inicie sesi\u00f3n.
ascanbeta.sessionfixation.alert.url.extrainfo = Un valor de sesi\u00f3n probable ha aparecido en  las URL que se encuentra en el resultado HTML cuando el par\u00e1metro URL/pseudo par\u00e1metro URL [{0}] se establece en NULL\: [{1}]\nCuando esta sesi\u00f3n ''prestada'' [{1}] se utiliza en una solicitud posterior para esta URL, no se crea una nueva sesi\u00f3n.
ascanbeta.sessionfixation.alert.url.extrainfo.loginpage = La URL en la que se descubri\u00f3 el problema estaba marcada como p\u00e1gina de inicio de sesi\u00f3n.
ascanbeta.sessionfixation.desc = La Fijaci\u00f3n de Sesi\u00f3n puede ser posible. Si este problema se produce con una URL de inicio de sesi\u00f3n (donde el usuario se autentica en la aplicaci\u00f3n), entonces la URL puede ser dada por un atacante, junto con un identificador de sesi\u00f3n fijo, a una v\u00edctima, para m\u00e1s tarde asumir la identidad de la v\u00edctima utilizando el identificador de sesi\u00f3n dado. Si el problema ocurre con una p\u00e1gina que no es de inicio de sesi\u00f3n, la URL y el identificador de sesi\u00f3n fijo s\u00f3lo pueden ser utilizados por un atacante para rastrear las acciones de un usuario no autenticado. Si la vulnerabilidad se produce en un campo de cookie o en un campo de formulario (par\u00e1metro POST) en lugar de en un par\u00e1metro de URL (GET), es posible que tambi\u00e9n se requiera alguna otra vulnerabilidad para establecer el campo de cookie en el navegador de la v\u00edctima, a fin de permitir que se explote la vulnerabilidad.
ascanbeta.sessionfixation.name = Fijaci\u00f3n de Sesi\u00f3n
ascanbeta.sessionfixation.refs = https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication\nhttps\://owasp.org/www-community/attacks/Session_fixation\nhttps\://acrossecurity.com/papers/session_fixation.pdf\nhttps\://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html
ascanbeta.sessionfixation.soln = 1) Evite que el atacante obtenga un ID de sesi\u00f3n aplicando IDs de sesi\u00f3n estrictos y asignando IDs de sesi\u00f3n solo despu\u00e9s de una autenticaci\u00f3n exitosa en la aplicaci\u00f3n.\n2) El servidor siempre debe crear un nuevo ID de sesi\u00f3n al autenticarse, independientemente de si ya hay una sesi\u00f3n establecida.\n3) Vincule el ID de sesi\u00f3n a alguna combinaci\u00f3n de atributos identificables del cliente, como la direcci\u00f3n IP, el certificado de cliente SSL.\n4) Las sesiones, cuando se destruyen, deben ser destruidas tanto en el servidor como en el cliente.\n5) Implemente un mecanismo de cierre de sesi\u00f3n que destruya todas las sesiones anteriores para el cliente.\n6) Implemente tiempos de espera de sesi\u00f3n absolutos.\n7) Cambie de una implementaci\u00f3n de ID de sesi\u00f3n basada en URL a una basada en cookies o formularios, ya que estas \u00faltimas t\u00edpicamente requieren vulnerabilidades adicionales para ser explotables por un atacante.

ascanbeta.sessionidaccessiblebyjavascript.alert.attack = Campo {0}\: [{1}]
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo = El campo [{1}] del identificador de sesi\u00f3n {0}, valor [{2}] puede ser accedido usando JavaScript en el navegador web.
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo.loginpage = La URL en la que se descubri\u00f3 el problema fue marcada como una p\u00e1gina de inicio de sesi\u00f3n.
ascanbeta.sessionidaccessiblebyjavascript.desc = Una cookie de ID de sesi\u00f3n enviada por el servidor (cuando la URL se modifica estableciendo el campo de par\u00e1metro nombrado a NULL) puede ser accedida por JavaScript en el cliente. En conjunto con otra vulnerabilidad, esto puede permitir que la sesi\u00f3n sea secuestrada.
#Session Id Cookie accessible by JavaScript
ascanbeta.sessionidaccessiblebyjavascript.name = Cookie ID de la Sesi\u00f3n Accesible para JavaScript
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidaccessiblebyjavascript.soln = 1) Usa la flag 'httponly' al establecer una cookie que contenga un ID de sesi\u00f3n, para evitar que sea accedida por JavaScript en el navegador web.

ascanbeta.sessionidexpiry.alert.attack = {0} campo\: [{1}]
ascanbeta.sessionidexpiry.alert.extrainfo = se puede acceder al identificador de la sesi\u00f3n {0} campo [{1}], valor [{2}] hasta el valor [{3}] (desde que se recibi\u00f3 la cookie en {4}), a menos que se destruya la sesi\u00f3n.
ascanbeta.sessionidexpiry.alert.extrainfo.loginpage = La URL en la que se descubri\u00f3 el problema estaba marcada como p\u00e1gina de inicio de sesi\u00f3n.
ascanbeta.sessionidexpiry.browserclose = navegador cerrado
ascanbeta.sessionidexpiry.desc = Una cookie de ID de sesi\u00f3n enviada por el servidor (cuando la URL se modifica estableciendo el campo de par\u00e1metro nombrado a NULL) se establece para ser v\u00e1lida por un per\u00edodo de tiempo excesivo. Esto puede ser explotable por un atacante si el usuario olvida cerrar sesi\u00f3n, si la funcionalidad de cierre de sesi\u00f3n no destruye correctamente la sesi\u00f3n, o si el ID de sesi\u00f3n se ve comprometido por otros medios.
#Session Id Cookie Expiry
ascanbeta.sessionidexpiry.name = La Expiraci\u00f3n del Tiempo/Antiguedad-M\u00e1xima de la ID Sesion es excesivo
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexpiry.soln = 1) Utiliza las directivas de cookies 'Expire' o 'Max-Age' al establecer una cookie que contenga un identificador de sesi\u00f3n, para evitar que est\u00e9 disponible por per\u00edodos prolongados.\n2) Aseg\u00farese de que la funcionalidad de cierre de sesi\u00f3n existe y que termina correctamente el per\u00edodo de sesiones.\n3) Utilizar otras medidas preventivas para asegurar que si un identificador de sesi\u00f3n est\u00e1 comprometido, no pueda ser explotado.
ascanbeta.sessionidexpiry.timeexpired = Expirado
ascanbeta.sessionidexpiry.timelessthanonehour = Menos de una hora
ascanbeta.sessionidexpiry.timemorethanoneday = M\u00e1s de un d\u00eda
ascanbeta.sessionidexpiry.timemorethanonehour = M\u00e1s de una hora
ascanbeta.sessionidexpiry.timemorethanoneweek = M\u00e1s de una semana

ascanbeta.sessionidexposedinurl.alert.attack = {0} campo\: [{1}]
ascanbeta.sessionidexposedinurl.alert.extrainfo = El campo {0} [{1}] contiene un identificador de la sesi\u00f3n que est\u00e1 expuesta [{2}]
ascanbeta.sessionidexposedinurl.alert.extrainfo.loginpage = La URL en la que se descubri\u00f3 el problema estaba marcada como p\u00e1gina de inicio de sesi\u00f3n.
ascanbeta.sessionidexposedinurl.desc = Un ID de sesi\u00f3n est\u00e1 expuesto en la URL. Al compartir dicha URL del sitio web (que contiene el ID de sesi\u00f3n), un usuario ingenuo puede estar otorgando inadvertidamente acceso a sus datos, comprometiendo su confidencialidad, integridad y disponibilidad. Las URL que contienen el identificador de sesi\u00f3n tambi\u00e9n aparecen en los marcadores del navegador web, archivos de registro del servidor web y archivos de registro del servidor proxy.
#Exposed Session Id messages
ascanbeta.sessionidexposedinurl.name = ID Sesi\u00f3n Expuesta
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexposedinurl.refs = https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidexposedinurl.soln = Utilice una implementaci\u00f3n de gesti\u00f3n de sesiones m\u00e1s segura, como la que utiliza cookies de sesi\u00f3n, que no se comparten tan f\u00e1cilmente de forma inadvertida y que no suelen aparecer en los archivos de registro del servidor ni en los marcadores del navegador web.

ascanbeta.sessionidsentinsecurely.alert.attack = {0} campo\: [{1}]
ascanbeta.sessionidsentinsecurely.alert.extrainfo = El campo [{1}] del identificador de sesi\u00f3n {0}, valor [{2}] puede ser enviado a trav\u00e9s de un mecanismo inseguro.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.loginpage = La URL en la que se descubri\u00f3 el problema estaba marcada como p\u00e1gina de inicio de sesi\u00f3n.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.secureflagnotset = El flag 'secure' no se configur\u00f3 en la cookie de sesi\u00f3n proporcionada por el servidor.
ascanbeta.sessionidsentinsecurely.desc = Un identificador de sesi\u00f3n puede ser enviado a trav\u00e9s de un mecanismo inseguro. En el caso de una cookie enviada en la solicitud, esto ocurre cuando se usa HTTP en lugar de HTTPS. En el caso de una cookie enviada por el servidor en respuesta (cuando la URL se modifica estableciendo el campo de par\u00e1metro nombrado a NULL), la bandera 'secure' no est\u00e1 establecida, permitiendo que la cookie sea enviada posteriormente a trav\u00e9s de HTTP en lugar de HTTPS. Esto puede permitir que un esp\u00eda pasivo en la ruta de la red obtenga acceso completo a la sesi\u00f3n de la v\u00edctima.
#Session Id Cookie not sent securely
ascanbeta.sessionidsentinsecurely.name = ID de Sesi\u00f3n Transmitido de una manera Insegura
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidsentinsecurely.refs = https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidsentinsecurely.soln = 1) Use la \u00faltima versi\u00f3n disponible de SSL/TLS (para HTTPS) en todas las p\u00e1ginas donde se comunica un identificador de sesi\u00f3n entre el navegador y el servidor web.\n2) No permita que la comunicaci\u00f3n sea forzada al protocolo HTTP no cifrado.\n3) Use la bandera 'secure' al establecer una cookie que contenga un identificador de sesi\u00f3n, para evitar su transmisi\u00f3n posterior por un mecanismo inseguro.\n4) Reenv\u00ede las solicitudes de p\u00e1ginas HTTP no seguras a la p\u00e1gina equivalente HTTPS segura.

ascanbeta.shellshock.desc = El servidor est\u00e1 ejecutando una versi\u00f3n del shell Bash que permite a los atacantes remotos ejecutar c\u00f3digo arbitrario.
ascanbeta.shellshock.extrainfo = De CVE-2014-6271\: GNU Bash a trav\u00e9s de 4.3 procesa cadenas de arrastre despu\u00e9s de las definiciones de funci\u00f3n en los valores de las variables de entorno, lo que permite a atacantes remotos ejecutar c\u00f3digo arbitrario a trav\u00e9s de un entorno crafteado, como lo demuestran los vectores que involucran la funci\u00f3n ForceCommand en OpenSSH sshd, los m\u00f3dulos mod_cgi y mod_cgid en el servidor HTTP Apache, scripts ejecutados por clientes DHCP no especificados, y otras situaciones en las que la configuraci\u00f3n del entorno se produce a trav\u00e9s de un l\u00edmite de privilegios de la ejecuci\u00f3n de Bash, tambi\u00e9n conocido como "ShellShock." NOTA\: la correcci\u00f3n original de este problema era incorrecta; se ha asignado CVE-2014-7169 para cubrir la vulnerabilidad que sigue presente tras la correcci\u00f3n incorrecta.
ascanbeta.shellshock.name = Ejecuci\u00f3n Remota de C\u00f3digo - Shell Shock
ascanbeta.shellshock.ref = https\://nvd.nist.gov/vuln/detail/CVE-2014-6271\nhttps\://www.troyhunt.com/everything-you-need-to-know-about2/
ascanbeta.shellshock.soln = Actualice Bash en el servidor a la \u00faltima versi\u00f3n.
ascanbeta.shellshock.timingbased.evidence = Usando el ataque, se indujo y detect\u00f3 un retraso de [{0}] milisegundos

ascanbeta.sourcecodedisclosure.desc = El c\u00f3digo fuente de la p\u00e1gina actual fue revelado por el servidor web.
ascanbeta.sourcecodedisclosure.gitbased.evidence = El c\u00f3digo fuente de [{0}] se extrajo usando [{1}]
ascanbeta.sourcecodedisclosure.gitbased.name = Divulgaci\u00f3n de C\u00f3digo Fuente - Git
ascanbeta.sourcecodedisclosure.gitbased.soln = Aseg\u00farese de que los archivos de metadatos de Git no se implementen en el servidor web o servidor de aplicaciones.
ascanbeta.sourcecodedisclosure.lfibased.extrainfo = La salida para el nombre de archivo del c\u00f3digo fuente [{0}] difiere suficientemente de la del par\u00e1metro aleatorio [{1}], en un [{2}%], en comparaci\u00f3n con un umbral de [{3}%]
ascanbeta.sourcecodedisclosure.lfibased.name = Divulgaci\u00f3n de C\u00f3digo Fuente - Inclusi\u00f3n de archivos
ascanbeta.sourcecodedisclosure.svnbased.extrainfo = El c\u00f3digo fuente de [{0}] se encontr\u00f3 en [{1}]
ascanbeta.sourcecodedisclosure.svnbased.name = Divulgaci\u00f3n del C\u00f3digo Fuente - SVN
ascanbeta.sourcecodedisclosure.svnbased.soln = Aseg\u00farese de que los archivos de metadatos de SVN no se implementen en el servidor web o servidor de aplicaciones.

ascanbeta.sourcecodedisclosurecve-2012-1823.desc = Algunas versiones de PHP, cuando se configuran para ejecutarse utilizando CGI, no manejan correctamente las cadenas de consulta que carecen de un car\u00e1cter "\=" sin may\u00fasculas, lo que permite la divulgaci\u00f3n del c\u00f3digo fuente de PHP y la ejecuci\u00f3n de c\u00f3digo arbitrario. En este caso, el contenido del archivo PHP se serv\u00eda directamente al navegador web. Esta salida contendr\u00e1 t\u00edpicamente PHP, aunque tambi\u00e9n puede contener HTML directo.
ascanbeta.sourcecodedisclosurecve-2012-1823.name = Divulgaci\u00f3n del C\u00f3digo Fuente - CVE-2012-1823
ascanbeta.sourcecodedisclosurecve-2012-1823.soln = Actualice a la \u00faltima versi\u00f3n estable de PHP o utilice el servidor web Apache y el m\u00f3dulo mod_rewrite para filtrar las peticiones maliciosas mediante las directivas "RewriteCond" y "RewriteRule".

ascanbeta.ssrf.desc = El servidor web recibe una direcci\u00f3n remota y recupera el contenido de esta URL, pero no se asegura suficientemente de que la petici\u00f3n se est\u00e9 enviando al destino esperado.
ascanbeta.ssrf.name = Falsificaci\u00f3n de Peticiones del Lado del Servidor (SSRF)
ascanbeta.ssrf.otherinfo.canaryinbody = El canary token del servicio out-of-band fue encontrado en el cuerpo de la respuesta
ascanbeta.ssrf.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
ascanbeta.ssrf.skipped = no se ha seleccionado ning\u00fan servicio de Escaneo Activo OAST.
ascanbeta.ssrf.soln = No acepte direcciones remotas como par\u00e1metros de solicitudes, y si es un requisito, aseg\u00farese de  que sean validadas por una lista de valores esperados permitidos (lista blanca).

ascanbeta.text4shell.desc = Apache Commons Text anterior a 1.10.0 permite RCE cuando se aplica a entradas que no son de confianza debido a valores predeterminados de interpolaci\u00f3n inseguros. Apache Commons Text realiza la interpolaci\u00f3n de variables, lo que permite que las propiedades se eval\u00faen y ampl\u00eden din\u00e1micamente. Se ha demostrado que la aplicaci\u00f3n tiene un contacto inicial con servidores remotos a trav\u00e9s de la interpolaci\u00f3n variable y puede ser vulnerable a la ejecuci\u00f3n remota de c\u00f3digo (RCE).
ascanbeta.text4shell.name = Text4shell (CVE-2022-42889)
ascanbeta.text4shell.refs = https\://www.cve.org/CVERecord?id\=CVE-2022-42889\nhttps\://securitylab.github.com/advisories/GHSL-2022-018_Apache_Commons_Text/
ascanbeta.text4shell.skipped = no se ha seleccionado ning\u00fan servicio de Escaneo Activo OAST.
ascanbeta.text4shell.soln = Actualice Apache Commons Text a la versi\u00f3n 1.10.0 o superior.

ascanbeta.usernameenumeration.alert.attack = Manipular [{0}] para el campo\: [{1}] y monitorear la salida
ascanbeta.usernameenumeration.alert.extrainfo = El par\u00e1metro [{0}] [{1}] filtra informaci\u00f3n sobre si un usuario existe. Las [{5}] diferencias en la salida, para el valor de nombre de usuario original v\u00e1lido [{2}], y el valor de nombre de usuario inv\u00e1lido [{3}] son\:\n[{4}].
ascanbeta.usernameenumeration.desc = Puede ser posible enumerar nombres de usuario, bas\u00e1ndose en las diferentes respuestas HTTP cuando se proporcionan nombres de usuario v\u00e1lidos e inv\u00e1lidos. Esto aumentar\u00eda considerablemente la probabilidad de \u00e9xito de los ataques de fuerza bruta de contrase\u00f1as contra el sistema. Tenga en cuenta que los falsos positivos a veces pueden minimizarse aumentando la opci\u00f3n 'Fuerza de Ataque' en ZAP. Por favor, verifique manualmente el campo 'Otra Informaci\u00f3n' para confirmar si esto es realmente un problema.
ascanbeta.usernameenumeration.name = Posible Enumeraci\u00f3n de Nombre de Usuario
ascanbeta.usernameenumeration.refs = https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account.html\nhttps\://dl.ifip.org/db/conf/sec/sec2011/FreilingS11.pdf\nhttps\://cwe.mitre.org/data/definitions/204.html
ascanbeta.usernameenumeration.soln = No divulgue detalles sobre si un nombre de usuario es v\u00e1lido o inv\u00e1lido. En particular, en los intentos fallidos de inicio de sesi\u00f3n, no distingas entre un usuario no v\u00e1lido y una contrase\u00f1a no v\u00e1lida en el mensaje de error, el t\u00edtulo de la p\u00e1gina, el contenido de la p\u00e1gina, las cabeceras HTTP o la l\u00f3gica de redireccionamiento.


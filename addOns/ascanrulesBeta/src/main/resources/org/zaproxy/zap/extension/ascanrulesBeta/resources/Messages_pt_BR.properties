ascanbeta.HTTPParamPoll.desc = Ataques HTTP Parameter Pollution (HPP) consistem em injetar delimitadores de string de consulta codificados em outros par\u00e2metros existentes. Se um aplica\u00e7\u00e3o web n\u00e3o limpar adequadamente a entrada do usu\u00e1rio, um usu\u00e1rio mal-intencionado pode comprometer a l\u00f3gica do aplicativo para executar ataques do lado do cliente ou do lado do servidor. Uma consequ\u00eancia dos ataques HPP \u00e9 que o invasor pode substituir os par\u00e2metros HTTP embutidos em c\u00f3digo existentes para modificar o comportamento de um aplicativo, ignorar os pontos de verifica\u00e7\u00e3o de valida\u00e7\u00e3o de entrada e acessar e possivelmente explorar vari\u00e1veis \u200b\u200bque podem estar fora de alcance direto.
ascanbeta.HTTPParamPoll.extrainfo = https\://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution
ascanbeta.HTTPParamPoll.name = Polui\u00e7\u00e3o de Par\u00e2metro HTTP
ascanbeta.HTTPParamPoll.sol = Limpe adequadamente a entrada de dados do usu\u00e1rio para delimitadores de par\u00e2metro

ascanbeta.backupfiledisclosure.desc = Um arquivo de backup foi divulgado pelo servidor web
ascanbeta.backupfiledisclosure.name = Divulga\u00e7\u00e3o de Arquivo de Backup
ascanbeta.backupfiledisclosure.otherinfo = A backup of [{0}] is available at [{1}]
ascanbeta.backupfiledisclosure.refs = https\://cwe.mitre.org/data/definitions/530.html\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.html
ascanbeta.backupfiledisclosure.soln = N\u00e3o edite arquivos localmente no servidor web e certifique-se de que os arquivos desnecess\u00e1rios (incluindo arquivos ocultos) sejam removidos do servidor.

ascanbeta.cookieslack.affect.response.no = These cookies did NOT affect the response\: 
ascanbeta.cookieslack.affect.response.yes = These cookies affected the response\: 
ascanbeta.cookieslack.desc = Solicita\u00e7\u00f5es GET repetidas\: elimine um cookie diferente a cada vez, seguido pela solicita\u00e7\u00e3o normal com todos os cookies para estabilizar a sess\u00e3o, compare as respostas com a linha de base GET original. Isso pode revelar \u00e1reas onde a autentica\u00e7\u00e3o / atributos baseados em cookies n\u00e3o s\u00e3o realmente aplicados.
ascanbeta.cookieslack.endline = \n
ascanbeta.cookieslack.name = Detector de Cookie Slack
ascanbeta.cookieslack.otherinfo.intro = Cookies que n\u00e3o tem efeitos esperados podem revelar falhas na aplica\u00e7\u00e3o l\u00f3gica. No pior caso, isso pode revelar aonde a autentica\u00e7\u00e3o atrav\u00e9s de token(s) cookie n\u00e3o \u00e9 realmente aplicada.\n
ascanbeta.cookieslack.separator = ,
ascanbeta.cookieslack.session.destroyed = Dropping this cookie appears to have invalidated the session\: [{0}] A follow-on request with all original cookies still had a different response than the original request. \n
ascanbeta.cookieslack.session.warning = NOTE\: Because of its name this cookie may be important, but dropping it appears to have no effect\: [{0}] \n

ascanbeta.cors.info.desc = Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any other origins (domain, scheme, or port) than its own from which a browser should permit loading of resources. It relaxes the Same-Origin Policy (SOP).
ascanbeta.cors.info.name = CORS Header
ascanbeta.cors.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\nhttps\://portswigger.net/web-security/cors
ascanbeta.cors.soln = If a web resource contains sensitive information, the origin should be properly specified in the Access-Control-Allow-Origin header. Only trusted websites needing this resource should be specified in this header, with the most secured protocol supported.
ascanbeta.cors.vuln.desc = This CORS misconfiguration could allow an attacker to perform AJAX queries to the vulnerable website from a malicious page loaded by the victim's user agent.\nIn order to perform authenticated AJAX queries, the server must specify the header "Access-Control-Allow-Credentials\: true" and the "Access-Control-Allow-Origin" header must be set to null or the malicious page's domain. Even if this misconfiguration doesn't allow authenticated AJAX requests, unauthenticated sensitive content can still be accessed (e.g intranet websites).\nA malicious page can belong to a malicious website but also a trusted website with flaws (e.g XSS, support of HTTP without TLS allowing code injection through MITM, etc).
ascanbeta.cors.vuln.name = CORS Misconfiguration

ascanbeta.crossdomain.adobe.desc = A falsifica\u00e7\u00e3o de solicita\u00e7\u00e3o entre sites baseada em Flash/Silverlight pode ser poss\u00edvel, devido a uma configura\u00e7\u00e3o incorreta no servidor web. 
ascanbeta.crossdomain.adobe.read.extrainfo = O servidor web permite solicita\u00e7\u00f5es maliciosas de leitura de dados entre dom\u00ednios originadas de componentes Flash/Silverlight servidos de qualquer dom\u00ednio de terceiros para este dom\u00ednio. Se o usu\u00e1rio v\u00edtima estiver conectado a este servi\u00e7o, as solicita\u00e7\u00f5es de leitura maliciosas s\u00e3o processadas usando os privil\u00e9gios da v\u00edtima e podem resultar no comprometimento dos dados deste servi\u00e7o por um site de terceiros n\u00e3o autorizado, atrav\u00e9s do navegador da v\u00edtima. Isso provavelmente ser\u00e1 um problema se uma implementa\u00e7\u00e3o de sess\u00e3o baseada em Cookie estiver em uso. 
ascanbeta.crossdomain.adobe.read.name = Configura\u00e7\u00e3o Incorreta Entre Dom\u00ednios - Adobe - Leitura
ascanbeta.crossdomain.adobe.read.soln = Configure o arquivo crossdomain.xml para restringir a lista de dom\u00ednios que t\u00eam permiss\u00e3o para fazer solicita\u00e7\u00f5es de leitura entre dom\u00ednios para este servidor web, usando <allow-access-from domain\="example.com">. Voc\u00ea s\u00f3 deve conceder acesso a "*" (todos os dom\u00ednios) se tiver certeza de que este servi\u00e7o n\u00e3o hospeda nenhum dado de acesso controlado, personalizado ou privado.
ascanbeta.crossdomain.adobe.send.extrainfo = O servidor web permite o envio de dados maliciosos entre dom\u00ednios (mas n\u00e3o necessariamente leitura) originados de componentes Flash/Silverlight servidos a partir de qualquer dom\u00ednio de terceiros para este dom\u00ednio. Se o usu\u00e1rio v\u00edtima estiver conectado a este servi\u00e7o, as solicita\u00e7\u00f5es de envio mal-intencionadas s\u00e3o processadas usando os privil\u00e9gios da v\u00edtima e podem resultar em ataques do tipo Cross Site Request Forgery (CSRF), por meio do navegador da v\u00edtima. Isso provavelmente ser\u00e1 um problema se uma implementa\u00e7\u00e3o de sess\u00e3o baseada em Cookie estiver em uso.
ascanbeta.crossdomain.adobe.send.name = Configura\u00e7\u00e3o Incorreta Entre Dom\u00ednios - Adobe - Envio
ascanbeta.crossdomain.adobe.send.soln = Configure o arquivo crossdomain.xml para restringir a lista de dom\u00ednios que t\u00eam permiss\u00e3o para enviar solicita\u00e7\u00f5es entre dom\u00ednios (mas n\u00e3o necessariamente ler) para este servidor web, usando <allow-http-request-headers-from domain\="example.com" headers\="Authorization,X-Blahh">. Voc\u00ea s\u00f3 deve conceder acesso a "*" (todos os dom\u00ednios) se tiver certeza de que este servi\u00e7o n\u00e3o \u00e9 vulner\u00e1vel a ataques Cross Site Request Forgery (CSRF).
ascanbeta.crossdomain.name = Configura\u00e7\u00e3o Incorreta Entre Dom\u00ednios
ascanbeta.crossdomain.refs = https\://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf\nhttps\://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc197955(v\=vs.95)\nhttps\://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc838250(v\=vs.95)
ascanbeta.crossdomain.silverlight.desc = A falsifica\u00e7\u00e3o de solicita\u00e7\u00e3o entre sites com base em Silverlight pode ser poss\u00edvel, devido a uma configura\u00e7\u00e3o incorreta no servidor web.
ascanbeta.crossdomain.silverlight.extrainfo = O servidor web permite solicita\u00e7\u00f5es maliciosas entre dom\u00ednios originadas de componentes do Silverlight servidos de qualquer dom\u00ednio de terceiros para este dom\u00ednio. Se o usu\u00e1rio v\u00edtima estiver conectado a este servi\u00e7o, as solicita\u00e7\u00f5es maliciosas s\u00e3o processadas usando os privil\u00e9gios da v\u00edtima e podem resultar no comprometimento dos dados deste servi\u00e7o por um site de terceiros n\u00e3o autorizado, por meio dos navegadores da v\u00edtima. Tamb\u00e9m pode resultar em ataques do tipo Cross Site Request Forgery (CSRF). Isso provavelmente ser\u00e1 um problema se uma implementa\u00e7\u00e3o de sess\u00e3o baseada em Cookie estiver em uso.
ascanbeta.crossdomain.silverlight.name = Configura\u00e7\u00e3o Incorreta Entre Dom\u00ednios - Silverlight
ascanbeta.crossdomain.silverlight.soln = Configure o arquivo clientaccesspolicy.xml para restringir a lista de dom\u00ednios que t\u00eam permiss\u00e3o para fazer solicita\u00e7\u00f5es entre dom\u00ednios para este servidor web, usando <domain uri\="https\://example.com" />. Voc\u00ea s\u00f3 deve conceder acesso a "*" (todos os dom\u00ednios) se tiver certeza de que este servi\u00e7o n\u00e3o hospeda nenhum dado de acesso controlado, personalizado ou privado.

ascanbeta.csrftoken.extrainfo.annotation = Este \u00e9 um alerta informativo, pois o formul\u00e1rio possui uma anota\u00e7\u00e3o de seguran\u00e7a indicando que n\u00e3o \u00e9 necess\u00e1rio um token anti-CSRF. Isso deve ser testado manualmente para garantir que a anota\u00e7\u00e3o est\u00e1 correta.
ascanbeta.csrftoken.name = Anti-CSRF Tokens Check

ascanbeta.desc = Beta status active scan rules

ascanbeta.elinjection.desc = O software constr\u00f3i toda ou parte de uma instru\u00e7\u00e3o de linguagem de express\u00e3o (EL) em uma Java Server Page (JSP) usando entrada influenciada externamente de um componente upstream, mas n\u00e3o neutraliza ou neutraliza incorretamente elementos especiais que poderiam modificar a instru\u00e7\u00e3o EL pretendida antes de ela ser executada. Em certas vers\u00f5es do Spring 3.0.5 e anteriores, havia uma vulnerabilidade (CVE-2011-2730) na qual as tags do Expression Language seriam avaliadas duas vezes, o que efetivamente exp\u00f4s qualquer aplicativo \u00e0 inje\u00e7\u00e3o EL. No entanto, mesmo para vers\u00f5es posteriores, essa fraqueza ainda \u00e9 poss\u00edvel dependendo da configura\u00e7\u00e3o.
ascanbeta.elinjection.name = Expression Language Injection
ascanbeta.elinjection.refs = https\://owasp.org/www-community/vulnerabilities/Expression_Language_Injection\nhttps\://cwe.mitre.org/data/definitions/917.html
ascanbeta.elinjection.soln = Realize as melhores pr\u00e1ticas de valida\u00e7\u00e3o de dados em rela\u00e7\u00e3o \u00e0 entrada n\u00e3o confi\u00e1vel e para garantir que a codifica\u00e7\u00e3o de sa\u00edda seja aplicada quando os dados chegarem \u00e0 camada EL, para que nenhum metacaractere seja encontrado pelo int\u00e9rprete no conte\u00fado do usu\u00e1rio antes da avalia\u00e7\u00e3o. Os padr\u00f5es mais \u00f3bvios para detectar incluem ${ e \#{, mas pode ser poss\u00edvel codificar ou fragmentar esses dados.

ascanbeta.entityExpansion.desc = An exponential entity expansion, or "billion laughs" attack is a type of denial-of-service (DoS) attack. It is aimed at parsers of markup languages like XML or YAML that allow macro expansions.
ascanbeta.entityExpansion.name = Exponential Entity Expansion (Billion Laughs Attack)
ascanbeta.entityExpansion.other = The attack HTTP request received a response after {0} seconds.
ascanbeta.entityExpansion.refs = https\://en.wikipedia.org/wiki/Billion_laughs_attack\nhttps\://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\nhttps\://cwe.mitre.org/data/definitions/776.html
ascanbeta.entityExpansion.soln = Defenses against this kind of attack include capping the memory allocated in an individual parser if loss of the document is acceptable, or treating entities symbolically and expanding them lazily only when (and to the extent) their content is to be used.

ascanbeta.forbiddenBypass.desc = Bypassing 403 endpoints may be possible, the scan rule sent a payload that caused the response to be accessible (status code 200).
ascanbeta.forbiddenBypass.name = Bypassing 403
ascanbeta.forbiddenBypass.refs = https\://www.acunetix.com/blog/articles/a-fresh-look-on-reverse-proxy-related-attacks/\nhttps\://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf\nhttps\://www.contextis.com/en/blog/server-technologies-reverse-proxy-bypass

ascanbeta.httponlysite.desc = The site is only served under HTTP and not HTTPS.
ascanbeta.httponlysite.name = HTTP Only Site
ascanbeta.httponlysite.otherinfo = {0}\nZAP attempted to connect via\: {1}
ascanbeta.httponlysite.otherinfo.connectionfail = Failed to connect.
ascanbeta.httponlysite.otherinfo.differenthosts = Different Hosts.
ascanbeta.httponlysite.otherinfo.noredirection = There was no automatic redirection.
ascanbeta.httponlysite.otherinfo.nossl = Site has no SSL/TLS support.
ascanbeta.httponlysite.otherinfo.redirectionlimit = Redirection limit reached.
ascanbeta.httponlysite.otherinfo.redirecttohttp = Redirected to HTTP.
ascanbeta.httponlysite.otherinfo.urinotencoded = Redirection URI couldn't be encoded.
ascanbeta.httponlysite.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\nhttps\://letsencrypt.org/
ascanbeta.httponlysite.soln = Configure your web or application server to use SSL (https).

ascanbeta.httpoxy.desc = The server initiated a proxied request via the proxy specified in the HTTP Proxy header of the request.Httpoxy typically affects code running in CGI or CGI like environments.\nThis may allow attackers to\:\n* Proxy the outgoing HTTP requests made by the web application\n* Direct the server to open outgoing connections to an address and port of their choosing or\n* Tie up server resources by forcing the vulnerable software to use a malicious proxy
ascanbeta.httpoxy.name = Httpoxy - Proxy Header Misuse
ascanbeta.httpoxy.otherinfo = An outgoing message to {0} was proxied via the host and port that ZAP injected into the HTTP Proxy header.
ascanbeta.httpoxy.refs = https\://httpoxy.org/
ascanbeta.httpoxy.skipped = the Network extension is disabled
ascanbeta.httpoxy.soln = The best immediate mitigation is to block Proxy request headers as early as possible, and before they hit your application.

ascanbeta.httpsashttp.desc = Content which was initially accessed via HTTPS (i.e.\: using SSL/TLS encryption) is also accessible via HTTP (without encryption). 
ascanbeta.httpsashttp.name = HTTPS Content Available via HTTP
ascanbeta.httpsashttp.otherinfo = ZAP attempted to connect via\: {0}
ascanbeta.httpsashttp.refs = https\://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps\://owasp.org/www-community/Security_Headers\nhttps\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps\://caniuse.com/stricttransportsecurity\nhttps\://datatracker.ietf.org/doc/html/rfc6797
ascanbeta.httpsashttp.soln = Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.

ascanbeta.insecurehttpmethod.connect.exploitable.desc = O m\u00e9todo HTTP inseguro [{0}] est\u00e1 habilitado para este recurso e pode ser explorado. Foi poss\u00edvel estabelecer uma conex\u00e3o de socket em t\u00fanel para um servi\u00e7o de terceiros, usando este m\u00e9todo HTTP. Isso permitiria que o servi\u00e7o fosse usado como uma retransmiss\u00e3o an\u00f4nima de spam ou como um proxy da web, ignorando as restri\u00e7\u00f5es de rede. Ele tamb\u00e9m permite que seja usado para estabelecer uma VPN em t\u00fanel, estendendo efetivamente o per\u00edmetro da rede para incluir componentes n\u00e3o confi\u00e1veis. 
ascanbeta.insecurehttpmethod.connect.exploitable.extrainfo = O m\u00e9todo CONNECT foi usado para estabelecer uma conex\u00e3o de socket com [{0}], atrav\u00e9s do servidor web.
ascanbeta.insecurehttpmethod.delete.exploitable.desc = This method is most commonly used in REST services, It is used to delete a resource.
ascanbeta.insecurehttpmethod.delete.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see https\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.desc = O m\u00e9todo HTTP inseguro [{0}] est\u00e1 ativado no servidor web para este recurso. Dependendo da configura\u00e7\u00e3o do servidor web e da implementa\u00e7\u00e3o subjacente respons\u00e1vel por servir o recurso, isso pode ou n\u00e3o ser explor\u00e1vel. Os m\u00e9todos TRACK e TRACE podem ser usados \u200b\u200bpor um invasor, para obter acesso ao token de autoriza\u00e7\u00e3o/cookie de sess\u00e3o de um usu\u00e1rio do aplicativo, mesmo se o cookie de sess\u00e3o estiver protegido com o sinalizador ''HttpOnly''. Para que o ataque seja bem-sucedido, o usu\u00e1rio do aplicativo geralmente deve estar usando um navegador da Web mais antigo ou um navegador que tenha uma vulnerabilidade de desvio da Same Origin Policy (SOP). O m\u00e9todo ''CONNECT'' pode ser usado por um cliente web para criar um t\u00fanel HTTP para sites ou servi\u00e7os de terceiros.
ascanbeta.insecurehttpmethod.detailed.name = M\u00e9todo HTTP Inseguro - {0}
ascanbeta.insecurehttpmethod.extrainfo = O m\u00e9todo OPTIONS divulgou os seguintes m\u00e9todos HTTP habilitados para este recurso\: [{0}]
ascanbeta.insecurehttpmethod.insecure = response code {0} for insecure HTTP METHOD
ascanbeta.insecurehttpmethod.name = M\u00e9todo HTTP Inseguro
ascanbeta.insecurehttpmethod.options.exploitable.desc = This is a diagnostic method and should never be turned on in production mode.
ascanbeta.insecurehttpmethod.options.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods
ascanbeta.insecurehttpmethod.patch.exploitable.desc = This method is now most commonly used in REST services, PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource.
ascanbeta.insecurehttpmethod.patch.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see https\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.potentiallyinsecure = response code {0} for potentially insecure HTTP METHOD
ascanbeta.insecurehttpmethod.put.exploitable.desc = This method was originally intended for file management operations. It is now most commonly used in REST services, PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource..
ascanbeta.insecurehttpmethod.put.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see https\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.soln = Desative os m\u00e9todos n\u00e3o seguros, como TRACK, TRACE e CONNECT no servidor web, e certifique-se de que a implementa\u00e7\u00e3o do servi\u00e7o subjacente n\u00e3o oferece suporte a m\u00e9todos n\u00e3o seguros.
ascanbeta.insecurehttpmethod.trace.exploitable.desc = O m\u00e9todo HTTP inseguro [{0}] est\u00e1 habilitado para este recurso e pode ser explorado. Os m\u00e9todos TRACK e TRACE podem ser usados \u200b\u200bpor um invasor, para obter acesso ao token de autoriza\u00e7\u00e3o/cookie de sess\u00e3o de um usu\u00e1rio do aplicativo, mesmo se o cookie de sess\u00e3o estiver protegido com o sinalizador ''HttpOnly''. Para que o ataque seja bem-sucedido, o usu\u00e1rio do aplicativo geralmente deve estar usando um navegador da Web mais antigo ou um navegador que tenha uma vulnerabilidade de desvio da Same Origin Policy (SOP).
ascanbeta.insecurehttpmethod.trace.exploitable.extrainfo = Uma solicita\u00e7\u00e3o TRACE foi enviada para esta solicita\u00e7\u00e3o, com um valor de cookie personalizado [{0}]. Este valor de cookie foi divulgado na resposta HTTP, confirmando a vulnerabilidade.
ascanbeta.insecurehttpmethod.webdav.exploitable.desc = This HTTP method is a WEBDAV method\: {0}. If this server is not offering any WEBDAV services, these methods should not be available.
ascanbeta.insecurehttpmethod.webdav.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods

ascanbeta.integeroverflow.desc = An integer overflow condition exists when an integer used in a compiled program extends beyond the range limits and has not been properly checked from the input stream.
ascanbeta.integeroverflow.error1 = Potencial Estouro de N\u00famero Inteiro. C\u00f3digo de status alterado na entrada de uma longa sequ\u00eancia de inteiros aleat\u00f3rios.
ascanbeta.integeroverflow.error2 = Potencial Estouro de N\u00famero Inteiro. C\u00f3digo de status alterado com a entrada de uma longa sequ\u00eancia de zeros.
ascanbeta.integeroverflow.error3 = Potencial Estouro de N\u00famero Inteiro. C\u00f3digo de status alterado com a entrada de uma longa sequ\u00eancia de numerais um.
ascanbeta.integeroverflow.error4 = Potencial Estouro de N\u00famero Inteiro. C\u00f3digo de status alterado na entrada de uma longa sequ\u00eancia de numerais nove.
ascanbeta.integeroverflow.name = Erro de Estouro de N\u00famero Inteiro
ascanbeta.integeroverflow.refs = https\://en.wikipedia.org/wiki/Integer_overflow\nhttps\://cwe.mitre.org/data/definitions/190.html
ascanbeta.integeroverflow.soln = In order to prevent overflows and divide by 0 (zero) errors in the application, please rewrite the backend program, checking if the values of integers being processed are within the application's allowed range. This will require a recompilation of the backend executable.

ascanbeta.name = Active Scan Rules - beta

ascanbeta.noanticsrftokens.desc = N\u00e3o foram localizados tokens Anti-CSRF no formul\u00e1rio de submiss\u00e3o HTML.
ascanbeta.noanticsrftokens.name = Aus\u00eancia de tokens Anti-CSRF

ascanbeta.oobxss.name = Out of Band XSS
ascanbeta.oobxss.skipped = no Active Scan OAST service is selected.

ascanbeta.proxydisclosure.attack = TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.
ascanbeta.proxydisclosure.desc = {0} proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n - A list of targets for an attack against the application.\n - Potential vulnerabilities on the proxy servers that service the application.\n - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. 
ascanbeta.proxydisclosure.extrainfo.proxyserver = - {0}
ascanbeta.proxydisclosure.extrainfo.proxyserver.header = Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between ZAP and the application/web server\: 
ascanbeta.proxydisclosure.extrainfo.silentproxyserver = - {0}
ascanbeta.proxydisclosure.extrainfo.silentproxyserver.header = The following 'silent' proxy servers were identified. Due to their behaviour, it is not known at which point in the network topology these proxy servers reside\:
ascanbeta.proxydisclosure.extrainfo.traceenabled = The 'TRACE' method is enabled on one or more of the proxy servers, or on the origin server. This method leaks all information submitted from the web browser and proxies back to the user agent. This may facilitate 'Cross Site Tracing' attacks. 
ascanbeta.proxydisclosure.extrainfo.unknown = Desconhecido
ascanbeta.proxydisclosure.extrainfo.webserver = - {0}
ascanbeta.proxydisclosure.extrainfo.webserver.header = The following web/application server has been identified\: 
ascanbeta.proxydisclosure.name = Proxy Disclosure
ascanbeta.proxydisclosure.refs = https\://tools.ietf.org/html/rfc7231\#section-5.1.2
ascanbeta.proxydisclosure.soln = Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\nDisable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\nConfigure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\nConfigure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n

ascanbeta.relativepathconfusion.desc = The web server is configured to serve responses to ambiguous URLs in a manner that is likely to lead to confusion about the correct "relative path" for the URL. Resources (CSS, images, etc.) are also specified in the page response using relative, rather than absolute URLs. In an attack, if the web browser parses the "cross-content" response in a permissive manner, or can be tricked into permissively parsing the "cross-content" response, using techniques such as framing, then the web browser may be fooled into interpreting HTML as CSS (or other content types), leading to an XSS vulnerability.
ascanbeta.relativepathconfusion.extrainfo.contenttypeenabled = A Content Type of "{0}" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  
ascanbeta.relativepathconfusion.extrainfo.framingallowed = No X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.extrainfo.morethanonebasetag = More than one <base> tag was specified in the HTML <head> tag to define the location for relative URLs, which is not valid.
ascanbeta.relativepathconfusion.extrainfo.nobasetag = No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.
ascanbeta.relativepathconfusion.extrainfo.nocontenttype = No Content Type was specified, so Quirks Mode is not required to exploit the vulnerability in the web browser. 
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledexplicitly = Quirks Mode is explicitly enabled via <meta http-equiv\="{0}", allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitly = Quirks Mode is implicitly enabled via the use of an old DOCTYPE with PUBLIC id "{0}", allowing the specified Content Type to be bypassed in some web browsers.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitlynodoctype = Quirks Mode is implicitly enabled via the absence of a DOCTYPE, allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.name = Relative Path Confusion
ascanbeta.relativepathconfusion.refs = https\://arxiv.org/abs/1811.00917\nhttps\://hsivonen.fi/doctype/\nhttps\://www.w3schools.com/tags/tag_base.asp
ascanbeta.relativepathconfusion.soln = Web servers and frameworks should be updated to be configured to not serve responses to ambiguous URLs in such a way that the relative path of such URLs could be mis-interpreted by components on either the client side, or server side.\nWithin the application, the correct use of the "<base>" HTML tag in the HTTP response will unambiguously specify the base URL for all relative URLs in the document.\nUse the "Content-Type" HTTP response header to make it harder for the attacker to force the web browser to mis-interpret the content type of the response.\nUse the "X-Content-Type-Options\: nosniff" HTTP response header to prevent the web browser from "sniffing" the content type of the response.\nUse a modern DOCTYPE such as "<\!doctype html>" to prevent the page from being rendered in the web browser using "Quirks Mode", since this results in the content type being ignored by the web browser.\nSpecify the "X-Frame-Options" HTTP response header to prevent Quirks Mode from being enabled in the web browser using framing attacks. 

ascanbeta.sessionfixation.alert.attack = {0} campo\: [{1}]
ascanbeta.sessionfixation.alert.cookie.extrainfo = Cookie definido em resposta quando o campo do cookie [{0}] \u00e9 definido como NULL\: [{1}]\nCookie definido em resposta com valor de cookie emprestado (v\u00e1lido) na solicita\u00e7\u00e3o [{1}]\: [{2}]
ascanbeta.sessionfixation.alert.cookie.extrainfo.loginpage = The url on which the issue was discovered was flagged as a logon page.\n\nThis issue should be manually validated by checking that the session token set on the logon page is still valid once logged in, and that the token can be used to directly access a page/resource which should require the user to be logged in.
ascanbeta.sessionfixation.alert.url.extrainfo = Um prov\u00e1vel valor de sess\u00e3o apareceu em URLs na sa\u00edda HTML quando o par\u00e2metro de URL/par\u00e2metro de pseudo URL [{0}] \u00e9 definido como NULL\: [{1}]\nQuando esta sess\u00e3o ''emprestada'' [{1}] \u00e9 usada em uma solicita\u00e7\u00e3o subsequente para este URL, uma nova sess\u00e3o n\u00e3o \u00e9 criada.
ascanbeta.sessionfixation.alert.url.extrainfo.loginpage = A url no qual o problema foi descoberto foi sinalizada como uma p\u00e1gina de logon.
ascanbeta.sessionfixation.desc = Fixa\u00e7\u00e3o da Sess\u00e3o pode ser poss\u00edvel. Se esse problema ocorrer com uma URL de login (onde o usu\u00e1rio se autentica no aplicativo), ent\u00e3o a URL pode ser fornecida por um invasor, junto com um id de sess\u00e3o fixo, para uma v\u00edtima, a fim de posteriormente assumir a identidade da v\u00edtima usando o id de sess\u00e3o fornecido. Se o problema ocorrer com uma p\u00e1gina sem login, o URL e o ID de sess\u00e3o fixo s\u00f3 podem ser usados \u200b\u200bpor um invasor para rastrear as a\u00e7\u00f5es de um usu\u00e1rio n\u00e3o autenticado. Se a vulnerabilidade ocorre em um campo de cookie ou um campo de formul\u00e1rio (par\u00e2metro POST) em vez de em um par\u00e2metro de URL (GET), ent\u00e3o alguma outra vulnerabilidade tamb\u00e9m pode ser necess\u00e1ria para definir o campo de cookie no navegador da v\u00edtima, para permitir a vulnerabilidade a ser explorada.
ascanbeta.sessionfixation.name = Fixa\u00e7\u00e3o de Se\u00e7\u00e3o
ascanbeta.sessionfixation.refs = https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication\nhttps\://owasp.org/www-community/attacks/Session_fixation\nhttps\://acrossecurity.com/papers/session_fixation.pdf\nhttps\://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html
ascanbeta.sessionfixation.soln = 1) Prevent the attacker from gaining a session id by enforcing strict session ids, and by only allocating session ids upon successful authentication to the application.\n2) The server should always create a new session id upon authentication, regardless of whether a session is already in place.\n3) Bind the session id to some identifiable client attribute combination, such as IP address, SSL client certificate.\n4) Sessions, when destroyed, must be destroyed on the server, as well as on the client.\n5) Implement a logout mechanism which will destroy all previous sessions for the client.\n6) Implement absolute session timeouts.\n7)Switch from a URL based to a cookie or form based session id implementation, as the latter typically require additional vulnerabilities, in order to be exploitable by an attacker\n

ascanbeta.sessionidaccessiblebyjavascript.alert.attack = {0} campo\: [{1}]
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo = identificador de sess\u00e3o {0} campo [{1}], valor [{2}] pode ser acessado usando JavaScript no navegador da web
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo.loginpage = A url no qual o problema foi descoberto foi sinalizada como uma p\u00e1gina de logon.
ascanbeta.sessionidaccessiblebyjavascript.desc = Um cookie de Id de sess\u00e3o enviado pelo servidor (quando a URL \u00e9 modificada pela configura\u00e7\u00e3o do campo de par\u00e2metro nomeado como NULL) pode ser acessado por JavaScript no cliente. Em conjunto com outra vulnerabilidade, isso pode permitir que a sess\u00e3o seja sequestrada.  
#Session Id Cookie accessible by JavaScript
ascanbeta.sessionidaccessiblebyjavascript.name = Cookie de ID de Sess\u00e3o acess\u00edvel a JavaScript
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidaccessiblebyjavascript.refs=
ascanbeta.sessionidaccessiblebyjavascript.soln = 1) Use a flag 'httponly' ao definir um cookie contendo um id de sess\u00e3o, para evitar que seja acessado por JavaScript no navegador da web.  

ascanbeta.sessionidexpiry.alert.attack = {0} campo\: [{1}]
ascanbeta.sessionidexpiry.alert.extrainfo = identificador de sess\u00e3o {0} campo [{1}], valor [{2}] pode ser acessado at\u00e9 [{3}] (desde que o cookie foi recebido em {4}), a menos que a sess\u00e3o seja destru\u00edda.
ascanbeta.sessionidexpiry.alert.extrainfo.loginpage = A url no qual o problema foi descoberto foi sinalizada como uma p\u00e1gina de logon.
ascanbeta.sessionidexpiry.browserclose = fechar navegador
ascanbeta.sessionidexpiry.desc = Um cookie de Id de sess\u00e3o enviado pelo servidor (quando a URL \u00e9 modificada definindo o campo do par\u00e2metro nomeado como NULL) \u00e9 definido para ser v\u00e1lido por um per\u00edodo de tempo excessivo. Isso pode ser explorado por um invasor se o usu\u00e1rio esquecer de fazer o logout, se a funcionalidade de logout n\u00e3o destruir corretamente a sess\u00e3o ou se a id da sess\u00e3o for comprometida por algum outro meio.     
#Session Id Cookie Expiry
ascanbeta.sessionidexpiry.name = Tempo de Expira\u00e7\u00e3o do ID da Sess\u00e3o/Idade M\u00e1xima Excessiva
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexpiry.refs=
ascanbeta.sessionidexpiry.soln = 1) Use as diretivas de cookie 'Expire' ou 'Max-Age' ao definir um cookie que cont\u00e9m um id de sess\u00e3o, para evitar que fique dispon\u00edvel por longos per\u00edodos de tempo.\n2) Certifique-se de que a funcionalidade de logout exista e que destrua a sess\u00e3o corretamente.\n3) Use outras medidas preventivas para garantir que, se uma id de sess\u00e3o for comprometida, ela n\u00e3o seja explorada.
ascanbeta.sessionidexpiry.timeexpired = Expirado
ascanbeta.sessionidexpiry.timelessthanonehour = Menos de uma hora
ascanbeta.sessionidexpiry.timemorethanoneday = Mais de um dia
ascanbeta.sessionidexpiry.timemorethanonehour = Mais de uma hora
ascanbeta.sessionidexpiry.timemorethanoneweek = Mais de uma semana

ascanbeta.sessionidexposedinurl.alert.attack = {0} campo\: [{1}]
ascanbeta.sessionidexposedinurl.alert.extrainfo = {0} campo [{1}] cont\u00e9m um identificador de sess\u00e3o exposto [{2}]
ascanbeta.sessionidexposedinurl.alert.extrainfo.loginpage = A url no qual o problema foi descoberto foi sinalizada como uma p\u00e1gina de logon.
ascanbeta.sessionidexposedinurl.desc = A session id is exposed in the URL. By sharing such a website URL (containing the session id), a naive user may be inadvertently granting access to their data, compromising its confidentiality, integrity, and availability.  URLs containing the session identifier also appear in web browser bookmarks, web server log files, and proxy server log files. 
#Exposed Session Id messages
ascanbeta.sessionidexposedinurl.name = ID de Sess\u00e3o Exposto
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexposedinurl.refs = https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidexposedinurl.soln = Use uma implementa\u00e7\u00e3o de gerenciamento de sess\u00e3o mais segura, como aquelas que usam cookies de sess\u00e3o, que n\u00e3o s\u00e3o t\u00e3o facilmente compartilhados inadvertidamente e que normalmente n\u00e3o aparecem em arquivos de log do servidor ou marcadores de navegador da web.

ascanbeta.sessionidsentinsecurely.alert.attack = {0} campo\: [{1}]
ascanbeta.sessionidsentinsecurely.alert.extrainfo = identificador de sess\u00e3o {0} campo [{1}], valor [{2}] pode ser enviado por meio de um mecanismo n\u00e3o seguro.  
ascanbeta.sessionidsentinsecurely.alert.extrainfo.loginpage = A url no qual o problema foi descoberto foi sinalizada como uma p\u00e1gina de logon.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.secureflagnotset = A flag 'secure' n\u00e3o foi definida no cookie de sess\u00e3o fornecido pelo servidor.
ascanbeta.sessionidsentinsecurely.desc = Um id de sess\u00e3o pode ser enviado por meio de um mecanismo n\u00e3o seguro. No caso de um cookie enviado na solicita\u00e7\u00e3o, isso ocorre quando HTTP \u00e9 usado em vez de HTTPS. No caso de um cookie enviado pelo servidor em resposta (quando a URL \u00e9 modificada definindo o campo do par\u00e2metro nomeado como NULL), a flag 'secure' n\u00e3o \u00e9 definida, permitindo que o cookie seja enviado posteriormente via HTTP em vez de HTTPS. Isso pode permitir que um interceptador passivo no caminho da rede obtenha acesso total \u00e0 sess\u00e3o da v\u00edtima.  
#Session Id Cookie not sent securely
ascanbeta.sessionidsentinsecurely.name = ID de Sess\u00e3o Transmitido de Maneira Insegura
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidsentinsecurely.refs = https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidsentinsecurely.soln = 1) Use a vers\u00e3o mais recente dispon\u00edvel do SSL/TLS (para HTTPS) para todas as p\u00e1ginas onde um ID de sess\u00e3o \u00e9 comunicado entre o navegador e o servidor web.\n2) N\u00e3o permita que a comunica\u00e7\u00e3o seja for\u00e7ada para o protocolo HTTP n\u00e3o criptografado.\n3) Use a flag 'secure' ao definir um cookie contendo um id de sess\u00e3o, para evitar sua transmiss\u00e3o subsequente por um mecanismo n\u00e3o seguro.\n4) Encaminhe solicita\u00e7\u00f5es de p\u00e1gina HTTP n\u00e3o segura para a p\u00e1gina segura equivalente a HTTPS.  

ascanbeta.shellshock.desc = O servidor est\u00e1 executando uma vers\u00e3o do shell Bash que permite que invasores remotos executem c\u00f3digo arbitr\u00e1rio 
ascanbeta.shellshock.extrainfo = Da CVE-2014-6271\: GNU Bash atrav\u00e9s do 4.3 processa strings ap\u00f3s defini\u00e7\u00f5es de fun\u00e7\u00e3o nos valores de vari\u00e1veis \u200b\u200bde ambiente, o que permite que atacantes remotos executem c\u00f3digo arbitr\u00e1rio por meio de um ambiente criado, conforme demonstrado por vetores envolvendo o recurso ForceCommand em OpenSSH sshd, os m\u00f3dulos mod_cgi e mod_cgid no Apache HTTP Server, scripts executados por clientes DHCP n\u00e3o especificados e outras situa\u00e7\u00f5es em que a configura\u00e7\u00e3o do ambiente ocorre atrav\u00e9s de um limite de privil\u00e9gio da execu\u00e7\u00e3o Bash, tamb\u00e9m conhecido como "ShellShock". NOTA\: a corre\u00e7\u00e3o original para este problema estava incorreta; A CVE-2014-7169 foi designada para cobrir a vulnerabilidade que ainda est\u00e1 presente ap\u00f3s a corre\u00e7\u00e3o err\u00f4nea.
ascanbeta.shellshock.name = Execu\u00e7\u00e3o Remota de C\u00f3digo - Shell Shock
ascanbeta.shellshock.ref = https\://nvd.nist.gov/vuln/detail/CVE-2014-6271\nhttps\://www.troyhunt.com/everything-you-need-to-know-about2/
ascanbeta.shellshock.soln = Atualize o Bash no servidor para a vers\u00e3o mais recente
ascanbeta.shellshock.timingbased.evidence = Usando o ataque, um atraso de [{0}] milissegundos foi induzido e detectado

ascanbeta.sourcecodedisclosure.desc = The source code for the current page was disclosed by the web server.
ascanbeta.sourcecodedisclosure.gitbased.evidence = The source code for [{0}] was extracted using [{1}]
ascanbeta.sourcecodedisclosure.gitbased.name = Source Code Disclosure - Git 
ascanbeta.sourcecodedisclosure.gitbased.soln = Ensure that Git metadata files are not deployed to the web server or application server
ascanbeta.sourcecodedisclosure.lfibased.extrainfo = The output for the source code filename [{0}] differs sufficiently from that of the random parameter [{1}], at [{2}%], compared to a threshold of [{3}%]
ascanbeta.sourcecodedisclosure.lfibased.name = Source Code Disclosure - File Inclusion
ascanbeta.sourcecodedisclosure.svnbased.extrainfo = O c\u00f3digo-fonte de [{0}] foi encontrado em [{1}]
ascanbeta.sourcecodedisclosure.svnbased.name = Divulga\u00e7\u00e3o de C\u00f3digo-Fonte - SVN
ascanbeta.sourcecodedisclosure.svnbased.soln = Certifique-se de que os arquivos de metadados SVN n\u00e3o sejam implantados no servidor web ou servidor de aplicativos

ascanbeta.sourcecodedisclosurecve-2012-1823.desc = Algumas vers\u00f5es do PHP, quando configuradas para serem executadas usando CGI, n\u00e3o manipulam corretamente as strings de consulta que n\u00e3o possuem um caractere "\=" sem escape, permitindo a divulga\u00e7\u00e3o do c\u00f3digo-fonte PHP e a execu\u00e7\u00e3o arbitr\u00e1ria do c\u00f3digo. Neste caso, o conte\u00fado do arquivo PHP foi servido diretamente para o navegador da web. Essa sa\u00edda normalmente conter\u00e1 PHP, embora tamb\u00e9m possa conter HTML direto.
ascanbeta.sourcecodedisclosurecve-2012-1823.name = Divulga\u00e7\u00e3o de C\u00f3digo-Fonte - CVE-2012-1823
ascanbeta.sourcecodedisclosurecve-2012-1823.soln = Atualize para a \u00faltima vers\u00e3o est\u00e1vel do PHP ou use o servidor web Apache e o m\u00f3dulo mod_rewrite para filtrar solicita\u00e7\u00f5es maliciosas usando as diretivas "RewriteCond" e "RewriteRule".

ascanbeta.ssrf.desc = The web server receives a remote address and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.
ascanbeta.ssrf.name = Server Side Request Forgery
ascanbeta.ssrf.otherinfo.canaryinbody = The canary token from the out-of-band service was found in the response body.
ascanbeta.ssrf.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
ascanbeta.ssrf.skipped = no Active Scan OAST service is selected.
ascanbeta.ssrf.soln = Do not accept remote addresses as request parameters, and if you must, ensure that they are validated against an allow-list of expected values.

ascanbeta.text4shell.desc = Apache Commons Text prior to 1.10.0 allows RCE when applied to untrusted input due to insecure interpolation defaults.Apache Commons Text performs variable interpolation, allowing properties to be dynamically evaluated and expanded.The application has been shown to initial contact with remote servers via variable interpolation and may well be vulnerable to Remote Code Execution (RCE).
ascanbeta.text4shell.name = Text4shell (CVE-2022-42889)
ascanbeta.text4shell.refs = https\://nvd.nist.gov/vuln/detail/CVE-2022-42889\nhttps\://securitylab.github.com/advisories/GHSL-2022-018_Apache_Commons_Text/
ascanbeta.text4shell.skipped = no Active Scan OAST service is selected.
ascanbeta.text4shell.soln = Upgrade Apache Commons Text prior to version 1.10.0 or newer.

ascanbeta.usernameenumeration.alert.attack = Manipule o campo [{0}]\: [{1}] e monitore a sa\u00edda 
ascanbeta.usernameenumeration.alert.extrainfo = [{0}] par\u00e2metro [{1}] vaza informa\u00e7\u00f5es sobre a exist\u00eancia de um usu\u00e1rio. As diferen\u00e7as de [{5}] na sa\u00edda, para o valor de nome de usu\u00e1rio original v\u00e1lido [{2}] e valor de nome de usu\u00e1rio inv\u00e1lido [{3}] s\u00e3o\:\n[{4}]
ascanbeta.usernameenumeration.desc = Pode ser poss\u00edvel enumerar nomes de usu\u00e1rios, com base em respostas HTTP diferentes, quando nomes de usu\u00e1rios v\u00e1lidos e inv\u00e1lidos s\u00e3o fornecidos. Isso aumentaria muito a probabilidade de sucesso de ataques de for\u00e7a bruta de senha contra o sistema. Observe que os falsos positivos \u00e0s vezes podem ser minimizados aumentando a op\u00e7\u00e3o 'For\u00e7a de Ataque' no ZAP. Verifique manualmente o campo 'Outras informa\u00e7\u00f5es' para confirmar se isso \u00e9 realmente um problema. 
ascanbeta.usernameenumeration.name = Enumera\u00e7\u00e3o de Nome de Usu\u00e1rio Poss\u00edvel
ascanbeta.usernameenumeration.refs = https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account.html\nhttps\://dl.ifip.org/db/conf/sec/sec2011/FreilingS11.pdf\nhttps\://cwe.mitre.org/data/definitions/204.html
ascanbeta.usernameenumeration.soln = N\u00e3o divulgue detalhes sobre se um nome de usu\u00e1rio \u00e9 v\u00e1lido ou inv\u00e1lido. Em particular, para tentativas de login malsucedidas, n\u00e3o diferencie entre um usu\u00e1rio inv\u00e1lido e uma senha inv\u00e1lida na mensagem de erro, t\u00edtulo da p\u00e1gina, conte\u00fado da p\u00e1gina, cabe\u00e7alhos HTTP ou l\u00f3gica de redirecionamento.


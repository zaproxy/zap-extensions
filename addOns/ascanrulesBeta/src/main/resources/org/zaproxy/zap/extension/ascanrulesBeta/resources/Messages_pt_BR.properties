ascanbeta.desc = Regras de Varredura Ativa - beta

ascanbeta.backupfiledisclosure.name = Divulga\u00e7\u00e3o de Arquivo de Backup
ascanbeta.backupfiledisclosure.desc = Um arquivo de backup foi divulgado pelo servidor web
ascanbeta.backupfiledisclosure.soln = N\u00e3o edite arquivos localmente no servidor web e certifique-se de que os arquivos desnecess\u00e1rios (incluindo arquivos ocultos) sejam removidos do servidor.
ascanbeta.backupfiledisclosure.evidence = Um backup de [{0}] est\u00e1 dispon\u00edvel em [{1}]
ascanbeta.backupfiledisclosure.refs = https\://cwe.mitre.org/data/definitions/530.html\n\
https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.html

ascanbeta.cloudmetadata.name = Metadados de nuvem potencialmente expostos
ascanbeta.cloudmetadata.desc = The Cloud Metadata Attack attempts to abuse a misconfigured NGINX server in order to access the instance metadata maintained by cloud service providers such as AWS, GCP and Azure.\n\
\n\
All of these providers provide metadata via an internal unroutable IP address '169.254.169.254' - this can be exposed by incorrectly configured NGINX servers and accessed by using this IP address in the Host header field.
ascanbeta.cloudmetadata.otherinfo = Based on the successful response status code cloud metadata may have been returned in the response. Check the response data to see if any cloud metadata has been returned.\n\
\n\
The meta data returned can include information that would allow an attacker to completely compromise the system.
ascanbeta.cloudmetadata.refs = https\://www.nginx.com/blog/trust-no-one-perils-of-trusting-user-input/
ascanbeta.cloudmetadata.soln = Do not trust any user data in NGINX configs. In this case it is probably the use of the $host variable which is set from the 'Host' header and can be controlled by an attacker.

ascanbeta.cookieslack.name = Cookie Slack Detector
ascanbeta.cookieslack.desc = Repeated GET requests\: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.
ascanbeta.cookieslack.otherinfo.intro = Cookies that don't have expected effects can reveal flaws in application logic. In the worst case, this can reveal where authentication via cookie token(s) is not actually enforced.\n\

ascanbeta.cookieslack.session.warning = NOTE\: Because of its name this cookie may be important, but dropping it appears to have no effect\: [{0}] \n\

ascanbeta.cookieslack.affect.response.yes = These cookies affected the response\: 
ascanbeta.cookieslack.affect.response.no = These cookies did NOT affect the response\: 
ascanbeta.cookieslack.session.destroyed = Dropping this cookie appears to have invalidated the session\: [{0}] A follow-on request with all original cookies still had a different response than the original request. \n\

ascanbeta.cookieslack.separator = ,
ascanbeta.cookieslack.endline = \n\


ascanbeta.crossdomain.name = Configura\u00e7\u00e3o Incorreta Entre Dom\u00ednios
#the refs cannot be customised for each sub-category (Adobe, Silverlight, etc.)
ascanbeta.crossdomain.refs = http\://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html\n\
http\://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf\n\
http\://msdn.microsoft.com/en-US/library/cc197955%28v\=vs.95%29.aspx\n\
http\://msdn.microsoft.com/en-us/library/cc838250%28v\=vs.95%29.aspx
ascanbeta.crossdomain.adobe.read.name = Configura\u00e7\u00e3o Incorreta Entre Dom\u00ednios - Adobe - Leitura
ascanbeta.crossdomain.adobe.send.name = Configura\u00e7\u00e3o Incorreta Entre Dom\u00ednios - Adobe - Envio
ascanbeta.crossdomain.adobe.desc = A falsifica\u00e7\u00e3o de solicita\u00e7\u00e3o entre sites baseada em Flash/Silverlight pode ser poss\u00edvel, devido a uma configura\u00e7\u00e3o incorreta no servidor web. 
ascanbeta.crossdomain.adobe.read.soln = Configure o arquivo crossdomain.xml para restringir a lista de dom\u00ednios que t\u00eam permiss\u00e3o para fazer solicita\u00e7\u00f5es de leitura entre dom\u00ednios para este servidor web, usando <allow-access-from domain\="example.com">. Voc\u00ea s\u00f3 deve conceder acesso a "*" (todos os dom\u00ednios) se tiver certeza de que este servi\u00e7o n\u00e3o hospeda nenhum dado de acesso controlado, personalizado ou privado.
ascanbeta.crossdomain.adobe.read.extrainfo = O servidor web permite solicita\u00e7\u00f5es maliciosas de leitura de dados entre dom\u00ednios originadas de componentes Flash/Silverlight servidos de qualquer dom\u00ednio de terceiros para este dom\u00ednio. Se o usu\u00e1rio v\u00edtima estiver conectado a este servi\u00e7o, as solicita\u00e7\u00f5es de leitura maliciosas s\u00e3o processadas usando os privil\u00e9gios da v\u00edtima e podem resultar no comprometimento dos dados deste servi\u00e7o por um site de terceiros n\u00e3o autorizado, atrav\u00e9s do navegador da v\u00edtima. Isso provavelmente ser\u00e1 um problema se uma implementa\u00e7\u00e3o de sess\u00e3o baseada em Cookie estiver em uso. 
ascanbeta.crossdomain.adobe.send.soln = Configure o arquivo crossdomain.xml para restringir a lista de dom\u00ednios que t\u00eam permiss\u00e3o para enviar solicita\u00e7\u00f5es entre dom\u00ednios (mas n\u00e3o necessariamente ler) para este servidor web, usando <allow-http-request-headers-from domain\="example.com" headers\="Authorization,X-Blahh">. Voc\u00ea s\u00f3 deve conceder acesso a "*" (todos os dom\u00ednios) se tiver certeza de que este servi\u00e7o n\u00e3o \u00e9 vulner\u00e1vel a ataques Cross Site Request Forgery (CSRF).
ascanbeta.crossdomain.adobe.send.extrainfo = O servidor web permite o envio de dados maliciosos entre dom\u00ednios (mas n\u00e3o necessariamente leitura) originados de componentes Flash/Silverlight servidos a partir de qualquer dom\u00ednio de terceiros para este dom\u00ednio. Se o usu\u00e1rio v\u00edtima estiver conectado a este servi\u00e7o, as solicita\u00e7\u00f5es de envio mal-intencionadas s\u00e3o processadas usando os privil\u00e9gios da v\u00edtima e podem resultar em ataques do tipo Cross Site Request Forgery (CSRF), por meio do navegador da v\u00edtima. Isso provavelmente ser\u00e1 um problema se uma implementa\u00e7\u00e3o de sess\u00e3o baseada em Cookie estiver em uso.
ascanbeta.crossdomain.silverlight.name = Configura\u00e7\u00e3o Incorreta Entre Dom\u00ednios - Silverlight
ascanbeta.crossdomain.silverlight.desc = A falsifica\u00e7\u00e3o de solicita\u00e7\u00e3o entre sites com base em Silverlight pode ser poss\u00edvel, devido a uma configura\u00e7\u00e3o incorreta no servidor web.
ascanbeta.crossdomain.silverlight.soln = Configure o arquivo clientaccesspolicy.xml para restringir a lista de dom\u00ednios que t\u00eam permiss\u00e3o para fazer solicita\u00e7\u00f5es entre dom\u00ednios para este servidor web, usando <domain uri\="https\://example.com" />. Voc\u00ea s\u00f3 deve conceder acesso a "*" (todos os dom\u00ednios) se tiver certeza de que este servi\u00e7o n\u00e3o hospeda nenhum dado de acesso controlado, personalizado ou privado.
ascanbeta.crossdomain.silverlight.extrainfo = O servidor web permite solicita\u00e7\u00f5es maliciosas entre dom\u00ednios originadas de componentes do Silverlight servidos de qualquer dom\u00ednio de terceiros para este dom\u00ednio. Se o usu\u00e1rio v\u00edtima estiver conectado a este servi\u00e7o, as solicita\u00e7\u00f5es maliciosas s\u00e3o processadas usando os privil\u00e9gios da v\u00edtima e podem resultar no comprometimento dos dados deste servi\u00e7o por um site de terceiros n\u00e3o autorizado, por meio dos navegadores da v\u00edtima. Tamb\u00e9m pode resultar em ataques do tipo Cross Site Request Forgery (CSRF). Isso provavelmente ser\u00e1 um problema se uma implementa\u00e7\u00e3o de sess\u00e3o baseada em Cookie estiver em uso.

ascanbeta.csrftoken.name=Anti-CSRF Tokens Check
ascanbeta.csrftoken.extrainfo.annotation = Este \u00e9 um alerta informativo, pois o formul\u00e1rio possui uma anota\u00e7\u00e3o de seguran\u00e7a indicando que n\u00e3o \u00e9 necess\u00e1rio um token anti-CSRF. Isso deve ser testado manualmente para garantir que a anota\u00e7\u00e3o est\u00e1 correta.

ascanbeta.envfiles.name = .env Information Leak
ascanbeta.envfiles.desc = One or more .env files seems to have been located on the server. These files often expose infrastructure or administrative account credentials, API or APP keys, or other sensitive configuration information. 
ascanbeta.envfiles.otherinfo = Based on response status code the .env file may be protected by an authentication or authorization mechanism.
ascanbeta.envfiles.refs = https\://www.google.com/search?q\=db_password+filetype%3Aenv\n\
https\://mobile.twitter.com/svblxyz/status/1045013939904532482
ascanbeta.envfiles.soln = Ensure the .env file is not accessible.

ascanbeta.getforpost.name=GET for POST
ascanbeta.getforpost.desc=A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to Cross-Site Scripting (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible.
ascanbeta.getforpost.soln=Ensure that only POST is accepted where POST is expected.

ascanbeta.heartbleed.name=Vulnerabilidade OpenSSL Heartbleed
ascanbeta.heartbleed.desc=A implementa\u00e7\u00e3o de TLS no OpenSSL 1.0.1 antes do 1.0.1g n\u00e3o lida adequadamente com pacotes Heartbeat Extension, o que permite que invasores remotos obtenham informa\u00e7\u00f5es confidenciais da mem\u00f3ria do processo por meio de pacotes criados que acionam uma sobre-leitura de buffer, potencialmente revelando informa\u00e7\u00f5es confidenciais.
ascanbeta.heartbleed.soln=Atualize para OpenSSL 1.0.1g ou posterior. Emita novamente os certificados HTTPS. Altere as chaves privadas assim\u00e9tricas e as chaves secretas compartilhadas, uma vez que podem ter sido comprometidas, sem evid\u00eancias de comprometimento nos arquivos de log do servidor.
ascanbeta.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
ascanbeta.heartbleed.extrainfo=Esse problema foi confirmado exfiltrando dados do servidor, usando {0}. \u00c9 improv\u00e1vel que seja um falso positivo.

ascanbeta.hidden.files.name = Hidden File Finder
ascanbeta.hidden.files.alert.name = Hidden File Found
ascanbeta.hidden.files.desc = A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.
ascanbeta.hidden.files.otherinfo = {0}
ascanbeta.hidden.files.refs = https\://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html
ascanbeta.hidden.files.soln = Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.

ascanbeta.HTTPParamPoll.name = Polui\u00e7\u00e3o de Par\u00e2metro HTTP
ascanbeta.HTTPParamPoll.desc = Ataques HTTP Parameter Pollution (HPP) consistem em injetar delimitadores de string de consulta codificados em outros par\u00e2metros existentes. Se um aplica\u00e7\u00e3o web n\u00e3o limpar adequadamente a entrada do usu\u00e1rio, um usu\u00e1rio mal-intencionado pode comprometer a l\u00f3gica do aplicativo para executar ataques do lado do cliente ou do lado do servidor. Uma consequ\u00eancia dos ataques HPP \u00e9 que o invasor pode substituir os par\u00e2metros HTTP embutidos em c\u00f3digo existentes para modificar o comportamento de um aplicativo, ignorar os pontos de verifica\u00e7\u00e3o de valida\u00e7\u00e3o de entrada e acessar e possivelmente explorar vari\u00e1veis \u200b\u200bque podem estar fora de alcance direto.
ascanbeta.HTTPParamPoll.sol =  Limpe adequadamente a entrada de dados do usu\u00e1rio para delimitadores de par\u00e2metro
ascanbeta.HTTPParamPoll.alert.attack = Polui\u00e7\u00e3o de Par\u00e2metro HTTP
ascanbeta.HTTPParamPoll.extrainfo = http\://www.google.com/search?q\=http+parameter+pollution

ascanbeta.httponlysite.name = HTTP Only Site
ascanbeta.httponlysite.desc = The site is only served under HTTP and not HTTPS.
ascanbeta.httponlysite.soln = Configure your web or application server to use SSL (https).
ascanbeta.httponlysite.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\n\
https\://letsencrypt.org/
ascanbeta.httponlysite.otherinfo = {0}\n\
ZAP attempted to connect via\: {1}
ascanbeta.httponlysite.otherinfo.connectionfail = Failed to connect.
ascanbeta.httponlysite.otherinfo.differenthosts = Different Hosts.
ascanbeta.httponlysite.otherinfo.redirectionlimit = Redirection limit reached.
ascanbeta.httponlysite.otherinfo.noredirection = There was no automatic redirection.
ascanbeta.httponlysite.otherinfo.nossl = Site has no SSL/TLS support.
ascanbeta.httponlysite.otherinfo.redirecttohttp = Redirected to HTTP.
ascanbeta.httponlysite.otherinfo.urinotencoded = Redirection URI couldn't be encoded.

ascanbeta.httpoxy.name = Httpoxy - Proxy Header Misuse
ascanbeta.httpoxy.desc = The server initiated a proxied request via the proxy specified in the HTTP Proxy header of the request.\n\
Httpoxy typically affects code running in CGI or CGI like environments.\n\
\n\
This may allow attackers to\:\n\
\n\
* Proxy the outgoing HTTP requests made by the web application\n\
\n\
* Direct the server to open outgoing connections to an address and port of their choosing or\n\
\n\
* Tie up server resources by forcing the vulnerable software to use a malicious proxy
ascanbeta.httpoxy.otherinfo = An outgoing message to {0} was proxied via the host and port that ZAP injected into the HTTP Proxy header.
ascanbeta.httpoxy.soln = The best immediate mitigation is to block Proxy request headers as early as possible, and before they hit your application.
ascanbeta.httpoxy.refs = https\://httpoxy.org/

ascanbeta.httpsashttp.name = HTTPS Content Available via HTTP
ascanbeta.httpsashttp.desc = Content which was initially accessed via HTTPS (i.e.\: using SSL/TLS encryption) is also accessible via HTTP (without encryption). 
ascanbeta.httpsashttp.soln = Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.
ascanbeta.httpsashttp.refs = https\://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\n\
https\://owasp.org/www-community/Security_Headers\n\
http\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\n\
http\://caniuse.com/stricttransportsecurity\n\
http\://tools.ietf.org/html/rfc6797
ascanbeta.httpsashttp.otherinfo=ZAP attempted to connect via\: {0}

ascanbeta.insecurehttpmethod.name = M\u00e9todo HTTP Inseguro
ascanbeta.insecurehttpmethod.detailed.name = M\u00e9todo HTTP Inseguro - {0}
ascanbeta.insecurehttpmethod.potentiallyinsecure = response code {0} for potentially insecure HTTP METHOD
ascanbeta.insecurehttpmethod.insecure = response code {0} for insecure HTTP METHOD
ascanbeta.insecurehttpmethod.desc = O m\u00e9todo HTTP inseguro [{0}] est\u00e1 ativado no servidor web para este recurso. Dependendo da configura\u00e7\u00e3o do servidor web e da implementa\u00e7\u00e3o subjacente respons\u00e1vel por servir o recurso, isso pode ou n\u00e3o ser explor\u00e1vel. Os m\u00e9todos TRACK e TRACE podem ser usados \u200b\u200bpor um invasor, para obter acesso ao token de autoriza\u00e7\u00e3o/cookie de sess\u00e3o de um usu\u00e1rio do aplicativo, mesmo se o cookie de sess\u00e3o estiver protegido com o sinalizador ''HttpOnly''. Para que o ataque seja bem-sucedido, o usu\u00e1rio do aplicativo geralmente deve estar usando um navegador da Web mais antigo ou um navegador que tenha uma vulnerabilidade de desvio da Same Origin Policy (SOP). O m\u00e9todo ''CONNECT'' pode ser usado por um cliente web para criar um t\u00fanel HTTP para sites ou servi\u00e7os de terceiros.
ascanbeta.insecurehttpmethod.trace.exploitable.desc = O m\u00e9todo HTTP inseguro [{0}] est\u00e1 habilitado para este recurso e pode ser explorado. Os m\u00e9todos TRACK e TRACE podem ser usados \u200b\u200bpor um invasor, para obter acesso ao token de autoriza\u00e7\u00e3o/cookie de sess\u00e3o de um usu\u00e1rio do aplicativo, mesmo se o cookie de sess\u00e3o estiver protegido com o sinalizador ''HttpOnly''. Para que o ataque seja bem-sucedido, o usu\u00e1rio do aplicativo geralmente deve estar usando um navegador da Web mais antigo ou um navegador que tenha uma vulnerabilidade de desvio da Same Origin Policy (SOP).
ascanbeta.insecurehttpmethod.trace.exploitable.extrainfo = Uma solicita\u00e7\u00e3o TRACE foi enviada para esta solicita\u00e7\u00e3o, com um valor de cookie personalizado [{0}]. Este valor de cookie foi divulgado na resposta HTTP, confirmando a vulnerabilidade.
ascanbeta.insecurehttpmethod.connect.exploitable.desc = O m\u00e9todo HTTP inseguro [{0}] est\u00e1 habilitado para este recurso e pode ser explorado. Foi poss\u00edvel estabelecer uma conex\u00e3o de socket em t\u00fanel para um servi\u00e7o de terceiros, usando este m\u00e9todo HTTP. Isso permitiria que o servi\u00e7o fosse usado como uma retransmiss\u00e3o an\u00f4nima de spam ou como um proxy da web, ignorando as restri\u00e7\u00f5es de rede. Ele tamb\u00e9m permite que seja usado para estabelecer uma VPN em t\u00fanel, estendendo efetivamente o per\u00edmetro da rede para incluir componentes n\u00e3o confi\u00e1veis. 
ascanbeta.insecurehttpmethod.extrainfo = O m\u00e9todo OPTIONS divulgou os seguintes m\u00e9todos HTTP habilitados para este recurso\: [{0}]
ascanbeta.insecurehttpmethod.connect.exploitable.extrainfo = O m\u00e9todo CONNECT foi usado para estabelecer uma conex\u00e3o de socket com [{0}], atrav\u00e9s do servidor web.
ascanbeta.insecurehttpmethod.soln = Desative os m\u00e9todos n\u00e3o seguros, como TRACK, TRACE e CONNECT no servidor web, e certifique-se de que a implementa\u00e7\u00e3o do servi\u00e7o subjacente n\u00e3o oferece suporte a m\u00e9todos n\u00e3o seguros.
ascanbeta.insecurehttpmethod.delete.exploitable.desc = This method is most commonly used in REST services, It is used to delete a resource.
ascanbeta.insecurehttpmethod.delete.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see http\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.options.exploitable.desc = This is a diagnostic method and should never be turned on in production mode.
ascanbeta.insecurehttpmethod.options.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods
ascanbeta.insecurehttpmethod.put.exploitable.desc = This method was originally intended for file managemant operations. It is now most commonly used in REST services, PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource..
ascanbeta.insecurehttpmethod.put.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see http\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.patch.exploitable.desc = This method is now most commonly used in REST services, PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource.
ascanbeta.insecurehttpmethod.patch.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see http\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.webdav.exploitable.desc = This HTTP method is a WEBDAV method\: {0}. If this server is not offering any WEBDAV services, these methods should not be available.
ascanbeta.insecurehttpmethod.webdav.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods


ascanbeta.integeroverflow.name = Erro de Estouro de N\u00famero Inteiro
ascanbeta.integeroverflow.desc = Existe uma condi\u00e7\u00e3o de estouro de n\u00famero inteiro quando um inteiro, que n\u00e3o foi verificado corretamente no fluxo de entrada, \u00e9 usado em um programa compilado. 
ascanbeta.integeroverflow.soln = Reescreva o programa em segundo plano usando a verifica\u00e7\u00e3o adequada do tamanho do inteiro que est\u00e1 sendo inserido para evitar estouros e divida por 0 erros. Isso exigir\u00e1 uma recompila\u00e7\u00e3o do execut\u00e1vel em segundo plano.
ascanbeta.integeroverflow.refs = http\://projects.webappsec.org/w/page/13246946/Integer%20Overflows
ascanbeta.integeroverflow.error1 = Potencial Estouro de N\u00famero Inteiro. C\u00f3digo de status alterado na entrada de uma longa sequ\u00eancia de inteiros aleat\u00f3rios.
ascanbeta.integeroverflow.error2 = Potencial Estouro de N\u00famero Inteiro. C\u00f3digo de status alterado com a entrada de uma longa sequ\u00eancia de zeros.
ascanbeta.integeroverflow.error3 = Potencial Estouro de N\u00famero Inteiro. C\u00f3digo de status alterado com a entrada de uma longa sequ\u00eancia de numerais um.
ascanbeta.integeroverflow.error4 = Potencial Estouro de N\u00famero Inteiro. C\u00f3digo de status alterado na entrada de uma longa sequ\u00eancia de numerais nove.

ascanbeta.noanticsrftokens.name=Aus\u00eancia de tokens Anti-CSRF
ascanbeta.noanticsrftokens.desc=N\u00e3o foram localizados tokens Anti-CSRF no formul\u00e1rio de submiss\u00e3o HTML.

ascanbeta.payloader.desc=Provides support for custom payloads in scan rules.
ascanbeta.payloader.name=Active Scan Rules Beta Custom Payloads

ascanbeta.proxydisclosure.name=Proxy Disclosure
ascanbeta.proxydisclosure.desc={0} proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n\
 - A list of targets for an attack against the application.\n\
 - Potential vulnerabilities on the proxy servers that service the application.\n\
 - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. 
ascanbeta.proxydisclosure.soln=Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\n\
Disable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\n\
Configure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\n\
Configure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n\

ascanbeta.proxydisclosure.refs=https\://tools.ietf.org/html/rfc7231\#section-5.1.2
ascanbeta.proxydisclosure.attack=TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.
ascanbeta.proxydisclosure.extrainfo.unknown=Desconhecido
ascanbeta.proxydisclosure.extrainfo.proxyserver.header=Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between OWASP ZAP and the application/web server\: 
ascanbeta.proxydisclosure.extrainfo.proxyserver= - {0}
ascanbeta.proxydisclosure.extrainfo.webserver.header=The following web/application server has been identified\: 
ascanbeta.proxydisclosure.extrainfo.webserver= - {0}
ascanbeta.proxydisclosure.extrainfo.silentproxyserver.header=The following 'silent' proxy servers were identified. Due to their behaviour, it is not known at which point in the network topology these proxy servers reside\:
ascanbeta.proxydisclosure.extrainfo.silentproxyserver= - {0}
ascanbeta.proxydisclosure.extrainfo.traceenabled=The 'TRACE' method is enabled on one or more of the proxy servers, or on the origin server. This method leaks all information submitted from the web browser and proxies back to the user agent. This may facilitate 'Cross Site Tracing' attacks. 

ascanbeta.relativepathconfusion.name=Relative Path Confusion
ascanbeta.relativepathconfusion.desc=The web server is configured to serve responses to ambiguous URLs in a manner that is likely to lead to confusion about the correct "relative path" for the URL. Resources (CSS, images, etc.) are also specified in the page response using relative, rather than absolute URLs. In an attack, if the web browser parses the "cross-content" response in a permissive manner, or can be tricked into permissively parsing the "cross-content" response, using techniques such as framing, then the web browser may be fooled into interpreting HTML as CSS (or other content types), leading to an XSS vulnerability.
ascanbeta.relativepathconfusion.soln=Web servers and frameworks should be updated to be configured to not serve responses to ambiguous URLs in such a way that the relative path of such URLs could be mis-interpreted by components on either the client side, or server side.\n\
Within the application, the correct use of the "<base>" HTML tag in the HTTP response will unambiguously specify the base URL for all relative URLs in the document.\n\
Use the "Content-Type" HTTP response header to make it harder for the attacker to force the web browser to mis-interpret the content type of the response.\n\
Use the "X-Content-Type-Options\: nosniff" HTTP response header to prevent the web browser from "sniffing" the content type of the response.\n\
Use a modern DOCTYPE such as "<\!doctype html>" to prevent the page from being rendered in the web browser using "Quirks Mode", since this results in the content type being ignored by the web browser.\n\
Specify the "X-Frame-Options" HTTP response header to prevent Quirks Mode from being enabled in the web browser using framing attacks. 
ascanbeta.relativepathconfusion.refs=http\://www.thespanner.co.uk/2014/03/21/rpo/\n\
https\://hsivonen.fi/doctype/\n\
http\://www.w3schools.com/tags/tag_base.asp
ascanbeta.relativepathconfusion.extrainfo.morethanonebasetag=More than one <base> tag was specified in the HTML <head> tag to define the location for relative URLs, which is not valid.
ascanbeta.relativepathconfusion.extrainfo.nobasetag=No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.
ascanbeta.relativepathconfusion.extrainfo.contenttypeenabled=A Content Type of "{0}" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledexplicitly=Quirks Mode is explicitly enabled via <meta http-equiv\="{0}", allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitly=Quirks Mode is implicitly enabled via the use of an old DOCTYPE with PUBLIC id "{0}", allowing the specified Content Type to be bypassed in some web browsers.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitlynodoctype=Quirks Mode is implicitly enabled via the absence of a DOCTYPE, allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.extrainfo.nocontenttype=No Content Type was specified, so Quirks Mode is not required to exploit the vulnerability in the web browser. 
ascanbeta.relativepathconfusion.extrainfo.framingallowed=No X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed.

ascanbeta.remotecodeexecution.cve-2012-1823.name = Execu\u00e7\u00e3o Remota de C\u00f3digo - CVE-2012-1823
ascanbeta.remotecodeexecution.cve-2012-1823.desc = Algumas vers\u00f5es do PHP, quando configuradas para serem executadas usando CGI, n\u00e3o lidam corretamente com strings de consulta que n\u00e3o possuem um caractere "\=" sem escape, permitindo a execu\u00e7\u00e3o arbitr\u00e1ria de c\u00f3digo. Nesse caso, um comando do sistema operacional foi executado no servidor web e os resultados foram retornados ao navegador da web. 
ascanbeta.remotecodeexecution.cve-2012-1823.soln = Atualize para a \u00faltima vers\u00e3o est\u00e1vel do PHP ou use o servidor web Apache e o m\u00f3dulo mod_rewrite para filtrar solicita\u00e7\u00f5es maliciosas usando as diretivas "RewriteCond" e "RewriteRule".

ascanbeta.sessionfixation.name=Fixa\u00e7\u00e3o de Se\u00e7\u00e3o
ascanbeta.sessionfixation.desc=Fixa\u00e7\u00e3o da Sess\u00e3o pode ser poss\u00edvel. Se esse problema ocorrer com uma URL de login (onde o usu\u00e1rio se autentica no aplicativo), ent\u00e3o a URL pode ser fornecida por um invasor, junto com um id de sess\u00e3o fixo, para uma v\u00edtima, a fim de posteriormente assumir a identidade da v\u00edtima usando o id de sess\u00e3o fornecido. Se o problema ocorrer com uma p\u00e1gina sem login, o URL e o ID de sess\u00e3o fixo s\u00f3 podem ser usados \u200b\u200bpor um invasor para rastrear as a\u00e7\u00f5es de um usu\u00e1rio n\u00e3o autenticado. Se a vulnerabilidade ocorre em um campo de cookie ou um campo de formul\u00e1rio (par\u00e2metro POST) em vez de em um par\u00e2metro de URL (GET), ent\u00e3o alguma outra vulnerabilidade tamb\u00e9m pode ser necess\u00e1ria para definir o campo de cookie no navegador da v\u00edtima, para permitir a vulnerabilidade a ser explorada.
ascanbeta.sessionfixation.soln=1) Impe\u00e7a que o invasor obtenha um id de sess\u00e3o, impondo ids de sess\u00e3o estritos e alocando ids de sess\u00e3o apenas ap\u00f3s autentica\u00e7\u00e3o bem-sucedida para o aplicativo.\n\
2) O servidor deve sempre criar um novo id de sess\u00e3o na autentica\u00e7\u00e3o, independentemente de uma sess\u00e3o j\u00e1 estar em vigor.\n\
3) Vincule a id de sess\u00e3o a alguma combina\u00e7\u00e3o de atributos de cliente identific\u00e1vel, como endere\u00e7o IP, certificado de cliente SSL.\n\
4) Sess\u00f5es, quando destru\u00eddas, devem ser destru\u00eddas no servidor, bem como no cliente.\n\
5) Implemente um mecanismo de logout que destrua todas as sess\u00f5es anteriores do cliente.\n\
6) Implemente timeouts absolutos de sess\u00e3o.\n\
7) Mude de uma URL baseada em uma implementa\u00e7\u00e3o de ID de sess\u00e3o baseada em cookie ou formul\u00e1rio, j\u00e1 que a \u00faltima normalmente requer vulnerabilidades adicionais, a fim de ser explorada por um invasor
ascanbeta.sessionfixation.refs=https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication\n\
https\://owasp.org/www-community/attacks/Session_fixation\n\
http\://www.acros.si/papers/session_fixation.pdf\n\
http\://www.technicalinfo.net/papers/WebBasedSessionManagement.html
ascanbeta.sessionfixation.alert.cookie.extrainfo=Cookie definido em resposta quando o campo do cookie [{0}] \u00e9 definido como NULL\: [{1}]\n\
Cookie definido em resposta com valor de cookie emprestado (v\u00e1lido) na solicita\u00e7\u00e3o [{1}]\: [{2}]
ascanbeta.sessionfixation.alert.cookie.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.\n\
\n\
This issue should be manually validated by checking that the session token set on the logon page is still valid once logged in, and that the token can be used to directly access a page/resource which should require the user to be logged in.
ascanbeta.sessionfixation.alert.url.extrainfo=Um prov\u00e1vel valor de sess\u00e3o apareceu em URLs na sa\u00edda HTML quando o par\u00e2metro de URL/par\u00e2metro de pseudo URL [{0}] \u00e9 definido como NULL\: [{1}]\n\
Quando esta sess\u00e3o ''emprestada'' [{1}] \u00e9 usada em uma solicita\u00e7\u00e3o subsequente para este URL, uma nova sess\u00e3o n\u00e3o \u00e9 criada.
ascanbeta.sessionfixation.alert.url.extrainfo.loginpage=A url no qual o problema foi descoberto foi sinalizada como uma p\u00e1gina de logon.
ascanbeta.sessionfixation.alert.attack={0} campo\: [{1}]
#Exposed Session Id messages
ascanbeta.sessionidexposedinurl.name=ID de Sess\u00e3o Exposto
ascanbeta.sessionidexposedinurl.desc=Um id de sess\u00e3o est\u00e1 exposto na URL. Ao compartilhar a URL de um site (contendo a id da sess\u00e3o), um usu\u00e1rio ing\u00eanuo pode conceder acesso inadvertidamente aos seus dados, comprometendo sua confidencialidade, integridade e disponibilidade. URLs contendo o identificador de sess\u00e3o tamb\u00e9m aparecem em favoritos do navegador da web, arquivos de log do servidor web e arquivos de log do servidor proxy.
ascanbeta.sessionidexposedinurl.soln=Use uma implementa\u00e7\u00e3o de gerenciamento de sess\u00e3o mais segura, como aquelas que usam cookies de sess\u00e3o, que n\u00e3o s\u00e3o t\u00e3o facilmente compartilhados inadvertidamente e que normalmente n\u00e3o aparecem em arquivos de log do servidor ou marcadores de navegador da web.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexposedinurl.refs=https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidexposedinurl.alert.extrainfo={0} campo [{1}] cont\u00e9m um identificador de sess\u00e3o exposto [{2}]
ascanbeta.sessionidexposedinurl.alert.extrainfo.loginpage=A url no qual o problema foi descoberto foi sinalizada como uma p\u00e1gina de logon.
ascanbeta.sessionidexposedinurl.alert.attack={0} campo\: [{1}]
#Session Id Cookie not sent securely
ascanbeta.sessionidsentinsecurely.name=ID de Sess\u00e3o Transmitido de Maneira Insegura
ascanbeta.sessionidsentinsecurely.desc=Um id de sess\u00e3o pode ser enviado por meio de um mecanismo n\u00e3o seguro. No caso de um cookie enviado na solicita\u00e7\u00e3o, isso ocorre quando HTTP \u00e9 usado em vez de HTTPS. No caso de um cookie enviado pelo servidor em resposta (quando a URL \u00e9 modificada definindo o campo do par\u00e2metro nomeado como NULL), a flag 'secure' n\u00e3o \u00e9 definida, permitindo que o cookie seja enviado posteriormente via HTTP em vez de HTTPS. Isso pode permitir que um interceptador passivo no caminho da rede obtenha acesso total \u00e0 sess\u00e3o da v\u00edtima.  
ascanbeta.sessionidsentinsecurely.soln=1) Use a vers\u00e3o mais recente dispon\u00edvel do SSL/TLS (para HTTPS) para todas as p\u00e1ginas onde um ID de sess\u00e3o \u00e9 comunicado entre o navegador e o servidor web.\n\
2) N\u00e3o permita que a comunica\u00e7\u00e3o seja for\u00e7ada para o protocolo HTTP n\u00e3o criptografado.\n\
3) Use a flag 'secure' ao definir um cookie contendo um id de sess\u00e3o, para evitar sua transmiss\u00e3o subsequente por um mecanismo n\u00e3o seguro.\n\
4) Encaminhe solicita\u00e7\u00f5es de p\u00e1gina HTTP n\u00e3o segura para a p\u00e1gina segura equivalente a HTTPS.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidsentinsecurely.refs=https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidsentinsecurely.alert.extrainfo=identificador de sess\u00e3o {0} campo [{1}], valor [{2}] pode ser enviado por meio de um mecanismo n\u00e3o seguro.  
ascanbeta.sessionidsentinsecurely.alert.extrainfo.secureflagnotset=A flag 'secure' n\u00e3o foi definida no cookie de sess\u00e3o fornecido pelo servidor.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.loginpage=A url no qual o problema foi descoberto foi sinalizada como uma p\u00e1gina de logon.
ascanbeta.sessionidsentinsecurely.alert.attack={0} campo\: [{1}]
#Session Id Cookie accessible by JavaScript
ascanbeta.sessionidaccessiblebyjavascript.name=Cookie de ID de Sess\u00e3o acess\u00edvel a JavaScript
ascanbeta.sessionidaccessiblebyjavascript.desc=Um cookie de Id de sess\u00e3o enviado pelo servidor (quando a URL \u00e9 modificada pela configura\u00e7\u00e3o do campo de par\u00e2metro nomeado como NULL) pode ser acessado por JavaScript no cliente. Em conjunto com outra vulnerabilidade, isso pode permitir que a sess\u00e3o seja sequestrada.  
ascanbeta.sessionidaccessiblebyjavascript.soln=1) Use a flag 'httponly' ao definir um cookie contendo um id de sess\u00e3o, para evitar que seja acessado por JavaScript no navegador da web.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidaccessiblebyjavascript.refs=
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo=identificador de sess\u00e3o {0} campo [{1}], valor [{2}] pode ser acessado usando JavaScript no navegador da web
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo.loginpage=A url no qual o problema foi descoberto foi sinalizada como uma p\u00e1gina de logon.
ascanbeta.sessionidaccessiblebyjavascript.alert.attack={0} campo\: [{1}]
#Session Id Cookie Expiry
ascanbeta.sessionidexpiry.name=Tempo de Expira\u00e7\u00e3o do ID da Sess\u00e3o/Idade M\u00e1xima Excessiva
ascanbeta.sessionidexpiry.desc=Um cookie de Id de sess\u00e3o enviado pelo servidor (quando a URL \u00e9 modificada definindo o campo do par\u00e2metro nomeado como NULL) \u00e9 definido para ser v\u00e1lido por um per\u00edodo de tempo excessivo. Isso pode ser explorado por um invasor se o usu\u00e1rio esquecer de fazer o logout, se a funcionalidade de logout n\u00e3o destruir corretamente a sess\u00e3o ou se a id da sess\u00e3o for comprometida por algum outro meio.     
ascanbeta.sessionidexpiry.soln=1) Use as diretivas de cookie 'Expire' ou 'Max-Age' ao definir um cookie que cont\u00e9m um id de sess\u00e3o, para evitar que fique dispon\u00edvel por longos per\u00edodos de tempo.\n\
2) Certifique-se de que a funcionalidade de logout exista e que destrua a sess\u00e3o corretamente.\n\
3) Use outras medidas preventivas para garantir que, se uma id de sess\u00e3o for comprometida, ela n\u00e3o seja explorada.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexpiry.refs=
ascanbeta.sessionidexpiry.alert.extrainfo=identificador de sess\u00e3o {0} campo [{1}], valor [{2}] pode ser acessado at\u00e9 [{3}] (desde que o cookie foi recebido em {4}), a menos que a sess\u00e3o seja destru\u00edda.
ascanbeta.sessionidexpiry.alert.extrainfo.loginpage=A url no qual o problema foi descoberto foi sinalizada como uma p\u00e1gina de logon.
ascanbeta.sessionidexpiry.alert.attack={0} campo\: [{1}]
ascanbeta.sessionidexpiry.browserclose=fechar navegador
ascanbeta.sessionidexpiry.timemorethanoneweek=Mais de uma semana
ascanbeta.sessionidexpiry.timemorethanoneday=Mais de um dia
ascanbeta.sessionidexpiry.timemorethanonehour=Mais de uma hora
ascanbeta.sessionidexpiry.timelessthanonehour=Menos de uma hora
ascanbeta.sessionidexpiry.timeexpired=Expirado

ascanbeta.shellshock.name = Execu\u00e7\u00e3o Remota de C\u00f3digo - Shell Shock
ascanbeta.shellshock.desc = O servidor est\u00e1 executando uma vers\u00e3o do shell Bash que permite que invasores remotos executem c\u00f3digo arbitr\u00e1rio 
ascanbeta.shellshock.extrainfo = Da CVE-2014-6271\: GNU Bash atrav\u00e9s do 4.3 processa strings ap\u00f3s defini\u00e7\u00f5es de fun\u00e7\u00e3o nos valores de vari\u00e1veis \u200b\u200bde ambiente, o que permite que atacantes remotos executem c\u00f3digo arbitr\u00e1rio por meio de um ambiente criado, conforme demonstrado por vetores envolvendo o recurso ForceCommand em OpenSSH sshd, os m\u00f3dulos mod_cgi e mod_cgid no Apache HTTP Server, scripts executados por clientes DHCP n\u00e3o especificados e outras situa\u00e7\u00f5es em que a configura\u00e7\u00e3o do ambiente ocorre atrav\u00e9s de um limite de privil\u00e9gio da execu\u00e7\u00e3o Bash, tamb\u00e9m conhecido como "ShellShock". NOTA\: a corre\u00e7\u00e3o original para este problema estava incorreta; A CVE-2014-7169 foi designada para cobrir a vulnerabilidade que ainda est\u00e1 presente ap\u00f3s a corre\u00e7\u00e3o err\u00f4nea.
ascanbeta.shellshock.soln = Atualize o Bash no servidor para a vers\u00e3o mais recente
ascanbeta.shellshock.ref = http\://web.nvd.nist.gov/view/vuln/detail?vulnId\=CVE-2014-6271\n\
http\://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html
ascanbeta.shellshock.timingbased.evidence = Usando o ataque, um atraso de [{0}] milissegundos foi induzido e detectado

ascanbeta.sourcecodedisclosure.desc = O c\u00f3digo-fonte da p\u00e1gina atual foi divulgado pelo servidor da web
ascanbeta.sourcecodedisclosure.lfibased.name = Source Code Disclosure - File Inclusion
ascanbeta.sourcecodedisclosure.lfibased.soln = Ensure that arbitrary files specified by the user are not included in the output
ascanbeta.sourcecodedisclosure.lfibased.extrainfo = The output for the source code filename [{0}] differs sufficiently from that of the random parameter [{1}], at [{2}%], compared to a threshold of [{3}%]
ascanbeta.sourcecodedisclosure.lfibased.evidence=

ascanbeta.sourcecodedisclosure.gitbased.name = Source Code Disclosure - Git 
ascanbeta.sourcecodedisclosure.gitbased.soln = Ensure that Git metadata files are not deployed to the web server or application server
ascanbeta.sourcecodedisclosure.gitbased.extrainfo=
ascanbeta.sourcecodedisclosure.gitbased.evidence = The source code for [{0}] was extracted using [{1}]

ascanbeta.sqlinjection.mysql.name=Inje\u00e7\u00e3o SQL - MySQL
ascanbeta.sqlinjection.hypersonic.name=Inje\u00e7\u00e3o SQL - Hypersonic SQL
ascanbeta.sqlinjection.oracle.name=Inje\u00e7\u00e3o SQL - Oracle
ascanbeta.sqlinjection.postgres.name=Inje\u00e7\u00e3o SQL - PostgreSQL
ascanbeta.sqlinjection.desc=Inje\u00e7\u00e3o SQL pode ser poss\u00edvel
ascanbeta.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place. \n\
In general, type check all data on the server side.\n\
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\n\
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\n\
If database Stored Procedures can be used, use them.\n\
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\n\
Do not create dynamic SQL queries using simple string concatenation.\n\
Escape all data received from the client.\n\
Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\n\
Apply the privilege of least privilege by using the least privileged database user possible.\n\
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\n\
Grant the minimum database access that is necessary for the application.
ascanbeta.sqlinjection.refs=https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
#ascanbeta.sqlinjection.alert.errorbased.attack={1}
ascanbeta.sqlinjection.alert.errorbased.differentiation.attack=Valor Original\: [{0}]. Valor Modificado\: [{1}]. Valor de Controle\: [{2}]
ascanbeta.sqlinjection.alert.booleanbased.attack=campo\: [{0}], valor [{1}]
ascanbeta.sqlinjection.alert.unionbased.attack=[{0}] field\: [{1}], value [{2}]
ascanbeta.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}], erro fornecido no fragmento de mensagem [{1}] nos resultados HTML
ascanbeta.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}], mensagem espec\u00edfica do comando UNION fornecida no fragmento [{1}] dos resultados HTML
ascanbeta.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Mensagem n\u00e3o modificada fornece status HTTP [{0}], Mensagem modificada fornece status HTTP [{1}]
ascanbeta.sqlinjection.alert.errorbased.differentiation.extrainfo=Mensagem n\u00e3o modificada fornece status HTTP [{0}], comprimento do corpo [{1}], mensagem modificada fornece status HTTP [{2}], comprimento do corpo [{3}]. Um terceiro (valor que n\u00e3o induz a inje\u00e7\u00e3o SQL) fornece status HTTP [{4}], comprimento do corpo [{5}]
ascanbeta.sqlinjection.alert.booleanbased.extrainfo=A p\u00e1gina de resultados foram manipuladas com sucesso usando as condi\u00e7\u00f5es booleanas [{0}] e [{1}]
ascanbeta.sqlinjection.alert.timebased.extrainfo=O tempo da query \u00e9 control\u00e1vel utilizando o valor do par\u00e2metro [{0}], o qual causou a requisi\u00e7\u00e3o a levar [{1}] milissegundos, enquanto o valor original da query sem modifica\u00e7\u00e3o com o valor [{2}] levou [{3}] milissegundos

ascanbeta.sqlinjection.mssql.name=SQL Injection - MsSQL
ascanbeta.sqlinjection.mssql.desc=Inje\u00e7\u00e3o SQL pode ser poss\u00edvel
ascanbeta.sqlinjection.mssql.soln=Do not trust client side input, even if there is client side validation in place. \n\
In general, type check all data on the server side.\n\
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\n\
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\n\
If database Stored Procedures can be used, use them.\n\
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\n\
Do not create dynamic SQL queries using simple string concatenation.\n\
Escape all data received from the client.\n\
Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\n\
Apply the privilege of least privilege by using the least privileged database user possible.\n\
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\n\
Grant the minimum database access that is necessary for the application.
ascanbeta.sqlinjection.mssql.refs=https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
ascanbeta.sqlinjection.mssql.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds.

ascanbeta.sqlinjection.sqlite.name=SQL Injection - SQLite
ascanbeta.sqlinjection.sqlite.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, parameter value [{2}], which caused the request to take [{3}] milliseconds, when the original unmodified query with value [{4}] took [{5}] milliseconds.
ascanbeta.sqlinjection.sqlite.alert.errorbased.extrainfo=The following known SQLite error message was provoked\: [{0}].
ascanbeta.sqlinjection.sqlite.alert.versionnumber.extrainfo=Using a UNION based SQL Injection attack, and by exploiting SQLite''s dynamic typing mechanism, the SQLite version was determined to be [{0}].\n\
With string-based injection points, full SQLite version information can be extracted, but with numeric injection points, only partial SQLite version information can be extracted.\n\
More information on SQLite version [{0}] is available at http\://www.sqlite.org/changes.html

ascanbeta.useragent.name=User Agent Fuzzer
ascanbeta.useragent.desc=Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.
ascanbeta.useragent.refs=https\://owasp.org/wstg
ascanbeta.useragent.useragentparmname=Header User-Agent

ascanbeta.traceaxd.name = Trace.axd Information Leak
ascanbeta.traceaxd.desc = The ASP.NET Trace Viewer (trace.axd) was found to be available. This component can leak a significant amount of valuable information.
ascanbeta.traceaxd.otherinfo = Based on response status code Trace Viewer may be protected by an authentication or authorization mechanism.  
ascanbeta.traceaxd.refs = https\://msdn.microsoft.com/en-us/library/bb386420.aspx\n\
https\://msdn.microsoft.com/en-us/library/wwh16c6c.aspx\n\
https\://www.dotnetperls.com/trace
ascanbeta.traceaxd.soln = Consider whether or not Trace Viewer is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization.


ascanbeta.sourcecodedisclosurecve-2012-1823.name = Divulga\u00e7\u00e3o de C\u00f3digo-Fonte - CVE-2012-1823
ascanbeta.sourcecodedisclosurecve-2012-1823.desc = Algumas vers\u00f5es do PHP, quando configuradas para serem executadas usando CGI, n\u00e3o manipulam corretamente as strings de consulta que n\u00e3o possuem um caractere "\=" sem escape, permitindo a divulga\u00e7\u00e3o do c\u00f3digo-fonte PHP e a execu\u00e7\u00e3o arbitr\u00e1ria do c\u00f3digo. Neste caso, o conte\u00fado do arquivo PHP foi servido diretamente para o navegador da web. Essa sa\u00edda normalmente conter\u00e1 PHP, embora tamb\u00e9m possa conter HTML direto.
ascanbeta.sourcecodedisclosurecve-2012-1823.soln = Atualize para a \u00faltima vers\u00e3o est\u00e1vel do PHP ou use o servidor web Apache e o m\u00f3dulo mod_rewrite para filtrar solicita\u00e7\u00f5es maliciosas usando as diretivas "RewriteCond" e "RewriteRule".

ascanbeta.sourcecodedisclosure.svnbased.name = Divulga\u00e7\u00e3o de C\u00f3digo-Fonte - SVN
ascanbeta.sourcecodedisclosure.svnbased.soln = Certifique-se de que os arquivos de metadados SVN n\u00e3o sejam implantados no servidor web ou servidor de aplicativos
ascanbeta.sourcecodedisclosure.svnbased.extrainfo = O c\u00f3digo-fonte de [{0}] foi encontrado em [{1}]

ascanbeta.usernameenumeration.name=Enumera\u00e7\u00e3o de Nome de Usu\u00e1rio Poss\u00edvel
ascanbeta.usernameenumeration.desc=Pode ser poss\u00edvel enumerar nomes de usu\u00e1rios, com base em respostas HTTP diferentes, quando nomes de usu\u00e1rios v\u00e1lidos e inv\u00e1lidos s\u00e3o fornecidos. Isso aumentaria muito a probabilidade de sucesso de ataques de for\u00e7a bruta de senha contra o sistema. Observe que os falsos positivos \u00e0s vezes podem ser minimizados aumentando a op\u00e7\u00e3o 'For\u00e7a de Ataque' no ZAP. Verifique manualmente o campo 'Outras informa\u00e7\u00f5es' para confirmar se isso \u00e9 realmente um problema. 
ascanbeta.usernameenumeration.soln=N\u00e3o divulgue detalhes sobre se um nome de usu\u00e1rio \u00e9 v\u00e1lido ou inv\u00e1lido. Em particular, para tentativas de login malsucedidas, n\u00e3o diferencie entre um usu\u00e1rio inv\u00e1lido e uma senha inv\u00e1lida na mensagem de erro, t\u00edtulo da p\u00e1gina, conte\u00fado da p\u00e1gina, cabe\u00e7alhos HTTP ou l\u00f3gica de redirecionamento.
ascanbeta.usernameenumeration.refs=https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account.html\n\
http\://sebastian-schinzel.de/_download/ifip-sec2011.pdf
ascanbeta.usernameenumeration.alert.extrainfo=[{0}] par\u00e2metro [{1}] vaza informa\u00e7\u00f5es sobre a exist\u00eancia de um usu\u00e1rio. As diferen\u00e7as de [{5}] na sa\u00edda, para o valor de nome de usu\u00e1rio original v\u00e1lido [{2}] e valor de nome de usu\u00e1rio inv\u00e1lido [{3}] s\u00e3o\:\n\
[{4}]
ascanbeta.usernameenumeration.alert.attack=Manipule o campo [{0}]\: [{1}] e monitore a sa\u00edda 

ascanbeta.paddingoracle.name=Oracle Padding Gen\u00e9rico
ascanbeta.paddingoracle.desc=By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely 'padding oracle' vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This rule should detect the MS10-070 padding oracle vulnerability in ASP.net if CustomErrors are enabled for that.
ascanbeta.paddingoracle.soln=Atualize o software do servidor afetado ou modifique os scripts para que validem corretamente os dados criptografados antes de tentar a descriptografia.
ascanbeta.paddingoracle.refs=http\://netifera.com/research/\n\
http\://www.microsoft.com/technet/security/bulletin/ms10-070.mspx\n\
http\://www.mono-project.com/Vulnerabilities\#ASP.NET_Padding_Oracle\n\
https\://bugzilla.redhat.com/show_bug.cgi?id\=623799

ascanbeta.elinjection.name = Expression Language Injection
ascanbeta.elinjection.desc = O software constr\u00f3i toda ou parte de uma instru\u00e7\u00e3o de linguagem de express\u00e3o (EL) em uma Java Server Page (JSP) usando entrada influenciada externamente de um componente upstream, mas n\u00e3o neutraliza ou neutraliza incorretamente elementos especiais que poderiam modificar a instru\u00e7\u00e3o EL pretendida antes de ela ser executada. Em certas vers\u00f5es do Spring 3.0.5 e anteriores, havia uma vulnerabilidade (CVE-2011-2730) na qual as tags do Expression Language seriam avaliadas duas vezes, o que efetivamente exp\u00f4s qualquer aplicativo \u00e0 inje\u00e7\u00e3o EL. No entanto, mesmo para vers\u00f5es posteriores, essa fraqueza ainda \u00e9 poss\u00edvel dependendo da configura\u00e7\u00e3o.
ascanbeta.elinjection.soln = Realize as melhores pr\u00e1ticas de valida\u00e7\u00e3o de dados em rela\u00e7\u00e3o \u00e0 entrada n\u00e3o confi\u00e1vel e para garantir que a codifica\u00e7\u00e3o de sa\u00edda seja aplicada quando os dados chegarem \u00e0 camada EL, para que nenhum metacaractere seja encontrado pelo int\u00e9rprete no conte\u00fado do usu\u00e1rio antes da avalia\u00e7\u00e3o. Os padr\u00f5es mais \u00f3bvios para detectar incluem ${ e \#{, mas pode ser poss\u00edvel codificar ou fragmentar esses dados.
ascanbeta.elinjection.refs = https\://owasp.org/www-community/vulnerabilities/Expression_Language_Injection\n\
http\://cwe.mitre.org/data/definitions/917.html

ascanbeta.xsltinjection.name = XSLT Injection
ascanbeta.xsltinjection.desc = Injection using XSL transformations may be possible, and may allow an attacker to read system information, read and write files, or execute arbitrary code.
ascanbeta.xsltinjection.refs = https\://www.contextis.com/blog/xslt-server-side-injection-attacks
ascanbeta.xsltinjection.soln = Sanitize and analyze every user input coming from any client-side.
ascanbeta.xsltinjection.error.otherinfo = The response to sending an XSLT token included error messages that may indicate a vulnerability to XSLT injections.
ascanbeta.xsltinjection.vendor.otherinfo = The XSLT processor vendor name "{0}" was returned after an injection request.
ascanbeta.xsltinjection.portscan.otherinfo = Port scanning may be possible.
ascanbeta.xsltinjection.command.otherinfo = Command execution may be possible.

ascanbeta.xxe.name=XML External Entity Attack

ascanbeta.xpathinjection.name=Inje\u00e7\u00e3o XPath

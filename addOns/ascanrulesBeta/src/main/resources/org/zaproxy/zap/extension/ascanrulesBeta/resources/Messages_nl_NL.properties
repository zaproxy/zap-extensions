ascanbeta.HTTPParamPoll.desc = HTTP Parameter Pollution (HPP) aanvallen bestaan uit het injecteren van gecodeerde query scheidingstekens in andere bestaande parameters. Als een web applicatie de user input onjuist schoonmaakt, dan kan een kwaadwillende gebruiker de logica van de applicatie aantasten om zo client-side en server-side aanvallen uit te voeren. Consequenties van HPP aanvallen zijn dat de aanvaller mogelijk hard-coded HTTP parameters kan overschrijven om zo het gedrag van de applicatie te wijzigen, invoer validatie checkpoints kan omzeilen,  en variabelen kan misbruiken die misschien buiten direct bereik liggen.
ascanbeta.HTTPParamPoll.extrainfo = https\://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution
ascanbeta.HTTPParamPoll.name = HTTP Parameter Pollution
ascanbeta.HTTPParamPoll.sol = Maak de user input voor parameter scheidingstekens goed schoon

ascanbeta.backupfiledisclosure.desc = Een backup van het bestand werd geopenbaard door de webserver
ascanbeta.backupfiledisclosure.name = Backup File openbaarmaking
ascanbeta.backupfiledisclosure.otherinfo = A backup of [{0}] is available at [{1}]
ascanbeta.backupfiledisclosure.refs = https\://cwe.mitre.org/data/definitions/530.html\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.html
ascanbeta.backupfiledisclosure.soln = Wijzig geen bestanden in situ op de webserver, en zorg ervoor dat onbelangrijke bestanden (inclusief verborgen bestanden) zijn verwijderd van de webserver.

ascanbeta.cookieslack.affect.response.no = These cookies did NOT affect the response\: 
ascanbeta.cookieslack.affect.response.yes = These cookies affected the response\: 
ascanbeta.cookieslack.desc = Repeated GET requests\: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.
ascanbeta.cookieslack.endline = \n
ascanbeta.cookieslack.name = Cookie Slack Detector
ascanbeta.cookieslack.otherinfo.intro = Cookies that don't have expected effects can reveal flaws in application logic. In the worst case, this can reveal where authentication via cookie token(s) is not actually enforced.\n
ascanbeta.cookieslack.separator = ,
ascanbeta.cookieslack.session.destroyed = Dropping this cookie appears to have invalidated the session\: [{0}] A follow-on request with all original cookies still had a different response than the original request. \n
ascanbeta.cookieslack.session.warning = NOTE\: Because of its name this cookie may be important, but dropping it appears to have no effect\: [{0}] \n

ascanbeta.cors.info.desc = Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any other origins (domain, scheme, or port) than its own from which a browser should permit loading of resources. It relaxes the Same-Origin Policy (SOP).
ascanbeta.cors.info.name = CORS Header
ascanbeta.cors.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\nhttps\://portswigger.net/web-security/cors
ascanbeta.cors.soln = If a web resource contains sensitive information, the origin should be properly specified in the Access-Control-Allow-Origin header. Only trusted websites needing this resource should be specified in this header, with the most secured protocol supported.
ascanbeta.cors.vuln.desc = This CORS misconfiguration could allow an attacker to perform AJAX queries to the vulnerable website from a malicious page loaded by the victim's user agent.\nIn order to perform authenticated AJAX queries, the server must specify the header "Access-Control-Allow-Credentials\: true" and the "Access-Control-Allow-Origin" header must be set to null or the malicious page's domain. Even if this misconfiguration doesn't allow authenticated AJAX requests, unauthenticated sensitive content can still be accessed (e.g intranet websites).\nA malicious page can belong to a malicious website but also a trusted website with flaws (e.g XSS, support of HTTP without TLS allowing code injection through MITM, etc).
ascanbeta.cors.vuln.name = CORS Misconfiguration

ascanbeta.crossdomain.adobe.desc = Een potenti\u00eble Flash/Silverlight gebaseerde cross-site request forgery is mogelijk vanwege een onjuiste configuratie op de webserver. 
ascanbeta.crossdomain.adobe.read.extrainfo = De webserver staat schadelijke cross-domein requests om data te lezen toe afkomstig van Flash/Silverlight componenten van elk willekeurig derde partij domein naar dit domein. Als het slachtoffer is ingelogd op deze service, dan zullen de schadelijke lees requests worden behandeld met de rechten van het slachtoffer. Daardoor kan data van deze service worden aangetast door een niet-geautoriseerde derde partij website via de web browser van het slachtoffer. Dit komt met name voor als een Cookie gebaseerde sessie implementatie wordt gebruikt. 
ascanbeta.crossdomain.adobe.read.name = Cross-Domein Misconfiguratie - Adobe - Lezen
ascanbeta.crossdomain.adobe.read.soln = Configureer het crossdomain.xml bestand om de lijst van domein namen die toegestaan zijn om cross-domein read requests te maken naar deze webserver te beperken. Gebruik hiervoor <allow-access-from domain\="example.com">. U moet alleen toegang geven aan "*" (alle domeinnamen) als u er zeker van bent dat deze service geen toegangscontrole-, gepersonaliseerde-, of priv\u00e9-gegevens aanbiedt.
ascanbeta.crossdomain.adobe.send.extrainfo = De webserver staat schadelijke cross-domein requests toe afkomstig van Flash/Silverlight componenten van elk willekeurig derde partij domein naar dit domein. Als het slachtoffer is ingelogd op deze service, dan zullen de schadelijke requests worden behandeld met de rechten van het slachtoffer. Dit kan leiden tot Cross Site Request Forgery (CSRF) type aanvallen via de web browser van het slachtoffer. Dit komt met name voor als een Cookie gebaseerde sessie implementatie wordt gebruikt. 
ascanbeta.crossdomain.adobe.send.name = Cross-Domein Misconfiguratie - Adobe - Verzenden
ascanbeta.crossdomain.adobe.send.soln = Configureer het crossdomain.xml bestand om de lijst van domein namen die toegestaan zijn om cross-domein requests te maken naar deze webserver te beperken. Gebruik hiervoor <allow-http-request-headers-from domain\="example.com" headers\="Authorization,X-Blahh">. U moet alleen toegang geven aan "*" (alle domeinnamen) als u er zeker van bent dat deze service niet kwetsbaar is voor Cross Site Request Forgery (CSRF) aanvallen.
ascanbeta.crossdomain.name = Cross-Domein Misconfiguratie
ascanbeta.crossdomain.refs = https\://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf\nhttps\://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc197955(v\=vs.95)\nhttps\://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc838250(v\=vs.95)
ascanbeta.crossdomain.silverlight.desc = Op Silverlight gebaseerde cross-site request forgery kan mogelijk zijn vanwege een onjuiste configuratie op de webserver.
ascanbeta.crossdomain.silverlight.extrainfo = De webserver staat schadelijke cross-domein requests toe afkomstig van Silverlight componenten van elk willekeurig derde partij domein naar dit domein. Als het slachtoffer is ingelogd op deze service, dan zullen de schadelijke requests worden behandeld met de rechten van het slachtoffer. Daardoor kan de data van deze service worden aangetast door een niet-geautoriseerde derde partij website via de web browser van het slachtoffer. Ook kan het leiden tot Cross Site Request Forgery (CSRF) type aanvallen. Dit komt met name voor als een Cookie gebaseerde sessie implementatie wordt gebruikt. 
ascanbeta.crossdomain.silverlight.name = Cross-Domain Misconfiguration - Silverlight
ascanbeta.crossdomain.silverlight.soln = Configureer het clientaccesspolicy.xml bestand om de lijst van domein namen die toegestaan zijn om cross-domein requests te maken naar deze webserver te beperken. Gebruik hiervoor <domain uri\="https\://example.com" />. U moet alleen toegang geven aan "*" (alle domeinnamen) als u er zeker van bent dat deze service geen toegangscontrole-, gepersonaliseerde-, of priv\u00e9-gegevens aanbiedt.

ascanbeta.csrftoken.extrainfo.annotation = This is an informational alert as the form has a security annotation indicating that it does not need an anti-CSRF Token. This should be tested manually to ensure the annotation is correct.
ascanbeta.csrftoken.name = Anti-CSRF Tokens Check

ascanbeta.desc = Beta status active scan rules

ascanbeta.elinjection.desc = The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed. In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection. However, even for later versions, this weakness is still possible depending on configuration.
ascanbeta.elinjection.name = Expression Language Injectie
ascanbeta.elinjection.refs = https\://owasp.org/www-community/vulnerabilities/Expression_Language_Injection\nhttps\://cwe.mitre.org/data/definitions/917.html
ascanbeta.elinjection.soln = Voer een gegevensvalidatie uit op een onbetrouwbare invoer en zorg ervoor dat een uitvoercodering wordt toegepast wanneer de gegevens op de EL-laag aankomen, zodat v\u00f3\u00f3r de evaluatie geen metateken wordt gevonden in de inhoud van de gebruiker door de tolk. De meest voor de hand liggende patronen om te detecteren zijn ${ en \#{, maar het is misschien mogelijk om deze gegevens te coderen of te fragmenteren.

ascanbeta.entityExpansion.desc = An exponential entity expansion, or "billion laughs" attack is a type of denial-of-service (DoS) attack. It is aimed at parsers of markup languages like XML or YAML that allow macro expansions.
ascanbeta.entityExpansion.name = Exponential Entity Expansion (Billion Laughs Attack)
ascanbeta.entityExpansion.other = The attack HTTP request received a response after {0} seconds.
ascanbeta.entityExpansion.refs = https\://en.wikipedia.org/wiki/Billion_laughs_attack\nhttps\://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\nhttps\://cwe.mitre.org/data/definitions/776.html
ascanbeta.entityExpansion.soln = Defenses against this kind of attack include capping the memory allocated in an individual parser if loss of the document is acceptable, or treating entities symbolically and expanding them lazily only when (and to the extent) their content is to be used.

ascanbeta.forbiddenBypass.desc = Bypassing 403 endpoints may be possible, the scan rule sent a payload that caused the response to be accessible (status code 200).
ascanbeta.forbiddenBypass.name = Bypassing 403
ascanbeta.forbiddenBypass.refs = https\://www.acunetix.com/blog/articles/a-fresh-look-on-reverse-proxy-related-attacks/\nhttps\://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf\nhttps\://www.contextis.com/en/blog/server-technologies-reverse-proxy-bypass

ascanbeta.httponlysite.desc = The site is only served under HTTP and not HTTPS.
ascanbeta.httponlysite.name = HTTP Only Site
ascanbeta.httponlysite.otherinfo = {0}\nZAP attempted to connect via\: {1}
ascanbeta.httponlysite.otherinfo.connectionfail = Failed to connect.
ascanbeta.httponlysite.otherinfo.differenthosts = Different Hosts.
ascanbeta.httponlysite.otherinfo.noredirection = There was no automatic redirection.
ascanbeta.httponlysite.otherinfo.nossl = Site has no SSL/TLS support.
ascanbeta.httponlysite.otherinfo.redirectionlimit = Redirection limit reached.
ascanbeta.httponlysite.otherinfo.redirecttohttp = Redirected to HTTP.
ascanbeta.httponlysite.otherinfo.urinotencoded = Redirection URI couldn't be encoded.
ascanbeta.httponlysite.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\nhttps\://letsencrypt.org/
ascanbeta.httponlysite.soln = Configure your web or application server to use SSL (https).

ascanbeta.httpoxy.desc = The server initiated a proxied request via the proxy specified in the HTTP Proxy header of the request.Httpoxy typically affects code running in CGI or CGI like environments.\nThis may allow attackers to\:\n* Proxy the outgoing HTTP requests made by the web application\n* Direct the server to open outgoing connections to an address and port of their choosing or\n* Tie up server resources by forcing the vulnerable software to use a malicious proxy
ascanbeta.httpoxy.name = Httpoxy - Proxy Header Misuse
ascanbeta.httpoxy.otherinfo = An outgoing message to {0} was proxied via the host and port that ZAP injected into the HTTP Proxy header.
ascanbeta.httpoxy.refs = https\://httpoxy.org/
ascanbeta.httpoxy.skipped = the Network extension is disabled
ascanbeta.httpoxy.soln = The best immediate mitigation is to block Proxy request headers as early as possible, and before they hit your application.

ascanbeta.httpsashttp.desc = Content which was initially accessed via HTTPS (i.e.\: using SSL/TLS encryption) is also accessible via HTTP (without encryption). 
ascanbeta.httpsashttp.name = HTTPS Content Available via HTTP
ascanbeta.httpsashttp.otherinfo = ZAP attempted to connect via\: {0}
ascanbeta.httpsashttp.refs = https\://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps\://owasp.org/www-community/Security_Headers\nhttps\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps\://caniuse.com/stricttransportsecurity\nhttps\://datatracker.ietf.org/doc/html/rfc6797
ascanbeta.httpsashttp.soln = Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.

ascanbeta.insecurehttpmethod.connect.exploitable.desc = De onveilige HTTP method [{0}] is ingeschakeld op de web server voor deze resource en kan worden misbruikt. Het bleek mogelijk te zijn om een getunnelde socket connectie naar een derde partij service aan te maken met deze HTTP methode. Hiermee kan de service worden gebruikt voor een anonieme spam relay, of als een web proxy om netwerk restricties te omzeilen. Het is ook mogelijk om een getunnelde VPN op te zetten waarmee het netwerk omvang te vergroten om zo onbetrouwbare componenten te omvatten.
ascanbeta.insecurehttpmethod.connect.exploitable.extrainfo = De CONNECT methode werd gebruikt om een socket connectie op te zetten naar [{0}] via de web server.
ascanbeta.insecurehttpmethod.delete.exploitable.desc = This method is most commonly used in REST services, It is used to delete a resource.
ascanbeta.insecurehttpmethod.delete.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see https\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.desc = De onveilige HTTP method [{0}] is ingeschakeld op de web server voor deze resource. Afhankelijk van de web server configuratie en de onderliggende implementatie verantwoordelijk voor het serveren van de resource kan dit mogelijk misbruikt worden.  De TRACK en TRACE methodes kunnen worden gebruikt door een aanvaller om toegang te verschaffen tot authorisatie tokens/sessie cookies van applicatie gebruikers, zelfs als de sessie cookies zijn beschermd met de ''HttpOnly'' vlag. Voor de aanval om succesvol te zijn moet de applicatie gebruiker een oude web browser gebruiken of een web browser die een Same Origin Policy (SOP) bypass kwetsbaarheid heeft. De ''CONNECT'' methode kan worden gebruikt door een web client om een HTTP tunnel te maken naar derde partij websites of services.
ascanbeta.insecurehttpmethod.detailed.name = Onveilige HTTP Method - {0}
ascanbeta.insecurehttpmethod.extrainfo = De OPTIONS methode openbaarde de volgende ingeschakelde HTTP methodes voor deze resource\: [{0}]
ascanbeta.insecurehttpmethod.insecure = response code {0} for insecure HTTP METHOD
ascanbeta.insecurehttpmethod.name = Onveilige HTTP Method
ascanbeta.insecurehttpmethod.options.exploitable.desc = This is a diagnostic method and should never be turned on in production mode.
ascanbeta.insecurehttpmethod.options.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods
ascanbeta.insecurehttpmethod.patch.exploitable.desc = This method is now most commonly used in REST services, PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource.
ascanbeta.insecurehttpmethod.patch.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see https\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.potentiallyinsecure = response code {0} for potentially insecure HTTP METHOD
ascanbeta.insecurehttpmethod.put.exploitable.desc = This method was originally intended for file management operations. It is now most commonly used in REST services, PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource..
ascanbeta.insecurehttpmethod.put.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see https\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.soln = Schakel onveilige methodes, zoals TRACK, TRACE, en CONNECT, uit op de web server en zorg ervoor dat de onderliggende service implementatie deze onveilige methodes niet ondersteunt.
ascanbeta.insecurehttpmethod.trace.exploitable.desc = De onveilige HTTP method [{0}] is ingeschakeld op de web server voor deze resource en kan worden misbruikt. De TRACK en TRACE methodes kunnen worden gebruikt door een aanvaller om toegang te verschaffen tot authorisatie tokens/sessie cookies van applicatie gebruikers, zelfs als de sessie cookies zijn beschermd met de ''HttpOnly'' vlag. Voor de aanval om succesvol te zijn moet de applicatie gebruiker een oude web browser gebruiken of een web browser die een Same Origin Policy (SOP) bypass kwetsbaarheid heeft. 
ascanbeta.insecurehttpmethod.trace.exploitable.extrainfo = Een TRACE request kan worden verstuurd voor deze request met een aangepaste cookiewaarde [{0}]. Deze cookiewaarde kwam terug in de HTTP response. Dit bevestigde de kwetsbaarheid.
ascanbeta.insecurehttpmethod.webdav.exploitable.desc = This HTTP method is a WEBDAV method\: {0}. If this server is not offering any WEBDAV services, these methods should not be available.
ascanbeta.insecurehttpmethod.webdav.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods

ascanbeta.integeroverflow.desc = An integer overflow condition exists when an integer used in a compiled program extends beyond the range limits and has not been properly checked from the input stream.
ascanbeta.integeroverflow.error1 = Potential Integer Overflow.  Status code changed on the input of a long string of random integers.
ascanbeta.integeroverflow.error2 = Potential Integer Overflow.  Status code changed on the input of a long string of zeros.
ascanbeta.integeroverflow.error3 = Potential Integer Overflow.  Status code changed on the input of a long string of ones.
ascanbeta.integeroverflow.error4 = Potential Integer Overflow.  Status code changed on the input of a long string of nines.
ascanbeta.integeroverflow.name = Integer Overflow Error
ascanbeta.integeroverflow.refs = https\://en.wikipedia.org/wiki/Integer_overflow\nhttps\://cwe.mitre.org/data/definitions/190.html
ascanbeta.integeroverflow.soln = In order to prevent overflows and divide by 0 (zero) errors in the application, please rewrite the backend program, checking if the values of integers being processed are within the application's allowed range. This will require a recompilation of the backend executable.

ascanbeta.name = Active Scan Rules - beta

ascanbeta.noanticsrftokens.desc = Er zijn geen Anti-CSRF tokens gevonden in een HTML formulier.
ascanbeta.noanticsrftokens.name = Gebrek aan Anti-CSRF Tokens

ascanbeta.oobxss.name = Out of Band XSS
ascanbeta.oobxss.skipped = no Active Scan OAST service is selected.

ascanbeta.proxydisclosure.attack = TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.
ascanbeta.proxydisclosure.desc = {0} proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n - A list of targets for an attack against the application.\n - Potential vulnerabilities on the proxy servers that service the application.\n - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. 
ascanbeta.proxydisclosure.extrainfo.proxyserver = - {0}
ascanbeta.proxydisclosure.extrainfo.proxyserver.header = Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between ZAP and the application/web server\: 
ascanbeta.proxydisclosure.extrainfo.silentproxyserver = - {0}
ascanbeta.proxydisclosure.extrainfo.silentproxyserver.header = The following 'silent' proxy servers were identified. Due to their behaviour, it is not known at which point in the network topology these proxy servers reside\:
ascanbeta.proxydisclosure.extrainfo.traceenabled = The 'TRACE' method is enabled on one or more of the proxy servers, or on the origin server. This method leaks all information submitted from the web browser and proxies back to the user agent. This may facilitate 'Cross Site Tracing' attacks. 
ascanbeta.proxydisclosure.extrainfo.unknown = Onbekend
ascanbeta.proxydisclosure.extrainfo.webserver = - {0}
ascanbeta.proxydisclosure.extrainfo.webserver.header = The following web/application server has been identified\: 
ascanbeta.proxydisclosure.name = Proxy Disclosure
ascanbeta.proxydisclosure.refs = https\://tools.ietf.org/html/rfc7231\#section-5.1.2
ascanbeta.proxydisclosure.soln = Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\nDisable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\nConfigure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\nConfigure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n

ascanbeta.relativepathconfusion.desc = The web server is configured to serve responses to ambiguous URLs in a manner that is likely to lead to confusion about the correct "relative path" for the URL. Resources (CSS, images, etc.) are also specified in the page response using relative, rather than absolute URLs. In an attack, if the web browser parses the "cross-content" response in a permissive manner, or can be tricked into permissively parsing the "cross-content" response, using techniques such as framing, then the web browser may be fooled into interpreting HTML as CSS (or other content types), leading to an XSS vulnerability.
ascanbeta.relativepathconfusion.extrainfo.contenttypeenabled = A Content Type of "{0}" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  
ascanbeta.relativepathconfusion.extrainfo.framingallowed = No X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.extrainfo.morethanonebasetag = More than one <base> tag was specified in the HTML <head> tag to define the location for relative URLs, which is not valid.
ascanbeta.relativepathconfusion.extrainfo.nobasetag = No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.
ascanbeta.relativepathconfusion.extrainfo.nocontenttype = No Content Type was specified, so Quirks Mode is not required to exploit the vulnerability in the web browser. 
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledexplicitly = Quirks Mode is explicitly enabled via <meta http-equiv\="{0}", allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitly = Quirks Mode is implicitly enabled via the use of an old DOCTYPE with PUBLIC id "{0}", allowing the specified Content Type to be bypassed in some web browsers.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitlynodoctype = Quirks Mode is implicitly enabled via the absence of a DOCTYPE, allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.name = Relative Path Confusion
ascanbeta.relativepathconfusion.refs = https\://arxiv.org/abs/1811.00917\nhttps\://hsivonen.fi/doctype/\nhttps\://www.w3schools.com/tags/tag_base.asp
ascanbeta.relativepathconfusion.soln = Web servers and frameworks should be updated to be configured to not serve responses to ambiguous URLs in such a way that the relative path of such URLs could be mis-interpreted by components on either the client side, or server side.\nWithin the application, the correct use of the "<base>" HTML tag in the HTTP response will unambiguously specify the base URL for all relative URLs in the document.\nUse the "Content-Type" HTTP response header to make it harder for the attacker to force the web browser to mis-interpret the content type of the response.\nUse the "X-Content-Type-Options\: nosniff" HTTP response header to prevent the web browser from "sniffing" the content type of the response.\nUse a modern DOCTYPE such as "<\!doctype html>" to prevent the page from being rendered in the web browser using "Quirks Mode", since this results in the content type being ignored by the web browser.\nSpecify the "X-Frame-Options" HTTP response header to prevent Quirks Mode from being enabled in the web browser using framing attacks. 

ascanbeta.sessionfixation.alert.attack = {0} veld\: [{1}]
ascanbeta.sessionfixation.alert.cookie.extrainfo = Cookie ingesteld in response wanneer cookie veld [{0}] is ingesteld op NULL\: [{1}]\nCookie ingesteld in response met geleende (geldige) cookie waarde in request [{1}] \: [{2}]
ascanbeta.sessionfixation.alert.cookie.extrainfo.loginpage = The url on which the issue was discovered was flagged as a logon page.\n\nThis issue should be manually validated by checking that the session token set on the logon page is still valid once logged in, and that the token can be used to directly access a page/resource which should require the user to be logged in.
ascanbeta.sessionfixation.alert.url.extrainfo = Een waarschijnlijke sessie waarde is verschenen in URLs in de HTML output wanneer URL parameter/pseudo URL parameter [{0}] is ingesteld op NULL\: [{1}]\nWanneer deze ''geleende'' sessie [{1}] wordt gebruikt in een volgende request voor deze URL, wordt er geen nieuwe sessie aangemaakt.
ascanbeta.sessionfixation.alert.url.extrainfo.loginpage = De url waarop het probleem werd ontdekt is gemarkeerd als een login pagina.
ascanbeta.sessionfixation.desc = Session Fixation kan mogelijk zijn. Als dit probleem optreedt bij een login URL (waar de gebruiker zichzelf verifieert bij de applicatie), dan kan de URL, samen met een vaste sessie id, gegeven worden door een aanvaller aan het slachtoffer om later de identiteit van het slachtoffer over te nemen d.m.v. het gegeven sessie id. Als dit probleem optreedt bij een niet-login pagina, dan kan de URL en vaste sessie id alleen worden gebruikt door de aanvaller om de acties van de niet-geverifieerde gebruiker bij te houden. Als de kwetsbaarheid optreedt bij een cookie veld of een formulier veld (POST parameter) i.p.v. bij een URL (GET) parameter, dan kunnen enkele andere kwetsbaarheden nodig zijn om het cookie veld in te stellen in de browser van het slachtoffer en om de kwetsbaarheid te misbruiken.
ascanbeta.sessionfixation.name = Session Fixation
ascanbeta.sessionfixation.refs = https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication\nhttps\://owasp.org/www-community/attacks/Session_fixation\nhttps\://acrossecurity.com/papers/session_fixation.pdf\nhttps\://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html
ascanbeta.sessionfixation.soln = 1) Prevent the attacker from gaining a session id by enforcing strict session ids, and by only allocating session ids upon successful authentication to the application.\n2) The server should always create a new session id upon authentication, regardless of whether a session is already in place.\n3) Bind the session id to some identifiable client attribute combination, such as IP address, SSL client certificate.\n4) Sessions, when destroyed, must be destroyed on the server, as well as on the client.\n5) Implement a logout mechanism which will destroy all previous sessions for the client.\n6) Implement absolute session timeouts.\n7)Switch from a URL based to a cookie or form based session id implementation, as the latter typically require additional vulnerabilities, in order to be exploitable by an attacker\n

ascanbeta.sessionidaccessiblebyjavascript.alert.attack = {0} veld\: [{1}]
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo = sessie id {0} veld [{1}], waarde [{2}] kan toegankelijk zijn voor JavaScript in de web browser
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo.loginpage = De url waarop het probleem werd ontdekt is gemarkeerd als een login pagina.
ascanbeta.sessionidaccessiblebyjavascript.desc = Een sessie id cookie die is verstuurd door de server (wanneer de URL is gewijzigd door de genoemde parameter veld in te stellen op NULL) is toegankelijk voor JavaScript bij de client. In combinatie met een andere kwetsbaarheid kan het mogelijk zijn om de sessie te kapen. 
#Session Id Cookie accessible by JavaScript
ascanbeta.sessionidaccessiblebyjavascript.name = Sessie ID Cookie toegankelijk voor JavaScript
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidaccessiblebyjavascript.refs=
ascanbeta.sessionidaccessiblebyjavascript.soln = 1) Gebruik de 'httponly' vlag bij het instellen van een cookie die een sessie id bevat. Dit voorkomt dat de cookie toegankelijk is voor JavaScript in de web browser. 

ascanbeta.sessionidexpiry.alert.attack = {0} veld\: [{1}]
ascanbeta.sessionidexpiry.alert.extrainfo = sessie id {0} veld [{1}], waarde [{2}] kan toegankelijk zijn tot [{3}] (aangezien cookie is ontvangen op {4}), tenzij de sessie is vernietigd.
ascanbeta.sessionidexpiry.alert.extrainfo.loginpage = De url waarop het probleem werd ontdekt is gemarkeerd als een login pagina.
ascanbeta.sessionidexpiry.browserclose = browser sluiten
ascanbeta.sessionidexpiry.desc = Een Sessie Id cookie die is verstuurd door de server (wanneer de URL is gewijzigd door de benoemde parameter veld in te stellen op NULL) is ingesteld om geldig te blijven voor een overdreven lange periode. Dit kan worden misbruikt door een aanvaller als de gebruiker vergeet uit te loggen, als de uitlog functionaliteit de sessie onjuist vernietigd, of als de sessie id is aangetast op een andere manier.     
#Session Id Cookie Expiry
ascanbeta.sessionidexpiry.name = Sessie ID verstrijkingstijd/Max-Age is overmatig
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexpiry.refs=
ascanbeta.sessionidexpiry.soln = 1) Gebruik de 'Expire' of 'Max-Age' cookie richtlijnen wanneer een cookie dat een sessie id bevat wordt ingesteld. Zo wordt voorkomen dat de cookie voor een te lange tijd beschikbaar blijft.\n2) Zorg ervoor dat een uitlog functionaliteit bestaat en dat deze de sessie op een juiste manier vernietigd.\n3) Gebruik andere preventieve manieren om er zeker van te zijn dat als een sessie id is aangetast, deze niet kan worden misbruikt.
ascanbeta.sessionidexpiry.timeexpired = Verlopen
ascanbeta.sessionidexpiry.timelessthanonehour = Minder dan een uur
ascanbeta.sessionidexpiry.timemorethanoneday = Meer dan een dag
ascanbeta.sessionidexpiry.timemorethanonehour = Meer dan een uur
ascanbeta.sessionidexpiry.timemorethanoneweek = Meer dan een week

ascanbeta.sessionidexposedinurl.alert.attack = {0} veld\: [{1}]
ascanbeta.sessionidexposedinurl.alert.extrainfo = {0} veld [{1}] bevat een blootgestelde sessie identifier [{2}]
ascanbeta.sessionidexposedinurl.alert.extrainfo.loginpage = De url waarop het probleem werd ontdekt is gemarkeerd als een login pagina.
ascanbeta.sessionidexposedinurl.desc = A session id is exposed in the URL. By sharing such a website URL (containing the session id), a naive user may be inadvertently granting access to their data, compromising its confidentiality, integrity, and availability.  URLs containing the session identifier also appear in web browser bookmarks, web server log files, and proxy server log files. 
#Exposed Session Id messages
ascanbeta.sessionidexposedinurl.name = Blootgestelde Sessie ID
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexposedinurl.refs = https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidexposedinurl.soln = Gebruik een veiligere sessie management implementatie, zoals een die gebruikt maakt van sessie cookies. Deze zijn niet gemakkelijk per ongeluk te delen en worden niet weergegeven in server logbestanden of browser bladwijzers.

ascanbeta.sessionidsentinsecurely.alert.attack = {0} veld\: [{1}]
ascanbeta.sessionidsentinsecurely.alert.extrainfo = sessie id {0} veld [{1}], waarde [{2}] kan worden verstuurd via een onveilig mechanisme.  
ascanbeta.sessionidsentinsecurely.alert.extrainfo.loginpage = De url waarop het probleem werd ontdekt is gemarkeerd als een login pagina.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.secureflagnotset = De 'secure' vlag was niet ingesteld voor de sessie cookie die werd geleverd door de server.
ascanbeta.sessionidsentinsecurely.desc = Een sessie id  kan worden verstuurd via een onveilig mechanisme. In het geval van een cookie dat wordt verzonden in de request, gebeurt dit wanneer HTTP wordt gebruikt i.p.v. HTTPS. In het geval van een cookie dat wordt verzonden door de server in een response (wanneer de URL is aangepast door de benoemde parameter veld in te stellen op NULL), dan is de 'secure' vlag niet ingesteld. Hierdoor kan de cookie later worden verstuurd via HTTP i.p.v. HTTPS. Hierdoor kan een passieve luistervink op het netwerkpad toegang krijgen tot de sessie van het slachtoffer.  
#Session Id Cookie not sent securely
ascanbeta.sessionidsentinsecurely.name = Sessie ID Onveilig Verstuurd
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidsentinsecurely.refs = https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidsentinsecurely.soln = 1) Gebruik de nieuwst beschikbare versie van SSL/TLS (voor HTTPS) voor alle pagina's waarbij een sessie id wordt uitgewisseld tussen de browser en de web server.\n2) Sta niet toe dat de communicate naar het niet-beveiligde HTTP protocol wordt geforceerd.\n3) Gebruik de 'secure' vlag wanneer een cookie met een sessie id wordt ingesteld. Dit voorkomt een latere overdracht met een onveilig mechanisme.\n4) Stuur niet-beveiligde HTTP pagina requests door naar de veilige HTTPS pagina.  

ascanbeta.shellshock.desc = De server draait een versie van de Bash shell waarmee externe aanvallers willekeurige code kunnen uitvoeren 
ascanbeta.shellshock.extrainfo = Van CVE-2014-6271\: GNU Bash tot versie 4.3 de laatste reeksen in de processen na de functiedefinities in de waarden van de omgevingsvariabelen, stelt aanvallers op afstand in staat om willekeurige code uit te voeren via een speciaal ontworpen omgeving, zoals aangetoond door de dragers betrekken van de ForceCommand-functionaliteit in OpenSSH sshd-, mod_cgi- en mod_cgid-modules in Apache HTTP Server, scripts uitgevoerd door niet-gespecificeerde DHCP-clients en andere situaties waarin de omgeving wordt bepaald door een privilege-limiet door Bash uit te voeren, beter bekend zoals 'ShellShock'. Opmerking\: de oorspronkelijke oplossing voor dit probleem was onjuist; CVE-2014-7169 is toegewezen om het beveiligingslek te dekken dat na de onjuiste oplossing nog steeds aanwezig is.
ascanbeta.shellshock.name = Remote Code Execution - Shell Shock
ascanbeta.shellshock.ref = https\://nvd.nist.gov/vuln/detail/CVE-2014-6271\nhttps\://www.troyhunt.com/everything-you-need-to-know-about2/
ascanbeta.shellshock.soln = Update Bash op de server naar de nieuwste versie
ascanbeta.shellshock.timingbased.evidence = M.b.v. de aanval is een vertraging van [{0}] milliseconden ge\u00efnduceerd en gedetecteerd

ascanbeta.sourcecodedisclosure.desc = The source code for the current page was disclosed by the web server.
ascanbeta.sourcecodedisclosure.gitbased.evidence = The source code for [{0}] was extracted using [{1}]
ascanbeta.sourcecodedisclosure.gitbased.name = Source Code Disclosure - Git 
ascanbeta.sourcecodedisclosure.gitbased.soln = Ensure that Git metadata files are not deployed to the web server or application server
ascanbeta.sourcecodedisclosure.lfibased.extrainfo = The output for the source code filename [{0}] differs sufficiently from that of the random parameter [{1}], at [{2}%], compared to a threshold of [{3}%]
ascanbeta.sourcecodedisclosure.lfibased.name = Source Code Disclosure - File Inclusion
ascanbeta.sourcecodedisclosure.svnbased.extrainfo = De bron code voor [{0}] werd gevonden bij [{1}]
ascanbeta.sourcecodedisclosure.svnbased.name = Zichtbare Bron Code - SVN
ascanbeta.sourcecodedisclosure.svnbased.soln = Maak zeker dat de SVN metadata bestanden niet werden gepubliceerd op de web server of applicatie server

ascanbeta.sourcecodedisclosurecve-2012-1823.desc = Sommige PHP versies, wanneer geconfigureerd om CGI uit te voeren, handelen de query strings niet correct af waneer deze een unescaped "\=" karakter missen, dit maakt bron code zichtbaar, en faciliteert willekeurige code execution.
ascanbeta.sourcecodedisclosurecve-2012-1823.name = Source Code Disclosure - CVE-2012-1823
ascanbeta.sourcecodedisclosurecve-2012-1823.soln = Upgrade naar de nieuwste stabiele versie van PHP, of gebruik de Apache web server en de mod_rewrite module om schadelijke requests weg te filteren m.b.v. de "RewriteCond" en " RewriteRule" richtlijnen.

ascanbeta.ssrf.desc = The web server receives a remote address and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.
ascanbeta.ssrf.name = Server Side Request Forgery
ascanbeta.ssrf.otherinfo.canaryinbody = The canary token from the out-of-band service was found in the response body.
ascanbeta.ssrf.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
ascanbeta.ssrf.skipped = no Active Scan OAST service is selected.
ascanbeta.ssrf.soln = Do not accept remote addresses as request parameters, and if you must, ensure that they are validated against an allow-list of expected values.

ascanbeta.text4shell.desc = Apache Commons Text prior to 1.10.0 allows RCE when applied to untrusted input due to insecure interpolation defaults.Apache Commons Text performs variable interpolation, allowing properties to be dynamically evaluated and expanded.The application has been shown to initial contact with remote servers via variable interpolation and may well be vulnerable to Remote Code Execution (RCE).
ascanbeta.text4shell.name = Text4shell (CVE-2022-42889)
ascanbeta.text4shell.refs = https\://nvd.nist.gov/vuln/detail/CVE-2022-42889\nhttps\://securitylab.github.com/advisories/GHSL-2022-018_Apache_Commons_Text/
ascanbeta.text4shell.skipped = no Active Scan OAST service is selected.
ascanbeta.text4shell.soln = Upgrade Apache Commons Text prior to version 1.10.0 or newer.

ascanbeta.usernameenumeration.alert.attack = Manipuleer [{0}] field\: [{1}] en monitor de uitvoer 
ascanbeta.usernameenumeration.alert.extrainfo = [{0}] parameter [{1}] lekt informatie over het bestaan van een gebruiker. De [{5}] verschillen in uitvoer, voor de geldige gebruikersnaam waarde [{2}], en ongeldige gebruikersnaam waarde [{3}] zijn\: [{4}]
ascanbeta.usernameenumeration.desc = Het kan mogelijk zijn om gebruikersnamen te gissen, gebaseerd op de verschillende HTTP reponse wanneer een geldige of ongeldige gebruikersnaam werd ingevoerd. Dit kan het success van password brute-force aanvallen tegen een systeem gevoelig verhogen. Neem nota dat de 'false positives' soms kunnen teruggedrongen worden door de 'Aanvals Sterkte' Optie in ZAP te verhogen. Gelieve manueel het 'Ander Info' veld te valideren opdat dit een issue is of niet. 
ascanbeta.usernameenumeration.name = Possible Username Enumeration
ascanbeta.usernameenumeration.refs = https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account.html\nhttps\://dl.ifip.org/db/conf/sec/sec2011/FreilingS11.pdf\nhttps\://cwe.mitre.org/data/definitions/204.html
ascanbeta.usernameenumeration.soln = Do not divulge details of whether a username is valid or invalid. In particular, for unsuccessful login attempts, do not differentiate between an invalid user and an invalid password in the error message, page title, page contents, HTTP headers, or redirection logic.


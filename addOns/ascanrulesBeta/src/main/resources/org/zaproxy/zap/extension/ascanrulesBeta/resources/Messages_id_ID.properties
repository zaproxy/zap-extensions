#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages

ascanbeta.desc=Aturan Pindai Aktif - beta

ascanbeta.backupfiledisclosure.name=Pengungkapan Berkas Cadangan
ascanbeta.backupfiledisclosure.desc=Cadangan dari file itu diungkapkan oleh web server
ascanbeta.backupfiledisclosure.soln=Jangan mengedit file di-situ di web server, dan memastikan bahwa un-file yang diperlukan (termasuk file yang tersembunyi) akan dihapus dari server web.
ascanbeta.backupfiledisclosure.evidence=Cadangan [{0}] tersedia di [{1}]

ascanbeta.crossdomain.name=Kesalahan konfigurasi lintas domain
#the refs cannot be customised for each sub-category (Adobe, Silverlight, etc)
ascanbeta.crossdomain.refs=http\://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html http\://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf http\://msdn.microsoft.com/ en-US / library / cc197955% 28v\= vs.95% 29.aspx http\://msdn.microsoft.com/en-us/library/cc838250% 28v\= vs.95% 29.aspx
ascanbeta.crossdomain.adobe.read.name=Misconfiguration Lintas Domain-Adobe-Baca
ascanbeta.crossdomain.adobe.send.name=Mengkonfigurasi Lintas Domain - Adobe - Kirim
ascanbeta.crossdomain.adobe.desc=Pemecatan permintaan cross-site berbasis Flash / Silverlight dimungkinkan, karena kesalahan konfigurasi pada server web. 
ascanbeta.crossdomain.adobe.read.soln=Konfigurasikan file crossdomain.xml untuk membatasi daftar domain yang diizinkan membuat permintaan baca lintas domain ke server web ini, dengan menggunakan <allow-access-from domain \= "example.com">. Anda seharusnya hanya memberikan akses ke "*" (semua domain) jika Anda yakin bahwa layanan ini tidak menghosting data yang dikendalikan, dipersonalisasi, atau pribadi.
ascanbeta.crossdomain.adobe.read.extrainfo=Web server memungkinkan berbahaya cross-domain data membaca permintaan yang berasal dari Flash/Silverlight komponen disajikan dari pihak ketiga domain, untuk domain ini. Jika korban pengguna login ke layanan ini, berbahaya baca permintaan diproses menggunakan hak-hak korban, dan dapat mengakibatkan data dari layanan ini sedang dikompromikan oleh aplikasi pihak ketiga situs web, melalui web korban browser. Hal ini sangat mungkin menjadi masalah jika Cookie berdasarkan sesi pelaksanaan di gunakan. 
ascanbeta.crossdomain.adobe.send.soln=Konfigurasikan file crossdomain.xml untuk membatasi daftar domain yang diizinkan membuat permintaan lintas domain (namun tidak harus dibaca) ke server web ini, dengan menggunakan <allow-http-request-header-from domain \="example.com"header\="otorisasi, X-Blahh">. Anda seharusnya hanya memberikan akses ke "*" (semua domain) jika Anda yakin bahwa layanan ini tidak rentan terhadap serangan Cross Site Request Forgery (CSRF).
ascanbeta.crossdomain.adobe.send.extrainfo=Web server memungkinkan berbahaya cross-domain mengirim data (tetapi tidak harus baca) permintaan yang berasal dari Flash/Silverlight komponen disajikan dari pihak ketiga domain, untuk domain ini. Jika korban pengguna login ke layanan ini, berbahaya mengirim permintaan diproses menggunakan hak-hak korban, dan dapat mengakibatkan Cross Site Request Forgery (CSRF) jenis serangan, melalui korban browser web. Hal ini sangat mungkin menjadi masalah jika Cookie berdasarkan sesi pelaksanaan di gunakan.
ascanbeta.crossdomain.silverlight.name=Konfigurasi default Cross-Domain - Silverlight
ascanbeta.crossdomain.silverlight.desc=Pemecatan permintaan cross-site berbasis Silverlight dimungkinkan, karena kesalahan konfigurasi pada server web.
ascanbeta.crossdomain.silverlight.soln=Konfigurasikan file clientaccesspolicy.xml untuk membatasi daftar domain yang diizinkan membuat permintaan lintas-domain ke server web ini, dengan menggunakan <domain uri \= "https\://example.com"/>. Anda seharusnya hanya memberikan akses ke "*" (semua domain) jika Anda yakin bahwa layanan ini tidak menghosting data yang dikendalikan, dipersonalisasi, atau pribadi.
ascanbeta.crossdomain.silverlight.extrainfo=Web server memungkinkan berbahaya lintas-domain permintaan yang berasal dari Silverlight komponen disajikan dari pihak ketiga domain, untuk domain ini. Jika korban pengguna masuk ke layanan ini, berbahaya permintaan diproses menggunakan hak-hak korban, dan dapat mengakibatkan data dari layanan ini sedang dikompromikan oleh aplikasi pihak ketiga situs web, melalui web korban browser. Hal ini juga dapat mengakibatkan Cross Site Request Forgery (CSRF) jenis serangan. Hal ini sangat mungkin menjadi masalah jika Cookie berdasarkan sesi pelaksanaan di gunakan.

ascanbeta.csrftokenscan.name=Token Anti CSRF Token
ascanbeta.csrftokenscan.extrainfo.annotation=Ini adalah informasi peringatan sebagai bentuk keamanan penjelasan yang menunjukkan bahwa hal itu tidak perlu Token anti-CSRF. Ini harus diuji manual untuk memastikan anotasi sudah benar.

ascanbeta.heartbleed.name=Kerentanan OpenSSL yang Heartbleed
ascanbeta.heartbleed.desc=Implementasi TLS di OpenSSL 1.0.1 sebelum 1.0.1g tidak menangani paket Ekstensi Heartbeat dengan benar, yang memungkinkan penyerang jarak jauh mendapatkan informasi sensitif dari memori proses melalui paket buatan yang memicu buffer over-read, yang berpotensi mengungkapkan informasi sensitif.
ascanbeta.heartbleed.soln=Update ke OpenSSL 1.0.1g atau yang lebih baru. Re-issue sertifikat HTTPS. Ubah kunci privat asimetris dan kunci rahasia bersama, karena ini mungkin telah disusupi, tanpa bukti kompromi dalam file log server.
ascanbeta.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
ascanbeta.heartbleed.extrainfo=This issue was confirmed by exfiltrating data from the server, using {0}. This is unlikely to be a false positive.

ascanbeta.HTTPParamPoll.name=Pemindai Polusi Parameter HTTP
ascanbeta.HTTPParamPoll.desc=Serangan Parameter Polusi HTTP (HPP) terdiri dari penyisipan string kuadrat yang disandikan ke parameter lain yang ada. Jika aplikasi web tidak membersihkan masukan pengguna dengan benar, pengguna jahat dapat mengkompromikan logika aplikasi untuk melakukan serangan sisi klien atau server-side. Salah satu konsekuensi dari serangan HPP adalah bahwa penyerang berpotensi mengesampingkan parameter HTTP kode keras yang ada untuk memodifikasi perilaku aplikasi, melewati titik validasi masukan, dan mengakses dan mungkin memanfaatkan variabel yang mungkin tidak terjangkau secara langsung.
ascanbeta.HTTPParamPoll.sol=Sebaiknya bersihkan masukan pengguna untuk pembatas parameter
ascanbeta.HTTPParamPoll.alert.attack=Parameter Polusi HTTP
ascanbeta.HTTPParamPoll.extrainfo=http\://www.google.com/search?q\=http+parameter+pollution

ascanbeta.insecurehttpmethod.name=Metode HTTP yang Tidak Aman
ascanbeta.insecurehttpmethod.detailed.name=Metode HTTP yang Tidak Aman - {0}
ascanbeta.insecurehttpmethod.desc=Metode HTTP yang tidak aman [{0}] diaktifkan pada server web untuk sumber ini. Bergantung pada konfigurasi server web, dan penerapan mendasar yang bertanggung jawab untuk melayani sumber daya, ini mungkin atau mungkin tidak dapat dieksploitasi. Metode TRACK dan TRACE dapat digunakan oleh penyerang, untuk mendapatkan akses ke kuota otorisasi / cookie sesi dari pengguna aplikasi, meskipun cookie sesi dilindungi menggunakan bendera ''HttpOnly''. Agar serangan berhasil, pengguna aplikasi biasanya harus menggunakan browser web lawas, atau browser web yang memiliki kerentanan bypass Same Origin Policy (SOP). Metode ''CONNECT'' dapat digunakan oleh klien web untuk membuat terowongan HTTP ke situs web atau layanan pihak ketiga.
ascanbeta.insecurehttpmethod.trace.exploitable.desc=Metode HTTP yang tidak aman [{0}] diaktifkan untuk sumber ini, dan dapat dieksploitasi. Metode TRACK dan TRACE dapat digunakan oleh penyerang, untuk mendapatkan akses ke kuota otorisasi / cookie sesi dari pengguna aplikasi, meskipun cookie sesi dilindungi menggunakan bendera ''HttpOnly''. Agar serangan berhasil, pengguna aplikasi biasanya harus menggunakan browser web lawas, atau browser web yang memiliki kerentanan bypass Same Origin Policy (SOP).
ascanbeta.insecurehttpmethod.connect.exploitable.desc=Metode HTTP yang tidak aman [{0}] diaktifkan untuk sumber ini, dan dapat dieksploitasi. Ditemukan kemungkinan membuat sambungan soket terowongan ke layanan pihak ketiga, dengan menggunakan metode HTTP ini. Ini akan memungkinkan layanan tersebut digunakan sebagai relay spam anonim, atau sebagai proxy web, yang melewati batasan jaringan. Ini juga memungkinkannya digunakan untuk membuat VPN terowongan, yang secara efektif memperluas perimeter jaringan untuk menyertakan komponen yang tidak tepercaya. 
ascanbeta.insecurehttpmethod.extrainfo=Metode OPTIONS mengungkapkan metode HTTP berikut yang memungkinkan untuk sumber ini\: [{0}]
ascanbeta.insecurehttpmethod.trace.exploitable.extrainfo=Permintaan TRACE dikirim untuk permintaan ini, dengan nilai kuki ubahsuaian [{0}]. Nilai cookie ini diungkapkan dalam respon HTTP, yang mengkonfirmasikan kerentanan tersebut.
ascanbeta.insecurehttpmethod.connect.exploitable.extrainfo=The CONNECT method was used to establish a socket connection to [{0}], via the web server.
ascanbeta.insecurehttpmethod.soln=Nonaktifkan metode tidak aman seperti TRACK, TRACE, dan CONNECT pada server web, dan pastikan bahwa implementasi layanan yang mendasarinya tidak mendukung metode yang tidak aman.


ascanbeta.integeroverflow.name=Kesalahan Overeger Overflow
ascanbeta.integeroverflow.desc=Kondisi overflow integer ada saat sebuah integer, yang belum diperiksa dengan benar dari input stream digunakan dalam program yang dikompilasi. 
ascanbeta.integeroverflow.soln=Menulis latar belakang program menggunakan tepat memeriksa ukuran bilangan bulat menjadi input untuk mencegah meluap dan membagi dengan 0 kesalahan. Ini akan memerlukan kompilasi ulang dari latar belakang eksekusi.
ascanbeta.integeroverflow.refs=https\://www.owasp.org/index.php/Integer_overflow dan http\://projects.webappsec.org/w/page/13246946/Integer%20 Overflows.
ascanbeta.integeroverflow.error1=Potensi Integer Overflow. Kode status berubah pada input string panjang bilangan bulat acak.
ascanbeta.integeroverflow.error2=Potensi Integer Overflow. Kode status berubah pada input string panjang angka nol.
ascanbeta.integeroverflow.error3=Potensi Integer Overflow. Kode status berubah pada input string panjang yang ada.
ascanbeta.integeroverflow.error4=Potensi Integer Overflow. Kode status berubah pada input string panjang sembilan tahun.

ascanbeta.noanticsrftokens.name=Tidak adanya Token Anti-CSRF
ascanbeta.noanticsrftokens.desc=Tidak ada bukti Anti-CSRF yang ditemukan dalam formulir pengiriman HTML.

ascanbeta.remotecodeexecution.cve-2012-1823.name=Eksekusi Kode Jarak Jauh - CVE-2012-1823
ascanbeta.remotecodeexecution.cve-2012-1823.desc=Beberapa versi PHP, ketika dikonfigurasi untuk berjalan menggunakan CGI, tidak benar menangani pertanyaan string yang kurang tidak dapat lolos "\=" karakter, yang memungkinkan eksekusi kode sewenang-wenang. Dalam kasus ini, sebuah sistem operasi perintah disebabkan akan dieksekusi di web server, dan hasilnya dikembalikan ke browser web. 
ascanbeta.remotecodeexecution.cve-2012-1823.soln=Upgrade ke versi stabil terbaru dari PHP, atau menggunakan Apache web server dan modul mod_rewrite untuk menyaring berbahaya permintaan menggunakan arahan "RewriteCond" dan "RewriteRule".

ascanbeta.sessionfixation.name=Fiksasi Sesi
ascanbeta.sessionfixation.desc=Sesi Fiksasi mungkin dilakukan. Jika masalah ini terjadi dengan URL login (di mana pengguna mengotentikasi diri mereka sendiri untuk aplikasi), maka URL yang dapat diberikan oleh seorang penyerang, selain tetap session id, untuk korban, untuk kemudian mengasumsikan identitas korban menggunakan diberikan session id. Jika terjadi masalah dengan non-halaman login, URL dan tetap session id hanya dapat digunakan oleh penyerang untuk melacak aplikasi yang tidak berkepentingan tindakan pengguna. Jika terjadi kerentanan pada cookie bidang atau bentuk lapangan (POSTING parameter) bukan pada URL (GET) parameter, maka beberapa kerentanan juga mungkin diperlukan dalam rangka untuk mengatur cookie lapangan pada browser korban, untuk memungkinkan kerentanan yang dapat dimanfaatkan.
ascanbeta.sessionfixation.soln=1) Mencegah penyerang dari mendapatkan session id dengan menegakkan ketat id sesi, dan dengan hanya mengalokasikan id sesi setelah autentikasi berhasil untuk aplikasi.\n2) server harus selalu membuat id sesi baru setelah otentikasi, terlepas dari apakah session sudah di tempat.\n3) Mengikat session id untuk beberapa identificable klien atribut kombinasi, seperti alamat IP, SSL sertifikat klien.\n4) Sesi, ketika hancur, harus dihancurkan pada server, serta pada klien.\n5) Melaksanakan logout mekanisme yang akan menghancurkan semua sesi sebelumnya untuk klien.\n6) Melaksanakan mutlak sesi waktu habis.\n7)Beralih dari URL berbasis cookie atau bentuk berdasarkan session id pelaksanaan, sebagai yang terakhir biasanya memerlukan tambahan kerentanan, dalam rangka untuk bisa dieksploitasi oleh penyerang\n
ascanbeta.sessionfixation.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management\nhttps\://www.owasp.org/index.php/Session_fixation\nhttp\://www.acros.si/papers/session_fixation.pdf\nhttp\://www.technicalinfo.net/papers/WebBasedSessionManagement.html\nhttps\://www.owasp.org/index.php/Top_10_2010-A9
ascanbeta.sessionfixation.alert.cookie.extrainfo=Cookie ditetapkan sebagai tanggapan saat bidang cookie [{0}] disetel ke NULL\: [{1}] Cookie ditetapkan sebagai tanggapan dengan nilai cookie yang dipinjam (berlaku) sesuai permintaan [{1}]\: [{2}]
ascanbeta.sessionfixation.alert.cookie.extrainfo.loginpage=Url di mana masalah itu ditemukan ditandai sebagai halaman log masuk.
ascanbeta.sessionfixation.alert.url.extrainfo=A likely session value has appeared in URLs in the HTML output when URL parameter/pseudo URL parameter [{0}] is set to NULL\: [{1}]\nWhen this ''borrowed'' session [{1}] is used in a subsequent request for this URL, a new session is not created.
ascanbeta.sessionfixation.alert.url.extrainfo.loginpage=Url di mana masalah itu ditemukan ditandai sebagai halaman log masuk.
ascanbeta.sessionfixation.alert.attack=Bidang {0}\:[{1}]
#Exposed Session Id messages
ascanbeta.sessionidexposedinurl.name=ID sesi terpapar
ascanbeta.sessionidexposedinurl.desc=Sebuah session id yang terkena dalam URL. Dengan berbagi seperti URL situs web (yang berisi session id), naiive pengguna mungkin secara tidak sengaja memberikan akses ke data mereka, mengorbankan kerahasiaan, integritas, dan ketersediaan. Url yang berisi session identifier juga muncul di web browser bookmark, file log web server, dan proxy server log file. 
ascanbeta.sessionidexposedinurl.soln=Penggunaan yang lebih aman sesi implementasi manajemen, seperti salah satu yang menggunakan cookie sesi, yang tidak mudah bersama secara tidak sengaja, dan yang tidak biasanya muncul dalam file log server atau web browser bookmark.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexposedinurl.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management
ascanbeta.sessionidexposedinurl.alert.extrainfo={0} bidang [{1}] berisi pengenal sesi terpapar [{2}]
ascanbeta.sessionidexposedinurl.alert.extrainfo.loginpage=Url di mana masalah itu ditemukan ditandai sebagai halaman log masuk.
ascanbeta.sessionidexposedinurl.alert.attack=Bidang {0}\:[{1}]
#Session Id Cookie not sent securely
ascanbeta.sessionidsentinsecurely.name=ID sesi ditransmisikan dengan tidak aman
ascanbeta.sessionidsentinsecurely.desc=Session id dapat dikirim melalui mekanisme yang tidak aman. Dalam kasus cookie yang dikirim dalam permintaan, hal ini terjadi ketika HTTP, bukan HTTPS, digunakan. Dalam kasus cookie yang dikirim oleh server di respon (ketika URL dimodifikasi dengan menetapkan parameter bernama lapangan untuk NULL), 'aman' bendera tidak diatur, yang memungkinkan cookie akan dikirim kemudian melalui HTTP daripada melalui HTTPS. Hal ini dapat memungkinkan pasif lubang kebocoran pada jaringan jalan untuk mendapatkan akses penuh ke sesi korban.  
ascanbeta.sessionidsentinsecurely.soln=1) Menggunakan versi terbaru yang tersedia dari SSL/TLS (HTTPS) untuk semua halaman di mana session id dikomunikasikan antara browser dan web server.\n2) tidak memungkinkan komunikasi dipaksa turun ke protokol HTTP tidak terenkripsi.\n3) Menggunakan 'aman' bendera ketika pengaturan cookie yang berisi session id, untuk mencegah transmisi berikutnya dengan mekanisme yang tidak aman.\n4) Teruskan non-secure HTTP halaman permintaan untuk secure HTTPS setara halaman.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidsentinsecurely.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management https\://www.owasp.org/index.php/Top_10_2010-A9
ascanbeta.sessionidsentinsecurely.alert.extrainfo=session identifier {0} field [{1}], nilai [{2}] dapat dikirim melalui mekanisme yang tidak aman.  
ascanbeta.sessionidsentinsecurely.alert.extrainfo.secureflagnotset=Flag 'aman' tidak disetel pada cookie sesi yang disediakan oleh server.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.loginpage=Url di mana masalah itu ditemukan ditandai sebagai halaman log masuk.
ascanbeta.sessionidsentinsecurely.alert.attack=Bidang {0}\:[{1}]
#Session Id Cookie accessible by JavaScript
ascanbeta.sessionidaccessiblebyjavascript.name=Kuki Sesi ID yang Dapat Diakses ke JavaScript
ascanbeta.sessionidaccessiblebyjavascript.desc=Kuki Id sesi yang dikirim oleh server (bila URL dimodifikasi dengan menyetel bidang parameter yang dinamai ke NULL) dapat diakses oleh JavaScript di server. Sehubungan dengan kerentanan lain, ini memungkinkan sesi dibajak.  
ascanbeta.sessionidaccessiblebyjavascript.soln=1) Gunakan bendera 'httponly' saat menyetel cookie yang berisi id sesi, untuk mencegahnya diakses oleh JavaScript di browser web.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidaccessiblebyjavascript.refs=
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo=session identifier {0} field [{1}], nilai [{2}] dapat diakses menggunakan JavaScript di browser web{1}
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo.loginpage=Url di mana masalah itu ditemukan ditandai sebagai halaman log masuk.
ascanbeta.sessionidaccessiblebyjavascript.alert.attack=Bidang {0}\:[{1}]
#Session Id Cookie Expiry
ascanbeta.sessionidexpiry.name=Sesi ID kadaluwarsa Sisa / Max-Age itu Berlebihan
ascanbeta.sessionidexpiry.desc=Kuki Id sesi yang dikirim oleh server (bila URL diubah dengan menyetel bidang parameter bernama ke NULL) ditetapkan berlaku untuk jangka waktu yang berlebih. Ini mungkin dapat dimanfaatkan oleh penyerang jika pengguna lupa log out, jika fungsionalitas logout tidak menghancurkan sesi dengan benar, atau jika id sesi dikompromikan dengan beberapa cara lain.     
ascanbeta.sessionidexpiry.soln=1) Gunakan perintah kado 'Kadaluarsa' atau 'Max-Age' saat menyetel kue yang berisi id sesi, agar tidak tersedia dalam jangka waktu lama. 2) Pastikan bahwa fungsi logout ada, dan itu benar menghancurkan sesi. 3) Gunakan tindakan pencegahan lainnya untuk memastikan bahwa jika id sesi disusupi, hal itu mungkin tidak dieksploitasi.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexpiry.refs=
ascanbeta.sessionidexpiry.alert.extrainfo=session identifier {0} field [{1}], nilai [{2}] dapat diakses sampai [{3}] (karena cookie diterima pada {4}), kecuali jika sesi tersebut dimusnahkan.
ascanbeta.sessionidexpiry.alert.extrainfo.loginpage=Url di mana masalah itu ditemukan ditandai sebagai halaman log masuk.
ascanbeta.sessionidexpiry.alert.attack=Bidang {0}\:[{1}]
ascanbeta.sessionidexpiry.browserclose=browser tutup
ascanbeta.sessionidexpiry.timemorethanoneweek=Lebih dari satu minggu
ascanbeta.sessionidexpiry.timemorethanoneday=Lebih dari satu hari
ascanbeta.sessionidexpiry.timemorethanonehour=Lebih dari satu jam
ascanbeta.sessionidexpiry.timelessthanonehour=Kurang dari satu jam
ascanbeta.sessionidexpiry.timeexpired=Kadaluarsa

ascanbeta.shellshock.name=Eksekusi Kode Jarak Jauh - Shell Shock
ascanbeta.shellshock.desc=Server menjalankan versi shell Bash yang memungkinkan penyerang jarak jauh mengeksekusi kode yang sewenang-wenang 
ascanbeta.shellshock.extrainfo=Dari CVE-2014-6271\: GNU Bash melalui 4.3 proses mengikuti string setelah definisi fungsi dalam nilai variabel lingkungan, yang memungkinkan penyerang jarak jauh mengeksekusi kode acak melalui lingkungan yang dibuat, seperti yang ditunjukkan oleh vektor yang melibatkan fitur ForceCommand di sshd OpenSSH, modul mod_cgi dan mod_cgid di Apache HTTP Server, skrip yang dijalankan oleh klien DHCP yang tidak ditentukan, dan situasi lain di mana pengaturan lingkungan terjadi di batas hak istimewa dari eksekusi Bash, alias "ShellShock." CATATAN\: perbaikan asli untuk masalah ini salah; CVE-2014-7169 telah ditugaskan untuk menutupi kerentanan yang masih ada setelah perbaikan yang tidak benar.
ascanbeta.shellshock.soln=Perbarui Bash di server ke versi terbaru
ascanbeta.shellshock.ref=http\://web.nvd.nist.gov/view/vuln/detail?vulnId\=CVE-2014-6271\nhttp\://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html
ascanbeta.shellshock.timingbased.evidence=Menggunakan serangan, penundaan [{0}] milidetik diinduksi dan terdeteksi

ascanbeta.sqlinjection.mysql.name=SQL Injection - MySQL
ascanbeta.sqlinjection.hypersonic.name=SQL Injection - Hypersonic SQL
ascanbeta.sqlinjection.oracle.name=SQL Injection - Oracle
ascanbeta.sqlinjection.postgres.name=SQL Injection - PostgreSQL
ascanbeta.sqlinjection.desc=Injeksi SQL bisa dilakukan
ascanbeta.sqlinjection.soln=Jangan percaya masukan sisi klien, biarpun ada validasi sisi klien di tempat. \nSecara umum, ketik cek semua data di sisi server. Jika aplikasi menggunakan JDBC, gunakan PreparedStatement atau CallableStatement, dengan parameter yang dilewati '?' Jika aplikasi menggunakan ASP, gunakan ADO Command Objects dengan pengecekan tipe dan kueri parameter yang kuat. Jika database Stored Procedures dapat digunakan, gunakanlah. Jangan * menggabungkan string ke dalam kueri dalam prosedur tersimpan, atau gunakan 'exec', 'exec langsung', atau fungsi setara\! Jangan membuat query SQL dinamis menggunakan rangkaian string sederhana. Melarikan diri dari semua data yang diterima dari klien. Terapkan 'daftar putih' karakter yang diizinkan, atau 'daftar hitam' karakter yang tidak diizinkan dalam masukan pengguna. Terapkan hak istimewa yang paling tidak istimewa dengan menggunakan pengguna database yang paling tidak mungkin. Secara khusus, hindari menggunakan 'sa' atau 'db-owner' pengguna database Ini tidak menghilangkan injeksi SQL, namun meminimalkan dampaknya. Berikan akses database minimum yang diperlukan untuk aplikasi.
ascanbeta.sqlinjection.refs=https\://www.owasp.org/index.php/Top_10_2010-A1 https\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
#ascanbeta.sqlinjection.alert.errorbased.attack={1}
ascanbeta.sqlinjection.alert.errorbased.differentiation.attack=Nilai Asli\: [{0}]. Nilai yang Diubah\: [{1}]. Nilai Kontrol\: [{2}]
ascanbeta.sqlinjection.alert.booleanbased.attack=bidang\: [{0}], nilai [{1}]
ascanbeta.sqlinjection.alert.unionbased.attack=[{0}]\: [{1}], nilai [{2}]
ascanbeta.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] kemungkinan terjadi, mengingat fragmen pesan kesalahan [{1}] dalam hasil HTML
ascanbeta.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] kemungkinan terjadi, mengingat fragmen pesan khusus UNION [{1}] dalam hasil HTML
ascanbeta.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Pesan yang tidak dimodifikasi memberikan status HTTP [{0}], pesan yang dimodifikasi memberikan status HTTP [{1}]
ascanbeta.sqlinjection.alert.errorbased.differentiation.extrainfo=Unmodified message gave HTTP status [{0}], body of length [{1}], modified message gave HTTP status [{2}], body of length [{3}]. A third (non-SQL injection inducing value) gave HTTP status [{4}], body of length [{5}]
ascanbeta.sqlinjection.alert.booleanbased.extrainfo=Hasil halaman berhasil dimanipulasi dengan menggunakan kondisi boolean [{0}] dan [{1}]
ascanbeta.sqlinjection.alert.timebased.extrainfo=Waktu kueri dapat dikontrol dengan menggunakan nilai parameter [{0}], yang menyebabkan permintaan untuk mengambil [{1}] milidetik, bila kueri asli yang tidak dimodifikasi dengan nilai [{2}] mengambil [{3}] milidetik 

ascanbeta.sourcecodedisclosure.desc=Kode sumber untuk halaman ini telah diungkapkan oleh server web

ascanbeta.sourcecodedisclosurecve-2012-1823.name=Pengungkapan Kode Sumber - CVE-2012-1823
ascanbeta.sourcecodedisclosurecve-2012-1823.desc=Beberapa versi PHP, ketika dikonfigurasi untuk dijalankan menggunakan CGI, jangan menangani string kueri dengan benar yang tidak memiliki karakter "\=" yang tidak digerakkan, yang memungkinkan pengungkapan kode sumber PHP, dan eksekusi kode sewenang-wenang. Dalam hal ini, isi file PHP tersebut langsung ditayangkan ke web browser. Output ini biasanya berisi PHP, meskipun mungkin juga berisi HTML langsung.
ascanbeta.sourcecodedisclosurecve-2012-1823.soln=Upgrade ke versi stabil terbaru dari PHP, atau menggunakan Apache web server dan modul mod_rewrite untuk menyaring berbahaya permintaan menggunakan arahan "RewriteCond" dan "RewriteRule".

ascanbeta.sourcecodedisclosure.svnbased.name=Pengungkapan Kode Sumber - SVN
ascanbeta.sourcecodedisclosure.svnbased.soln=Pastikan file metadata SVN tidak dikirim ke server web atau server aplikasi
ascanbeta.sourcecodedisclosure.svnbased.extrainfo=Kode sumber untuk [{0}] ditemukan di [{1}]

ascanbeta.sourcecodedisclosurewebinf.name=Pengungkapan Kode Sumber - / WEB-INF folder
ascanbeta.sourcecodedisclosurewebinf.desc=Kode sumber Java telah diungkapkan oleh server web di file kelas Java di folder WEB-INF. File kelas dapat dis-rakitan untuk menghasilkan kode sumber yang sangat sesuai dengan kode sumber asli.  
ascanbeta.sourcecodedisclosurewebinf.soln=Server web harus dikonfigurasi untuk tidak melayani folder / WEB-INF atau isinya ke browser web, karena berisi informasi sensitif seperti kode sumber dan kode properti yang dikompilasi yang mungkin berisi kredensial. Kelas Java yang dikerahkan dengan aplikasi harus dikaburkan, sebagai lapisan pertahanan tambahan dalam pendekatan "pertahanan-mendalam".

ascanbeta.sourcecodedisclosurewebinf.propertiesfile.name=Pengungkapan File Properties - / WEB-INF folder
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.desc=Sebuah kelas Java di folder / WEB-INF mengungkapkan adanya file properti. File properti tidak dimaksudkan untuk dapat diakses oleh publik, dan biasanya berisi informasi konfigurasi, kredensial aplikasi, atau kunci kriptografi.   
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.soln=Server web harus dikonfigurasi untuk tidak melayani folder / WEB-INF atau isinya ke browser web. Mungkin juga untuk menghapus folder / WEB-INF.  
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.extrainfo=Referensi ke file properti ditemukan di kode sumber Java dis-rakitan untuk kelas Java [{0}].

ascanbeta.usernameenumeration.name=Kemungkinan Username Enumeration
ascanbeta.usernameenumeration.desc=Ada kemungkinan untuk menghitung nama pengguna, berdasarkan tanggapan HTTP yang berbeda saat nama pengguna yang valid dan tidak valid disediakan. Hal ini akan sangat meningkatkan kemungkinan keberhasilan serangan brute force secara paksa terhadap sistem. Perhatikan bahwa false positive terkadang diminimalkan dengan meningkatkan 'Attack Strength' Option di ZAP. Harap periksa bidang 'Info Lainnya' secara manual untuk mengonfirmasi apakah ini benar-benar menjadi masalah. 
ascanbeta.usernameenumeration.soln=Jangan membocorkan rincian apakah nama pengguna sah atau tidak benar. Secara khusus, untuk upaya login yang tidak berhasil, jangan membedakan antara pengguna yang tidak benar dan kata sandi yang tidak benar dalam pesan kesalahan, judul halaman, isi halaman, header HTTP, atau logika redirection.
ascanbeta.usernameenumeration.refs=https\://www.owasp.org/index.php/Testing_for_user_enumeration_%28OWASP-AT-002%29 \nhttp\://sebastian-schinzel.de/_download/ifip-sec2011.pdf
ascanbeta.usernameenumeration.alert.extrainfo=[{0}] parameter [{1}] membocorkan informasi tentang apakah pengguna ada Perbedaan [dalam output] [1]], untuk nilai nama pengguna asli yang sah [{2}], dan nilai nama pengguna tidak valid [{3}] adalah\: [{4}]
ascanbeta.usernameenumeration.alert.attack=Memanipulasi bidang [{0}]\: [{1}] dan pantau hasilnya 

ascanbeta.paddingoracle.name=Generik Padding Oracle
ascanbeta.paddingoracle.desc=Dengan memanipulasi padding pada string yang dienkripsi, penyerang dapat menghasilkan pesan kesalahan yang mengindikasikan kemungkinan 'padding oracle' vulnerability. Kerentanan semacam itu dapat mempengaruhi aplikasi atau kerangka kerja yang menggunakan enkripsi secara tidak benar, seperti beberapa versi ASP.net, Java Server Faces, dan Mono. Penyerang dapat memanfaatkan masalah ini untuk mendekripsi data dan memulihkan kunci enkripsi, yang berpotensi melihat dan memodifikasi data rahasia. Plugin ini akan mendeteksi kerentanan oracle MS10-070 padding di ASP.net jika CustomErrors diaktifkan untuk itu.
ascanbeta.paddingoracle.soln=Perbarui perangkat lunak server yang terkena dampak, atau modifikasi skrip sehingga mereka benar memvalidasi data terenkripsi sebelum mencoba dekripsi.
ascanbeta.paddingoracle.refs=http\://netifera.com/research/ http\://www.microsoft.com/technet/security/bulletin/ms10-070.mspx http\://www.mono-project.com/Vulnerabilities\#ASP.NET_Padding_Oracle https\: //bugzilla.redhat.com/show_bug.cgi?id\=623799

ascanbeta.elinjection.name=Bahasa Ekspresi Injeksi
ascanbeta.elinjection.desc=Perangkat lunak ini mengkonstruksi semua atau sebagian pernyataan bahasa ekspresi (EL) di Halaman Server Java (JSP) dengan menggunakan input yang dipengaruhi secara eksternal dari komponen hulu, namun tidak menetralkan atau salah menetralisir elemen khusus yang dapat mengubah pernyataan EL yang diinginkan sebelumnya. itu dijalankan Pada versi tertentu dari Spring 3.0.5 dan sebelumnya, ada kerentanan (CVE-2011-2730) di mana tag Bahasa Ekspresi akan dievaluasi dua kali, yang secara efektif membuka aplikasi untuk injeksi EL. Namun, bahkan untuk versi yang lebih baru, kelemahan ini masih dimungkinkan tergantung konfigurasi.
ascanbeta.elinjection.soln=Lakukan validasi data praktik terbaik terhadap masukan yang tidak tepercaya dan untuk memastikan bahwa pengkodean keluaran diterapkan saat data masuk pada lapisan EL, sehingga tidak ada metacharacter yang ditemukan oleh penafsir dalam konten pengguna sebelum dievaluasi. Pola yang paling jelas untuk dideteksi mencakup $ {dan \# {, namun memungkinkan untuk mengkodekan atau memecah data ini.
ascanbeta.elinjection.refs=https\://www.owasp.org/index.php/Expression_Language_Injection http\://cwe.mitre.org/data/definitions/917.html

ascanbeta.xxeplugin.name=Entitas Eksternal Entitas Eksternal
ascanbeta.xxeplugin.nocallback=fungsi panggilan balik tidak tersedia

ascanbeta.xpathinjectionplugin.name=XPath Injection


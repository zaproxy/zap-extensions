ascanbeta.desc = Aturan Pindai Aktif - beta

ascanbeta.backupfiledisclosure.name = Pengungkapan Berkas Cadangan
ascanbeta.backupfiledisclosure.desc = Cadangan dari file itu diungkapkan oleh web server
ascanbeta.backupfiledisclosure.soln = Jangan mengedit file di-situ di web server, dan memastikan bahwa un-file yang diperlukan (termasuk file yang tersembunyi) akan dihapus dari server web.
ascanbeta.backupfiledisclosure.evidence = Cadangan [{0}] tersedia di [{1}]
ascanbeta.backupfiledisclosure.refs = https\://cwe.mitre.org/data/definitions/530.html\n\
https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.html

ascanbeta.cloudmetadata.name = Cloud Metadata Potentially Exposed
ascanbeta.cloudmetadata.desc = The Cloud Metadata Attack attempts to abuse a misconfigured NGINX server in order to access the instance metadata maintained by cloud service providers such as AWS, GCP and Azure.\n\
\n\
All of these providers provide metadata via an internal unroutable IP address '169.254.169.254' - this can be exposed by incorrectly configured NGINX servers and accessed by using this IP address in the Host header field.
ascanbeta.cloudmetadata.otherinfo = Based on the successful response status code cloud metadata may have been returned in the response. Check the response data to see if any cloud metadata has been returned.\n\
\n\
The meta data returned can include information that would allow an attacker to completely compromise the system.
ascanbeta.cloudmetadata.refs = https\://www.nginx.com/blog/trust-no-one-perils-of-trusting-user-input/
ascanbeta.cloudmetadata.soln = Do not trust any user data in NGINX configs. In this case it is probably the use of the $host variable which is set from the 'Host' header and can be controlled by an attacker.

ascanbeta.cookieslack.name = Cookie Slack Detector
ascanbeta.cookieslack.desc = Repeated GET requests\: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.
ascanbeta.cookieslack.otherinfo.intro = Cookies that don't have expected effects can reveal flaws in application logic. In the worst case, this can reveal where authentication via cookie token(s) is not actually enforced.\n\

ascanbeta.cookieslack.session.warning = NOTE\: Because of its name this cookie may be important, but dropping it appears to have no effect\: [{0}] \n\

ascanbeta.cookieslack.affect.response.yes = These cookies affected the response\: 
ascanbeta.cookieslack.affect.response.no = These cookies did NOT affect the response\: 
ascanbeta.cookieslack.session.destroyed = Dropping this cookie appears to have invalidated the session\: [{0}] A follow-on request with all original cookies still had a different response than the original request. \n\

ascanbeta.cookieslack.separator = ,
ascanbeta.cookieslack.endline = \n\


ascanbeta.crossdomain.name = Kesalahan konfigurasi lintas domain
#the refs cannot be customised for each sub-category (Adobe, Silverlight, etc.)
ascanbeta.crossdomain.refs = http\://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html http\://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf http\://msdn.microsoft.com/ en-US / library / cc197955% 28v\= vs.95% 29.aspx http\://msdn.microsoft.com/en-us/library/cc838250% 28v\= vs.95% 29.aspx
ascanbeta.crossdomain.adobe.read.name = Misconfiguration Lintas Domain-Adobe-Baca
ascanbeta.crossdomain.adobe.send.name = Mengkonfigurasi Lintas Domain - Adobe - Kirim
ascanbeta.crossdomain.adobe.desc = Pemecatan permintaan cross-site berbasis Flash / Silverlight dimungkinkan, karena kesalahan konfigurasi pada server web. 
ascanbeta.crossdomain.adobe.read.soln = Konfigurasikan file crossdomain.xml untuk membatasi daftar domain yang diizinkan membuat permintaan baca lintas domain ke server web ini, dengan menggunakan <allow-access-from domain \= "example.com">. Anda seharusnya hanya memberikan akses ke "*" (semua domain) jika Anda yakin bahwa layanan ini tidak menghosting data yang dikendalikan, dipersonalisasi, atau pribadi.
ascanbeta.crossdomain.adobe.read.extrainfo = Web server memungkinkan berbahaya cross-domain data membaca permintaan yang berasal dari Flash/Silverlight komponen disajikan dari pihak ketiga domain, untuk domain ini. Jika korban pengguna login ke layanan ini, berbahaya baca permintaan diproses menggunakan hak-hak korban, dan dapat mengakibatkan data dari layanan ini sedang dikompromikan oleh aplikasi pihak ketiga situs web, melalui web korban browser. Hal ini sangat mungkin menjadi masalah jika Cookie berdasarkan sesi pelaksanaan di gunakan. 
ascanbeta.crossdomain.adobe.send.soln = Konfigurasikan file crossdomain.xml untuk membatasi daftar domain yang diizinkan membuat permintaan lintas domain (namun tidak harus dibaca) ke server web ini, dengan menggunakan <allow-http-request-header-from domain \="example.com"header\="otorisasi, X-Blahh">. Anda seharusnya hanya memberikan akses ke "*" (semua domain) jika Anda yakin bahwa layanan ini tidak rentan terhadap serangan Cross Site Request Forgery (CSRF).
ascanbeta.crossdomain.adobe.send.extrainfo = Web server memungkinkan berbahaya cross-domain mengirim data (tetapi tidak harus baca) permintaan yang berasal dari Flash/Silverlight komponen disajikan dari pihak ketiga domain, untuk domain ini. Jika korban pengguna login ke layanan ini, berbahaya mengirim permintaan diproses menggunakan hak-hak korban, dan dapat mengakibatkan Cross Site Request Forgery (CSRF) jenis serangan, melalui korban browser web. Hal ini sangat mungkin menjadi masalah jika Cookie berdasarkan sesi pelaksanaan di gunakan.
ascanbeta.crossdomain.silverlight.name = Konfigurasi default Cross-Domain - Silverlight
ascanbeta.crossdomain.silverlight.desc = Pemecatan permintaan cross-site berbasis Silverlight dimungkinkan, karena kesalahan konfigurasi pada server web.
ascanbeta.crossdomain.silverlight.soln = Konfigurasikan file clientaccesspolicy.xml untuk membatasi daftar domain yang diizinkan membuat permintaan lintas-domain ke server web ini, dengan menggunakan <domain uri \= "https\://example.com"/>. Anda seharusnya hanya memberikan akses ke "*" (semua domain) jika Anda yakin bahwa layanan ini tidak menghosting data yang dikendalikan, dipersonalisasi, atau pribadi.
ascanbeta.crossdomain.silverlight.extrainfo = Web server memungkinkan berbahaya lintas-domain permintaan yang berasal dari Silverlight komponen disajikan dari pihak ketiga domain, untuk domain ini. Jika korban pengguna masuk ke layanan ini, berbahaya permintaan diproses menggunakan hak-hak korban, dan dapat mengakibatkan data dari layanan ini sedang dikompromikan oleh aplikasi pihak ketiga situs web, melalui web korban browser. Hal ini juga dapat mengakibatkan Cross Site Request Forgery (CSRF) jenis serangan. Hal ini sangat mungkin menjadi masalah jika Cookie berdasarkan sesi pelaksanaan di gunakan.

ascanbeta.csrftoken.name=Anti-CSRF Tokens Check
ascanbeta.csrftoken.extrainfo.annotation = Ini adalah informasi peringatan sebagai bentuk keamanan penjelasan yang menunjukkan bahwa hal itu tidak perlu Token anti-CSRF. Ini harus diuji manual untuk memastikan anotasi sudah benar.

ascanbeta.envfiles.name = .env Information Leak
ascanbeta.envfiles.desc = One or more .env files seems to have been located on the server. These files often expose infrastructure or administrative account credentials, API or APP keys, or other sensitive configuration information. 
ascanbeta.envfiles.otherinfo = Based on response status code the .env file may be protected by an authentication or authorization mechanism.
ascanbeta.envfiles.refs = https\://www.google.com/search?q\=db_password+filetype%3Aenv\n\
https\://mobile.twitter.com/svblxyz/status/1045013939904532482
ascanbeta.envfiles.soln = Ensure the .env file is not accessible.

ascanbeta.getforpost.name=GET for POST
ascanbeta.getforpost.desc=A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to Cross-Site Scripting (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible.
ascanbeta.getforpost.soln=Ensure that only POST is accepted where POST is expected.

ascanbeta.heartbleed.name=Kerentanan OpenSSL yang Heartbleed
ascanbeta.heartbleed.desc=Implementasi TLS di OpenSSL 1.0.1 sebelum 1.0.1g tidak menangani paket Ekstensi Heartbeat dengan benar, yang memungkinkan penyerang jarak jauh mendapatkan informasi sensitif dari memori proses melalui paket buatan yang memicu buffer over-read, yang berpotensi mengungkapkan informasi sensitif.
ascanbeta.heartbleed.soln=Update ke OpenSSL 1.0.1g atau yang lebih baru. Re-issue sertifikat HTTPS. Ubah kunci privat asimetris dan kunci rahasia bersama, karena ini mungkin telah disusupi, tanpa bukti kompromi dalam file log server.
ascanbeta.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
ascanbeta.heartbleed.extrainfo=This issue was confirmed by exfiltrating data from the server, using {0}. This is unlikely to be a false positive.

ascanbeta.hidden.files.name = Hidden File Finder
ascanbeta.hidden.files.alert.name = Hidden File Found
ascanbeta.hidden.files.desc = A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.
ascanbeta.hidden.files.otherinfo = {0}
ascanbeta.hidden.files.refs = https\://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html
ascanbeta.hidden.files.soln = Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.

ascanbeta.HTTPParamPoll.name = Parameter Polusi HTTP
ascanbeta.HTTPParamPoll.desc = Serangan Parameter Polusi HTTP (HPP) terdiri dari penyisipan string kuadrat yang disandikan ke parameter lain yang ada. Jika aplikasi web tidak membersihkan masukan pengguna dengan benar, pengguna jahat dapat mengkompromikan logika aplikasi untuk melakukan serangan sisi klien atau server-side. Salah satu konsekuensi dari serangan HPP adalah bahwa penyerang berpotensi mengesampingkan parameter HTTP kode keras yang ada untuk memodifikasi perilaku aplikasi, melewati titik validasi masukan, dan mengakses dan mungkin memanfaatkan variabel yang mungkin tidak terjangkau secara langsung.
ascanbeta.HTTPParamPoll.sol =  Sebaiknya bersihkan masukan pengguna untuk pembatas parameter
ascanbeta.HTTPParamPoll.alert.attack = Parameter Polusi HTTP
ascanbeta.HTTPParamPoll.extrainfo = http\://www.google.com/search?q\=http+parameter+pollution

ascanbeta.httponlysite.name = HTTP Only Site
ascanbeta.httponlysite.desc = The site is only served under HTTP and not HTTPS.
ascanbeta.httponlysite.soln = Configure your web or application server to use SSL (https).
ascanbeta.httponlysite.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\n\
https\://letsencrypt.org/
ascanbeta.httponlysite.otherinfo = {0}\n\
ZAP attempted to connect via\: {1}
ascanbeta.httponlysite.otherinfo.connectionfail = Failed to connect.
ascanbeta.httponlysite.otherinfo.differenthosts = Different Hosts.
ascanbeta.httponlysite.otherinfo.redirectionlimit = Redirection limit reached.
ascanbeta.httponlysite.otherinfo.noredirection = There was no automatic redirection.
ascanbeta.httponlysite.otherinfo.nossl = Site has no SSL/TLS support.
ascanbeta.httponlysite.otherinfo.redirecttohttp = Redirected to HTTP.
ascanbeta.httponlysite.otherinfo.urinotencoded = Redirection URI couldn't be encoded.

ascanbeta.httpoxy.name = Httpoxy - Proxy Header Misuse
ascanbeta.httpoxy.desc = The server initiated a proxied request via the proxy specified in the HTTP Proxy header of the request.\n\
Httpoxy typically affects code running in CGI or CGI like environments.\n\
\n\
This may allow attackers to\:\n\
\n\
* Proxy the outgoing HTTP requests made by the web application\n\
\n\
* Direct the server to open outgoing connections to an address and port of their choosing or\n\
\n\
* Tie up server resources by forcing the vulnerable software to use a malicious proxy
ascanbeta.httpoxy.otherinfo = An outgoing message to {0} was proxied via the host and port that ZAP injected into the HTTP Proxy header.
ascanbeta.httpoxy.soln = The best immediate mitigation is to block Proxy request headers as early as possible, and before they hit your application.
ascanbeta.httpoxy.refs = https\://httpoxy.org/

ascanbeta.httpsashttp.name = HTTPS Content Available via HTTP
ascanbeta.httpsashttp.desc = Content which was initially accessed via HTTPS (i.e.\: using SSL/TLS encryption) is also accessible via HTTP (without encryption). 
ascanbeta.httpsashttp.soln = Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.
ascanbeta.httpsashttp.refs = https\://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\n\
https\://owasp.org/www-community/Security_Headers\n\
http\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\n\
http\://caniuse.com/stricttransportsecurity\n\
http\://tools.ietf.org/html/rfc6797
ascanbeta.httpsashttp.otherinfo=ZAP attempted to connect via\: {0}

ascanbeta.insecurehttpmethod.name = Metode HTTP yang Tidak Aman
ascanbeta.insecurehttpmethod.detailed.name = Metode HTTP yang Tidak Aman - {0}
ascanbeta.insecurehttpmethod.potentiallyinsecure = response code {0} for potentially insecure HTTP METHOD
ascanbeta.insecurehttpmethod.insecure = response code {0} for insecure HTTP METHOD
ascanbeta.insecurehttpmethod.desc = Metode HTTP yang tidak aman [{0}] diaktifkan pada server web untuk sumber ini. Bergantung pada konfigurasi server web, dan penerapan mendasar yang bertanggung jawab untuk melayani sumber daya, ini mungkin atau mungkin tidak dapat dieksploitasi. Metode TRACK dan TRACE dapat digunakan oleh penyerang, untuk mendapatkan akses ke kuota otorisasi / cookie sesi dari pengguna aplikasi, meskipun cookie sesi dilindungi menggunakan bendera ''HttpOnly''. Agar serangan berhasil, pengguna aplikasi biasanya harus menggunakan browser web lawas, atau browser web yang memiliki kerentanan bypass Same Origin Policy (SOP). Metode ''CONNECT'' dapat digunakan oleh klien web untuk membuat terowongan HTTP ke situs web atau layanan pihak ketiga.
ascanbeta.insecurehttpmethod.trace.exploitable.desc = Metode HTTP yang tidak aman [{0}] diaktifkan untuk sumber ini, dan dapat dieksploitasi. Metode TRACK dan TRACE dapat digunakan oleh penyerang, untuk mendapatkan akses ke kuota otorisasi / cookie sesi dari pengguna aplikasi, meskipun cookie sesi dilindungi menggunakan bendera ''HttpOnly''. Agar serangan berhasil, pengguna aplikasi biasanya harus menggunakan browser web lawas, atau browser web yang memiliki kerentanan bypass Same Origin Policy (SOP).
ascanbeta.insecurehttpmethod.trace.exploitable.extrainfo = Permintaan TRACE dikirim untuk permintaan ini, dengan nilai kuki ubahsuaian [{0}]. Nilai cookie ini diungkapkan dalam respon HTTP, yang mengkonfirmasikan kerentanan tersebut.
ascanbeta.insecurehttpmethod.connect.exploitable.desc = Metode HTTP yang tidak aman [{0}] diaktifkan untuk sumber ini, dan dapat dieksploitasi. Ditemukan kemungkinan membuat sambungan soket terowongan ke layanan pihak ketiga, dengan menggunakan metode HTTP ini. Ini akan memungkinkan layanan tersebut digunakan sebagai relay spam anonim, atau sebagai proxy web, yang melewati batasan jaringan. Ini juga memungkinkannya digunakan untuk membuat VPN terowongan, yang secara efektif memperluas perimeter jaringan untuk menyertakan komponen yang tidak tepercaya. 
ascanbeta.insecurehttpmethod.extrainfo = Metode OPTIONS mengungkapkan metode HTTP berikut yang memungkinkan untuk sumber ini\: [{0}]
ascanbeta.insecurehttpmethod.connect.exploitable.extrainfo = The CONNECT method was used to establish a socket connection to [{0}], via the web server.
ascanbeta.insecurehttpmethod.soln = Nonaktifkan metode tidak aman seperti TRACK, TRACE, dan CONNECT pada server web, dan pastikan bahwa implementasi layanan yang mendasarinya tidak mendukung metode yang tidak aman.
ascanbeta.insecurehttpmethod.delete.exploitable.desc = This method is most commonly used in REST services, It is used to delete a resource.
ascanbeta.insecurehttpmethod.delete.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see http\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.options.exploitable.desc = This is a diagnostic method and should never be turned on in production mode.
ascanbeta.insecurehttpmethod.options.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods
ascanbeta.insecurehttpmethod.put.exploitable.desc = This method was originally intended for file managemant operations. It is now most commonly used in REST services, PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource..
ascanbeta.insecurehttpmethod.put.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see http\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.patch.exploitable.desc = This method is now most commonly used in REST services, PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource.
ascanbeta.insecurehttpmethod.patch.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see http\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.webdav.exploitable.desc = This HTTP method is a WEBDAV method\: {0}. If this server is not offering any WEBDAV services, these methods should not be available.
ascanbeta.insecurehttpmethod.webdav.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods


ascanbeta.integeroverflow.name = Kesalahan Overeger Overflow
ascanbeta.integeroverflow.desc = Kondisi overflow integer ada saat sebuah integer, yang belum diperiksa dengan benar dari input stream digunakan dalam program yang dikompilasi. 
ascanbeta.integeroverflow.soln = Menulis latar belakang program menggunakan tepat memeriksa ukuran bilangan bulat menjadi input untuk mencegah meluap dan membagi dengan 0 kesalahan. Ini akan memerlukan kompilasi ulang dari latar belakang eksekusi.
ascanbeta.integeroverflow.refs = http\://projects.webappsec.org/w/page/13246946/Integer%20Overflows
ascanbeta.integeroverflow.error1 = Potensi Integer Overflow. Kode status berubah pada input string panjang bilangan bulat acak.
ascanbeta.integeroverflow.error2 = Potensi Integer Overflow. Kode status berubah pada input string panjang angka nol.
ascanbeta.integeroverflow.error3 = Potensi Integer Overflow. Kode status berubah pada input string panjang yang ada.
ascanbeta.integeroverflow.error4 = Potensi Integer Overflow. Kode status berubah pada input string panjang sembilan tahun.

ascanbeta.noanticsrftokens.name=Tidak adanya Token Anti-CSRF
ascanbeta.noanticsrftokens.desc=Tidak ada bukti Anti-CSRF yang ditemukan dalam formulir pengiriman HTML.

ascanbeta.payloader.desc=Provides support for custom payloads in scan rules.
ascanbeta.payloader.name=Active Scan Rules Beta Custom Payloads

ascanbeta.proxydisclosure.name=Proxy Disclosure
ascanbeta.proxydisclosure.desc={0} proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n\
 - A list of targets for an attack against the application.\n\
 - Potential vulnerabilities on the proxy servers that service the application.\n\
 - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. 
ascanbeta.proxydisclosure.soln=Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\n\
Disable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\n\
Configure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\n\
Configure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n\

ascanbeta.proxydisclosure.refs=https\://tools.ietf.org/html/rfc7231\#section-5.1.2
ascanbeta.proxydisclosure.attack=TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.
ascanbeta.proxydisclosure.extrainfo.unknown=Tidak diketahui
ascanbeta.proxydisclosure.extrainfo.proxyserver.header=Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between OWASP ZAP and the application/web server\: 
ascanbeta.proxydisclosure.extrainfo.proxyserver= - {0}
ascanbeta.proxydisclosure.extrainfo.webserver.header=The following web/application server has been identified\: 
ascanbeta.proxydisclosure.extrainfo.webserver= - {0}
ascanbeta.proxydisclosure.extrainfo.silentproxyserver.header=The following 'silent' proxy servers were identified. Due to their behaviour, it is not known at which point in the network topology these proxy servers reside\:
ascanbeta.proxydisclosure.extrainfo.silentproxyserver= - {0}
ascanbeta.proxydisclosure.extrainfo.traceenabled=The 'TRACE' method is enabled on one or more of the proxy servers, or on the origin server. This method leaks all information submitted from the web browser and proxies back to the user agent. This may facilitate 'Cross Site Tracing' attacks. 

ascanbeta.relativepathconfusion.name=Relative Path Confusion
ascanbeta.relativepathconfusion.desc=The web server is configured to serve responses to ambiguous URLs in a manner that is likely to lead to confusion about the correct "relative path" for the URL. Resources (CSS, images, etc.) are also specified in the page response using relative, rather than absolute URLs. In an attack, if the web browser parses the "cross-content" response in a permissive manner, or can be tricked into permissively parsing the "cross-content" response, using techniques such as framing, then the web browser may be fooled into interpreting HTML as CSS (or other content types), leading to an XSS vulnerability.
ascanbeta.relativepathconfusion.soln=Web servers and frameworks should be updated to be configured to not serve responses to ambiguous URLs in such a way that the relative path of such URLs could be mis-interpreted by components on either the client side, or server side.\n\
Within the application, the correct use of the "<base>" HTML tag in the HTTP response will unambiguously specify the base URL for all relative URLs in the document.\n\
Use the "Content-Type" HTTP response header to make it harder for the attacker to force the web browser to mis-interpret the content type of the response.\n\
Use the "X-Content-Type-Options\: nosniff" HTTP response header to prevent the web browser from "sniffing" the content type of the response.\n\
Use a modern DOCTYPE such as "<\!doctype html>" to prevent the page from being rendered in the web browser using "Quirks Mode", since this results in the content type being ignored by the web browser.\n\
Specify the "X-Frame-Options" HTTP response header to prevent Quirks Mode from being enabled in the web browser using framing attacks. 
ascanbeta.relativepathconfusion.refs=http\://www.thespanner.co.uk/2014/03/21/rpo/\n\
https\://hsivonen.fi/doctype/\n\
http\://www.w3schools.com/tags/tag_base.asp
ascanbeta.relativepathconfusion.extrainfo.morethanonebasetag=More than one <base> tag was specified in the HTML <head> tag to define the location for relative URLs, which is not valid.
ascanbeta.relativepathconfusion.extrainfo.nobasetag=No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.
ascanbeta.relativepathconfusion.extrainfo.contenttypeenabled=A Content Type of "{0}" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledexplicitly=Quirks Mode is explicitly enabled via <meta http-equiv\="{0}", allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitly=Quirks Mode is implicitly enabled via the use of an old DOCTYPE with PUBLIC id "{0}", allowing the specified Content Type to be bypassed in some web browsers.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitlynodoctype=Quirks Mode is implicitly enabled via the absence of a DOCTYPE, allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.extrainfo.nocontenttype=No Content Type was specified, so Quirks Mode is not required to exploit the vulnerability in the web browser. 
ascanbeta.relativepathconfusion.extrainfo.framingallowed=No X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed.

ascanbeta.remotecodeexecution.cve-2012-1823.name = Eksekusi Kode Jarak Jauh - CVE-2012-1823
ascanbeta.remotecodeexecution.cve-2012-1823.desc = Beberapa versi PHP, ketika dikonfigurasi untuk berjalan menggunakan CGI, tidak benar menangani pertanyaan string yang kurang tidak dapat lolos "\=" karakter, yang memungkinkan eksekusi kode sewenang-wenang. Dalam kasus ini, sebuah sistem operasi perintah disebabkan akan dieksekusi di web server, dan hasilnya dikembalikan ke browser web. 
ascanbeta.remotecodeexecution.cve-2012-1823.soln = Upgrade ke versi stabil terbaru dari PHP, atau menggunakan Apache web server dan modul mod_rewrite untuk menyaring berbahaya permintaan menggunakan arahan "RewriteCond" dan "RewriteRule".

ascanbeta.sessionfixation.name=Fiksasi Sesi
ascanbeta.sessionfixation.desc=Sesi Fiksasi mungkin dilakukan. Jika masalah ini terjadi dengan URL login (di mana pengguna mengotentikasi diri mereka sendiri untuk aplikasi), maka URL yang dapat diberikan oleh seorang penyerang, selain tetap session id, untuk korban, untuk kemudian mengasumsikan identitas korban menggunakan diberikan session id. Jika terjadi masalah dengan non-halaman login, URL dan tetap session id hanya dapat digunakan oleh penyerang untuk melacak aplikasi yang tidak berkepentingan tindakan pengguna. Jika terjadi kerentanan pada cookie bidang atau bentuk lapangan (POSTING parameter) bukan pada URL (GET) parameter, maka beberapa kerentanan juga mungkin diperlukan dalam rangka untuk mengatur cookie lapangan pada browser korban, untuk memungkinkan kerentanan yang dapat dimanfaatkan.
ascanbeta.sessionfixation.soln=1) Mencegah penyerang dari mendapatkan session id dengan menegakkan ketat id sesi, dan dengan hanya mengalokasikan id sesi setelah autentikasi berhasil untuk aplikasi.\n\
2) server harus selalu membuat id sesi baru setelah otentikasi, terlepas dari apakah session sudah di tempat.\n\
3) Mengikat session id untuk beberapa identificable klien atribut kombinasi, seperti alamat IP, SSL sertifikat klien.\n\
4) Sesi, ketika hancur, harus dihancurkan pada server, serta pada klien.\n\
5) Melaksanakan logout mekanisme yang akan menghancurkan semua sesi sebelumnya untuk klien.\n\
6) Melaksanakan mutlak sesi waktu habis.\n\
7)Beralih dari URL berbasis cookie atau bentuk berdasarkan session id pelaksanaan, sebagai yang terakhir biasanya memerlukan tambahan kerentanan, dalam rangka untuk bisa dieksploitasi oleh penyerang\n\

ascanbeta.sessionfixation.refs=https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication\n\
https\://owasp.org/www-community/attacks/Session_fixation\n\
http\://www.acros.si/papers/session_fixation.pdf\n\
http\://www.technicalinfo.net/papers/WebBasedSessionManagement.html
ascanbeta.sessionfixation.alert.cookie.extrainfo=Cookie ditetapkan sebagai tanggapan saat bidang cookie [{0}] disetel ke NULL\: [{1}] Cookie ditetapkan sebagai tanggapan dengan nilai cookie yang dipinjam (berlaku) sesuai permintaan [{1}]\: [{2}]
ascanbeta.sessionfixation.alert.cookie.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.\n\
\n\
This issue should be manually validated by checking that the session token set on the logon page is still valid once logged in, and that the token can be used to directly access a page/resource which should require the user to be logged in.
ascanbeta.sessionfixation.alert.url.extrainfo=A likely session value has appeared in URLs in the HTML output when URL parameter/pseudo URL parameter [{0}] is set to NULL\: [{1}]\n\
When this ''borrowed'' session [{1}] is used in a subsequent request for this URL, a new session is not created.
ascanbeta.sessionfixation.alert.url.extrainfo.loginpage=Url di mana masalah itu ditemukan ditandai sebagai halaman log masuk.
ascanbeta.sessionfixation.alert.attack=Bidang {0}\:[{1}]
#Exposed Session Id messages
ascanbeta.sessionidexposedinurl.name=ID sesi terpapar
ascanbeta.sessionidexposedinurl.desc=Sebuah session id yang terkena dalam URL. Dengan berbagi seperti URL situs web (yang berisi session id), naiive pengguna mungkin secara tidak sengaja memberikan akses ke data mereka, mengorbankan kerahasiaan, integritas, dan ketersediaan. Url yang berisi session identifier juga muncul di web browser bookmark, file log web server, dan proxy server log file. 
ascanbeta.sessionidexposedinurl.soln=Penggunaan yang lebih aman sesi implementasi manajemen, seperti salah satu yang menggunakan cookie sesi, yang tidak mudah bersama secara tidak sengaja, dan yang tidak biasanya muncul dalam file log server atau web browser bookmark.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexposedinurl.refs=https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidexposedinurl.alert.extrainfo={0} bidang [{1}] berisi pengenal sesi terpapar [{2}]
ascanbeta.sessionidexposedinurl.alert.extrainfo.loginpage=Url di mana masalah itu ditemukan ditandai sebagai halaman log masuk.
ascanbeta.sessionidexposedinurl.alert.attack=Bidang {0}\:[{1}]
#Session Id Cookie not sent securely
ascanbeta.sessionidsentinsecurely.name=ID sesi ditransmisikan dengan tidak aman
ascanbeta.sessionidsentinsecurely.desc=Session id dapat dikirim melalui mekanisme yang tidak aman. Dalam kasus cookie yang dikirim dalam permintaan, hal ini terjadi ketika HTTP, bukan HTTPS, digunakan. Dalam kasus cookie yang dikirim oleh server di respon (ketika URL dimodifikasi dengan menetapkan parameter bernama lapangan untuk NULL), 'aman' bendera tidak diatur, yang memungkinkan cookie akan dikirim kemudian melalui HTTP daripada melalui HTTPS. Hal ini dapat memungkinkan pasif lubang kebocoran pada jaringan jalan untuk mendapatkan akses penuh ke sesi korban.  
ascanbeta.sessionidsentinsecurely.soln=1) Menggunakan versi terbaru yang tersedia dari SSL/TLS (HTTPS) untuk semua halaman di mana session id dikomunikasikan antara browser dan web server.\n\
2) tidak memungkinkan komunikasi dipaksa turun ke protokol HTTP tidak terenkripsi.\n\
3) Menggunakan 'aman' bendera ketika pengaturan cookie yang berisi session id, untuk mencegah transmisi berikutnya dengan mekanisme yang tidak aman.\n\
4) Teruskan non-secure HTTP halaman permintaan untuk secure HTTPS setara halaman.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidsentinsecurely.refs=https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidsentinsecurely.alert.extrainfo=session identifier {0} field [{1}], nilai [{2}] dapat dikirim melalui mekanisme yang tidak aman.  
ascanbeta.sessionidsentinsecurely.alert.extrainfo.secureflagnotset=Flag 'aman' tidak disetel pada cookie sesi yang disediakan oleh server.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.loginpage=Url di mana masalah itu ditemukan ditandai sebagai halaman log masuk.
ascanbeta.sessionidsentinsecurely.alert.attack=Bidang {0}\:[{1}]
#Session Id Cookie accessible by JavaScript
ascanbeta.sessionidaccessiblebyjavascript.name=Kuki Sesi ID yang Dapat Diakses ke JavaScript
ascanbeta.sessionidaccessiblebyjavascript.desc=Kuki Id sesi yang dikirim oleh server (bila URL dimodifikasi dengan menyetel bidang parameter yang dinamai ke NULL) dapat diakses oleh JavaScript di server. Sehubungan dengan kerentanan lain, ini memungkinkan sesi dibajak.  
ascanbeta.sessionidaccessiblebyjavascript.soln=1) Gunakan bendera 'httponly' saat menyetel cookie yang berisi id sesi, untuk mencegahnya diakses oleh JavaScript di browser web.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidaccessiblebyjavascript.refs=
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo=session identifier {0} field [{1}], nilai [{2}] dapat diakses menggunakan JavaScript di browser web{1}
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo.loginpage=Url di mana masalah itu ditemukan ditandai sebagai halaman log masuk.
ascanbeta.sessionidaccessiblebyjavascript.alert.attack=Bidang {0}\:[{1}]
#Session Id Cookie Expiry
ascanbeta.sessionidexpiry.name=Sesi ID kadaluwarsa Sisa / Max-Age itu Berlebihan
ascanbeta.sessionidexpiry.desc=Kuki Id sesi yang dikirim oleh server (bila URL diubah dengan menyetel bidang parameter bernama ke NULL) ditetapkan berlaku untuk jangka waktu yang berlebih. Ini mungkin dapat dimanfaatkan oleh penyerang jika pengguna lupa log out, jika fungsionalitas logout tidak menghancurkan sesi dengan benar, atau jika id sesi dikompromikan dengan beberapa cara lain.     
ascanbeta.sessionidexpiry.soln=1) Gunakan perintah kado 'Kadaluarsa' atau 'Max-Age' saat menyetel kue yang berisi id sesi, agar tidak tersedia dalam jangka waktu lama. 2) Pastikan bahwa fungsi logout ada, dan itu benar menghancurkan sesi. 3) Gunakan tindakan pencegahan lainnya untuk memastikan bahwa jika id sesi disusupi, hal itu mungkin tidak dieksploitasi.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexpiry.refs=
ascanbeta.sessionidexpiry.alert.extrainfo=session identifier {0} field [{1}], nilai [{2}] dapat diakses sampai [{3}] (karena cookie diterima pada {4}), kecuali jika sesi tersebut dimusnahkan.
ascanbeta.sessionidexpiry.alert.extrainfo.loginpage=Url di mana masalah itu ditemukan ditandai sebagai halaman log masuk.
ascanbeta.sessionidexpiry.alert.attack=Bidang {0}\:[{1}]
ascanbeta.sessionidexpiry.browserclose=browser tutup
ascanbeta.sessionidexpiry.timemorethanoneweek=Lebih dari satu minggu
ascanbeta.sessionidexpiry.timemorethanoneday=Lebih dari satu hari
ascanbeta.sessionidexpiry.timemorethanonehour=Lebih dari satu jam
ascanbeta.sessionidexpiry.timelessthanonehour=Kurang dari satu jam
ascanbeta.sessionidexpiry.timeexpired=Kadaluarsa

ascanbeta.shellshock.name = Eksekusi Kode Jarak Jauh - Shell Shock
ascanbeta.shellshock.desc = Server menjalankan versi shell Bash yang memungkinkan penyerang jarak jauh mengeksekusi kode yang sewenang-wenang 
ascanbeta.shellshock.extrainfo = Dari CVE-2014-6271\: GNU Bash melalui 4.3 proses mengikuti string setelah definisi fungsi dalam nilai variabel lingkungan, yang memungkinkan penyerang jarak jauh mengeksekusi kode acak melalui lingkungan yang dibuat, seperti yang ditunjukkan oleh vektor yang melibatkan fitur ForceCommand di sshd OpenSSH, modul mod_cgi dan mod_cgid di Apache HTTP Server, skrip yang dijalankan oleh klien DHCP yang tidak ditentukan, dan situasi lain di mana pengaturan lingkungan terjadi di batas hak istimewa dari eksekusi Bash, alias "ShellShock." CATATAN\: perbaikan asli untuk masalah ini salah; CVE-2014-7169 telah ditugaskan untuk menutupi kerentanan yang masih ada setelah perbaikan yang tidak benar.
ascanbeta.shellshock.soln = Perbarui Bash di server ke versi terbaru
ascanbeta.shellshock.ref = http\://web.nvd.nist.gov/view/vuln/detail?vulnId\=CVE-2014-6271\n\
http\://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html
ascanbeta.shellshock.timingbased.evidence = Menggunakan serangan, penundaan [{0}] milidetik diinduksi dan terdeteksi

ascanbeta.sourcecodedisclosure.desc = Kode sumber untuk halaman ini telah diungkapkan oleh server web
ascanbeta.sourcecodedisclosure.lfibased.name = Source Code Disclosure - File Inclusion
ascanbeta.sourcecodedisclosure.lfibased.soln = Ensure that arbitrary files specified by the user are not included in the output
ascanbeta.sourcecodedisclosure.lfibased.extrainfo = The output for the source code filename [{0}] differs sufficiently from that of the random parameter [{1}], at [{2}%], compared to a threshold of [{3}%]
ascanbeta.sourcecodedisclosure.lfibased.evidence=

ascanbeta.sourcecodedisclosure.gitbased.name = Source Code Disclosure - Git 
ascanbeta.sourcecodedisclosure.gitbased.soln = Ensure that Git metadata files are not deployed to the web server or application server
ascanbeta.sourcecodedisclosure.gitbased.extrainfo=
ascanbeta.sourcecodedisclosure.gitbased.evidence = The source code for [{0}] was extracted using [{1}]

ascanbeta.sqlinjection.mysql.name=SQL Injection - MySQL
ascanbeta.sqlinjection.hypersonic.name=SQL Injection - Hypersonic SQL
ascanbeta.sqlinjection.oracle.name=SQL Injection - Oracle
ascanbeta.sqlinjection.postgres.name=SQL Injection - PostgreSQL
ascanbeta.sqlinjection.desc=Injeksi SQL bisa dilakukan
ascanbeta.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place. \n\
In general, type check all data on the server side.\n\
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\n\
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\n\
If database Stored Procedures can be used, use them.\n\
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\n\
Do not create dynamic SQL queries using simple string concatenation.\n\
Escape all data received from the client.\n\
Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\n\
Apply the privilege of least privilege by using the least privileged database user possible.\n\
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\n\
Grant the minimum database access that is necessary for the application.
ascanbeta.sqlinjection.refs=https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
#ascanbeta.sqlinjection.alert.errorbased.attack={1}
ascanbeta.sqlinjection.alert.errorbased.differentiation.attack=Nilai Asli\: [{0}]. Nilai yang Diubah\: [{1}]. Nilai Kontrol\: [{2}]
ascanbeta.sqlinjection.alert.booleanbased.attack=bidang\: [{0}], nilai [{1}]
ascanbeta.sqlinjection.alert.unionbased.attack=[{0}]\: [{1}], nilai [{2}]
ascanbeta.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] kemungkinan terjadi, mengingat fragmen pesan kesalahan [{1}] dalam hasil HTML
ascanbeta.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] kemungkinan terjadi, mengingat fragmen pesan khusus UNION [{1}] dalam hasil HTML
ascanbeta.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Pesan yang tidak dimodifikasi memberikan status HTTP [{0}], pesan yang dimodifikasi memberikan status HTTP [{1}]
ascanbeta.sqlinjection.alert.errorbased.differentiation.extrainfo=Unmodified message gave HTTP status [{0}], body of length [{1}], modified message gave HTTP status [{2}], body of length [{3}]. A third (non-SQL injection inducing value) gave HTTP status [{4}], body of length [{5}]
ascanbeta.sqlinjection.alert.booleanbased.extrainfo=Hasil halaman berhasil dimanipulasi dengan menggunakan kondisi boolean [{0}] dan [{1}]
ascanbeta.sqlinjection.alert.timebased.extrainfo=Waktu kueri dapat dikontrol dengan menggunakan nilai parameter [{0}], yang menyebabkan permintaan untuk mengambil [{1}] milidetik, bila kueri asli yang tidak dimodifikasi dengan nilai [{2}] mengambil [{3}] milidetik 

ascanbeta.sqlinjection.mssql.name=SQL Injection - MsSQL
ascanbeta.sqlinjection.mssql.desc=Injeksi SQL bisa dilakukan
ascanbeta.sqlinjection.mssql.soln=Do not trust client side input, even if there is client side validation in place. \n\
In general, type check all data on the server side.\n\
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\n\
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\n\
If database Stored Procedures can be used, use them.\n\
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\n\
Do not create dynamic SQL queries using simple string concatenation.\n\
Escape all data received from the client.\n\
Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\n\
Apply the privilege of least privilege by using the least privileged database user possible.\n\
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\n\
Grant the minimum database access that is necessary for the application.
ascanbeta.sqlinjection.mssql.refs=https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
ascanbeta.sqlinjection.mssql.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds.

ascanbeta.sqlinjection.sqlite.name=SQL Injection - SQLite
ascanbeta.sqlinjection.sqlite.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, parameter value [{2}], which caused the request to take [{3}] milliseconds, when the original unmodified query with value [{4}] took [{5}] milliseconds.
ascanbeta.sqlinjection.sqlite.alert.errorbased.extrainfo=The following known SQLite error message was provoked\: [{0}].
ascanbeta.sqlinjection.sqlite.alert.versionnumber.extrainfo=Using a UNION based SQL Injection attack, and by exploiting SQLite''s dynamic typing mechanism, the SQLite version was determined to be [{0}].\n\
With string-based injection points, full SQLite version information can be extracted, but with numeric injection points, only partial SQLite version information can be extracted.\n\
More information on SQLite version [{0}] is available at http\://www.sqlite.org/changes.html

ascanbeta.useragent.name=User Agent Fuzzer
ascanbeta.useragent.desc=Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.
ascanbeta.useragent.refs=https\://owasp.org/wstg
ascanbeta.useragent.useragentparmname=Header User-Agent

ascanbeta.traceaxd.name = Trace.axd Information Leak
ascanbeta.traceaxd.desc = The ASP.NET Trace Viewer (trace.axd) was found to be available. This component can leak a significant amount of valuable information.
ascanbeta.traceaxd.otherinfo = Based on response status code Trace Viewer may be protected by an authentication or authorization mechanism.  
ascanbeta.traceaxd.refs = https\://msdn.microsoft.com/en-us/library/bb386420.aspx\n\
https\://msdn.microsoft.com/en-us/library/wwh16c6c.aspx\n\
https\://www.dotnetperls.com/trace
ascanbeta.traceaxd.soln = Consider whether or not Trace Viewer is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization.


ascanbeta.sourcecodedisclosurecve-2012-1823.name = Pengungkapan Kode Sumber - CVE-2012-1823
ascanbeta.sourcecodedisclosurecve-2012-1823.desc = Beberapa versi PHP, ketika dikonfigurasi untuk dijalankan menggunakan CGI, jangan menangani string kueri dengan benar yang tidak memiliki karakter "\=" yang tidak digerakkan, yang memungkinkan pengungkapan kode sumber PHP, dan eksekusi kode sewenang-wenang. Dalam hal ini, isi file PHP tersebut langsung ditayangkan ke web browser. Output ini biasanya berisi PHP, meskipun mungkin juga berisi HTML langsung.
ascanbeta.sourcecodedisclosurecve-2012-1823.soln = Upgrade ke versi stabil terbaru dari PHP, atau menggunakan Apache web server dan modul mod_rewrite untuk menyaring berbahaya permintaan menggunakan arahan "RewriteCond" dan "RewriteRule".

ascanbeta.sourcecodedisclosure.svnbased.name = Pengungkapan Kode Sumber - SVN
ascanbeta.sourcecodedisclosure.svnbased.soln = Pastikan file metadata SVN tidak dikirim ke server web atau server aplikasi
ascanbeta.sourcecodedisclosure.svnbased.extrainfo = Kode sumber untuk [{0}] ditemukan di [{1}]

ascanbeta.usernameenumeration.name=Kemungkinan Username Enumeration
ascanbeta.usernameenumeration.desc=Ada kemungkinan untuk menghitung nama pengguna, berdasarkan tanggapan HTTP yang berbeda saat nama pengguna yang valid dan tidak valid disediakan. Hal ini akan sangat meningkatkan kemungkinan keberhasilan serangan brute force secara paksa terhadap sistem. Perhatikan bahwa false positive terkadang diminimalkan dengan meningkatkan 'Attack Strength' Option di ZAP. Harap periksa bidang 'Info Lainnya' secara manual untuk mengonfirmasi apakah ini benar-benar menjadi masalah. 
ascanbeta.usernameenumeration.soln=Jangan membocorkan rincian apakah nama pengguna sah atau tidak benar. Secara khusus, untuk upaya login yang tidak berhasil, jangan membedakan antara pengguna yang tidak benar dan kata sandi yang tidak benar dalam pesan kesalahan, judul halaman, isi halaman, header HTTP, atau logika redirection.
ascanbeta.usernameenumeration.refs=https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account.html\n\
http\://sebastian-schinzel.de/_download/ifip-sec2011.pdf
ascanbeta.usernameenumeration.alert.extrainfo=[{0}] parameter [{1}] membocorkan informasi tentang apakah pengguna ada Perbedaan [dalam output] [1]], untuk nilai nama pengguna asli yang sah [{2}], dan nilai nama pengguna tidak valid [{3}] adalah\: [{4}]
ascanbeta.usernameenumeration.alert.attack=Memanipulasi bidang [{0}]\: [{1}] dan pantau hasilnya 

ascanbeta.paddingoracle.name=Generik Padding Oracle
ascanbeta.paddingoracle.desc=By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely 'padding oracle' vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This rule should detect the MS10-070 padding oracle vulnerability in ASP.net if CustomErrors are enabled for that.
ascanbeta.paddingoracle.soln=Perbarui perangkat lunak server yang terkena dampak, atau modifikasi skrip sehingga mereka benar memvalidasi data terenkripsi sebelum mencoba dekripsi.
ascanbeta.paddingoracle.refs=http\://netifera.com/research/ http\://www.microsoft.com/technet/security/bulletin/ms10-070.mspx http\://www.mono-project.com/Vulnerabilities\#ASP.NET_Padding_Oracle https\: //bugzilla.redhat.com/show_bug.cgi?id\=623799

ascanbeta.elinjection.name = Bahasa Ekspresi Injeksi
ascanbeta.elinjection.desc = Perangkat lunak ini mengkonstruksi semua atau sebagian pernyataan bahasa ekspresi (EL) di Halaman Server Java (JSP) dengan menggunakan input yang dipengaruhi secara eksternal dari komponen hulu, namun tidak menetralkan atau salah menetralisir elemen khusus yang dapat mengubah pernyataan EL yang diinginkan sebelumnya. itu dijalankan Pada versi tertentu dari Spring 3.0.5 dan sebelumnya, ada kerentanan (CVE-2011-2730) di mana tag Bahasa Ekspresi akan dievaluasi dua kali, yang secara efektif membuka aplikasi untuk injeksi EL. Namun, bahkan untuk versi yang lebih baru, kelemahan ini masih dimungkinkan tergantung konfigurasi.
ascanbeta.elinjection.soln = Lakukan validasi data praktik terbaik terhadap masukan yang tidak tepercaya dan untuk memastikan bahwa pengkodean keluaran diterapkan saat data masuk pada lapisan EL, sehingga tidak ada metacharacter yang ditemukan oleh penafsir dalam konten pengguna sebelum dievaluasi. Pola yang paling jelas untuk dideteksi mencakup $ {dan \# {, namun memungkinkan untuk mengkodekan atau memecah data ini.
ascanbeta.elinjection.refs = https\://owasp.org/www-community/vulnerabilities/Expression_Language_Injection\n\
http\://cwe.mitre.org/data/definitions/917.html

ascanbeta.xsltinjection.name = XSLT Injection
ascanbeta.xsltinjection.desc = Injection using XSL transformations may be possible, and may allow an attacker to read system information, read and write files, or execute arbitrary code.
ascanbeta.xsltinjection.refs = https\://www.contextis.com/blog/xslt-server-side-injection-attacks
ascanbeta.xsltinjection.soln = Sanitize and analyze every user input coming from any client-side.
ascanbeta.xsltinjection.error.otherinfo = The response to sending an XSLT token included error messages that may indicate a vulnerability to XSLT injections.
ascanbeta.xsltinjection.vendor.otherinfo = The XSLT processor vendor name "{0}" was returned after an injection request.
ascanbeta.xsltinjection.portscan.otherinfo = Port scanning may be possible.
ascanbeta.xsltinjection.command.otherinfo = Command execution may be possible.

ascanbeta.xxe.name=XML External Entity Attack

ascanbeta.xpathinjection.name=XPath Injeksi

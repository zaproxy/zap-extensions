#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages

ascanbeta.desc=Regole di scansione attiva - beta

ascanbeta.backupfiledisclosure.name=Divulgazione di File di backup
ascanbeta.backupfiledisclosure.desc=Una copia di backup del file \u00e8 stata divulgata dal server web
ascanbeta.backupfiledisclosure.soln=Non modificare i file in situ sul server web e assicurarsi che i file non necessari (compresi i file nascosti) vengano rimossi dal server web.
ascanbeta.backupfiledisclosure.evidence=Un backup di [{0}] \u00e8 disponibile alla posizione [{1}]

ascanbeta.crossdomain.name=Configurazione errata multi dominio
#the refs cannot be customised for each sub-category (Adobe, Silverlight, etc)
ascanbeta.crossdomain.refs=http\://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html http\://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf http\://msdn.microsoft.com/en-US/library/cc197955%28v\=vs.95%29.aspx http\://msdn.microsoft.com/en-us/library/cc838250%28v\=vs.95%29.aspx
ascanbeta.crossdomain.adobe.read.name=Configurazione errata su pi\u00f9 domini - Adobe - lettura
ascanbeta.crossdomain.adobe.send.name=Configurazione errata su pi\u00f9 domini - Adobe - invio
ascanbeta.crossdomain.adobe.desc=E' possibile una contraffazione della richiesta cross-site basata su Flash/Silverlight, a causa di un errore di configurazione sul server web. 
ascanbeta.crossdomain.adobe.read.soln=Configurare il file crossdomain.xml per limitare l'elenco dei domini che sono autorizzati a fare richieste di lettura cross-domain a questo server web utilizzando <allow-access-from domain\="example.com" >. Si dovrebbe garantire accesso a "*" (tutti i domini) se si \u00e8 certi che questo servizio non ospita nessun dato ad accesso controllato, personale o privato.
ascanbeta.crossdomain.adobe.read.extrainfo=Il server web permette richieste con intento malevolo di lettura cross-domain provenienti da componenti Flash/Silverlight serviti da qualsiasi dominio di terze parti, a questo dominio. Se l'utente vittima ha effettuato l'accesso a questo servizio, le richieste di lettura dannose vengono elaborate utilizzando i privilegi della vittima e possono portare alla compromissione dei dati da questo servizio da parte di un sito web di terze parti non autorizzate, tramite browser della vittima. Ci\u00f2 \u00e8 probabilmente un problema se \u00e8 in uso un'implementazione di sessione basato su Cookie . 
ascanbeta.crossdomain.adobe.send.soln=Configurare il file crossdomain.xml per limitare l'elenco dei domini che sono autorizzati a fare richieste di invio (ma non necessariamente lettura)  cross-domain a questo server web utilizzando <allow-http-request-headers-from domain\="example.com" headers\="Authorization,X-Blahh">. Si dovrebbe garantire accesso a "*" (tutti i domini) se si \u00e8 certi che questo servizio non \u00e8 vulnerabile agli attacchi Cross Site Request Forgery (CSRF).
ascanbeta.crossdomain.adobe.send.extrainfo=Il server web permette di inviare dati attraverso invii dannosi cross-dominio (senza necessariamente leggere) con richieste che hanno origine da componenti Flash/Silverlight serviti da un qualsiasi dominio di terze parti, verso questo dominio. Se l'utente vittima ha avuto accesso al servizio, le richieste dannose di invio vengono processate usando i privilegi della vittima, e possono causare un attacco di tipo Cross Site Request Forgery (CSRF) , attraverso il browser della vittima. Questo \u00e8 molto probabilmente un problema se viene usata una implementazione della sessione basata sui Cookie.
ascanbeta.crossdomain.silverlight.name=Configurazione errata Cross-Domain - Silverlight
ascanbeta.crossdomain.silverlight.desc=La falsificazione delle richieste cross-site basate su Silverlight \u00e8 possibile, dovuta ad una errata configurazione sul server web.
ascanbeta.crossdomain.silverlight.soln=Si configuri il file clientaccesspolicy.xml in modo da restringere l'elenco dei domini che possono effettuare richieste cross-domain a questo server web, usando la direttiva <domain uri\="https\://example.com" />. Si dovrebbe garantire accesso a "*2 (tutti i domini) solo se si \u00e8 sicuri di non ospitare sul servizio nessun dato a controllo di accesso, personale o privato.
ascanbeta.crossdomain.silverlight.extrainfo=Il server web permette richieste con intento malevolo di lettura cross-domain provenienti da componenti Flash/Silverlight serviti da qualsiasi dominio di terze parti, a questo dominio. Se l'utente vittima ha effettuato l'accesso a questo servizio, le richieste di lettura dannose vengono elaborate utilizzando i privilegi della vittima e possono portare alla compromissione dei dati ospitati su questo servizio da parte di un sito web di terze parti non autorizzate, tramite browser della vittima. E' possibile che questo possa determinare un attacco di tipo Cross Site Request Forgery (CSRF). Ci\u00f2 \u00e8 probabilmente un problema se \u00e8 in uso un'implementazione di sessione basato su Cookie.

ascanbeta.csrftokenscan.name=Scanner anti-token CSRF
ascanbeta.csrftokenscan.extrainfo.annotation=Questo \u00e8 un'alert informativo in quanto il form ha una annotazione di sicurezza che indica che non \u00e8 necessario un token anti-CSRF. Ci\u00f2 dovrebbe essere testato manualmente per assicurarsi che la annotazione sia corretta.

ascanbeta.heartbleed.name=Vulnerabilit\u00e0 OpenSSL Heartbleed
ascanbeta.heartbleed.desc=L'implementazione di TLS in OpenSSL 1.0.1 prima 1.0.1g non gestisce correttamente i pacchetti Heartbeat Extension, che permette ad aggressori remoti di ottenere informazioni sensibili dalla memoria del processo tramite pacchetti costruiti ad arte che scatenano una sovra-lettura di un buffer, rivelando potenzialmente informazioni sensibili.
ascanbeta.heartbleed.soln=Aggiornare ad OpenSSL 1.0.1g o versione successiva. Riemettere i certificati HTTPS. Modificare le chiavi asimmetriche private e le chiavi segrete condivise, poich\u00e9 potrebbero essere state compromesse, senza nessun riscontro nei files di log del server.
ascanbeta.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
ascanbeta.heartbleed.extrainfo=Questo problema \u00e8 stato confermato esfiltrando dati dal server, utilizzando {0}. E'' improbabile che questo sia un falso positivo.

ascanbeta.HTTPParamPoll.name=Scansione ad inquinamento del parametro HTTP
ascanbeta.HTTPParamPoll.desc=Gli attacchi di tipo Inquinamento del Parametro HTTP (HPP) sono costituiti da delimitatori di stringa di query codificate iniettare in altri parametri esistenti. Se un'applicazione web non disinfetta correttamente l'input dell'utente, un utente malintenzionato pu\u00f2 compromettere la logica dell'applicazione per eseguire attacchi sia lato client sia lato server. Una conseguenza degli attacchi HPP \u00e8 che l'attaccante pu\u00f2 potenzialmente sovrascrivere parametri HTTP hardcoded per modificare il comportamento di un'applicazione, bypassare i checkpoint di convalida dell'input e accedere e potenzialmente abusare le variabili che potessero essere fuori dalla portata diretta.
ascanbeta.HTTPParamPoll.sol=Disinfettare correttamente l'input dell'utente per delimitatori di parametro
ascanbeta.HTTPParamPoll.alert.attack=Inquinamento del parametro HTTP
ascanbeta.HTTPParamPoll.extrainfo=http\://www.google.com/search?q\=http+parameter+pollution

ascanbeta.insecurehttpmethod.name=Metodo HTTP non sicuro
ascanbeta.insecurehttpmethod.detailed.name=Metodo HTTP insicuro - {0}
ascanbeta.insecurehttpmethod.desc=Il metodo HTTP insicuro [{0}] \u00e8 attivato sul server web per questa risorsa. A seconda della configurazione del server web e dell''implementazione sottostante responsabile di servire la risorsa, questo potrebbe o meno essere sfruttabile. I metodi TRACK e TRACE possono essere utilizzati, da un utente malintenzionato, per accedere al token di autorizzazione o al cookie di sessione di un utente dell''applicazione, anche se il cookie di sessione \u00e8 protetto utilizzando il flag ''HttpOnly''. Perch\u00e8 l''attacco abbia successo, l''utente dell''applicazione deve in genere utilizzare un vecchio browser web, o un browser web che ha una vulnerabilit\u00e0 su Same Origin Policy (Politica di stessa origine, (SOP) ). Il metodo ''CONNECT'' pu\u00f2 essere utilizzato da un client web per creare un tunnel HTTP a siti Web di terze parti o servizi.
ascanbeta.insecurehttpmethod.trace.exploitable.desc=Il metodo HTTP insicuro [{0}] \u00e8 abilitato per questa risorsa, ed \u00e8 sfruttabile. I metodi TRACK e TRACE possono essere utilizzati da un utente malintenzionato, per accedere ai toek di autorizzazione e ai cookie di sessione di un utente dell''applicazione, anche se il cookie di sessione \u00e8 protetto utilizzando il flag ''HttpOnly''. Perch\u00e8 l''attacco abbia successo, l''utente dell''applicazione deve in genere utilizzare un vecchio browser web, o un browser web che ha una vulnerabilit\u00e0 su Same Origin Policy (Politica di stessa origine, SOP) .
ascanbeta.insecurehttpmethod.connect.exploitable.desc=Il metodo HTTP insicuro [{0}] \u00e8 abilitato per questa risorsa ed \u00e8 sfruttabile. \u00c8 possibile stabilire una connessione socket in tunnel verso un servizio di terze parti, utilizzando questo metodo HTTP.  Ci\u00f2 permetterebbe al servizio di essere usato come inoltro anonimo di spam, o come proxy web, aggirando le restrizioni di rete. Esso consente inoltre di essere utilizzato per stabilire un tunnel VPN, estendendo quindi la rete perimetrale in modo da includere componenti non attendibili. 
ascanbeta.insecurehttpmethod.extrainfo=Il metodo OPTIONS ha rivelato i seguenti metodi come abilitati per questa risorsa\: [{0}]
ascanbeta.insecurehttpmethod.trace.exploitable.extrainfo=Una richiesta TRACE \u00e8 stata inviata per questa richiesta, con un cookie impostato al valore [{0}]. Questo valore del cookie \u00e8 stato rilevato nella risposta HTTP, confermando la vulnerabilit\u00e0.
ascanbeta.insecurehttpmethod.connect.exploitable.extrainfo=Il metodo CONNECT \u00e8 stato usato per stabilire una connessione socket a [{0}], tramite il server web.
ascanbeta.insecurehttpmethod.soln=Disabilitare metodi insicuri come TRACK, TRACE e CONNECT sul server web e controllare che l'implementazione del servizio sottostante non supporti metodi insicuri.


ascanbeta.integeroverflow.name=Errore di overflow di intero
ascanbeta.integeroverflow.desc=Una condizione di overflow di intero avviene quando un numero intero, che non \u00e8 stato correttamente controllato dal flusso di ingresso viene usato in un programma compilato. 
ascanbeta.integeroverflow.soln=Riscrivere il programma in background usando un controllo appropriato della dimensione dell'intero inserito per prevenire errori di overflow e divisione per 0. Questo richiede che il programma di background venga ricompilato.
ascanbeta.integeroverflow.refs=https\://www.owasp.org/index.php/Integer_overflow and http\://projects.webappsec.org/w/page/13246946/Integer%20Overflows.
ascanbeta.integeroverflow.error1=Potenziale overflow di intero. E' cambiato il codice di stato sull'input di una lunga stringa di interi casuali.
ascanbeta.integeroverflow.error2=Potenziale overflow di intero. E' cambiato il codice di stato sull'input di una lunga stringa di zero.
ascanbeta.integeroverflow.error3=Potenziale overflow di intero. E' cambiato il codice di stato sull'input di una lunga stringa di uno.
ascanbeta.integeroverflow.error4=Potenziale overflow di intero. E' cambiato il codice di stato sull'input di una lunga stringa di nove.

ascanbeta.noanticsrftokens.name=Assenza di Token Anti-CSRF
ascanbeta.noanticsrftokens.desc=Nessun Token Anti-CSRF \u00e8 stato trovato nel form HTML.

ascanbeta.remotecodeexecution.cve-2012-1823.name=Esecuzione di codice remoto - CVE-2012-1823
ascanbeta.remotecodeexecution.cve-2012-1823.desc=Alcune versioni PHP, quando configurate per essere eseguito usando CGI, non gestiscono correttamente le stringhe di query in cui manca un carattere "\=", consentendo l'esecuzione di codice arbitrario. In questo caso, un comando del sistema operativo \u00e8 stato eseguito dal server web, e i risultati sono stati restituiti al browser web. 
ascanbeta.remotecodeexecution.cve-2012-1823.soln=Aggiornare all'ultima versione stabile di PHP, o utilizzare il server web Apache e il modulo mod_rewrite per filtrare le richieste dannose mediante le direttive "RewriteCond" e "RewriteRule".

ascanbeta.sessionfixation.name=Session Fixation
ascanbeta.sessionfixation.desc=E' possibile un problema di Session Fixation. Se questo problema si verifica con un URL di login (dove l'utente si autentica sull'applicazione), allora l'URL pu\u00f2 essere dato da un attaccante, insieme a un id di sessione immutato, ad una vittima, per poi assumere l'identit\u00e0 della vittima utilizzando l'id di sessione specificato. Se il problema si verifica con una pagina non di login, l'URL e l'id di sessione immutato possono essere utilizzati solo da un utente malintenzionato per monitorare le azioni di un utente non autenticato. Se la vulnerabilit\u00e0 si verifica su un campo di cookie o un campo di modulo (parametro POST) piuttosto che su un parametro URL (GET), allora alcune altre vulnerabilit\u00e0 possono essere richieste al fine di impostare il campo cookie sul browser della vittima, per consentire che la vulnerabilit\u00e0 sia sfruttabile.
ascanbeta.sessionfixation.soln=1) impedire all'attaccante di ottenere un id di sessione facendo rispettare gli ID di sessione in maniera rigorosa e allocando solo gli ID di sessione in seguito ad una autenticazione riuscita sull'applicazione.\n2) il server deve sempre creare un id di sessione nuova all'autenticazione, indipendentemente dal fatto se una sessione \u00e8 gi\u00e0 in atto.\n3) associare l'id di sessione a qualche combinazione di attributo di informazione del cliente, ad esempio indirizzo IP, certificato client SSL.\n4) le sessioni, quando distrutte, devono essere distrutte sul server, cos\u00ec come sul client.\n5) implementare un meccanismo di logout che distrugge tutte le sessioni precedenti per il client.\n6) implementare il timeout di sessione assoluta.\n7) Passare da un sistema basato sull'URL a un sistema basato su cookie o sull'implementazione di id di sessione basati su modulo, dato che quest'ultimo in genere richiede ulteriori vulnerabilit\u00e0, al fine di essere sfruttabile da un attaccante\n
ascanbeta.sessionfixation.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management\nhttps\://www.owasp.org/index.php/Session_fixation\nhttp\://www.acros.si/papers/session_fixation.pdf\nhttp\://www.technicalinfo.net/papers/WebBasedSessionManagement.html\nhttps\://www.owasp.org/index.php/Top_10_2010-A9
ascanbeta.sessionfixation.alert.cookie.extrainfo=Cookie impostato in risposta quando campo [{0}] del cookie \u00e8 impostato su NULL\: [{1}]\nCookie impostato in risposta con valore del cookie (valido) preso in prestito nella richiesta [{1}]\: [{2}]
ascanbeta.sessionfixation.alert.cookie.extrainfo.loginpage=L'URL sul quale il problema \u00e8 stato scoperto \u00e8 stata contrassegnata come una pagina di accesso.
ascanbeta.sessionfixation.alert.url.extrainfo=Un probabile valore di sessione \u00e8 apparso negli URL nell''output HTML quando il parametro URL o pseudo parametro URL [{0}] \u00e8 impostato su NULL\: [{1}]\nQuando questa sessione [{1}]  ''in prestito'' \u00e8 usata in una successiva richiesta per questa URL, non viene creata una nuova sessione.
ascanbeta.sessionfixation.alert.url.extrainfo.loginpage=L'URL sul quale il problema \u00e8 stato scoperto \u00e8 stata contrassegnata come una pagina di accesso.
ascanbeta.sessionfixation.alert.attack=Campo {0}\: [{1}]
#Exposed Session Id messages
ascanbeta.sessionidexposedinurl.name=ID sessione esposto
ascanbeta.sessionidexposedinurl.desc=Un id di sessione viene esposto nell'URL. Attraverso la condivisione di tale URL del sito Web (contenente l'id di sessione), un utente inesperto pu\u00f2 inavvertitamente concedere l'accesso ai propri dati, compromettere la riservatezza, integrit\u00e0 e disponibilit\u00e0.  Le URL contenenti l'identificatore di sessione appaiono anche nei segnalibri del browser web, file di log del server web e file di log del server proxy. 
ascanbeta.sessionidexposedinurl.soln=Utilizzare un'implementazione di gestione della sessione pi\u00f9 sicura, come ad esempio una che utilizzi cookies di sessione, che non sono facilmente condivisi inavvertitamente, e che in genere non compaiono nel file di log del server o nei segnalibri del browser web.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexposedinurl.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management
ascanbeta.sessionidexposedinurl.alert.extrainfo=Il campo {0}  di [{1}] contiene un identificatore di sessione esposto [{2}]
ascanbeta.sessionidexposedinurl.alert.extrainfo.loginpage=L'URL sul quale il problema \u00e8 stato scoperto \u00e8 stata contrassegnata come una pagina di accesso.
ascanbeta.sessionidexposedinurl.alert.attack=Campo {0}\: [{1}]
#Session Id Cookie not sent securely
ascanbeta.sessionidsentinsecurely.name=ID di sessione trasmesso in modo non sicuro
ascanbeta.sessionidsentinsecurely.desc=Un id di sessione pu\u00f2 essere inviato tramite un meccanismo insicuro. Nel caso di un cookie inviato nella richiesta, ci\u00f2 si verifica quando viene usato HTTP anzich\u00e9 HTTPS.  Nel caso di un cookie inviato dal server in risposta (quando l'URL viene modificato impostando a NULL il campo parametro indicato ), il flag 'secure' non \u00e8 impostato, permettendo che il cookie sia in seguito inviato tramite HTTP invece che tramite HTTPS. Ci\u00f2 potrebbe consentire ad un intercettatore passivo lungo il percorso di rete di avere pieno accesso alla sessione della vittima.  
ascanbeta.sessionidsentinsecurely.soln=1) utilizzare l'ultima versione disponibile di SSL/TLS (per HTTPS) su tutte le pagine dove un id di sessione viene comunicato tra il browser e il server web.\n2) non consentire che la comunicazione sia degradata ad un protocollo HTTP non crittografato.\n3) utilizzare il flag 'secure' quando si imposta un cookie contenente un id di sessione, per impedire la sua trasmissione successiva con un meccanismo insicuro.\n4) Inoltrare le richieste HTTP di pagina non sicura alla pagina sicura HTTPS equivalente.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidsentinsecurely.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management\nhttps\://www.owasp.org/index.php/Top_10_2010-A9
ascanbeta.sessionidsentinsecurely.alert.extrainfo=Il campo {0} identificatore di sessione [{1}], il valore [{2}] pu\u00f2 essere inviato tramite un meccanismo insicuro.  
ascanbeta.sessionidsentinsecurely.alert.extrainfo.secureflagnotset=L'impostazione "sicuro" non \u00e8 stata impostata nel cookie di sessione fornito dal server.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.loginpage=L'URL sul quale il problema \u00e8 stato scoperto \u00e8 stata contrassegnata come una pagina di accesso.
ascanbeta.sessionidsentinsecurely.alert.attack=Campo {0}\: [{1}]
#Session Id Cookie accessible by JavaScript
ascanbeta.sessionidaccessiblebyjavascript.name=Cookie dell'ID di Sessione accessibile a JavaScript
ascanbeta.sessionidaccessiblebyjavascript.desc=Un cookie di sessione Id inviato dal server (quando l'URL viene modificato impostando a NULL il campo parametro indicato ) pu\u00f2 essere acceduto tramite JavaScript sul client. In concomitanza con un'altra vulnerabilit\u00e0, questo pu\u00f2 permettere di dirottare la sessione .  
ascanbeta.sessionidaccessiblebyjavascript.soln=1) utilizzare il flag 'httponly' quando si imposta un cookie contenente un id di sessione, per evitare che venga consultato da JavaScript nel browser web.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidaccessiblebyjavascript.refs=
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo=Nel campo identificatore di sessione {0} [{1}], il valore [{2}] pu\u00f2 essere acceduto utilizzando JavaScript nel browser web
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo.loginpage=L'URL sul quale il problema \u00e8 stato scoperto \u00e8 stata contrassegnata come una pagina di accesso.
ascanbeta.sessionidaccessiblebyjavascript.alert.attack=Campo {0}\: [{1}]
#Session Id Cookie Expiry
ascanbeta.sessionidexpiry.name=Il valore Session ID Expiry Time/Max-Age \u00e8 eccessivo
ascanbeta.sessionidexpiry.desc=Un cookie di sessione Id inviato dal server (quando l'URL viene modificato impostando a NULL il campo parametro indicato) \u00e8 impostato per essere valido per un tempo eccessivo. Questo pu\u00f2 essere sfruttabile da un attaccante, se l'utente dimentica di effettuare il logout, se la funzionalit\u00e0 di disconnessione non distrugge correttamente la sessione, o se l'id di sessione \u00e8 compromesso da altri mezzi.     
ascanbeta.sessionidexpiry.soln=1) utilizzare le direttive di cookie 'Expire' o 'Max-Age' quando si imposta un cookie contenente un id di sessione, per impedire sia disponibile per periodi prolungati di tempo.\n2) verificare che la funzionalit\u00e0 di disconnessione esista, e che distrugga correttamente la sessione.\n3) usare altre misure preventive per assicurarsi che se un id di sessione \u00e8 compromesso, esso non possa essere sfruttato.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexpiry.refs=
ascanbeta.sessionidexpiry.alert.extrainfo=identificatore di sessione {0} campo [{1}], valore [{2}] pu\u00f2 essere acceduto fino al [{3}] (poich\u00e9 il cookie \u00e8 stato ricevuto a {4}), a meno che la sessione sia distrutta.
ascanbeta.sessionidexpiry.alert.extrainfo.loginpage=L'URL sul quale il problema \u00e8 stato scoperto \u00e8 stata contrassegnata come una pagina di accesso.
ascanbeta.sessionidexpiry.alert.attack=Campo {0}\: [{1}]
ascanbeta.sessionidexpiry.browserclose=chiudere il browser
ascanbeta.sessionidexpiry.timemorethanoneweek=Pi\u00f9 di una settimana
ascanbeta.sessionidexpiry.timemorethanoneday=Pi\u00f9 di un giorno
ascanbeta.sessionidexpiry.timemorethanonehour=Pi\u00f9 di un'ora
ascanbeta.sessionidexpiry.timelessthanonehour=Meno di un'ora
ascanbeta.sessionidexpiry.timeexpired=Scaduto

ascanbeta.shellshock.name=Esecuzione di codice remoto - Shell Shock
ascanbeta.shellshock.desc=Il server sta eseguendo una versione della shell Bash che consente agli aggressori remoti di eseguire codice arbitrario 
ascanbeta.shellshock.extrainfo=Da CVE-2014-6271\: GNU Bash fino alla versione 4.3 le stringhe  finali nei processi dopo le definizioni di funzioni nei valori delle variabili d\u00b4ambiente, permette ad aggressori remoti di eseguire codice arbitrario tramite un ambiente appositamente predisposto, come dimostrato dai vettori che coinvolgono la funzionalit\u00e0 ForceCommand in OpenSSH sshd, i moduli mod_cgi e mod_cgid in Apache HTTP Server, script eseguiti da client DHCP non specificati e altre situazioni in cui l\u00b4impostazione dell\u00b4ambiente avviene attraverso un limite di privilegio dall'esecuzione di Bash , meglio conosciuto come "ShellShock." Nota\: la correzione originale di questo problema era errata; CVE-2014-7169 \u00e8 stato assegnato per coprire la vulnerabilit\u00e0 che \u00e8 ancora presente dopo la correzione errata.
ascanbeta.shellshock.soln=Aggiornare Bash sul server all\u00b4ultima versione
ascanbeta.shellshock.ref=http\://Web.NVD.NIST.gov/View/vuln/Detail?vulnId\=CVE-2014-6271\nhttp\://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html
ascanbeta.shellshock.timingbased.evidence=Utilizzando l''attacco, un ritardo di [{0}] millisecondi  \u00e8 stata causato e rilevato

ascanbeta.sqlinjection.mysql.name=SQL Injection - MySQL
ascanbeta.sqlinjection.hypersonic.name=SQL Injection - Hypersonic SQL
ascanbeta.sqlinjection.oracle.name=SQL Injection - Oracle
ascanbeta.sqlinjection.postgres.name=SQL Injection - PostgreSQL
ascanbeta.sqlinjection.desc=SQL injection potrebbe essere possibile
ascanbeta.sqlinjection.soln=Non ci si fidi dell'input utente anche se viene effettuata la validazione client side. In linea generale,\nsi controlli il tipo di tutti i dati a lato server.\nSe l'applicazione utilizza JDBC, si usi PreparedStatement o CallableStatement con parametri passati via '?'.\nSe l'applicazione utilizza ASP, si usino gli Oggetti ADO Command con controllo tipizzato e query parametrizzate.\nSe lato database possono essere utilizzate Stored Procedures, le si usino. Non si concatenino stringhe in query nelle stored procedure, o utilizzi 'exec', 'exec immediate', o istruzioni equivalenti\!\nNon si creino query SQL dinamiche utilizzando la semplice concatenazione delle stringhe.\nSi sanitizzino tutti i dati ricevuti dal client.\nSi adotti unan 'allow list' di caratteri permessi, o una 'deny list' di caratteri non consentiti nell'input utente.\nSi adotti il principio del privilegio minimo utilizzando l'utente del database con il minor numero di privilegi possibili.In particolare, si eviti di utilizzare il 'sa' o gli utenti 'db-owner'. Questo non eliminer\u00e0 eventuali SQL injection, ma ridurr\u00e0 al minimo il loro impatto.\nSi conceda nel database l'accesso minimo necessario al funzionamento dell'applicazione.
ascanbeta.sqlinjection.refs=https\://www.owasp.org/index.php/Top_10_2010-A1\nhttps\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
#ascanbeta.sqlinjection.alert.errorbased.attack={1}
ascanbeta.sqlinjection.alert.errorbased.differentiation.attack=Valore originale\: [{0}]. valore modificato\: [{1}]. valore di controllo\: [{2}]
ascanbeta.sqlinjection.alert.booleanbased.attack=Campo\: [{0}], valore [{1}]
ascanbeta.sqlinjection.alert.unionbased.attack=[{0}] campo\: [{1}], valore [{2}]
ascanbeta.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] probabile, dato il frammento di messaggio di errore [{1}] nei risultati HTML
ascanbeta.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] probabile, dato il frammento di messaggio specifico dell''Unione [{1}] in HTML risultati
ascanbeta.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Messaggio non modificato ha dato il codice di stato HTTP [{0}], il messaggio modificato ha dato lo stato HTTP [{1}]
ascanbeta.sqlinjection.alert.errorbased.differentiation.extrainfo=Messaggio non modificato ha dato il codice di stato HTTP [{0}], corpo di lunghezza [{1}], il messaggio modificato ha dato lo stato HTTP [{2}], corpo di lunghezza [{3}]. Un terzo (valore inducente una non-SQL injection) ha dato lo stato HTTP [{4}], corpo di lunghezza [{5}]
ascanbeta.sqlinjection.alert.booleanbased.extrainfo=I risultati di pagina sono stati manipolati con successo usando le condizioni booleane [{0}] e [{1}]
ascanbeta.sqlinjection.alert.timebased.extrainfo=Il tempo di query \u00e8 controllabile tramite il valore del parametro [{0}], che ha causato l''impiego di [{1}] millisecondi per la richiesta, quando la query originale non modificata con valore [{2}] ha impiegato [{3}] millisecondi 

ascanbeta.sourcecodedisclosure.desc=Il codice sorgente della pagina attuale \u00e8 stato rivelato dal server web

ascanbeta.sourcecodedisclosurecve-2012-1823.name=Rivelazione di codice sorgente - CVE-2012-1823
ascanbeta.sourcecodedisclosurecve-2012-1823.desc=Alcune versioni PHP, quando configurate per essere eseguite usando CGI, non gestiscono correttamente le stringhe di query con mancanza di un carattere escape "\=", consentendo la divulgazione del codice sorgente PHP e l'esecuzione di codice arbitrario. In questo caso, il contenuto del file PHP \u00e8 stato servito direttamente al browser web. Questa uscita di solito contiene  codice PHP, anche se pu\u00f2 anche contenere direttamente HTML.
ascanbeta.sourcecodedisclosurecve-2012-1823.soln=Aggiornare all'ultima versione stabile di PHP, o utilizzare il server web Apache e il modulo mod_rewrite per filtrare le richieste dannose mediante le direttive "RewriteCond" e "RewriteRule".

ascanbeta.sourcecodedisclosure.svnbased.name=Divulgazione di codice sorgente - SVN
ascanbeta.sourcecodedisclosure.svnbased.soln=Assicurarsi che i file di metadati di SVN non vengono distribuiti sul web server o sul server applicativo
ascanbeta.sourcecodedisclosure.svnbased.extrainfo=Il codice sorgente per [{0}] \u00e8 stato trovato a [{1}]

ascanbeta.sourcecodedisclosurewebinf.name=Divulgazione di codice sorgente - cartella /WEB-INF
ascanbeta.sourcecodedisclosurewebinf.desc=Codice sorgente Java \u00e8 stato divulgato dal server web nel file di classe Java nella cartella WEB-INF. I file di classe possono essere disassemblati per produrre codice sorgente che assomiglier\u00e0 molto accuratamente al codice sorgente originale.  
ascanbeta.sourcecodedisclosurewebinf.soln=Il server web deve essere configurato per non servire la cartella /WEB-INF o il suo contenuto ai browser web, poich\u00e9 contiene informazioni sensibili come codice Java compilato e file di propriet\u00e0 che possono contenere credenziali. Le classi Java distribuite con l'applicazione dovrebbero essere offuscate, come ulteriore livello di difesa in un approccio di "difesa in profondit\u00e0".

ascanbeta.sourcecodedisclosurewebinf.propertiesfile.name=Rivelazione di File di Propriet\u00e0 - /WEB-INF cartella
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.desc=Una classe Java nella cartella /WEB-INF ha rivelato la presenza di file di propriet\u00e0. I file di propriet\u00e0 non dovrebbero essere pubblicamente accessibilo e in genere contengono informazioni di configurazione, credenziali di applicazione o chiavi crittografiche.   
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.soln=Il server web deve essere configurato per non servire la cartella /WEB-INF o il suo contenuto ai browser web.  \u00c8 possibile anche rimuovere la cartella /WEB-INF.  
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.extrainfo=Il riferimento al file di propriet\u00e0 \u00e8 stato trovato nel codice sorgente Java disassemblato per la classe Java [{0}].

ascanbeta.usernameenumeration.name=Enumerazione utenti possibile
ascanbeta.usernameenumeration.desc=\u00c8 possibile enumerare gli utenti, basati su differenti risposte HTTP quando vengono forniti nomi utente validi e non validi. Questo aumenterebbe notevolmente la probabilit\u00e0 di successo di tecniche di forzatura della password su base di forza bruta contro il sistema.  Si noti che falsi positivi possono a volte essere minimizzati aumentando l'opzione 'Forza dell'attacco' in ZAP.  Si prega di controllare manualmente il campo 'Altre informazioni' per confermare se questo \u00e8 effettivamente un problema. 
ascanbeta.usernameenumeration.soln=Non divulgare dettagli se uno username \u00e8 valido o non valido. In particolare, per i tentativi di login fallito, non distinguere tra un utente valido e una password non valida nel messaggio di errore, titolo della pagina, contenuto della pagina, intestazioni HTTP o logica di reindirizzamento.
ascanbeta.usernameenumeration.refs=https\://www.OWASP.org/index.php/Testing_for_user_enumeration_%28OWASP-at-002%29 http\://sebastian-schinzel.de/_download/ifip-sec2011.pdf
ascanbeta.usernameenumeration.alert.extrainfo=Il parametro [{0}]  [{1}] perde  informazioni sull''esistenza o meno di un utente. Le [{5}] differenze in uscita, per il valore di username originale valido [{2}] e il valore username non valido [{3}] sono\: [{4}]
ascanbeta.usernameenumeration.alert.attack=Modificare il campo [{0}]\: [{1}] e monitorare l''uscita 

ascanbeta.paddingoracle.name=Oracle Padding generico
ascanbeta.paddingoracle.desc=Manipolando il riempimento su di una stringa crittografata, un utente malintenzionato \u00e8 in grado di generare un messaggio di errore che indica una probabile vulnerabilit\u00e0 'riempimento oracle'. Tale debolezza pu\u00f2 interessare qualsiasi applicazione o framework che utilizza la crittografia in modo improprio, quali alcune versioni di ASP.net, Java Server Faces e Mono. Un utente malintenzionato pu\u00f2 sfruttare questo problema per decrittografare i dati e recuperare le chiavi di crittografia, potenzialmente visualizzando e modificando dati confidenziali. Questo plugin dovrebbe rilevare le vulnerabilit\u00e0 di riempimento Oracle MS10-070 riempimento in ASP.net se l'opzione CustomErrors \u00e8 abilitata per questo.
ascanbeta.paddingoracle.soln=Aggiornare il software del server interessato o modificare gli script in modo che essi convalidino correttamente i dati crittografati prima di tentare la decrittazione.
ascanbeta.paddingoracle.refs=http\://netifera.com/research/\nhttp\://www.microsoft.com/technet/security/bulletin/ms10-070.mspx\nhttp\://www.mono-project.com/Vulnerabilities\#ASP.NET_Padding_Oracle\nhttps\://bugzilla.redhat.com/show_bug.cgi?id\=623799

ascanbeta.elinjection.name=Iniezione dell'espressione in linguaggio
ascanbeta.elinjection.desc=Il software costruisce tutto o una parte di un'istruzione di expression language (EL) in una pagina Java Server Page (JSP)utilizzando input influenzato esternamente da un componente a monte, ma non neutralizza, o lo fa in maniera incorretta, gli elementi speciali che potrebbero modificare l'istruzione EL originariamente prevista da eseguire. In alcune versioni di Spring 3.0.5 e precedenti, era presente una vulnerabilit\u00e0 (CVE-2011-2730) per la quale i tag EL sarebbero stati valutati due volte, che avrebbe veramente esposto qualsiasi applicazione all'iniezione EL. Tuttavia, anche per le versioni successive, questo problema \u00e8 ancora presente a seconda della configurazione in uso.
ascanbeta.elinjection.soln=Assicurarsi di seguire le migliori tecniche di validazione di dati verso input non attendibile anche per assicurarsi che la codifica dell'output sia applicata quando i dati arrivano allo strato EL, affinch\u00e8 nessun metacarattere sia trovato dall'interprete all'interno del contenuto generato dall'utente prima della valutazione. I modelli pi\u00f9 ovvi da rilevare includono ${\# {, ma pu\u00f2 essere possibile codificare o frammentare questi dati.
ascanbeta.elinjection.refs=https\://www.OWASP.org/index.php/Expression_Language_Injection http\://cwe.mitre.org/data/definitions/917.html

ascanbeta.xxeplugin.name=Attacco di tipo entit\u00e0 esterna XML
ascanbeta.xxeplugin.nocallback=funzionalit\u00e0 di callback non disponibile

ascanbeta.xpathinjectionplugin.name=Iniezione XPath


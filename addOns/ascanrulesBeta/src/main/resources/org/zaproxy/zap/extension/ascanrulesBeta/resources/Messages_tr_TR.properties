ascanbeta.HTTPParamPoll.desc = HTTP Parametre Kirlili\u011fi (HES) sald\u0131r\u0131lar\u0131 mevcut di\u011fer parametrelere kodlanm\u0131\u015f sorgu dizesi s\u0131n\u0131rlay\u0131c\u0131 enjekte olu\u015fmaktad\u0131r. Bir web uygulama d\u00fczg\u00fcn kullan\u0131c\u0131 giri\u015fi sanitize etmezse, k\u00f6t\u00fc niyetli bir kullan\u0131c\u0131n\u0131n istemci taraf\u0131 veya sunucu taraf\u0131 ya sald\u0131r\u0131lar\u0131 ger\u00e7ekle\u015ftirmek i\u00e7in uygulama mant\u0131\u011f\u0131 bozabilir. HES sald\u0131r\u0131lar\u0131n bir sonucu potansiyel mevcut sabit kodlanm\u0131\u015f HTTP parametreleri ge\u00e7ersiz k\u0131labilirsiniz sald\u0131rgan\u0131n bir uygulama, bypass giri\u015f do\u011frulama kontrol noktalar\u0131 ve eri\u015fim davran\u0131\u015f\u0131n\u0131 de\u011fi\u015ftirmek ve muhtemelen do\u011frudan ula\u015famayaca\u011f\u0131 olabilir de\u011fi\u015fkenleri yararlanmaya olmas\u0131d\u0131r.
ascanbeta.HTTPParamPoll.extrainfo = https\://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution
ascanbeta.HTTPParamPoll.name = HTTP Parametre Kirlili\u011fi
ascanbeta.HTTPParamPoll.sol = D\u00fczg\u00fcn parametre s\u0131n\u0131rlay\u0131c\u0131 i\u00e7in kullan\u0131c\u0131 giri\u015fi sterilize

ascanbeta.backupfiledisclosure.desc = Dosyan\u0131n bir yedek web sunucusu taraf\u0131ndan if\u015fa edildi
ascanbeta.backupfiledisclosure.name = Yedekleme Dosya Bilgilendirme
ascanbeta.backupfiledisclosure.otherinfo = A backup of [{0}] is available at [{1}]
ascanbeta.backupfiledisclosure.refs = https\://cwe.mitre.org/data/definitions/530.html\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.html
ascanbeta.backupfiledisclosure.soln = In-situ web sunucusundaki dosyalar\u0131 d\u00fczenlemek ve (gizli dosyalar dahil) o un-gerekli dosyalar\u0131 web sunucusundan kald\u0131r\u0131l\u0131r sa\u011flamak etmeyin.

ascanbeta.cookieslack.affect.response.no = These cookies did NOT affect the response\: 
ascanbeta.cookieslack.affect.response.yes = These cookies affected the response\: 
ascanbeta.cookieslack.desc = Repeated GET requests\: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.
ascanbeta.cookieslack.endline = \n
ascanbeta.cookieslack.name = Cookie Slack Detector
ascanbeta.cookieslack.otherinfo.intro = Cookies that don't have expected effects can reveal flaws in application logic. In the worst case, this can reveal where authentication via cookie token(s) is not actually enforced.\n
ascanbeta.cookieslack.separator = ,
ascanbeta.cookieslack.session.destroyed = Dropping this cookie appears to have invalidated the session\: [{0}] A follow-on request with all original cookies still had a different response than the original request. \n
ascanbeta.cookieslack.session.warning = NOTE\: Because of its name this cookie may be important, but dropping it appears to have no effect\: [{0}] \n

ascanbeta.cors.info.desc = Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any other origins (domain, scheme, or port) than its own from which a browser should permit loading of resources. It relaxes the Same-Origin Policy (SOP).
ascanbeta.cors.info.name = CORS Header
ascanbeta.cors.refs = https\://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\nhttps\://portswigger.net/web-security/cors
ascanbeta.cors.soln = If a web resource contains sensitive information, the origin should be properly specified in the Access-Control-Allow-Origin header. Only trusted websites needing this resource should be specified in this header, with the most secured protocol supported.
ascanbeta.cors.vuln.desc = This CORS misconfiguration could allow an attacker to perform AJAX queries to the vulnerable website from a malicious page loaded by the victim's user agent.\nIn order to perform authenticated AJAX queries, the server must specify the header "Access-Control-Allow-Credentials\: true" and the "Access-Control-Allow-Origin" header must be set to null or the malicious page's domain. Even if this misconfiguration doesn't allow authenticated AJAX requests, unauthenticated sensitive content can still be accessed (e.g intranet websites).\nA malicious page can belong to a malicious website but also a trusted website with flaws (e.g XSS, support of HTTP without TLS allowing code injection through MITM, etc).
ascanbeta.cors.vuln.name = CORS Misconfiguration

ascanbeta.crossdomain.adobe.desc = Fla\u015f / Silverlight tabanl\u0131 \u00e7apraz site istek sahtecili\u011fi nedeniyle web sunucusunda bir yanl\u0131\u015f yap\u0131land\u0131rma, m\u00fcmk\u00fcn olabilir. 
ascanbeta.crossdomain.adobe.read.extrainfo = web sunucusu k\u00f6t\u00fc niyetli etki alanlar\u0131 aras\u0131 veri Fla\u015f / Silverlight bile\u015fenlerinden kaynaklanan istekleri bu etki, herhangi bir \u00fc\u00e7\u00fcnc\u00fc taraf etki alan\u0131ndan sunulan okuma izni verir. Kurban kullan\u0131c\u0131 bu hizmete oturum a\u00e7t\u0131ysa, k\u00f6t\u00fc niyetli okuma istekleri ma\u011fdurun ayr\u0131cal\u0131klar\u0131n\u0131 kullan\u0131larak i\u015flenir ve kurban\u0131n web taray\u0131c\u0131s\u0131 \u00fczerinden, yetkisiz bir \u00fc\u00e7\u00fcnc\u00fc taraf web sitesi taraf\u0131ndan ele ge\u00e7irilmesini, bu hizmetten verilere neden olabilir. Bu \u00c7erez tabanl\u0131 oturum uygulama kullan\u0131mda ise bir sorun olabilir \u00f6zellikle muhtemeldir. 
ascanbeta.crossdomain.adobe.read.name = \u00c7apraz-Domain yanl\u0131\u015f yap\u0131land\u0131r\u0131lmas\u0131 - Adobe - Oku
ascanbeta.crossdomain.adobe.read.soln = Kullanarak, bu web sunucusuna etki alanlar\u0131 aras\u0131 okuma isteklerini yapmak i\u00e7in izin alanlar\u0131n listesini s\u0131n\u0131rlamak i\u00e7in crossdomain.xml dosyas\u0131 yap\u0131land\u0131rma <allow-access-from \= "example.com" etki> . Sadece "*" Bu hizmet herhangi bir eri\u015fim kontroll\u00fc, ki\u015fiselle\u015ftirilmi\u015f veya \u00f6zel verilerinizi ev sahipli\u011fi etmedi\u011fini eminseniz (t\u00fcm alanlar) eri\u015fim izni gerekir.
ascanbeta.crossdomain.adobe.send.extrainfo = web sunucusu (ama mutlaka okuyam\u0131yor) k\u00f6t\u00fc niyetli etki alanlar\u0131 aras\u0131 veri g\u00f6nderme izin / Silverlight bile\u015fenler bu etki, herhangi bir \u00fc\u00e7\u00fcnc\u00fc taraf etki alan\u0131ndan hizmet Flash'tan men\u015feli ister. Kurban kullan\u0131c\u0131 bu hizmete oturum a\u00e7t\u0131ysa, k\u00f6t\u00fc niyetli g\u00f6nderme istekleri ma\u011fdurun ayr\u0131cal\u0131klar\u0131n\u0131 kullan\u0131larak i\u015flenir ve kurban\u0131n web taray\u0131c\u0131s\u0131 \u00fczerinden, sald\u0131r\u0131lar\u0131 yaz\u0131n Cross Site Request Forgery (CSRF) neden olabilir. Bu \u00c7erez tabanl\u0131 oturum uygulama kullan\u0131mda ise bir sorun olabilir \u00f6zellikle muhtemeldir.
ascanbeta.crossdomain.adobe.send.name = \u00c7apraz-Domain yanl\u0131\u015f yap\u0131land\u0131r\u0131lmas\u0131 - Adobe - G\u00f6nder
ascanbeta.crossdomain.adobe.send.soln = Etki alanlar\u0131 aras\u0131 g\u00f6nderme yapmak i\u00e7in izin (ama ille okuyun) kullanarak, bu web sunucusuna istekleri olan alanlar\u0131n listesini s\u0131n\u0131rlamak i\u00e7in crossdomain.xml dosyas\u0131 yap\u0131land\u0131rma etki \= "example.com dan izin-http-istek-ba\u015fl\u0131klar\u0131n\u0131-< "ba\u015fl\u0131klar\u0131 \=" Yetkilendirme, X-Blahh "> . Yaln\u0131zca belirli iseniz "*" (t\u00fcm etki) eri\u015fim izni gerekti\u011fini bu hizmet Cross Site Request Forgery (CSRF) sald\u0131r\u0131lara kar\u015f\u0131 savunmas\u0131z de\u011fildir, bu hizmet.
ascanbeta.crossdomain.name = Etki Alanlar\u0131 Aras\u0131 yanl\u0131\u015f yap\u0131land\u0131r\u0131lmas\u0131
ascanbeta.crossdomain.refs = https\://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf\nhttps\://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc197955(v\=vs.95)\nhttps\://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc838250(v\=vs.95)
ascanbeta.crossdomain.silverlight.desc = Silverlight tabanl\u0131 \u00e7apraz site istek sahtecili\u011fi nedeniyle web sunucusunda bir yanl\u0131\u015f yap\u0131land\u0131rma, m\u00fcmk\u00fcn olabilir.
ascanbeta.crossdomain.silverlight.extrainfo = web sunucusu Silverlight bile\u015fenlerden kaynaklanan zararl\u0131 etki alanlar\u0131 aras\u0131 istekleri bu etki, herhangi bir \u00fc\u00e7\u00fcnc\u00fc taraf etki alan\u0131ndan hizmet verir. Kurban kullan\u0131c\u0131 bu hizmete oturum a\u00e7t\u0131ysa, k\u00f6t\u00fc niyetli istekler ma\u011fdurun ayr\u0131cal\u0131klar\u0131n\u0131 kullan\u0131larak i\u015flenir ve kurban\u0131n web taray\u0131c\u0131lar\u0131 arac\u0131l\u0131\u011f\u0131yla, yetkisiz bir \u00fc\u00e7\u00fcnc\u00fc taraf web sitesi taraf\u0131ndan ele ge\u00e7irilmesini, bu hizmetten verilere neden olabilir. Ayr\u0131ca sald\u0131r\u0131lar\u0131 tip Cross Site Request Forgery (CSRF) neden olabilir. Bu \u00c7erez tabanl\u0131 oturum uygulama kullan\u0131mda ise bir sorun olabilir \u00f6zellikle muhtemeldir.
ascanbeta.crossdomain.silverlight.name = \u00c7apraz-Domain yanl\u0131\u015f yap\u0131land\u0131r\u0131lmas\u0131 - Silverlight
ascanbeta.crossdomain.silverlight.soln = Kullanarak, bu web sunucusuna etki alanlar\u0131 aras\u0131 isteklerini yapmak i\u00e7in izin alanlar\u0131n listesini s\u0131n\u0131rlamak i\u00e7in clientaccesspolicy.xml dosyas\u0131n\u0131 yap\u0131land\u0131r\u0131n <domain uri \= "https\://example.com" /> . Sadece "*" Bu hizmet herhangi bir eri\u015fim kontroll\u00fc, ki\u015fiselle\u015ftirilmi\u015f veya \u00f6zel verilerinizi ev sahipli\u011fi etmedi\u011fini eminseniz (t\u00fcm alanlar) eri\u015fim izni gerekir.

ascanbeta.csrftoken.extrainfo.annotation = Form, bir anti-CSRF Token'e ihtiya\u00e7 duymad\u0131\u011f\u0131n\u0131 belirten bir g\u00fcvenlik a\u00e7\u0131klamas\u0131 oldu\u011fu i\u00e7in bu bir bilgilendirme uyar\u0131s\u0131d\u0131r. Bu, a\u00e7\u0131klaman\u0131n do\u011fru oldu\u011fundan emin olmak i\u00e7in manuel olarak test edilmelidir.
ascanbeta.csrftoken.name = Anti-CSRF Tokens Check

ascanbeta.desc = Beta status active scan rules

ascanbeta.elinjection.desc = Yaz\u0131l\u0131m, bir \u00fcst bile\u015fenden d\u0131\u015far\u0131dan etkilenmi\u015f giri\u015fini kullanarak Java Server Page (JSP) bir ifade dili (EL) deyimi tamam\u0131n\u0131 veya bir k\u0131sm\u0131n\u0131 olu\u015fturur, ancak n\u00f6tralize veya yanl\u0131\u015f \u00f6nce ama\u00e7lanan EL deyimi de\u011fi\u015ftirebilir \u00f6zel unsurlar\u0131 n\u00f6tralize de\u011fil Bu y\u00fcr\u00fct\u00fcl\u00fcr. Bahar 3.0.5 belirli s\u00fcr\u00fcmlerinde ve \u00f6nceki etkin EL enjeksiyona herhangi bir uygulama maruz \u0130fade Dil etiketleri iki kez de\u011ferlendirilecek hangi bir g\u00fcvenlik a\u00e7\u0131\u011f\u0131 (CVE-2011-2730) vard\u0131. Ancak, hatta daha sonraki s\u00fcr\u00fcmleri i\u00e7in, bu zay\u0131fl\u0131k konfig\u00fcrasyonuna ba\u011fl\u0131 hala m\u00fcmk\u00fcnd\u00fcr.
ascanbeta.elinjection.name = \u0130fade Dil Enjeksiyon
ascanbeta.elinjection.refs = https\://owasp.org/www-community/vulnerabilities/Expression_Language_Injection\nhttps\://cwe.mitre.org/data/definitions/917.html
ascanbeta.elinjection.soln = G\u00fcvenilmeyen girdi kar\u015f\u0131 veri do\u011frulama en iyi uygulamalar\u0131 ger\u00e7ekle\u015ftirmek ve hi\u00e7bir meta de\u011ferlendirilmesinden \u00f6nce kullan\u0131c\u0131 i\u00e7eri\u011finde terc\u00fcman taraf\u0131ndan bulunan, b\u00f6ylece veriler, EL katmanda geldi\u011finde o \u00e7\u0131k\u0131\u015f kodlama uygulan\u0131r sa\u011flamak. alg\u0131lamak i\u00e7in en belirgin desenler $ {ve \# {i\u00e7erir, ancak kodlamak veya bu verileri par\u00e7alara m\u00fcmk\u00fcn olabilir.

ascanbeta.entityExpansion.desc = An exponential entity expansion, or "billion laughs" attack is a type of denial-of-service (DoS) attack. It is aimed at parsers of markup languages like XML or YAML that allow macro expansions.
ascanbeta.entityExpansion.name = Exponential Entity Expansion (Billion Laughs Attack)
ascanbeta.entityExpansion.other = The attack HTTP request received a response after {0} seconds.
ascanbeta.entityExpansion.refs = https\://en.wikipedia.org/wiki/Billion_laughs_attack\nhttps\://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\nhttps\://cwe.mitre.org/data/definitions/776.html
ascanbeta.entityExpansion.soln = Defenses against this kind of attack include capping the memory allocated in an individual parser if loss of the document is acceptable, or treating entities symbolically and expanding them lazily only when (and to the extent) their content is to be used.

ascanbeta.forbiddenBypass.desc = Bypassing 403 endpoints may be possible, the scan rule sent a payload that caused the response to be accessible (status code 200).
ascanbeta.forbiddenBypass.name = Bypassing 403
ascanbeta.forbiddenBypass.refs = https\://www.acunetix.com/blog/articles/a-fresh-look-on-reverse-proxy-related-attacks/\nhttps\://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf\nhttps\://www.contextis.com/en/blog/server-technologies-reverse-proxy-bypass

ascanbeta.httponlysite.desc = The site is only served under HTTP and not HTTPS.
ascanbeta.httponlysite.name = HTTP Only Site
ascanbeta.httponlysite.otherinfo = {0}\nZAP attempted to connect via\: {1}
ascanbeta.httponlysite.otherinfo.connectionfail = Failed to connect.
ascanbeta.httponlysite.otherinfo.differenthosts = Different Hosts.
ascanbeta.httponlysite.otherinfo.noredirection = There was no automatic redirection.
ascanbeta.httponlysite.otherinfo.nossl = Site has no SSL/TLS support.
ascanbeta.httponlysite.otherinfo.redirectionlimit = Redirection limit reached.
ascanbeta.httponlysite.otherinfo.redirecttohttp = Redirected to HTTP.
ascanbeta.httponlysite.otherinfo.urinotencoded = Redirection URI couldn't be encoded.
ascanbeta.httponlysite.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\nhttps\://letsencrypt.org/
ascanbeta.httponlysite.soln = Configure your web or application server to use SSL (https).

ascanbeta.httpoxy.desc = The server initiated a proxied request via the proxy specified in the HTTP Proxy header of the request.Httpoxy typically affects code running in CGI or CGI like environments.\nThis may allow attackers to\:\n* Proxy the outgoing HTTP requests made by the web application\n* Direct the server to open outgoing connections to an address and port of their choosing or\n* Tie up server resources by forcing the vulnerable software to use a malicious proxy
ascanbeta.httpoxy.name = Httpoxy - Proxy Header Misuse
ascanbeta.httpoxy.otherinfo = An outgoing message to {0} was proxied via the host and port that ZAP injected into the HTTP Proxy header.
ascanbeta.httpoxy.refs = https\://httpoxy.org/
ascanbeta.httpoxy.skipped = the Network extension is disabled
ascanbeta.httpoxy.soln = The best immediate mitigation is to block Proxy request headers as early as possible, and before they hit your application.

ascanbeta.httpsashttp.desc = Content which was initially accessed via HTTPS (i.e.\: using SSL/TLS encryption) is also accessible via HTTP (without encryption). 
ascanbeta.httpsashttp.name = HTTPS Content Available via HTTP
ascanbeta.httpsashttp.otherinfo = ZAP attempted to connect via\: {0}
ascanbeta.httpsashttp.refs = https\://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps\://owasp.org/www-community/Security_Headers\nhttps\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps\://caniuse.com/stricttransportsecurity\nhttps\://datatracker.ietf.org/doc/html/rfc6797
ascanbeta.httpsashttp.soln = Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.

ascanbeta.insecurehttpmethod.connect.exploitable.desc = g\u00fcvensiz HTTP y\u00f6ntemi [ {0} ] Bu kaynak i\u00e7in etkin ve exploit oldu\u011funu. Bu HTTP y\u00f6ntemini kullanarak, bir \u00fc\u00e7\u00fcnc\u00fc taraf hizmetine t\u00fcnelli soket ba\u011flant\u0131s\u0131 kurmak m\u00fcmk\u00fcn oldu\u011fu bulunmu\u015ftur. Bu hizmet anonim Spam r\u00f6lesi olarak kullan\u0131lmas\u0131na izin veya web proxy olarak, a\u011f k\u0131s\u0131tlamalar\u0131 atlayarak olacakt\u0131r. Ayr\u0131ca, etkin bir \u015fekilde g\u00fcvenilir olmayan bile\u015fenleri i\u00e7in a\u011f \u00e7evre uzanan bir t\u00fcnel VPN kurmak i\u00e7in kullan\u0131lmas\u0131na olanak verir. 
ascanbeta.insecurehttpmethod.connect.exploitable.extrainfo = CONNECT y\u00f6ntemi [bir soket ba\u011flant\u0131s\u0131 kurmak i\u00e7in kullan\u0131lan {0} ], \u00fczerinden web sunucusuna.
ascanbeta.insecurehttpmethod.delete.exploitable.desc = This method is most commonly used in REST services, It is used to delete a resource.
ascanbeta.insecurehttpmethod.delete.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see https\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.desc = g\u00fcvensiz HTTP y\u00f6ntemi [ {0} ] Bu kaynak i\u00e7in web sunucusunda etkindir. Web sunucusu yap\u0131land\u0131rmas\u0131na ba\u011fl\u0131 olarak ve kaynak hizmet sorumlu temel uygulama, bu ya da s\u00f6m\u00fcr\u00fclebilir olabilir de olmayabilir de. TRACK ve TRACE y\u00f6ntemleri oturum \u00e7erezi ''HttpOnly'' bayra\u011f\u0131n\u0131 kullanarak korunmaktad\u0131r bile, bir uygulama kullan\u0131c\u0131 yetkilendirme belirteci / oturum \u00e7erezi eri\u015fmek i\u00e7in, bir sald\u0131rgan taraf\u0131ndan kullan\u0131l\u0131yor olabilir. Sald\u0131r\u0131n\u0131n ba\u015far\u0131l\u0131 olmas\u0131 i\u00e7in, uygulama kullan\u0131c\u0131 genellikle eski web taray\u0131c\u0131s\u0131 veya bir Same Origin Policy (SOP) bypass a\u00e7\u0131\u011f\u0131 olan bir web taray\u0131c\u0131s\u0131 kullan\u0131yor olmal\u0131s\u0131n\u0131z. ''BA\u011eLANTISI'' y\u00f6ntemi \u00fc\u00e7\u00fcnc\u00fc taraf web sitelerine veya hizmetlerin bir HTTP t\u00fcneli olu\u015fturmak i\u00e7in bir web istemcisi taraf\u0131ndan kullan\u0131labilir.
ascanbeta.insecurehttpmethod.detailed.name = G\u00fcvensiz HTTP Y\u00f6ntemi - {0}
ascanbeta.insecurehttpmethod.extrainfo = OPTIONS y\u00f6ntem bu kaynak i\u00e7in a\u015fa\u011f\u0131daki etkin HTTP y\u00f6ntemleri if\u015fa\: [ {0} ]
ascanbeta.insecurehttpmethod.insecure = response code {0} for insecure HTTP METHOD
ascanbeta.insecurehttpmethod.name = G\u00fcvensiz HTTP Y\u00f6ntemi
ascanbeta.insecurehttpmethod.options.exploitable.desc = This is a diagnostic method and should never be turned on in production mode.
ascanbeta.insecurehttpmethod.options.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods
ascanbeta.insecurehttpmethod.patch.exploitable.desc = This method is now most commonly used in REST services, PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource.
ascanbeta.insecurehttpmethod.patch.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see https\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.potentiallyinsecure = response code {0} for potentially insecure HTTP METHOD
ascanbeta.insecurehttpmethod.put.exploitable.desc = This method was originally intended for file management operations. It is now most commonly used in REST services, PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource..
ascanbeta.insecurehttpmethod.put.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see https\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.soln = B\u00f6yle TRACK, TRACE gibi g\u00fcvensiz y\u00f6ntemleri devre d\u0131\u015f\u0131 b\u0131rak\u0131n ve web sunucusu \u00fczerinde CONNECT ve altta yatan servis uygulamas\u0131 g\u00fcvensiz y\u00f6ntemleri desteklemedi\u011fi emin olun.
ascanbeta.insecurehttpmethod.trace.exploitable.desc = g\u00fcvensiz HTTP y\u00f6ntemi [ {0} ] Bu kaynak i\u00e7in etkin ve exploit oldu\u011funu. TRACK ve TRACE y\u00f6ntemleri oturum \u00e7erezi ''HttpOnly'' bayra\u011f\u0131n\u0131 kullanarak korunmaktad\u0131r bile, bir uygulama kullan\u0131c\u0131 yetkilendirme belirteci / oturum \u00e7erezi eri\u015fmek i\u00e7in, bir sald\u0131rgan taraf\u0131ndan kullan\u0131l\u0131yor olabilir. Sald\u0131r\u0131n\u0131n ba\u015far\u0131l\u0131 olmas\u0131 i\u00e7in, uygulama kullan\u0131c\u0131 genellikle eski web taray\u0131c\u0131s\u0131 veya bir Same Origin Policy (SOP) bypass a\u00e7\u0131\u011f\u0131 olan bir web taray\u0131c\u0131s\u0131 kullan\u0131yor olmal\u0131s\u0131n\u0131z.
ascanbeta.insecurehttpmethod.trace.exploitable.extrainfo = Bir \u0130ZLE iste\u011fi \u00f6zel bir \u00e7erez de\u011feri ile, bu istek i\u00e7in g\u00f6nderildi [ {0} ]. Bu \u00e7erez de\u011feri a\u00e7\u0131\u011f\u0131 teyit HTTP yan\u0131t\u0131 a\u00e7\u0131klanm\u0131\u015ft\u0131r.
ascanbeta.insecurehttpmethod.webdav.exploitable.desc = This HTTP method is a WEBDAV method\: {0}. If this server is not offering any WEBDAV services, these methods should not be available.
ascanbeta.insecurehttpmethod.webdav.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods

ascanbeta.integeroverflow.desc = An integer overflow condition exists when an integer used in a compiled program extends beyond the range limits and has not been properly checked from the input stream.
ascanbeta.integeroverflow.error1 = Potansiyel Tamsay\u0131 Ta\u015fmas\u0131. Durum kodu, rastgele tamsay\u0131lardan olu\u015fan uzun bir dizinin girdisiyle de\u011fi\u015fti.
ascanbeta.integeroverflow.error2 = Potansiyel Tamsay\u0131 Ta\u015fmas\u0131. Durum kodu, s\u0131f\u0131rlardan olu\u015fan uzun bir dizinin girdisiyle de\u011fi\u015fti.
ascanbeta.integeroverflow.error3 = Potansiyel Tamsay\u0131 Ta\u015fmas\u0131. Durum kodu, birlerden olu\u015fan uzun bir dizinin girdisiyle de\u011fi\u015fti.
ascanbeta.integeroverflow.error4 = Potansiyel Tamsay\u0131 Ta\u015fmas\u0131. Durum kodu, dokuzlardan olu\u015fan uzun bir dizinin girdisiyle de\u011fi\u015fti.
ascanbeta.integeroverflow.name = Tamsay\u0131 Ta\u015fma Hatas\u0131
ascanbeta.integeroverflow.refs = https\://en.wikipedia.org/wiki/Integer_overflow\nhttps\://cwe.mitre.org/data/definitions/190.html
ascanbeta.integeroverflow.soln = In order to prevent overflows and divide by 0 (zero) errors in the application, please rewrite the backend program, checking if the values of integers being processed are within the application's allowed range. This will require a recompilation of the backend executable.

ascanbeta.name = Active Scan Rules - beta

ascanbeta.noanticsrftokens.desc = Hay\u0131r Anti-CSRF belirte\u00e7leri HTML g\u00f6nderme formunda bulundu.
ascanbeta.noanticsrftokens.name = Anti-CSRF belirte\u00e7leri olmamas\u0131

ascanbeta.oobxss.name = Out of Band XSS
ascanbeta.oobxss.skipped = no Active Scan OAST service is selected.

ascanbeta.proxydisclosure.attack = TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.
ascanbeta.proxydisclosure.desc = {0} proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n - A list of targets for an attack against the application.\n - Potential vulnerabilities on the proxy servers that service the application.\n - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. 
ascanbeta.proxydisclosure.extrainfo.proxyserver = - {0}
ascanbeta.proxydisclosure.extrainfo.proxyserver.header = Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between ZAP and the application/web server\: 
ascanbeta.proxydisclosure.extrainfo.silentproxyserver = - {0}
ascanbeta.proxydisclosure.extrainfo.silentproxyserver.header = The following 'silent' proxy servers were identified. Due to their behaviour, it is not known at which point in the network topology these proxy servers reside\:
ascanbeta.proxydisclosure.extrainfo.traceenabled = The 'TRACE' method is enabled on one or more of the proxy servers, or on the origin server. This method leaks all information submitted from the web browser and proxies back to the user agent. This may facilitate 'Cross Site Tracing' attacks. 
ascanbeta.proxydisclosure.extrainfo.unknown = Bilinmeyen
ascanbeta.proxydisclosure.extrainfo.webserver = - {0}
ascanbeta.proxydisclosure.extrainfo.webserver.header = The following web/application server has been identified\: 
ascanbeta.proxydisclosure.name = Proxy Disclosure
ascanbeta.proxydisclosure.refs = https\://tools.ietf.org/html/rfc7231\#section-5.1.2
ascanbeta.proxydisclosure.soln = Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\nDisable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\nConfigure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\nConfigure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n

ascanbeta.relativepathconfusion.desc = The web server is configured to serve responses to ambiguous URLs in a manner that is likely to lead to confusion about the correct "relative path" for the URL. Resources (CSS, images, etc.) are also specified in the page response using relative, rather than absolute URLs. In an attack, if the web browser parses the "cross-content" response in a permissive manner, or can be tricked into permissively parsing the "cross-content" response, using techniques such as framing, then the web browser may be fooled into interpreting HTML as CSS (or other content types), leading to an XSS vulnerability.
ascanbeta.relativepathconfusion.extrainfo.contenttypeenabled = A Content Type of "{0}" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  
ascanbeta.relativepathconfusion.extrainfo.framingallowed = No X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.extrainfo.morethanonebasetag = More than one <base> tag was specified in the HTML <head> tag to define the location for relative URLs, which is not valid.
ascanbeta.relativepathconfusion.extrainfo.nobasetag = No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.
ascanbeta.relativepathconfusion.extrainfo.nocontenttype = No Content Type was specified, so Quirks Mode is not required to exploit the vulnerability in the web browser. 
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledexplicitly = Quirks Mode is explicitly enabled via <meta http-equiv\="{0}", allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitly = Quirks Mode is implicitly enabled via the use of an old DOCTYPE with PUBLIC id "{0}", allowing the specified Content Type to be bypassed in some web browsers.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitlynodoctype = Quirks Mode is implicitly enabled via the absence of a DOCTYPE, allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.name = Relative Path Confusion
ascanbeta.relativepathconfusion.refs = https\://arxiv.org/abs/1811.00917\nhttps\://hsivonen.fi/doctype/\nhttps\://www.w3schools.com/tags/tag_base.asp
ascanbeta.relativepathconfusion.soln = Web servers and frameworks should be updated to be configured to not serve responses to ambiguous URLs in such a way that the relative path of such URLs could be mis-interpreted by components on either the client side, or server side.\nWithin the application, the correct use of the "<base>" HTML tag in the HTTP response will unambiguously specify the base URL for all relative URLs in the document.\nUse the "Content-Type" HTTP response header to make it harder for the attacker to force the web browser to mis-interpret the content type of the response.\nUse the "X-Content-Type-Options\: nosniff" HTTP response header to prevent the web browser from "sniffing" the content type of the response.\nUse a modern DOCTYPE such as "<\!doctype html>" to prevent the page from being rendered in the web browser using "Quirks Mode", since this results in the content type being ignored by the web browser.\nSpecify the "X-Frame-Options" HTTP response header to prevent Quirks Mode from being enabled in the web browser using framing attacks. 

ascanbeta.sessionfixation.alert.attack = {0} alan\u0131\: [ {1} ]
ascanbeta.sessionfixation.alert.cookie.extrainfo = \u00c7erez alan [zaman \u00c7erez yan\u0131t set {0} ] NULL olarak ayarlan\u0131r\: [ {1} istekte \u00f6d\u00fcn\u00e7 (ge\u00e7erli) \u00e7erez de\u011feri ile yan\u0131t] Cookie seti [ {1} ]\: [ {2} ]
ascanbeta.sessionfixation.alert.cookie.extrainfo.loginpage = The url on which the issue was discovered was flagged as a logon page.\n\nThis issue should be manually validated by checking that the session token set on the logon page is still valid once logged in, and that the token can be used to directly access a page/resource which should require the user to be logged in.
ascanbeta.sessionfixation.alert.url.extrainfo = URL parametresi / sahte URL parametresi [BIR olas\u0131 bir oturum de\u011feri HTML \u00e7\u0131kt\u0131s\u0131nda URL''ler ortaya \u00e7\u0131km\u0131\u015ft\u0131r {0} ] NULL olarak ayarlan\u0131r\: [ {1} ] Bu ''\u00f6d\u00fcn\u00e7'' oturum [Zaman {1} ] bir sonraki kullan\u0131l\u0131r Bu URL i\u00e7in iste\u011fi, yeni bir oturum olu\u015fturulur.
ascanbeta.sessionfixation.alert.url.extrainfo.loginpage = Sorun ke\u015ffedildi hangi url bir oturum a\u00e7ma sayfas\u0131 olarak i\u015faretlendi.
ascanbeta.sessionfixation.desc = Oturum Fixation m\u00fcmk\u00fcn olabilir. Bu sorun (kullan\u0131c\u0131 uygulamas\u0131 kendilerini do\u011frular oldu\u011fu) bir giri\u015f URL olu\u015fursa, o zaman URL sonra ma\u011fdurun kimli\u011fini varsaymak i\u00e7in bir kurban, sabit bir oturum kimli\u011fi ile birlikte, bir sald\u0131rgan taraf\u0131ndan verilebilir Verilen oturum kimli\u011fi kullanarak. Sorun olmayan bir oturum a\u00e7ma sayfas\u0131 ile olu\u015fursa, URL ve sabit oturum kimli\u011fi sadece do\u011frulanmam\u0131\u015f kullan\u0131c\u0131n\u0131n eylemlerini izlemek i\u00e7in bir sald\u0131rgan taraf\u0131ndan kullan\u0131l\u0131yor olabilir. G\u00fcvenlik a\u00e7\u0131\u011f\u0131 yerine URL (GET) parametresine bir \u00e7erez alan\u0131 veya bir form alan\u0131n\u0131n (POST parametresi) olu\u015fursa, o zaman ba\u015fka bir g\u00fcvenlik a\u00e7\u0131\u011f\u0131 da a\u00e7\u0131\u011f\u0131 izin, kurban\u0131n taray\u0131c\u0131s\u0131nda \u00e7erez alan\u0131n\u0131 ayarlamak i\u00e7in gerekli olabilir istismar edilecek.
ascanbeta.sessionfixation.name = Oturum Fixation
ascanbeta.sessionfixation.refs = https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication\nhttps\://owasp.org/www-community/attacks/Session_fixation\nhttps\://acrossecurity.com/papers/session_fixation.pdf\nhttps\://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html
ascanbeta.sessionfixation.soln = 1) Prevent the attacker from gaining a session id by enforcing strict session ids, and by only allocating session ids upon successful authentication to the application.\n2) The server should always create a new session id upon authentication, regardless of whether a session is already in place.\n3) Bind the session id to some identifiable client attribute combination, such as IP address, SSL client certificate.\n4) Sessions, when destroyed, must be destroyed on the server, as well as on the client.\n5) Implement a logout mechanism which will destroy all previous sessions for the client.\n6) Implement absolute session timeouts.\n7)Switch from a URL based to a cookie or form based session id implementation, as the latter typically require additional vulnerabilities, in order to be exploitable by an attacker\n

ascanbeta.sessionidaccessiblebyjavascript.alert.attack = {0} alan\u0131\: [ {1} ]
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo = oturum tan\u0131mlay\u0131c\u0131s\u0131 {0} alan\u0131 [ {1} ], de\u011fer [ {2} ] taray\u0131c\u0131n\u0131zda JavaScript kullan\u0131larak ula\u015f\u0131labilir
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo.loginpage = Sorun ke\u015ffedildi hangi url bir oturum a\u00e7ma sayfas\u0131 olarak i\u015faretlendi.
ascanbeta.sessionidaccessiblebyjavascript.desc = (URL NULL adl\u0131 parametre alan ayarlayarak de\u011fi\u015ftirilmi\u015f) sunucu taraf\u0131ndan g\u00f6nderilen bir oturum kimli\u011fi tan\u0131mlama istemci \u00fczerinde JavaScript ile ula\u015f\u0131labilir. Ba\u015fka bir g\u00fcvenlik a\u00e7\u0131\u011f\u0131 ile birlikte, bu oturumun ka\u00e7\u0131r\u0131ld\u0131 izin verebilir.  
#Session Id Cookie accessible by JavaScript
ascanbeta.sessionidaccessiblebyjavascript.name = JavaScript i\u00e7in Eri\u015filebilir Session ID \u00c7erez
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidaccessiblebyjavascript.refs=
ascanbeta.sessionidaccessiblebyjavascript.soln = Web taray\u0131c\u0131s\u0131nda JavaScript taraf\u0131ndan eri\u015filen engellemek i\u00e7in, bir oturum kimli\u011fi i\u00e7eren bir \u00e7erez ayarlarken 1) 'sadece_http' bayra\u011f\u0131n\u0131 kullan\u0131n.  

ascanbeta.sessionidexpiry.alert.attack = {0} alan\u0131\: [ {1} ]
ascanbeta.sessionidexpiry.alert.extrainfo = oturum tan\u0131mlay\u0131c\u0131s\u0131 {0} alan\u0131 [ {1} ], de\u011fer [ {2} ] kadar ula\u015f\u0131labilir [ {3} ] (cookie al\u0131nan beri {4} ), oturum tahrip edilmi\u015ftir.
ascanbeta.sessionidexpiry.alert.extrainfo.loginpage = Sorun ke\u015ffedildi hangi url bir oturum a\u00e7ma sayfas\u0131 olarak i\u015faretlendi.
ascanbeta.sessionidexpiry.browserclose = taray\u0131c\u0131 yak\u0131n
ascanbeta.sessionidexpiry.desc = (URL NULL adl\u0131 parametre alan ayarlayarak de\u011fi\u015ftirilmi\u015f) sunucu taraf\u0131ndan g\u00f6nderilen bir oturum kimli\u011fi \u00e7erez zaman a\u015f\u0131r\u0131 bir s\u00fcre i\u00e7in ge\u00e7erli olacak \u015fekilde ayarlan\u0131r. Bu kullan\u0131c\u0131 unutuyor oturumu e\u011fer \u00e7\u0131k\u0131\u015f i\u015flevselli\u011fi do\u011fru oturumu yok etmez ise, bir sald\u0131rgan taraf\u0131ndan s\u00f6m\u00fcr\u00fclebilir olabilir veya oturum kimli\u011fi ba\u015fka yollarla tehlikeye e\u011fer.     
#Session Id Cookie Expiry
ascanbeta.sessionidexpiry.name = Session ID Vade S\u00fcresi / Max-Ya\u015f A\u015f\u0131r\u0131 oldu\u011fu
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexpiry.refs=
ascanbeta.sessionidexpiry.soln = 1) kullan\u0131n\u0131z uzun s\u00fcre kullan\u0131labilir olmaktan \u00f6nlemek i\u00e7in, bir oturum kimli\u011fi i\u00e7eren bir \u00e7erez ayarlarken ya da 'Max-Ya\u015f' \u00e7erez direktifleri 'Ge\u00e7erlilik'. 2) Bu \u00e7\u0131k\u0131\u015f i\u015flevselli\u011fi var emin olun ve do\u011fru oturumu yok etti\u011fini. 3) Bir oturum kimli\u011fi tehlikeye ise, bu istismar olmayabilir sa\u011flamak i\u00e7in di\u011fer \u00f6nlemleri kullan\u0131n.
ascanbeta.sessionidexpiry.timeexpired = S\u00fcresi Doldu
ascanbeta.sessionidexpiry.timelessthanonehour = Az bir saat
ascanbeta.sessionidexpiry.timemorethanoneday = Birden fazla g\u00fcn
ascanbeta.sessionidexpiry.timemorethanonehour = Birden fazla saatlik
ascanbeta.sessionidexpiry.timemorethanoneweek = Birden fazla hafta

ascanbeta.sessionidexposedinurl.alert.attack = {0} alan\u0131\: [ {1} ]
ascanbeta.sessionidexposedinurl.alert.extrainfo = {0} alan\u0131 [ {1} ] bir a\u00e7\u0131k oturum tan\u0131mlay\u0131c\u0131s\u0131 i\u00e7erir [ {2} ]
ascanbeta.sessionidexposedinurl.alert.extrainfo.loginpage = Sorun ke\u015ffedildi hangi url bir oturum a\u00e7ma sayfas\u0131 olarak i\u015faretlendi.
ascanbeta.sessionidexposedinurl.desc = A session id is exposed in the URL. By sharing such a website URL (containing the session id), a naive user may be inadvertently granting access to their data, compromising its confidentiality, integrity, and availability.  URLs containing the session identifier also appear in web browser bookmarks, web server log files, and proxy server log files. 
#Exposed Session Id messages
ascanbeta.sessionidexposedinurl.name = Exposed Session ID
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexposedinurl.refs = https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidexposedinurl.soln = , Daha g\u00fcvenli bir oturum y\u00f6netimi uygulamas\u0131 kullan\u0131n gibi kolayca tipik sunucu g\u00fcnl\u00fck dosyalar\u0131 veya web taray\u0131c\u0131 yer imlerine g\u00f6r\u00fcnm\u00fcyor yanl\u0131\u015fl\u0131kla payla\u015f\u0131lan ve olmayan oturum \u00e7erezleri kullan\u0131r biri olarak.

ascanbeta.sessionidsentinsecurely.alert.attack = {0} alan\u0131\: [ {1} ]
ascanbeta.sessionidsentinsecurely.alert.extrainfo = oturum tan\u0131mlay\u0131c\u0131s\u0131 {0} alan\u0131 [ {1} ], de\u011fer [ {2} ] g\u00fcvensiz mekanizma yoluyla g\u00f6nderilebilir.  
ascanbeta.sessionidsentinsecurely.alert.extrainfo.loginpage = Sorun ke\u015ffedildi hangi url bir oturum a\u00e7ma sayfas\u0131 olarak i\u015faretlendi.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.secureflagnotset = 'G\u00fcvenli' bayrak sunucusu taraf\u0131ndan sa\u011flanan oturum \u00e7erezi ayarlan\u0131r de\u011fildi.
ascanbeta.sessionidsentinsecurely.desc = Bir oturum kimli\u011fi g\u00fcvensiz mekanizma yoluyla g\u00f6nderilebilir. HTTP HTTPS yerine kullan\u0131ld\u0131\u011f\u0131 zaman, istekte bir tan\u0131mlama durumunda, bu meydana gelir. (URL NULL adl\u0131 parametre alan ayarlayarak de\u011fi\u015ftirilmi\u015f) yan\u0131t olarak sunucu taraf\u0131ndan g\u00f6nderilen bir cookie, bayra\u011f\u0131 ayarl\u0131 de\u011fil 'g\u00fcvenli' \u00e7erez izin durumunda HTTP \u00fczerinden yerine HTTPS \u00fczerinden daha sonra g\u00f6nderilmek \u00fczere . Bu a\u011f, yolda pasif kulak misafiri kurban\u0131n oturumuna tam eri\u015fim sa\u011flamas\u0131na olanak verebilir.  
#Session Id Cookie not sent securely
ascanbeta.sessionidsentinsecurely.name = Oturum Kimli\u011fi G\u00fcvensiz Bula\u015fan
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidsentinsecurely.refs = https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidsentinsecurely.soln = 1) bir oturum kimli\u011fi taray\u0131c\u0131s\u0131 ve web sunucusu aras\u0131nda iletilen t\u00fcm sayfalar i\u00e7in () HTTPS i\u00e7in SSL / TLS son kullan\u0131labilir s\u00fcr\u00fcm\u00fcn\u00fc kullan\u0131n. 2) haberle\u015fme \u015fifresiz HTTP protokol\u00fc a\u015fa\u011f\u0131 zorla izin vermeyin. Bir oturum kimli\u011fi i\u00e7eren bir \u00e7erez ayarlarken 3) g\u00fcvensiz mekanizma ile onun sonraki ge\u00e7i\u015fini \u00f6nlemek i\u00e7in, 'g\u00fcvenli' bayra\u011f\u0131n\u0131 kullan\u0131n. 4) g\u00fcvenli HTTPS e\u015fde\u011fer sayfaya \u0130leri g\u00fcvenli olmayan HTTP sayfas\u0131 istekleri.  

ascanbeta.shellshock.desc = Sunucu uzak sald\u0131rganlar\u0131n rasgele kod y\u00fcr\u00fctmesine olanak Bash kabu\u011funun bir s\u00fcr\u00fcm\u00fcn\u00fc \u00e7al\u0131\u015ft\u0131ran 
ascanbeta.shellshock.extrainfo = CVE-2014-6271 Nereden\: OpenSSH sshd de ForceCommand \u00f6zelli\u011fini i\u00e7eren vekt\u00f6rler taraf\u0131ndan g\u00f6sterildi\u011fi gibi uzak sald\u0131rganlar\u0131n, bir haz\u0131rlanm\u0131\u015f bir ortamda yoluyla iste\u011fe ba\u011fl\u0131 kod \u00e7al\u0131\u015ft\u0131rmas\u0131na olanak ortam de\u011fi\u015fkenlerinin de\u011ferlerine fonksiyon tan\u0131mlar\u0131 sonra dizeleri firar GNU Bash ile 4.3 s\u00fcre\u00e7leri, \u00e7evreyi ayar\u0131 Bash y\u00fcr\u00fctme, aka bir ayr\u0131cal\u0131k s\u0131n\u0131r\u0131 boyunca meydana geldi\u011fi mod_cgi ve Apache HTTP Server mod_cgid mod\u00fcl\u00fc mod\u00fclleri, tan\u0131mlanmam\u0131\u015f DHCP istemcileri taraf\u0131ndan y\u00fcr\u00fct\u00fclen komut dosyalar\u0131 ve di\u011fer durumlarda "ShellShock." NOT\: Bu sorunla ilgili d\u00fczeltme, \u00f6zg\u00fcn yanl\u0131\u015f; CVE-2014-7169 hala yanl\u0131\u015f d\u00fczeltme sonras\u0131nda mevcut g\u00fcvenlik a\u00e7\u0131\u011f\u0131n\u0131 kar\u015f\u0131lamak i\u00e7in atanm\u0131\u015ft\u0131r.
ascanbeta.shellshock.name = Uzaktan Kod Y\u00fcr\u00fctme - Shell Shock
ascanbeta.shellshock.ref = https\://nvd.nist.gov/vuln/detail/CVE-2014-6271\nhttps\://www.troyhunt.com/everything-you-need-to-know-about2/
ascanbeta.shellshock.soln = En son s\u00fcr\u00fcm\u00fcne sunucuda Bash g\u00fcncelleyin
ascanbeta.shellshock.timingbased.evidence = Sald\u0131r\u0131, [bir gecikme kullanarak {0} ] milisaniye uyar\u0131lm\u0131\u015f ve tespit edildi

ascanbeta.sourcecodedisclosure.desc = The source code for the current page was disclosed by the web server.
ascanbeta.sourcecodedisclosure.gitbased.evidence = The source code for [{0}] was extracted using [{1}]
ascanbeta.sourcecodedisclosure.gitbased.name = Source Code Disclosure - Git 
ascanbeta.sourcecodedisclosure.gitbased.soln = Ensure that Git metadata files are not deployed to the web server or application server
ascanbeta.sourcecodedisclosure.lfibased.extrainfo = The output for the source code filename [{0}] differs sufficiently from that of the random parameter [{1}], at [{2}%], compared to a threshold of [{3}%]
ascanbeta.sourcecodedisclosure.lfibased.name = Source Code Disclosure - File Inclusion
ascanbeta.sourcecodedisclosure.svnbased.extrainfo = kaynak kodu [ {0} ] bulunmu\u015ftur [ {1} ]
ascanbeta.sourcecodedisclosure.svnbased.name = Kaynak Kod A\u00e7\u0131klama - SVN
ascanbeta.sourcecodedisclosure.svnbased.soln = SVN meta dosyalar\u0131 web sunucusu veya uygulama sunucusu da\u011f\u0131t\u0131lm\u0131\u015f oldu\u011fundan emin olun

ascanbeta.sourcecodedisclosurecve-2012-1823.desc = CGI kullanarak \u00e7al\u0131\u015fmak \u00fczere yap\u0131land\u0131r\u0131lm\u0131\u015f Baz\u0131 PHP s\u00fcr\u00fcmleri, do\u011fru PHP kaynak kodu a\u00e7\u0131klama ve keyfi kod y\u00fcr\u00fct\u00fclmesine olanak bir \u00e7\u0131kmam\u0131\u015f "\=" karakteri yoksun sorgu dizeleri dokunmay\u0131n. Bu durumda, PHP dosyas\u0131n\u0131n i\u00e7eri\u011fi web taray\u0131c\u0131s\u0131 do\u011frudan ikram edildi. O da d\u00fcz HTML i\u00e7erebilir ancak bu \u00e7\u0131k\u0131\u015f, genellikle, PHP i\u00e7erecektir.
ascanbeta.sourcecodedisclosurecve-2012-1823.name = Kaynak Kodu Bilgilendirme - CVE-2012-1823
ascanbeta.sourcecodedisclosurecve-2012-1823.soln = PHP'nin en son kararl\u0131 s\u00fcr\u00fcme y\u00fckseltin veya "RewriteCond" ve "RewriteRule" direktiflerini kullanarak k\u00f6t\u00fc niyetli istekleri s\u00fczmek i\u00e7in Apache web sunucusu ve mod_rewrite mod\u00fcl\u00fcn\u00fc kullanabilirsiniz.

ascanbeta.ssrf.desc = The web server receives a remote address and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.
ascanbeta.ssrf.name = Server Side Request Forgery
ascanbeta.ssrf.otherinfo.canaryinbody = The canary token from the out-of-band service was found in the response body.
ascanbeta.ssrf.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
ascanbeta.ssrf.skipped = no Active Scan OAST service is selected.
ascanbeta.ssrf.soln = Do not accept remote addresses as request parameters, and if you must, ensure that they are validated against an allow-list of expected values.

ascanbeta.text4shell.desc = Apache Commons Text prior to 1.10.0 allows RCE when applied to untrusted input due to insecure interpolation defaults.Apache Commons Text performs variable interpolation, allowing properties to be dynamically evaluated and expanded.The application has been shown to initial contact with remote servers via variable interpolation and may well be vulnerable to Remote Code Execution (RCE).
ascanbeta.text4shell.name = Text4shell (CVE-2022-42889)
ascanbeta.text4shell.refs = https\://nvd.nist.gov/vuln/detail/CVE-2022-42889\nhttps\://securitylab.github.com/advisories/GHSL-2022-018_Apache_Commons_Text/
ascanbeta.text4shell.skipped = no Active Scan OAST service is selected.
ascanbeta.text4shell.soln = Upgrade Apache Commons Text prior to version 1.10.0 or newer.

ascanbeta.usernameenumeration.alert.attack = I\u015fleyin [ {0} ] alan\: [ {1} ] ve monit\u00f6r \u00e7\u0131k\u0131\u015f\u0131 
ascanbeta.usernameenumeration.alert.extrainfo = [ {0} ] parametresi [ {1} ], bir kullan\u0131c\u0131 olup olmad\u0131\u011f\u0131n\u0131 hakk\u0131nda bilgi s\u0131zd\u0131r\u0131yor. [ {5} ] ge\u00e7erli orijinal ad\u0131 de\u011feri \u00e7\u0131k\u0131\u015f\u0131 farkl\u0131l\u0131klar, [ {2} ], ve ge\u00e7ersiz kullan\u0131c\u0131 ad\u0131 de\u011feri [ {3} ] \u015funlard\u0131r\: [ {4} ]
ascanbeta.usernameenumeration.desc = Bu ge\u00e7erli ve ge\u00e7ersiz adlar\u0131 verilmektedir HTTP yan\u0131tlar\u0131 farkl\u0131 dayal\u0131 adlar\u0131n\u0131 saymak m\u00fcmk\u00fcn olabilir. Bu b\u00fcy\u00fck \u00f6l\u00e7\u00fcde sisteme kar\u015f\u0131 \u015fifre zorlamas\u0131 sald\u0131r\u0131lar\u0131n ba\u015far\u0131 olas\u0131l\u0131\u011f\u0131n\u0131 art\u0131racakt\u0131r. Yanl\u0131\u015f pozitif bazen ZAP 'Sald\u0131r\u0131 G\u00fcc\u00fc' Se\u00e7ene\u011fi art\u0131rarak minimize edilebilir unutmay\u0131n. El bu asl\u0131nda bir sorun olup olmad\u0131\u011f\u0131n\u0131 teyit etmek i\u00e7in 'Di\u011fer Bilgiler' alan\u0131n\u0131 kontrol edin. 
ascanbeta.usernameenumeration.name = Olas\u0131 Ad\u0131 numaraland\u0131rma
ascanbeta.usernameenumeration.refs = https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account.html\nhttps\://dl.ifip.org/db/conf/sec/sec2011/FreilingS11.pdf\nhttps\://cwe.mitre.org/data/definitions/204.html
ascanbeta.usernameenumeration.soln = Bir kullan\u0131c\u0131 ad\u0131 ge\u00e7erli veya ge\u00e7ersiz olup olmad\u0131\u011f\u0131 ayr\u0131nt\u0131lar\u0131n\u0131 if\u015fa etmeyin. \u00d6zellikle, ba\u015far\u0131s\u0131z oturum a\u00e7ma giri\u015fimleri i\u00e7in, ge\u00e7ersiz bir kullan\u0131c\u0131 ve hata iletisinde ge\u00e7ersiz \u015fifre, sayfa ba\u015fl\u0131\u011f\u0131, sayfa i\u00e7eri\u011fi, HTTP ba\u015fl\u0131klar\u0131 veya y\u00f6nlendirme mant\u0131\u011f\u0131 aras\u0131nda ayr\u0131m yoktur.


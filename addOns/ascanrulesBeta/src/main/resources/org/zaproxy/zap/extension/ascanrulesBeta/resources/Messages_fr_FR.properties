ascanbeta.desc = Beta status active scan rules
ascanbeta.name = Active Scan Rules - beta

ascanbeta.backupfiledisclosure.name = Divulgation de fichier de sauvegarde
ascanbeta.backupfiledisclosure.desc = Une sauvegarde du fichier a \u00e9t\u00e9 d\u00e9voil\u00e9e par le serveur web
ascanbeta.backupfiledisclosure.soln = Ne modifiez pas les fichiers in situ sur le serveur web, et faites en sorte que les fichiers inutiles (y compris les fichiers cach\u00e9s) soient supprim\u00e9s du serveur web.
ascanbeta.backupfiledisclosure.evidence = Une sauvegarde de [{0}] est disponible \u00e0 [{1}]
ascanbeta.backupfiledisclosure.refs = https\://cwe.mitre.org/data/definitions/530.html\n\
https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.html

ascanbeta.cookieslack.name = Cookie Slack Detector
ascanbeta.cookieslack.desc = Repeated GET requests\: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.
ascanbeta.cookieslack.otherinfo.intro = Cookies that don't have expected effects can reveal flaws in application logic. In the worst case, this can reveal where authentication via cookie token(s) is not actually enforced.\n\

ascanbeta.cookieslack.session.warning = NOTE\: Because of its name this cookie may be important, but dropping it appears to have no effect\: [{0}] \n\

ascanbeta.cookieslack.affect.response.yes = These cookies affected the response\: 
ascanbeta.cookieslack.affect.response.no = These cookies did NOT affect the response\: 
ascanbeta.cookieslack.session.destroyed = Dropping this cookie appears to have invalidated the session\: [{0}] A follow-on request with all original cookies still had a different response than the original request. \n\

ascanbeta.cookieslack.separator = ,
ascanbeta.cookieslack.endline = \n\


ascanbeta.cors.info.name=CORS Header
ascanbeta.cors.info.desc=Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any other origins (domain, scheme, or port) than its own from which a browser should permit loading of resources. It relaxes the Same-Origin Policy (SOP).
ascanbeta.cors.vuln.name=CORS Misconfiguration
ascanbeta.cors.vuln.desc=This CORS misconfiguration could allow an attacker to perform AJAX queries to the vulnerable website from a malicious page loaded by the victim's user agent.\n\
In order to perform authenticated AJAX queries, the server must specify the header "Access-Control-Allow-Credentials\: true" and the "Access-Control-Allow-Origin" header must be set to null or the malicious page's domain. Even if this misconfiguration doesn't allow authenticated AJAX requests, unauthenticated sensitive content can still be accessed (e.g intranet websites).\n\
A malicious page can belong to a malicious website but also a trusted website with flaws (e.g XSS, support of HTTP without TLS allowing code injection through MITM, etc).
ascanbeta.cors.soln=If a web resource contains sensitive information, the origin should be properly specified in the Access-Control-Allow-Origin header. Only trusted websites needing this resource should be specified in this header, with the most secured protocol supported.
ascanbeta.cors.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n\
https\://portswigger.net/web-security/cors

ascanbeta.crossdomain.name = Mauvaise configuration inter-domaines
#the refs cannot be customised for each sub-category (Adobe, Silverlight, etc.)
ascanbeta.crossdomain.refs = http\://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html\n\
http\://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf\n\
http\://msdn.microsoft.com/en-US/library/cc197955%28v\=vs.95%29.aspx\n\
http\://msdn.microsoft.com/en-us/library/cc838250%28v\=vs.95%29.aspx
ascanbeta.crossdomain.adobe.read.name = Mauvaise configuration inter-domaine - Adobe - Read
ascanbeta.crossdomain.adobe.send.name = Mauvaise configuration inter-domaine - Adobe - Send
ascanbeta.crossdomain.adobe.desc = Contrefa\u00e7on de requ\u00eate inter-site de type Flash/Silverlight possible, en raison d'un probl\u00e8me de configuration sur le serveur web. 
ascanbeta.crossdomain.adobe.read.soln = Configurez le fichier crossdomain.xml pour restreindre la liste des domaines autoris\u00e9s \u00e0 faire des requ\u00eates inter-domaines en lecture \u00e0 ce serveur web, \u00e0 l'aide de <allow-access-from domain\="example.com">. Vous devriez donner uniquement acc\u00e8s \u00e0 "*" (tous domaines) si vous \u00eates certain que ce service n'h\u00e9berge pas des donn\u00e9es sous contr\u00f4le d'acc\u00e8s, personnalis\u00e9es ou priv\u00e9es.
ascanbeta.crossdomain.adobe.read.extrainfo = Le serveur internet permet des requ\u00eates inter-domaines malveillantes pour la lecture de donn\u00e9es en provenance des composants Flash/Silverlight, servies de n'importe quel domaine de tierce partie \u00e0 ce domaine. Si l'utilisateur et victime est connect\u00e9 \u00e0 ce service, les requ\u00eates de lecture malveillantes sont trait\u00e9es en utilisant les privil\u00e8ges de la victime, ce qui conduirait \u00e0 la compromission des donn\u00e9es de ce service par un site internet tiers non autoris\u00e9, via le navigateur internet de la victime. Ceci sera d'autant plus probl\u00e9matique si une impl\u00e9mentation de session bas\u00e9e sur les cookies est utilis\u00e9e. 
ascanbeta.crossdomain.adobe.send.soln = Configurez le fichier crossdomain.xml pour restreindre la liste des domaines autoris\u00e9s \u00e0 faire  des requ\u00eates d'envoi inter-domaines (mais pas n\u00e9cessairement de lecture) \u00e0 ce serveur internet, en utilisant <allow-http-request-headers-from domain\="example.com" headers\="Authorization,X-Blahh">. Vous ne devriez donner acc\u00e8s \u00e0 "*" (tous domaines) que si vous \u00eates certain que ce service n'est pas vuln\u00e9rable \u00e0 l'usurpation de requ\u00eates inter-site (Cross Site Request Forgery - CSRF).
ascanbeta.crossdomain.adobe.send.extrainfo = Le serveur internet permet des requ\u00eates inter-domaines malveillantes pour la lecture (mais pas  n\u00e9cessairement pour l'\u00e9criture) de donn\u00e9es en provenance des composants Flash/Silverlight, servies de n'importe quel domaine d'une tierce partie \u00e0 ce domaine. Si l'utilisateur et victime est connect\u00e9 \u00e0 ce service, les requ\u00eates d'envoi malveillantes sont trait\u00e9es en utilisant les privil\u00e8ges de la victime, conduisant ainsi \u00e0 des attaques de type contrefa\u00e7on de requ\u00eates inter-site (CSRF) via le navigateur de la victime. Ceci est particuli\u00e8rement probl\u00e9matique si l'impl\u00e9mentation de la session est bas\u00e9e sur les cookies.
ascanbeta.crossdomain.silverlight.name = Mauvaise configuration inter-domaine - Silverlight
ascanbeta.crossdomain.silverlight.desc = Contrefa\u00e7on de requ\u00eate inter-site de type Silverlight possible, en raison d'un probl\u00e8me de configuration sur le serveur web.
ascanbeta.crossdomain.silverlight.soln = Configurez le fichier clientaccesspolicy.xml pour restreindre la liste des domaines autoris\u00e9s \u00e0 faire des requ\u00eates inter-domaines en lecture \u00e0 ce serveur web, \u00e0 l'aide de <domain uri\="https\://example.com" />. Vous devriez donner acc\u00e8s \u00e0 "*" (tous domaines) que si vous \u00eates certain que ce service n'h\u00e9berge pas des donn\u00e9es sous contr\u00f4le d'acc\u00e8s, personnalis\u00e9es ou priv\u00e9es.
ascanbeta.crossdomain.silverlight.extrainfo = Le serveur internet permet des requ\u00eates inter-domaines malveillantes pour la lecture en provenance de composants Silverlight, envoy\u00e9es de n'importe quel domaine d'une tierce partie \u00e0 ce domaine. Si l'utilisateur et victime est connect\u00e9 \u00e0 ce service, les requ\u00eates sont trait\u00e9es en utilisant les privil\u00e8ges de la victime, ce qui conduirait \u00e0 la compromission des donn\u00e9es de ce service par un site internet tiers non autoris\u00e9, via le navigateur internet de la victime. Il peut \u00e9galement se pr\u00e9senter des attaques de type contrefa\u00e7on de requ\u00eates inter-site (CSRF). Ceci sera d'autant plus probl\u00e9matique si l'impl\u00e9mentation de la session est  bas\u00e9e sur les cookies.

ascanbeta.csrftoken.name=Anti-CSRF Tokens Check
ascanbeta.csrftoken.extrainfo.annotation = Ceci est une alerte informative car le formulaire a une annotation de s\u00e9curit\u00e9 indiquant qu'il n'a pas besoin de jeton anti-CSRF. Ceci devrait \u00eatre test\u00e9 manuellement pour \u00eatre s\u00fbr que cette annotation est correcte.

ascanbeta.entityExpansion.name=Exponential Entity Expansion (Billion Laughs Attack)
ascanbeta.entityExpansion.desc=An exponential entity expansion, or "billion laughs" attack is a type of denial-of-service (DoS) attack. It is aimed at parsers of markup languages like XML or YAML that allow macro expansions.
ascanbeta.entityExpansion.soln=Defenses against this kind of attack include capping the memory allocated in an individual parser if loss of the document is acceptable, or treating entities symbolically and expanding them lazily only when (and to the extent) their content is to be used.
ascanbeta.entityExpansion.refs=https\://en.wikipedia.org/wiki/Billion_laughs_attack\n\
http\://projects.webappsec.org/XML-Entity-Expansion\n\
http\://cwe.mitre.org/data/definitions/776.html
ascanbeta.entityExpansion.other=The attack HTTP request received a response after {0} seconds.

ascanbeta.forbiddenBypass.name=Bypassing 403
ascanbeta.forbiddenBypass.desc=Bypassing 403 endpoints may be possible, the scan rule sent a payload that caused the response to be accessible (status code 200).
ascanbeta.forbiddenBypass.refs=https\://www.acunetix.com/blog/articles/a-fresh-look-on-reverse-proxy-related-attacks/\n\
https\://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf\n\
https\://www.contextis.com/en/blog/server-technologies-reverse-proxy-bypass

ascanbeta.HTTPParamPoll.name = Pollution de param\u00e8tre HTTP
ascanbeta.HTTPParamPoll.desc = Les attaques par pollution de param\u00e8tre HTTP (HPP\: HTTP Parameter Pollution) consistent \u00e0 injecter des d\u00e9limiteurs de cha\u00eene de requ\u00eate encod\u00e9e dans des param\u00e8tres existants. Si une application web n'assaini pas bien les entr\u00e9es d'utilisateur, un utilisateur malveillant peut compromettre la logique de l'application pour lancer des attaques c\u00f4t\u00e9 client ou c\u00f4t\u00e9 serveur. Une cons\u00e9quence des attaques HPP est que l'agresseur peut potentiellement substituer des param\u00e8tres HTTP existants cod\u00e9s en dur pour modifier le comportement d'une application, contourner les points de contr\u00f4le de validation d'entr\u00e9e et acc\u00e9der et exploiter \u00e9ventuellement des variables qui peuvent \u00eatre hors de port\u00e9e directe.
ascanbeta.HTTPParamPoll.sol =  Assainissez correctement les d\u00e9limiteurs de param\u00e8tre des donn\u00e9es d'utilisateur 
ascanbeta.HTTPParamPoll.alert.attack = Pollution de param\u00e8tre HTTP
ascanbeta.HTTPParamPoll.extrainfo = http\://www.google.com/search?q\=http+parameter+pollution

ascanbeta.httponlysite.name = HTTP Only Site
ascanbeta.httponlysite.desc = The site is only served under HTTP and not HTTPS.
ascanbeta.httponlysite.soln = Configure your web or application server to use SSL (https).
ascanbeta.httponlysite.refs = https\://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\n\
https\://letsencrypt.org/
ascanbeta.httponlysite.otherinfo = {0}\n\
ZAP attempted to connect via\: {1}
ascanbeta.httponlysite.otherinfo.connectionfail = Failed to connect.
ascanbeta.httponlysite.otherinfo.differenthosts = Different Hosts.
ascanbeta.httponlysite.otherinfo.redirectionlimit = Redirection limit reached.
ascanbeta.httponlysite.otherinfo.noredirection = There was no automatic redirection.
ascanbeta.httponlysite.otherinfo.nossl = Site has no SSL/TLS support.
ascanbeta.httponlysite.otherinfo.redirecttohttp = Redirected to HTTP.
ascanbeta.httponlysite.otherinfo.urinotencoded = Redirection URI couldn't be encoded.

ascanbeta.httpoxy.name = Httpoxy - Proxy Header Misuse
ascanbeta.httpoxy.desc = The server initiated a proxied request via the proxy specified in the HTTP Proxy header of the request.\n\
Httpoxy typically affects code running in CGI or CGI like environments.\n\
\n\
This may allow attackers to\:\n\
\n\
* Proxy the outgoing HTTP requests made by the web application\n\
\n\
* Direct the server to open outgoing connections to an address and port of their choosing or\n\
\n\
* Tie up server resources by forcing the vulnerable software to use a malicious proxy
ascanbeta.httpoxy.otherinfo = An outgoing message to {0} was proxied via the host and port that ZAP injected into the HTTP Proxy header.
ascanbeta.httpoxy.soln = The best immediate mitigation is to block Proxy request headers as early as possible, and before they hit your application.
ascanbeta.httpoxy.refs = https\://httpoxy.org/
ascanbeta.httpoxy.skipped = the Network extension is disabled

ascanbeta.httpsashttp.name = HTTPS Content Available via HTTP
ascanbeta.httpsashttp.desc = Content which was initially accessed via HTTPS (i.e.\: using SSL/TLS encryption) is also accessible via HTTP (without encryption). 
ascanbeta.httpsashttp.soln = Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.
ascanbeta.httpsashttp.refs = https\://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\n\
https\://owasp.org/www-community/Security_Headers\n\
http\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\n\
http\://caniuse.com/stricttransportsecurity\n\
http\://tools.ietf.org/html/rfc6797
ascanbeta.httpsashttp.otherinfo=ZAP attempted to connect via\: {0}

ascanbeta.insecurehttpmethod.name = M\u00e9thode HTTP non s\u00e9curis\u00e9e
ascanbeta.insecurehttpmethod.detailed.name = M\u00e9thode HTTP non s\u00e9curis\u00e9e - {0}
ascanbeta.insecurehttpmethod.potentiallyinsecure = response code {0} for potentially insecure HTTP METHOD
ascanbeta.insecurehttpmethod.insecure = response code {0} for insecure HTTP METHOD
ascanbeta.insecurehttpmethod.desc = La m\u00e9thode HTTP non s\u00e9curis\u00e9e [{0}] est activ\u00e9e sur le serveur internet pour cette ressource. Selon la configuration du serveur et l''impl\u00e9mentation du service de la ressource, cela pourrait exploitable ou pas. Les m\u00e9thodes TRACK et TRACE peuvent \u00eatre utilis\u00e9es par un attaquant pour acc\u00e9der au jeton d''autorisation/cookie de session d''un utilisateur de l''application, m\u00eame si le cookie de session est prot\u00e9g\u00e9 \u00e0 l''aide de l''indicateur ''HttpOnly''. Pour que l''attaque r\u00e9ussisse, l''utilisateur de l''application doit g\u00e9n\u00e9ralement utiliser un navigateur internet plus ancien, ou un navigateur qui a une faille dans la politique de m\u00eame origine (SOP). La m\u00e9thode ''CONNECT'' peut \u00eatre utilis\u00e9e par un client int ernetpour cr\u00e9er un tunnel HTTP vers des sites ou des services tiers.
ascanbeta.insecurehttpmethod.trace.exploitable.desc = La m\u00e9thode HTTP non s\u00e9curis\u00e9e [{0}] est activ\u00e9e pour cette ressource et est exploitable. Les m\u00e9thodes TRACK and TRACE peuvent \u00eatre utilis\u00e9es par un attaquant pour acc\u00e9der au  jeton d''autorisation/cookie de session d''un utilisateur de l''application, m\u00eame si le cookie de session est prot\u00e9g\u00e9 \u00e0 l''aide de l''indicateur ''HttpOnly''. Pour que l''attaque r\u00e9ussisse, l''utilisateur de l''application doit g\u00e9n\u00e9ralement utiliser un navigateur internet plus ancien, ou un navigateur qui a une faille dans la politique de m\u00eame origine (SOP).
ascanbeta.insecurehttpmethod.trace.exploitable.extrainfo = Une requ\u00eate TRACE a \u00e9t\u00e9 envoy\u00e9e pour cette requ\u00eate avec une valeur de cookie personnalis\u00e9e [{0}]. Cette valeur de cookie a \u00e9t\u00e9 d\u00e9voil\u00e9e dans la r\u00e9ponse HTTP, confirmant la vuln\u00e9rabilit\u00e9.
ascanbeta.insecurehttpmethod.connect.exploitable.desc = La m\u00e9thode HTTP non s\u00e9curis\u00e9e [{0}] est activ\u00e9e pour cette ressource et est exploitable. Il s''est av\u00e9r\u00e9 possible d''\u00e9tablir une connexion tunnel par un socket vers le service d''un tiers, gr\u00e2ce \u00e0 cette m\u00e9thode HTTP.  Cela permettrait au service d''\u00eatre utilis\u00e9 comme un relais de spam anonyme, ou comme un proxy web, contournant ainsi les restrictions du r\u00e9seau. Il serait \u00e9galement de l''utiliser pour \u00e9tablir un tunnel VPN, \u00e9tendant en fait le p\u00e9rim\u00e8tre du r\u00e9seau pour y inclure des composants indignes de confiance. 
ascanbeta.insecurehttpmethod.extrainfo = La m\u00e9thode OPTIONS a d\u00e9voil\u00e9 les m\u00e9thodes HTTP suivantes pour cette ressource\: [{0}]
ascanbeta.insecurehttpmethod.connect.exploitable.extrainfo = La m\u00e9thode CONNECT a \u00e9t\u00e9 utilis\u00e9e pour \u00e9tablir une connexion de socket vers [{0}], via le serveur internet.
ascanbeta.insecurehttpmethod.soln = D\u00e9sactivez les m\u00e9thodes non s\u00e9curis\u00e9es comme TRACK, TRACE et CONNECT sur le serveur internet et faites en sorte que l'impl\u00e9mentation sous-jacente du service ne supporte pas de m\u00e9thodes non s\u00e9curis\u00e9es.
ascanbeta.insecurehttpmethod.delete.exploitable.desc = This method is most commonly used in REST services, It is used to delete a resource.
ascanbeta.insecurehttpmethod.delete.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see http\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.options.exploitable.desc = This is a diagnostic method and should never be turned on in production mode.
ascanbeta.insecurehttpmethod.options.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods
ascanbeta.insecurehttpmethod.put.exploitable.desc = This method was originally intended for file management operations. It is now most commonly used in REST services, PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource..
ascanbeta.insecurehttpmethod.put.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see http\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.patch.exploitable.desc = This method is now most commonly used in REST services, PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource.
ascanbeta.insecurehttpmethod.patch.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods, for understanding REST operations see http\://www.restapitutorial.com/lessons/httpmethods.html
ascanbeta.insecurehttpmethod.webdav.exploitable.desc = This HTTP method is a WEBDAV method\: {0}. If this server is not offering any WEBDAV services, these methods should not be available.
ascanbeta.insecurehttpmethod.webdav.exploitable.extrainfo = See the discussion on stackexchange\: https\://security.stackexchange.com/questions/21413/how-to-exploit-http-methods

ascanbeta.integeroverflow.name = Erreur de d\u00e9bordement d'entier
ascanbeta.integeroverflow.desc = An integer overflow condition exists when an integer used in a compiled program extends beyond the range limits and has not been properly checked from the input stream.
ascanbeta.integeroverflow.soln = In order to prevent overflows and divide by 0 (zero) errors in the application, please rewrite the backend program, checking if the values of integers being processed are within the application's allowed range. This will require a recompilation of the backend executable.
ascanbeta.integeroverflow.refs = https\://en.wikipedia.org/wiki/Integer_overflow\n\
https\://cwe.mitre.org/data/definitions/190.html\n\
http\://projects.webappsec.org/w/page/13246946/Integer%20Overflows
ascanbeta.integeroverflow.error1 = \u00c9ventuel d\u00e9bordement d'entier.  Le code d'\u00e9tat a chang\u00e9 lors de l'entr\u00e9e d'une longue cha\u00eene de nombres entiers al\u00e9atoires.
ascanbeta.integeroverflow.error2 = \u00c9ventuel d\u00e9bordement d'entier.  Le code d'\u00e9tat a chang\u00e9 lors de l'entr\u00e9e d'une longue cha\u00eene de z\u00e9ros.
ascanbeta.integeroverflow.error3 = \u00c9ventuel d\u00e9bordement d'entier.  Le code d'\u00e9tat a chang\u00e9 lors de l'entr\u00e9e d'une longue cha\u00eene de uns.
ascanbeta.integeroverflow.error4 = \u00c9ventuel d\u00e9bordement d'entier.  Le code d'\u00e9tat a chang\u00e9 lors de l'entr\u00e9e d'une longue cha\u00eene de neuf.

ascanbeta.log4shell.name=Log4Shell
ascanbeta.log4shell.skipped=no Active Scan OAST service is selected.

ascanbeta.log4shell.cve44228.name=Log4Shell (CVE-2021-44228)
ascanbeta.log4shell.cve44228.desc=Apache Log4j2 <\=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default.
ascanbeta.log4shell.cve44228.soln=Upgrade Log4j2 to version 2.17.1 or newer. In previous releases (>2.10) this behavior can be mitigated by setting system property "log4j2.formatMsgNoLookups" to "true" or by removing the JndiLookup class from the classpath (example\: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class). Java 8u121 (see https\://www.oracle.com/java/technologies/javase/8u121-relnotes.html) protects against remote code execution by defaulting "com.sun.jndi.rmi.object.trustURLCodebase" and "com.sun.jndi.cosnaming.object.trustURLCodebase" to "false".
ascanbeta.log4shell.cve44228.refs=https\://www.lunasec.io/docs/blog/log4j-zero-day/\n\
https\://nvd.nist.gov/vuln/detail/CVE-2021-44228

ascanbeta.log4shell.cve45046.name=Log4Shell (CVE-2021-45046)
ascanbeta.log4shell.cve45046.desc=It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allow attackers to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments.
ascanbeta.log4shell.cve45046.soln=Upgrade Log4j2 to version 2.17.1 or newer.
ascanbeta.log4shell.cve45046.refs=https\://www.lunasec.io/docs/blog/log4j-zero-day/\n\
https\://nvd.nist.gov/vuln/detail/CVE-2021-45046

ascanbeta.noanticsrftokens.name=Absence de Jetons Anti-CSRF
ascanbeta.noanticsrftokens.desc=Aucun jetons Anti-CSRF n'ont \u00e9t\u00e9 trouv\u00e9s dans un formulaire HTML.

ascanbeta.oobxss.name=Out of Band XSS
ascanbeta.oobxss.skipped=no Active Scan OAST service is selected.

ascanbeta.proxydisclosure.name=Proxy Disclosure
ascanbeta.proxydisclosure.desc={0} proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n\
 - A list of targets for an attack against the application.\n\
 - Potential vulnerabilities on the proxy servers that service the application.\n\
 - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. 
ascanbeta.proxydisclosure.soln=Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\n\
Disable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\n\
Configure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\n\
Configure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n\

ascanbeta.proxydisclosure.refs=https\://tools.ietf.org/html/rfc7231\#section-5.1.2
ascanbeta.proxydisclosure.attack=TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.
ascanbeta.proxydisclosure.extrainfo.unknown=Inconnu
ascanbeta.proxydisclosure.extrainfo.proxyserver.header=Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between OWASP ZAP and the application/web server\: 
ascanbeta.proxydisclosure.extrainfo.proxyserver= - {0}
ascanbeta.proxydisclosure.extrainfo.webserver.header=The following web/application server has been identified\: 
ascanbeta.proxydisclosure.extrainfo.webserver= - {0}
ascanbeta.proxydisclosure.extrainfo.silentproxyserver.header=The following 'silent' proxy servers were identified. Due to their behaviour, it is not known at which point in the network topology these proxy servers reside\:
ascanbeta.proxydisclosure.extrainfo.silentproxyserver= - {0}
ascanbeta.proxydisclosure.extrainfo.traceenabled=The 'TRACE' method is enabled on one or more of the proxy servers, or on the origin server. This method leaks all information submitted from the web browser and proxies back to the user agent. This may facilitate 'Cross Site Tracing' attacks. 

ascanbeta.relativepathconfusion.name=Relative Path Confusion
ascanbeta.relativepathconfusion.desc=The web server is configured to serve responses to ambiguous URLs in a manner that is likely to lead to confusion about the correct "relative path" for the URL. Resources (CSS, images, etc.) are also specified in the page response using relative, rather than absolute URLs. In an attack, if the web browser parses the "cross-content" response in a permissive manner, or can be tricked into permissively parsing the "cross-content" response, using techniques such as framing, then the web browser may be fooled into interpreting HTML as CSS (or other content types), leading to an XSS vulnerability.
ascanbeta.relativepathconfusion.soln=Web servers and frameworks should be updated to be configured to not serve responses to ambiguous URLs in such a way that the relative path of such URLs could be mis-interpreted by components on either the client side, or server side.\n\
Within the application, the correct use of the "<base>" HTML tag in the HTTP response will unambiguously specify the base URL for all relative URLs in the document.\n\
Use the "Content-Type" HTTP response header to make it harder for the attacker to force the web browser to mis-interpret the content type of the response.\n\
Use the "X-Content-Type-Options\: nosniff" HTTP response header to prevent the web browser from "sniffing" the content type of the response.\n\
Use a modern DOCTYPE such as "<\!doctype html>" to prevent the page from being rendered in the web browser using "Quirks Mode", since this results in the content type being ignored by the web browser.\n\
Specify the "X-Frame-Options" HTTP response header to prevent Quirks Mode from being enabled in the web browser using framing attacks. 
ascanbeta.relativepathconfusion.refs=http\://www.thespanner.co.uk/2014/03/21/rpo/\n\
https\://hsivonen.fi/doctype/\n\
http\://www.w3schools.com/tags/tag_base.asp
ascanbeta.relativepathconfusion.extrainfo.morethanonebasetag=More than one <base> tag was specified in the HTML <head> tag to define the location for relative URLs, which is not valid.
ascanbeta.relativepathconfusion.extrainfo.nobasetag=No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.
ascanbeta.relativepathconfusion.extrainfo.contenttypeenabled=A Content Type of "{0}" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledexplicitly=Quirks Mode is explicitly enabled via <meta http-equiv\="{0}", allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitly=Quirks Mode is implicitly enabled via the use of an old DOCTYPE with PUBLIC id "{0}", allowing the specified Content Type to be bypassed in some web browsers.
ascanbeta.relativepathconfusion.extrainfo.quirksmodeenabledimplicitlynodoctype=Quirks Mode is implicitly enabled via the absence of a DOCTYPE, allowing the specified Content Type to be bypassed.
ascanbeta.relativepathconfusion.extrainfo.nocontenttype=No Content Type was specified, so Quirks Mode is not required to exploit the vulnerability in the web browser. 
ascanbeta.relativepathconfusion.extrainfo.framingallowed=No X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed.

ascanbeta.sessionfixation.name=Fixation de session
ascanbeta.sessionfixation.desc=Une attaque par fixation de session serait possible. Si ce probl\u00e8me apparait dans le cas d'une URL de connexion (o\u00f9 l'utilisateur s'authentifie aupr\u00e8s de l'application), alors l'URL pourrait \u00eatre fournie \u00e0 la victime  avec un identificateur de session fixe par un aggresseur, de mani\u00e8re \u00e0 ce que ce dernier puisse usurper l'identit\u00e9 de la victime avec l'identificateur de session donn\u00e9. Si ce probl\u00e8me apparait avec une autre page internet, l'URL et son identificateur de seesion fixe ne peuvent qu'\u00eatre utilis\u00e9s pour tracer les actions d'un utilisateur non authentifi\u00e9. Si la vuln\u00e9rabilit\u00e9 se produit sur un champ de cookie ou de formulaire (param\u00e8tre POST) plut\u00f4t que sur une URL (GET), alors une autre faille peut aussi \u00eatre n\u00e9cessaire pour renseigner le champ du cookie, afin que la vuln\u00e9rabilit\u00e9 soit exploitable.
ascanbeta.sessionfixation.soln=1) Prevent the attacker from gaining a session id by enforcing strict session ids, and by only allocating session ids upon successful authentication to the application.\n\
2) The server should always create a new session id upon authentication, regardless of whether a session is already in place.\n\
3) Bind the session id to some identifiable client attribute combination, such as IP address, SSL client certificate.\n\
4) Sessions, when destroyed, must be destroyed on the server, as well as on the client.\n\
5) Implement a logout mechanism which will destroy all previous sessions for the client.\n\
6) Implement absolute session timeouts.\n\
7)Switch from a URL based to a cookie or form based session id implementation, as the latter typically require additional vulnerabilities, in order to be exploitable by an attacker\n\

ascanbeta.sessionfixation.refs=https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication\n\
https\://owasp.org/www-community/attacks/Session_fixation\n\
http\://www.acros.si/papers/session_fixation.pdf\n\
http\://www.technicalinfo.net/papers/WebBasedSessionManagement.html
ascanbeta.sessionfixation.alert.cookie.extrainfo=Cookie d\u00e9fini dans la r\u00e9ponse lorsque le champ de cookie [{0}] est renseign\u00e9 \u00e0 NULL\: [{1}] \n\
Cookie d\u00e9fini dans la r\u00e9ponse avec la valeur (valide) du cookie emprunt\u00e9e \u00e0 la requ\u00eate [{1}]\: [{2}]
ascanbeta.sessionfixation.alert.cookie.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.\n\
\n\
This issue should be manually validated by checking that the session token set on the logon page is still valid once logged in, and that the token can be used to directly access a page/resource which should require the user to be logged in.
ascanbeta.sessionfixation.alert.url.extrainfo=Une valeur de session probable est apparue dans les URL dans la sortie HTML lorsque le param\u00e8tre URL ou du param\u00e8tre pseudo URL [{0}] est d\u00e9fini \u00e0 NULL\: [{1}]\n\
Lorsque cette session "emprunt\u00e9e" [{1}] est utilis\u00e9e dans une requ\u00eate ult\u00e9rieure de cette URL, une nouvelle session n''est pas cr\u00e9\u00e9e.
ascanbeta.sessionfixation.alert.url.extrainfo.loginpage=L'url \u00e0 laquelle le probl\u00e8me a \u00e9t\u00e9 d\u00e9couvert a \u00e9t\u00e9 signal\u00e9e comme une page de connexion.
ascanbeta.sessionfixation.alert.attack=champ {0}\: [{1}]
#Exposed Session Id messages
ascanbeta.sessionidexposedinurl.name=ID de session expos\u00e9
ascanbeta.sessionidexposedinurl.desc=A session id is exposed in the URL. By sharing such a website URL (containing the session id), a naive user may be inadvertently granting access to their data, compromising its confidentiality, integrity, and availability.  URLs containing the session identifier also appear in web browser bookmarks, web server log files, and proxy server log files. 
ascanbeta.sessionidexposedinurl.soln=Utilisez une impl\u00e9mentation de gestion de session plus s\u00fbre, telle que celle utilisant des cookies de session, qui ne sont pas aussi facilement partag\u00e9es par inadvertance, et qui n'apparaissent g\u00e9n\u00e9ralement pas dans les fichiers de journalisation des serveur ou dans les signets des navigateurs internet.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexposedinurl.refs=https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidexposedinurl.alert.extrainfo=Le champ {0} [{1}] contient un identificateur de session expos\u00e9 [{2}]
ascanbeta.sessionidexposedinurl.alert.extrainfo.loginpage=L'url \u00e0 laquelle le probl\u00e8me a \u00e9t\u00e9 d\u00e9couvert a \u00e9t\u00e9 signal\u00e9e comme une page de connexion.
ascanbeta.sessionidexposedinurl.alert.attack=champ {0}\: [{1}]
#Session Id Cookie not sent securely
ascanbeta.sessionidsentinsecurely.name=ID de session transmis de fa\u00e7on non s\u00e9curis\u00e9e
ascanbeta.sessionidsentinsecurely.desc=Un identificateur de session pourrait \u00eatre envoy\u00e9 par un m\u00e9canisme non s\u00e9curis\u00e9. Dans le cas d'un cookie envoy\u00e9 dans la requ\u00eate, cela se produit lorsque HTTP est utilis\u00e9 plut\u00f4t que HTTPS.  Dans le cas d'un cookie envoy\u00e9 dans une r\u00e9ponse par le serveur (lorsque l'URL est modifi\u00e9e en fixant \u00e0 NULL le champ de param\u00e8tre nomm\u00e9), l'indicateur "secure" n'est pas renseign\u00e9, ce qui permet de renvoyer le cookie plus tard par HTTP plut\u00f4t que par HTTPS. Cela peut permettre \u00e0 une personne malveillante de s'ins\u00e9rer passivement dans l'\u00e9change de donn\u00e9es dans le r\u00e9seau pour obtenir un acc\u00e8s complet \u00e0 la session de la victime.  
ascanbeta.sessionidsentinsecurely.soln=1) Utilisez la version la plus r\u00e9cente de SSL/TLS (pour HTTPS) sur toutes les pages o\u00f9 un identificateur de session est communiqu\u00e9 entre le navigateur et le serveur internet.\n\
2) Ne permettez pas que la communication puisse \u00eatre contrainte \u00e0 revenir au protocole non crypt\u00e9 HTTP.\n\
3) Utilisez la balise 'secure' lorsque vous renseignez un cookie contenant un identificateur de session, vous \u00e9viterez ainsi sa transmission ult\u00e9rieure par un m\u00e9canisme non s\u00e9curis\u00e9.\n\
4) Dirigez les requ\u00eates  pour des pages HTTP non s\u00e9curis\u00e9es vers leur \u00e9quivalent s\u00e9curis\u00e9 HTTPS.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidsentinsecurely.refs=https\://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication
ascanbeta.sessionidsentinsecurely.alert.extrainfo=L''identificateur de session {0} champ [{1}], valeur [{2}] peut \u00eatre envoy\u00e9 par l''interm\u00e9diaire d''un m\u00e9canisme non s\u00e9curis\u00e9.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.secureflagnotset=L'indicateur 'secure' n'\u00e9tait pas d\u00e9fini dans le cookie de session fourni par le serveur.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.loginpage=L'url \u00e0 laquelle le probl\u00e8me a \u00e9t\u00e9 d\u00e9couvert a \u00e9t\u00e9 signal\u00e9e comme une page de connexion.
ascanbeta.sessionidsentinsecurely.alert.attack=champ {0}\: [{1}]
#Session Id Cookie accessible by JavaScript
ascanbeta.sessionidaccessiblebyjavascript.name=Cookie d'ID de session accessible par JavaScript
ascanbeta.sessionidaccessiblebyjavascript.desc=Un cookie avec un identificateur de session envoy\u00e9 par le serveur (lorsque l'URL est modifi\u00e9e en d\u00e9finissant \u00e0 NULL le champ de param\u00e8tre) peut \u00eatre acc\u00e9d\u00e9 par JavaScript sur le client. Conjointement avec une autre vuln\u00e9rabilit\u00e9, cela peut permettre de d\u00e9tourner la session.  
ascanbeta.sessionidaccessiblebyjavascript.soln=1) Utilisez l'indicateur 'httponly' lorsque vous renseignez un cookie contenant un identificateur de session, pour emp\u00eacher que celui-ci soit accessible par JavaScript dans le navigateur internet.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidaccessiblebyjavascript.refs=\ 
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo=Le champ [{1}] d''identificateur de session {0}, valeur [{2}] peut \u00eatre consult\u00e9 par JavaScript dans le navigateur internet
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo.loginpage=L'url \u00e0 laquelle le probl\u00e8me a \u00e9t\u00e9 d\u00e9couvert a \u00e9t\u00e9 signal\u00e9e comme une page de connexion.
ascanbeta.sessionidaccessiblebyjavascript.alert.attack=champ {0}\: [{1}]
#Session Id Cookie Expiry
ascanbeta.sessionidexpiry.name=Le temps d'expiration ou l'\u00e2ge max de l'ID de session est excessif
ascanbeta.sessionidexpiry.desc=Un cookie avec identificateur de session envoy\u00e9 par le serveur (quand l'URL est modifi\u00e9e en d\u00e9finissant \u00e0 NULL le champ de param\u00e8tre) reste valide pour une dur\u00e9e trop longue. Ceci peut \u00eatre exploit\u00e9 par un attaquant si l'utilisateur oublie de se d\u00e9connecter, si la fonctionnalit\u00e9 de d\u00e9connexion ne d\u00e9truit pas correctement la session, ou si l'identificateur de session est compromis d'une autre mani\u00e8re.
ascanbeta.sessionidexpiry.soln=1) Utilisez les directives de cookie 'Expire' ou 'Max-Age' lorsque vous d\u00e9finissez un cookie contenant un identificateur de session, pour \u00e9viter que celui-ci soit disponible pour une dur\u00e9e prolong\u00e9e.\n\
2) Assurez-vous de la pr\u00e9sence d'une fonction de d\u00e9cennexio, et que la session est d\u00e9truite correctement.\n\
3) Utilisez d'autres mesures pr\u00e9ventives pour \u00e9viter que l'identificateur de session ne soit exploitable au cas o\u00f9 celui-ci soit divulgu\u00e9.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexpiry.refs=\ 
ascanbeta.sessionidexpiry.alert.extrainfo=champ [{1}] d''identificateur de session {0}, de valeur [{2}] est accessible jusqu''\u00e0 [{3}] (\u00e9tant donn\u00e9 que le cookie a \u00e9t\u00e9 re\u00e7u \u00e0 {4}), sauf si la session est d\u00e9truite.
ascanbeta.sessionidexpiry.alert.extrainfo.loginpage=L'url \u00e0 laquelle le probl\u00e8me a \u00e9t\u00e9 d\u00e9couvert a \u00e9t\u00e9 signal\u00e9e comme une page de connexion.
ascanbeta.sessionidexpiry.alert.attack=champ {0}\: [{1}]
ascanbeta.sessionidexpiry.browserclose=fermeture du navigateur
ascanbeta.sessionidexpiry.timemorethanoneweek=Plus d'une semaine
ascanbeta.sessionidexpiry.timemorethanoneday=Plus d'un jour
ascanbeta.sessionidexpiry.timemorethanonehour=Plus d'une heure
ascanbeta.sessionidexpiry.timelessthanonehour=Moins d'une heure
ascanbeta.sessionidexpiry.timeexpired=Expir\u00e9

ascanbeta.shellshock.name = Ex\u00e9cution de code \u00e0 distance - Shell Shock
ascanbeta.shellshock.desc = Le serveur ex\u00e9cute une version de l'interpr\u00e9teur Bash permettant \u00e0 des attaquants distants d'ex\u00e9cuter du code arbitraire 
ascanbeta.shellshock.extrainfo = De CVE-2014-6271\: le GNU Bash jusqu'\u00e0 4.3 traite l'arri\u00e8re des cha\u00eenes d'apr\u00e8s les d\u00e9finitions de fonction donn\u00e9es par les valeurs des variables d'environnement, ce qui permet aux agresseurs distants d'ex\u00e9cuter du code arbitraire via un certain environnement, comme en t\u00e9moignent les vecteurs impliquant la fonction ForceCommand de OpenSSH sshd, les modules mod_cgi et mod_cgid du serveur HTTP Apache, les scripts ex\u00e9cut\u00e9s par des clients DHCP non pr\u00e9cis\u00e9s et d'autres situations dans lesquelles l'initialisation de l'environnement se fait par l'ex\u00e9cution de Bash \u00e0 travers une limite de privil\u00e8ge, alias "ShellShock". A NOTER\: le correctif original de ce probl\u00e8me \u00e9tait incorrect; CVE-2014-7169 a \u00e9t\u00e9 d\u00e9sign\u00e9 pour couvrir la vuln\u00e9rabilit\u00e9 qui est toujours pr\u00e9sente apr\u00e8s le fix incorrect.
ascanbeta.shellshock.soln = Mettez \u00e0 jour Bash sur le serveur avec la version la plus r\u00e9cente
ascanbeta.shellshock.ref = http\://web.nvd.nist.gov/view/vuln/detail?vulnId\=CVE-2014-6271\n\
http\://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html
ascanbeta.shellshock.timingbased.evidence = \u00c0 l''aide de l''attaque, un d\u00e9lai de millisecondes [{0}] a \u00e9t\u00e9 induit et d\u00e9tect\u00e9

ascanbeta.sourcecodedisclosure.desc = Le code source de la page actuelle a \u00e9t\u00e9 d\u00e9voil\u00e9 par le serveur internet
ascanbeta.sourcecodedisclosure.lfibased.name = Source Code Disclosure - File Inclusion
ascanbeta.sourcecodedisclosure.lfibased.soln = Ensure that arbitrary files specified by the user are not included in the output
ascanbeta.sourcecodedisclosure.lfibased.extrainfo = The output for the source code filename [{0}] differs sufficiently from that of the random parameter [{1}], at [{2}%], compared to a threshold of [{3}%]
ascanbeta.sourcecodedisclosure.lfibased.evidence=\ 

ascanbeta.sourcecodedisclosure.gitbased.name = Source Code Disclosure - Git 
ascanbeta.sourcecodedisclosure.gitbased.soln = Ensure that Git metadata files are not deployed to the web server or application server
ascanbeta.sourcecodedisclosure.gitbased.extrainfo=\ 
ascanbeta.sourcecodedisclosure.gitbased.evidence = The source code for [{0}] was extracted using [{1}]


ascanbeta.sourcecodedisclosurecve-2012-1823.name = Source Code Disclosure - CVE-2012-1823
ascanbeta.sourcecodedisclosurecve-2012-1823.desc = Certaines versions PHP, lorsqu'il est configur\u00e9 pour ex\u00e9cuter \u00e0 l'aide de CGI, ne manipulez pas correctement les cha\u00eenes de requ\u00eate qui n'ont pas un caract\u00e8re de \u00ab \= \u00bb sans s\u00e9quence d'\u00e9chappement, ce qui permet la divulgation de code source PHP et l'ex\u00e9cution de code arbitraire. Dans ce cas, le contenu du fichier PHP a \u00e9t\u00e9 fourni directement au navigateur internet. Cette sortie contiendra g\u00e9n\u00e9ralement du code PHP, mais il peut \u00e9galement contenir du pur HTML.
ascanbeta.sourcecodedisclosurecve-2012-1823.soln = Mettez \u00e0 jour \u00e0 la derni\u00e8re version stable de PHP, ou utilisez le serveur internet Apache et son module mod_rewrite pour filtrer les requ\u00eates malicieuses utilisant les directives "RewriteCond" et "RewriteRule".

ascanbeta.sourcecodedisclosure.svnbased.name = Divulgation de Code Source - SVN
ascanbeta.sourcecodedisclosure.svnbased.soln = Assurez-vous que les fichiers de m\u00e9tadonn\u00e9es SVN ne sont pas d\u00e9ploy\u00e9s vers le serveur internetou le serveur applicatif
ascanbeta.sourcecodedisclosure.svnbased.extrainfo = Le code source de [{0}] a \u00e9t\u00e9 trouv\u00e9 \u00e0 [{1}]

ascanbeta.spring4shell.name=Spring4Shell
ascanbeta.spring4shell.desc=The application appears to be vulnerable to CVE-2022-22965 (otherwise known as Spring4Shell) - remote code execution (RCE) via data binding.
ascanbeta.spring4shell.soln=Upgrade Spring Framework to versions 5.3.18, 5.2.20, or newer.
ascanbeta.spring4shell.refs=https\://nvd.nist.gov/vuln/detail/CVE-2022-22965\n\
https\://www.rapid7.com/blog/post/2022/03/30/spring4shell-zero-day-vulnerability-in-spring-framework/\n\
https\://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\#vulnerability\n\
https\://tanzu.vmware.com/security/cve-2022-22965

ascanbeta.springactuator.name=Spring Actuator Information Leak
ascanbeta.springactuator.desc=Spring Actuator for Health is enabled and may reveal sensitive information about this application. Spring Actuators can be used for real monitoring purposes, but should be used with caution as to not expose too much information about the application or the infrastructure running it.
ascanbeta.springactuator.soln=Disable the Health Actuators and other actuators, or restrict them to administrative users.
ascanbeta.springactuator.refs=https\://docs.spring.io/spring-boot/docs/current/actuator-api/htmlsingle/\#overview

ascanbeta.sstiblind.name = Server Side Template Injection (Blind)
ascanbeta.sstiblind.desc = When the user input is inserted in the template instead of being used as argument in rendering is evaluated by the template engine. Depending on the template engine it can lead to remote code execution.
ascanbeta.sstiblind.soln = Instead of inserting the user input in the template, use it as rendering argument.
ascanbeta.sstiblind.refs = https\://portswigger.net/blog/server-side-template-injection
ascanbeta.sstiblind.alert.recvdcallback.otherinfo = Received callback from the server.

ascanbeta.ssti.name = Server Side Template Injection
ascanbeta.ssti.desc = When the user input is inserted in the template instead of being used as argument in rendering is evaluated by the template engine. Depending on the template engine it can lead to remote code execution.
ascanbeta.ssti.soln = Instead of inserting the user input in the template, use it as rendering argument.
ascanbeta.ssti.refs = https\://portswigger.net/blog/server-side-template-injection
ascanbeta.ssti.alert.otherinfo = Proof found at [{0}] \n\
content\:\n\
[{1}]

ascanbeta.usernameenumeration.name=\u00c9num\u00e9ration de noms d'utilisateur possible
ascanbeta.usernameenumeration.desc=Il peut \u00eatre possible d'\u00e9num\u00e9rer les noms d'utilisateur, en se basant sur des r\u00e9ponses HTTP diff\u00e9rentes selon les noms d'utilisateur valides et non valides fournis. Cela augmenterait consid\u00e9rablement les chances de succ\u00e8s d'une attaque par force brute sur les mots de passe d'un syst\u00e8me. Notez que les faux positifs peuvent parfois \u00eatre minimis\u00e9s en augmentant l'option 'Force d'attaque' dans ZAP.  V\u00e9rifiez s'il vous pla\u00eet manuellement le champ 'Autres infos' pour confirmer qu'il y a effectivement un probl\u00e8me. 
ascanbeta.usernameenumeration.soln=Ne d\u00e9voilez pas de d\u00e9tail selon que le nom d'utilisateur est valide ou non. En particulier, pour les tentatives de connexion infructueuses, ne distinguez pas entre un nom d'utilisateur non valide et un mot de passe non valide, que ce soit dans le message d'erreur, la page titre, le contenu de page, les en-t\u00eates HTTP ou la logique de redirection.
ascanbeta.usernameenumeration.refs=https\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account.html\n\
http\://sebastian-schinzel.de/_download/ifip-sec2011.pdf
ascanbeta.usernameenumeration.alert.extrainfo=La valeur [{1}] du param\u00e8tre [{0}] divulgue de l''information sur la question de savoir si un utilisateur existe. Les diff\u00e9rences [{5}] de sortie, pour le nom d''utilisateur original valide [{2}], et pour le nom d''utilisateur invalide [{3}] sont\:\n\
[{4}]
ascanbeta.usernameenumeration.alert.attack=Manipuler le champ [{0}]\: [{1}] et surveiller la sortie 

ascanbeta.elinjection.name = Injection d'Expression Language
ascanbeta.elinjection.desc = Le logiciel construit tout ou partie d'une instruction expression language (EL) dans une page Java Server Page (JSP) \u00e0 l'aide d'une entr\u00e9e manipul\u00e9e re\u00e7ue d'un composant en amont, mais il ne neutralise pas ou neutralise incorrectement des \u00e9l\u00e9ments sp\u00e9ciaux qui pourraient modifier l'instruction EL avant son ex\u00e9cution. Dans certaines versions ant\u00e9rieures \u00e0 Spring 3.0.5, il y avait une vuln\u00e9rabilit\u00e9 (CVE-2011-2730) dans laquelle des balises d'Expression Language seraient \u00e9valu\u00e9es deux fois, ce qui exposait effectivement n'importe quelle application \u00e0 l'injection de EL. Cependant, cette faiblesse est toujours possible pour certaines configurations, m\u00eame pour les versions ult\u00e9rieures.
ascanbeta.elinjection.soln = Effectuez une validation de donn\u00e9es sur toute entr\u00e9e non fiable et assurez-vous qu'un codage de sortie est appliqu\u00e9 lorsque les donn\u00e9es arrivent sur la couche EL, afin qu'aucun m\u00e9tacaract\u00e8re ne soit trouv\u00e9  dans le contenu de l'utilisateur avant l'\u00e9valuation par l'interpr\u00e9teur. Les patterns les plus \u00e9vidents \u00e0 d\u00e9tecter comprennent ${ et \#{, mais il peut \u00eatre possible d'encoder ou de fragmenter ces donn\u00e9es.
ascanbeta.elinjection.refs = https\://owasp.org/www-community/vulnerabilities/Expression_Language_Injection\n\
http\://cwe.mitre.org/data/definitions/917.html

ascanbeta.xpathinjection.name=Injection XPath

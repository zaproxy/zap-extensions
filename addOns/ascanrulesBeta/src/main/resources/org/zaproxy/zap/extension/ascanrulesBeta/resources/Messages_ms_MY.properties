#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages

ascanbeta.desc=Active Scan Rules - beta

ascanbeta.backupfiledisclosure.name=Backup File Pengungkapan
ascanbeta.backupfiledisclosure.desc=Cadangan fail telah didedahkan oleh pelayan web
ascanbeta.backupfiledisclosure.soln=Tidak mengedit fail dalam situ di web pelayan, dan memastikan bahwa un-perlu fail (termasuk fail tersembunyi) dikeluarkan dari web pelayan.
ascanbeta.backupfiledisclosure.evidence=A backup of [{0}] is available at [{1}]

ascanbeta.crossdomain.name=Cross-Domain Misconfiguration
#the refs cannot be customised for each sub-category (Adobe, Silverlight, etc)
ascanbeta.crossdomain.refs=http\://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html\nhttp\://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf\nhttp\://msdn.microsoft.com/en-US/library/cc197955%28v\=vs.95%29.aspx\nhttp\://msdn.microsoft.com/en-us/library/cc838250%28v\=vs.95%29.aspx
ascanbeta.crossdomain.adobe.read.name=Cross-Domain Misconfiguration - Adobe - Read
ascanbeta.crossdomain.adobe.send.name=Cross-Domain Misconfiguration - Adobe - Send
ascanbeta.crossdomain.adobe.desc=Flash/Silverlight based cross-site request forgery may be possible, due to a misconfiguration on the web server. 
ascanbeta.crossdomain.adobe.read.soln=Mengkonfigurasi crossdomain.xml file untuk menyekat senarai domain yang dibenarkan untuk membuat cross-domain membaca permintaan untuk ini web pelayan, menggunakan<allow-access-from domain\="example.com">Kau hanya perlu memberikan akses untuk "*" (semua domain) jika anda yakin bahwa layanan ini tidak menjadi tuan rumah mana-mana akses dikawal, peribadi, atau swasta data.
ascanbeta.crossdomain.adobe.read.extrainfo=The web server permits malicious cross-domain data read requests originating from Flash/Silverlight components served from any third party domain, to this domain. If the victim user is logged into this service, the malicious read requests are processed using the privileges of the victim, and can result in data from this service being compromised by an unauthorised third party web site, via the victim's web browser. This is particularly likely to be an issue if a Cookie based session implementation is in use. 
ascanbeta.crossdomain.adobe.send.soln=Mengkonfigurasi crossdomain.xml file untuk menyekat senarai domain yang dibenarkan untuk membuat cross-domain menghantar (tapi tidak semestinya membaca) permintaan untuk ini web pelayan, menggunakan<allow-http-request-headers-from domain\="example.com" headers\="Authorization,X-Blahh">Kau hanya perlu memberikan akses untuk "*" (semua domain) jika anda yakin bahwa layanan ini tidak rentan untuk Menyeberangi Tapak Permintaan Pemalsuan (CSRF) serangan.
ascanbeta.crossdomain.adobe.send.extrainfo=Pelayan web membenarkan permintaan data lintas domain yang dihantar (tetapi tidak semestinya dibaca) yang berasal dari komponen Flash / Silverlight yang disiarkan dari mana-mana domain pihak ketiga, ke domain ini. Sekiranya pengguna mangsa log masuk ke perkhidmatan ini, permintaan penghantaran berniat jahat diproses menggunakan keistimewaan mangsa, dan boleh mengakibatkan serangan jenis Permintaan Serangan Tapak (CSRF) melalui pelayar web mangsa. Ini terutamanya mungkin menjadi isu jika pelaksanaan sesi berasaskan Cookie sedang digunakan.
ascanbeta.crossdomain.silverlight.name=Cross-Domain Misconfiguration - Silverlight
ascanbeta.crossdomain.silverlight.desc=Silverlight berdasarkan cross-site request forgery mungkin menjadi mungkin, karena kesalahan konfigurasi pada web server.
ascanbeta.crossdomain.silverlight.soln=Configure the clientaccesspolicy.xml file to restrict the list of domains that are allowed to make cross-domain requests to this web server, using <domain uri\="https\://example.com" />. You should only grant access to "*" (all domains) if you are certain that this service does not host any access-controlled, personalized, or private data.
ascanbeta.crossdomain.silverlight.extrainfo=Pelayan web membenarkan permintaan rentas domain berniat jahat yang berasal dari komponen Silverlight yang dihidupkan dari mana-mana domain pihak ketiga, ke domain ini. Sekiranya pengguna mangsa log masuk ke perkhidmatan ini, permintaan berniat jahat diproses menggunakan keistimewaan mangsa, dan boleh menyebabkan data dari perkhidmatan ini dikompromikan oleh laman web pihak ketiga yang tidak dibenarkan, melalui penyemak imbas web mangsa. Ia juga boleh menyebabkan serangan jenis Permintaan Serangan Tapak (CSRF). Ini terutamanya mungkin menjadi isu jika pelaksanaan sesi berasaskan Cookie sedang digunakan.

ascanbeta.csrftokenscan.name=Anti CSRF Tokens Scanner
ascanbeta.csrftokenscan.extrainfo.annotation=Ini adalah informasi peringatan sebagai bentuk keamanan penjelasan yang menunjukkan bahwa hal itu tidak perlu anti-CSRF Token. Ini harus diuji manual untuk memastikan anotasi adalah benar.

ascanbeta.heartbleed.name=Heartbleed OpenSSL Vulnerability
ascanbeta.heartbleed.desc=The TLS implementation in OpenSSL 1.0.1 before 1.0.1g does not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, potentially disclosing sensitive information.
ascanbeta.heartbleed.soln=Update to OpenSSL 1.0.1g or later. Re-issue HTTPS certificates. Change asymmetric private keys and shared secret keys, since these may have been compromised, with no evidence of compromise in the server log files.
ascanbeta.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
ascanbeta.heartbleed.extrainfo=This issue was confirmed by exfiltrating data from the server, using {0}. This is unlikely to be a false positive.

ascanbeta.HTTPParamPoll.name=HTTP Parameter Pollution scanner
ascanbeta.HTTPParamPoll.desc=HTTP Parameter Pencemaran (HPP) serangan terdiri dari suntik dikodekan query string pembatas ke parameter yang ada. Jika aplikasi web tidak benar membersihkan input pengguna, pengguna jahat dapat membahayakan logika aplikasi untuk melakukan salah satu sisi klien atau server-side serangan. Salah satu konsekuensi dari HPP serangan adalah bahwa penyerang dapat berpotensi menimpa yang sudah ada hard-coded HTTP parameter untuk memodifikasi perilaku aplikasi, bypass validasi input pos-pos pemeriksaan, dan akses dan mungkin memanfaatkan variabel-variabel yang dapat langsung mencapai.
ascanbeta.HTTPParamPoll.sol=Benar membersihkan user input untuk parameter pembatas
ascanbeta.HTTPParamPoll.alert.attack=HTTP Parameter Pollution
ascanbeta.HTTPParamPoll.extrainfo=http\://www.google.com/search?q\=http+parameter+pollution

ascanbeta.insecurehttpmethod.name=Insecure HTTP Method
ascanbeta.insecurehttpmethod.detailed.name=Insecure HTTP Method - {0}
ascanbeta.insecurehttpmethod.desc=The insecure HTTP method [{0}] is enabled on the web server for this resource. Depending on the web server configuration, and the underlying implementation responsible for serving the resource, this might or might not be exploitable. The TRACK and TRACE methods may be used by an attacker, to gain access to the authorisation token/session cookie of an application user, even if the session cookie is protected using the ''HttpOnly'' flag. For the attack to be successful, the application user must typically be using an older web browser, or a web browser which has a Same Origin Policy (SOP) bypass vulnerability. The ''CONNECT'' method can be used by a web client to create an HTTP tunnel to third party websites or services.
ascanbeta.insecurehttpmethod.trace.exploitable.desc=The insecure HTTP method [{0}] is enabled for this resource, and is exploitable. The TRACK and TRACE methods may be used by an attacker, to gain access to the authorisation token/session cookie of an application user, even if the session cookie is protected using the ''HttpOnly'' flag. For the attack to be successful, the application user must typically be using an older web browser, or a web browser which has a Same Origin Policy (SOP) bypass vulnerability.
ascanbeta.insecurehttpmethod.connect.exploitable.desc=The insecure HTTP method [{0}] is enabled for this resource, and is exploitable. It was found to be possible to establish a tunneled socket connection to a third party service, using this HTTP method.  This would allow the service to be used as an anonymous spam relay, or as a web proxy, bypassing network restrictions. It also allows it to be used to establish a tunneled VPN, effectively extending the network perimeter to include untrusted components. 
ascanbeta.insecurehttpmethod.extrainfo=The OPTIONS method disclosed the following enabled HTTP methods for this resource\: [{0}]
ascanbeta.insecurehttpmethod.trace.exploitable.extrainfo=A TRACE request was sent for this request, with a custom cookie value [{0}]. This cookie value was disclosed in the HTTP response, confirming the vulnerability.
ascanbeta.insecurehttpmethod.connect.exploitable.extrainfo=The CONNECT method was used to establish a socket connection to [{0}], via the web server.
ascanbeta.insecurehttpmethod.soln=Disable insecure methods such as TRACK, TRACE, and CONNECT on the web server, and ensure that the underlying service implementation does not support insecure methods.


ascanbeta.integeroverflow.name=Integer Overflow Error
ascanbeta.integeroverflow.desc=An integer overflow condition exists when an integer, which has not been properly checked from the input stream is used within a compiled program. 
ascanbeta.integeroverflow.soln=Menulis latar belakang program menggunakan tepat memeriksa ukuran integer menjadi input untuk mencegah meluap dan membagi dengan 0 kesalahan. Ini akan memerlukan kompilasi ulang dari latar belakang eksekusi.
ascanbeta.integeroverflow.refs=https\://www.owasp.org/index.php/Integer_overflow and http\://projects.webappsec.org/w/page/13246946/Integer%20Overflows.
ascanbeta.integeroverflow.error1=Potential Integer Overflow.  Status code changed on the input of a long string of random integers.
ascanbeta.integeroverflow.error2=Potential Integer Overflow.  Status code changed on the input of a long string of zeros.
ascanbeta.integeroverflow.error3=Potential Integer Overflow.  Status code changed on the input of a long string of ones.
ascanbeta.integeroverflow.error4=Potential Integer Overflow.  Status code changed on the input of a long string of nines.

ascanbeta.noanticsrftokens.name=Absence of Anti-CSRF Tokens
ascanbeta.noanticsrftokens.desc=No Anti-CSRF tokens were found in a HTML submission form.

ascanbeta.remotecodeexecution.cve-2012-1823.name=Remote Code Execution - CVE-2012-1823
ascanbeta.remotecodeexecution.cve-2012-1823.desc=Some PHP versions, when configured to run using CGI, do not correctly handle query strings that lack an unescaped "\=" character, enabling arbitrary code execution. In this case, an operating system command was caused to be executed on the web server, and the results were returned to the web browser. 
ascanbeta.remotecodeexecution.cve-2012-1823.soln=Upgrade to the latest stable version of PHP, or use the Apache web server and the mod_rewrite module to filter out malicious requests using the "RewriteCond" and "RewriteRule" directives.

ascanbeta.sessionfixation.name=Session Fixation
ascanbeta.sessionfixation.desc=Sesi Fiksasi mungkin menjadi mungkin. Jika masalah ini terjadi dengan URL login (di mana pengguna mengotentikasi diri mereka sendiri untuk aplikasi), maka URL yang dapat diberikan oleh seorang penyerang, selain tetap session id, untuk korban, untuk kemudian mengasumsikan identitas korban menggunakan diberikan session id. Jika terjadi masalah dengan non-halaman login, URL dan tetap session id hanya dapat digunakan oleh penyerang untuk melacak aplikasi yang tidak berkepentingan tindakan pengguna. Jika terjadi kerentanan pada cookie bidang atau bentuk lapangan (POSTING parameter) bukan pada URL (GET) parameter, maka beberapa kerentanan juga mungkin diperlukan dalam rangka untuk mengatur cookie lapangan pada browser korban, untuk memungkinkan kerentanan yang dapat dimanfaatkan.
ascanbeta.sessionfixation.soln=1) Prevent the attacker from gaining a session id by enforcing strict session ids, and by only allocating session ids upon successful authentication to the application.\n2) The server should always create a new session id upon authentication, regardless of whether a session is already in place.\n3) Bind the session id to some identificable client attribute combination, such as IP address, SSL client certificate.\n4) Sessions, when destroyed, must be destroyed on the server, as well as on the client.\n5) Implement a logout mechanism which will destroy all previous sessions for the client.\n6) Implement absolute session timeouts.\n7)Switch from a URL based to a cookie or form based session id implementation, as the latter typically require additional vulnerabilities, in order to be exploitable by an attacker\n
ascanbeta.sessionfixation.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management\nhttps\://www.owasp.org/index.php/Session_fixation\nhttp\://www.acros.si/papers/session_fixation.pdf\nhttp\://www.technicalinfo.net/papers/WebBasedSessionManagement.html\nhttps\://www.owasp.org/index.php/Top_10_2010-A9
ascanbeta.sessionfixation.alert.cookie.extrainfo=Cookie set in response when cookie field [{0}] is set to NULL\: [{1}]\nCookie set in response with borrowed (valid) cookie value in request [{1}] \: [{2}]
ascanbeta.sessionfixation.alert.cookie.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
ascanbeta.sessionfixation.alert.url.extrainfo=A likely session value has appeared in URLs in the HTML output when URL parameter/pseudo URL parameter [{0}] is set to NULL\: [{1}]\nWhen this ''borrowed'' session [{1}] is used in a subsequent request for this URL, a new session is not created.
ascanbeta.sessionfixation.alert.url.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
ascanbeta.sessionfixation.alert.attack={0} field\: [{1}]
#Exposed Session Id messages
ascanbeta.sessionidexposedinurl.name=Exposed Session ID
ascanbeta.sessionidexposedinurl.desc=A session id is exposed in the URL. By sharing such a website URL (containing the session id), a naiive user may be inadvertently granting access to their data, compromising its confidentiality, integrity, and availability.  URLs containing the session identifier also appear in web browser bookmarks, web server log files, and proxy server log files. 
ascanbeta.sessionidexposedinurl.soln=Penggunaan yang lebih aman sesi implementasi manajemen, seperti salah satu yang menggunakan cookie sesi, yang tidak mudah bersama secara tidak sengaja, dan yang tidak biasanya muncul dalam file log server atau web browser bookmark.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexposedinurl.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management
ascanbeta.sessionidexposedinurl.alert.extrainfo={0} field [{1}] contains an exposed session identifier [{2}]
ascanbeta.sessionidexposedinurl.alert.extrainfo.loginpage=Url di mana masalah itu ditemukan ditandai sebagai halaman log masuk.
ascanbeta.sessionidexposedinurl.alert.attack={0} field\: [{1}]
#Session Id Cookie not sent securely
ascanbeta.sessionidsentinsecurely.name=Session ID Transmitted Insecurely
ascanbeta.sessionidsentinsecurely.desc=A session id may be sent via an insecure mechanism. In the case of a cookie sent in the request, this occurs when HTTP, rather than HTTPS, is used.  In the case of a cookie sent by the server in response (when the URL is modified by setting the named parameter field to NULL), the 'secure' flag is not set, allowing the cookie to be sent later via HTTP rather than via HTTPS. This may allow a passive eavesdropper on the network path to gain full access to the victim's session.  
ascanbeta.sessionidsentinsecurely.soln=1) Use the latest available version of SSL/TLS (for HTTPS) for all pages where a session id is communicated between the browser and the web server.\n2) Do not allow the communication to be forced down to the unencrypted HTTP protocol.\n3) Use the 'secure' flag when setting a cookie containing a session id, to prevent its subsequent transmission by an insecure mechanism.\n4) Forward non-secure HTTP page requests to the secure HTTPS equivalent page.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidsentinsecurely.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management\nhttps\://www.owasp.org/index.php/Top_10_2010-A9
ascanbeta.sessionidsentinsecurely.alert.extrainfo=session identifier {0} field [{1}], value [{2}] may be sent via an insecure mechanism.  
ascanbeta.sessionidsentinsecurely.alert.extrainfo.secureflagnotset=The 'secure' flag was not set on the session cookie supplied by the server.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
ascanbeta.sessionidsentinsecurely.alert.attack={0} field\: [{1}]
#Session Id Cookie accessible by JavaScript
ascanbeta.sessionidaccessiblebyjavascript.name=Session ID Cookie Accessible to JavaScript
ascanbeta.sessionidaccessiblebyjavascript.desc=A Session Id cookie sent by the server (when the URL is modified by setting the named parameter field to NULL) may be accessed by JavaScript on the client. In conjunction with another vulnerability, this may allow the session to be hijacked.  
ascanbeta.sessionidaccessiblebyjavascript.soln=1) Use the 'httponly' flag when setting a cookie containing a session id, to prevent it from being accessed by JavaScript in the web browser.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidaccessiblebyjavascript.refs=
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo=session identifier {0} field [{1}], value [{2}] may be accessed using JavaScript in the web browser
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
ascanbeta.sessionidaccessiblebyjavascript.alert.attack={0} field\: [{1}]
#Session Id Cookie Expiry
ascanbeta.sessionidexpiry.name=Session ID Expiry Time/Max-Age is Excessive
ascanbeta.sessionidexpiry.desc=A Session Id cookie sent by the server (when the URL is modified by setting the named parameter field to NULL) is set to be valid for an excessive period of time. This may be exploitable by an attacker if the user forgets to log out, if the logout functionality does not correctly destroy the session, or if the session id is compromised by some other means.     
ascanbeta.sessionidexpiry.soln=1) Use the 'Expire' or 'Max-Age' cookie directives when setting a cookie containing a session id, to prevent it from being available for prolonged periods of time.\n2) Ensure that logout functionality exists, and that it correctly destroys the session.\n3) Use other preventative measures to ensure that if a session id is compromised, it may not be exploited.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexpiry.refs=
ascanbeta.sessionidexpiry.alert.extrainfo=session identifier {0} field [{1}], value [{2}] may be accessed until [{3}] (since cookie was received at {4}), unless the session is destroyed.
ascanbeta.sessionidexpiry.alert.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
ascanbeta.sessionidexpiry.alert.attack={0} field\: [{1}]
ascanbeta.sessionidexpiry.browserclose=browser close
ascanbeta.sessionidexpiry.timemorethanoneweek=More than one week
ascanbeta.sessionidexpiry.timemorethanoneday=More than one day
ascanbeta.sessionidexpiry.timemorethanonehour=More than one hour
ascanbeta.sessionidexpiry.timelessthanonehour=Less than one hour
ascanbeta.sessionidexpiry.timeexpired=Expired

ascanbeta.shellshock.name=Remote Code Execution - Shell Shock
ascanbeta.shellshock.desc=The server is running a version of the Bash shell that allows remote attackers to execute arbitrary code 
ascanbeta.shellshock.extrainfo=From CVE-2014-6271\: GNU Bash through 4.3 processes trailing strings after function definitions in the values of environment variables, which allows remote attackers to execute arbitrary code via a crafted environment, as demonstrated by vectors involving the ForceCommand feature in OpenSSH sshd, the mod_cgi and mod_cgid modules in the Apache HTTP Server, scripts executed by unspecified DHCP clients, and other situations in which setting the environment occurs across a privilege boundary from Bash execution, aka "ShellShock." NOTE\: the original fix for this issue was incorrect; CVE-2014-7169 has been assigned to cover the vulnerability that is still present after the incorrect fix.
ascanbeta.shellshock.soln=Update Bash on the server to the latest version
ascanbeta.shellshock.ref=http\://web.nvd.nist.gov/view/vuln/detail?vulnId\=CVE-2014-6271\nhttp\://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html
ascanbeta.shellshock.timingbased.evidence=Using the attack, a delay of [{0}] milliseconds was induced and detected

ascanbeta.sqlinjection.mysql.name=SQL Injection - MySQL
ascanbeta.sqlinjection.hypersonic.name=SQL Injection - Hypersonic SQL
ascanbeta.sqlinjection.oracle.name=SQL Injection - Oracle
ascanbeta.sqlinjection.postgres.name=SQL Injection - PostgreSQL
ascanbeta.sqlinjection.desc=Suntikan SQL mungkin boleh dilakukan
ascanbeta.sqlinjection.soln=Jangan mempercayai input pihak klien, bahkan jika terdapat pengesahsahihan daripada pihak klien. \nSecara keseluruhannya, taip semak semua data dalam pihak pelayan.\nJika aplikasi menggunakan JDBC, gunakan PreparedStatement atau CallableStatement, dengan parameter yang mempunyai '?'\nJika aplikasi menggunakan ASP, gunakan ADO Command Objects dengan taip penyemakan yang ketat dan permintaan yang mempunyai parameter.\nJika pangkalan data Stored Procedures boleh digunakan, gunakan mereka.\n*Jangan* merangkaikan rentetan kepada permintaan dalam prosedur disimpan, atau menggunakan 'exec', 'exec immediate', atau fungsi yang berkaitan\!\nJangan mencipta permintaan SQL dinamik menggunakan rangkaian rentetan mudah.\nMengecualikan semua data yang diterima daripada klien.\nMenggunakan 'senarai putih' bagi huruf yang dibenarkan, atau 'senarai hitam' bagi huruf yang tidak dibenarkan dalam input pengguna.\nMenggunakan hak istimewa yang paling kurang dengan menggunakan pangkalan data hak istimewa paling kurang.\nKhususnya, elakkan untuk menggunakan pengguna pangkalan data 'sa' atau 'db-owner'. Ini tidak menyingkirkan suntikan SQL, tetapi meminimumkan impaknya.\nMengizinkan akses pangkalan data minima yang diperlukan untuk aplikasi.
ascanbeta.sqlinjection.refs=https\://www.owasp.org/index.php/Top_10_2010-A1\nhttps\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
#ascanbeta.sqlinjection.alert.errorbased.attack={1}
ascanbeta.sqlinjection.alert.errorbased.differentiation.attack=Original Value\: [{0}]. Modified Value\: [{1}]. Control Value\: [{2}]
ascanbeta.sqlinjection.alert.booleanbased.attack=field\: [{0}], value [{1}]
ascanbeta.sqlinjection.alert.unionbased.attack=[{0}] field\: [{1}], value [{2}]
ascanbeta.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] likely, given error message fragment [{1}] in HTML results
ascanbeta.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] likely, given UNION-specific message fragment [{1}] in HTML results
ascanbeta.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Unmodified message gave HTTP status [{0}], modified message gave HTTP status [{1}]
ascanbeta.sqlinjection.alert.errorbased.differentiation.extrainfo=Unmodified message gave HTTP status [{0}], body of length [{1}], modified message gave HTTP status [{2}], body of length [{3}]. A third (non-SQL injection inducing value) gave HTTP status [{4}], body of length [{5}]
ascanbeta.sqlinjection.alert.booleanbased.extrainfo=The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]
ascanbeta.sqlinjection.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds 

ascanbeta.sourcecodedisclosure.desc=Kod sumber bagi halaman semasa telah didedahkan oleh pelayan web

ascanbeta.sourcecodedisclosurecve-2012-1823.name=Source Code Disclosure - CVE-2012-1823
ascanbeta.sourcecodedisclosurecve-2012-1823.desc=Some PHP versions, when configured to run using CGI, do not correctly handle query strings that lack an unescaped "\=" character, enabling PHP source code disclosure, and arbitrary code execution. In this case, the contents of the PHP file were served directly to the web browser. This output will typically contain PHP, although it may also contain straight HTML.
ascanbeta.sourcecodedisclosurecve-2012-1823.soln=Upgrade to the latest stable version of PHP, or use the Apache web server and the mod_rewrite module to filter out malicious requests using the "RewriteCond" and "RewriteRule" directives.

ascanbeta.sourcecodedisclosure.svnbased.name=Source Code Disclosure - SVN
ascanbeta.sourcecodedisclosure.svnbased.soln=Memastikan bahwa SVN metadata file yang tidak digunakan untuk server web atau server aplikasi
ascanbeta.sourcecodedisclosure.svnbased.extrainfo=The source code for [{0}] was found at [{1}]

ascanbeta.sourcecodedisclosurewebinf.name=Source Code Disclosure - /WEB-INF folder
ascanbeta.sourcecodedisclosurewebinf.desc=Java source code was disclosed by the web server in Java class files in the WEB-INF folder. The class files can be dis-assembled to produce source code which very closely matches the original source code.  
ascanbeta.sourcecodedisclosurewebinf.soln=Web server harus dikonfigurasi untuk tidak melayani /WEB-INF folder atau isinya ke web browser, karena mengandung informasi sensitif seperti informasi yang dihimpun kode sumber Java dan properties file yang dapat berisi mandat. Jawa kelas dikerahkan dengan aplikasi tersebut harus dikaburkan, sebagai lapisan tambahan pertahanan dalam "pertahanan-di-mendalam" pendekatan.

ascanbeta.sourcecodedisclosurewebinf.propertiesfile.name=Properties File Disclosure - /WEB-INF folder
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.desc=A Java class in the /WEB-INF folder disclosed the presence of the properties file. Properties file are not intended to be publicly accessible, and typically contain configuration information, application credentials, or cryptographic keys.   
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.soln=The web server should be configured to not serve the /WEB-INF folder or its contents to web browsers.  It may also be possible to remove the /WEB-INF folder.  
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.extrainfo=The reference to the properties file was found in the dis-assembled Java source code for Java class [{0}].

ascanbeta.usernameenumeration.name=Possible Username Enumeration
ascanbeta.usernameenumeration.desc=It may be possible to enumerate usernames, based on differing HTTP responses when valid and invalid usernames are provided. This would greatly increase the probability of success of password brute-forcing attacks against the system. Note that false positives may sometimes be minimised by increasing the 'Attack Strength' Option in ZAP.  Please manually check the 'Other Info' field to confirm if this is actually an issue. 
ascanbeta.usernameenumeration.soln=Tidak membocorkan rincian apakah username yang valid atau tidak valid. Secara khusus, untuk kali gagal login, tidak membedakan antara pengguna yang tidak valid dan password yang valid dalam pesan kesalahan, halaman judul, halaman isi, header HTTP, atau pengalihan logika.
ascanbeta.usernameenumeration.refs=https\://www.owasp.org/index.php/Testing_for_user_enumeration_%28OWASP-AT-002%29\nhttp\://sebastian-schinzel.de/_download/ifip-sec2011.pdf
ascanbeta.usernameenumeration.alert.extrainfo=[{0}] parameter [{1}] leaks information on whether a user exists. The [{5}] differences in output, for the valid original username value [{2}], and invalid username value [{3}] are\:\n[{4}]
ascanbeta.usernameenumeration.alert.attack=Manipulate [{0}] field\: [{1}] and monitor the output 

ascanbeta.paddingoracle.name=Generic Padding Oracle
ascanbeta.paddingoracle.desc=Dengan memanipulasi padding pada suatu string yang dienkripsi, penyerang mampu menghasilkan pesan kesalahan yang menunjukkan kemungkinan 'padding oracle' kerentanan. Kerentanan tersebut dapat mempengaruhi setiap aplikasi atau framework yang menggunakan enkripsi tidak benar, seperti beberapa versi ASP.net Java Server Faces, dan Mono. Penyerang dapat memanfaatkan masalah ini untuk mendekripsi data dan memulihkan kunci enkripsi, yang berpotensi melihat dan memodifikasi data rahasia. Plugin ini harus mendeteksi MS10-070 padding oracle kerentanan di ASP.net jika CustomErrors diaktifkan untuk itu.
ascanbeta.paddingoracle.soln=Update the affected server software, or modify the scripts so that they properly validate encrypted data before attempting decryption.
ascanbeta.paddingoracle.refs=http\://netifera.com/research/\nhttp\://www.microsoft.com/technet/security/bulletin/ms10-070.mspx\nhttp\://www.mono-project.com/Vulnerabilities\#ASP.NET_Padding_Oracle\nhttps\://bugzilla.redhat.com/show_bug.cgi?id\=623799

ascanbeta.elinjection.name=Expression Language Injection
ascanbeta.elinjection.desc=The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed. In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection. However, even for later versions, this weakness is still possible depending on configuration.
ascanbeta.elinjection.soln=Melakukan validasi data-data best practice terhadap terpercaya masukan dan untuk memastikan bahwa output encoding diaplikasikan pada saat data tiba di EL lapisan, sehingga tidak ada metakarakter ditemukan oleh penerjemah dalam konten pengguna sebelum evaluasi. Yang paling jelas pola untuk mendeteksi adanya $ {\#{, tapi itu mungkin untuk menyandikan atau fragmen data ini.
ascanbeta.elinjection.refs=https\://www.owasp.org/index.php/Expression_Language_Injection\nhttp\://cwe.mitre.org/data/definitions/917.html

ascanbeta.xxeplugin.name=XML External Entity Attack
ascanbeta.xxeplugin.nocallback=callback functionality not available

ascanbeta.xpathinjectionplugin.name=XPath Injection


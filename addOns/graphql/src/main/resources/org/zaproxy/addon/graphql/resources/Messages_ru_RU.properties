graphql.api.action.importFile = Импортирует GraphQL схему из файла. 
graphql.api.action.importFile.param.endurl = URL-адрес конечной точки. 
graphql.api.action.importFile.param.file = файл, содержащий GraphQL схему.
graphql.api.action.importUrl = Импортирует GraphQL схему из URL
graphql.api.action.importUrl.param.endurl = URL-адрес конечной точки. 
graphql.api.action.importUrl.param.url = URL локация GraphQL схемы
graphql.api.action.setOptionArgsType = Устанавливает, как аргументы указаны. 
graphql.api.action.setOptionArgsType.param.String = Может быть «INLINE», «VARIABLES» или «BOTH». 
graphql.api.action.setOptionLenientMaxQueryDepthEnabled = Устанавливает, требуется ли максимальная глубина запроса (Query Depth) применятся снисходительно.
graphql.api.action.setOptionLenientMaxQueryDepthEnabled.param.Boolean = Применять снисходительно (правда или ложь). 
graphql.api.action.setOptionMaxAdditionalQueryDepth = Устанавливает максимальную глубину генерации дополнительного запроса (используется, если применяется мягко). 
graphql.api.action.setOptionMaxAdditionalQueryDepth.param.Integer = Максимальная дополнительная глубина (Additional Depth).
graphql.api.action.setOptionMaxArgsDepth = Устанавливает максимальную глубину генерации аргументов.
graphql.api.action.setOptionMaxArgsDepth.param.Integer = Максимальная Глубина. 
graphql.api.action.setOptionMaxQueryDepth = Устанавливает максимальную глубину генерации запроса. 
graphql.api.action.setOptionMaxQueryDepth.param.Integer = Максимальная Глубина. 
graphql.api.action.setOptionOptionalArgsEnabled = Устанавливает, следует ли указывать необязательные аргументы. 
graphql.api.action.setOptionOptionalArgsEnabled.param.Boolean = Укажите необязательные аргументы (истина или ложь). 
graphql.api.action.setOptionQuerySplitType = Устанавливает уровень для которого создается единый запрос. 
graphql.api.action.setOptionQuerySplitType.param.String = Может быть LEAF, ROOT_FIELD или OPERATION.
graphql.api.action.setOptionRequestMethod = Устанавливает метод запроса. 
graphql.api.action.setOptionRequestMethod.param.String = Может быть «POST_JSON», «POST_GRAPHQL» или «GET». 
graphql.api.view.optionArgsType = Возвращает текущее указание аргументов. 
graphql.api.view.optionLenientMaxQueryDepthEnabled = Возвращает, включен ли минимальный максимум глубины генерации запроса. 
graphql.api.view.optionMaxAdditionalQueryDepth = Возвращает текущую максимальную глубину генерации дополнительного запроса. 
graphql.api.view.optionMaxArgsDepth = Возвращает текущую максимальную глубину генерации аргументов. 
graphql.api.view.optionMaxQueryDepth = Возвращает текущую максимальную глубину генерации запроса. 
graphql.api.view.optionOptionalArgsEnabled = Возвращает независимо от того, указаны ли в настоящее время необязательные аргументы. 
graphql.api.view.optionQuerySplitType = Возвращает текущий уровень, для которого создается один запрос. 
graphql.api.view.optionRequestMethod = Возвращает текущий метод запроса. 

graphql.automation.desc = Интеграция GraphQL Automation Framework
graphql.automation.dialog.advanced = Показать дополнительные параметры\: 
graphql.automation.dialog.argstype = Тип аргументов\: 
graphql.automation.dialog.endpoint = Конечная точка\: 
graphql.automation.dialog.lenientmaxquery = Разрешенная максимальная глубина запроса включена\: 
graphql.automation.dialog.maxaddquerydepth = Максимальная глубина дополнительного запроса\: 
graphql.automation.dialog.maxargsdepth = Максимальная глубина аргументов\: 
graphql.automation.dialog.maxquerydepth = Максимальная Глубина Запроса \:
graphql.automation.dialog.name = Название Задания\:
graphql.automation.dialog.optargsenabled = Включены необязательные аргументы\: 
graphql.automation.dialog.querysplittype = Тип разделения запроса\: 
graphql.automation.dialog.requestmethod = Метод запроса\: 
graphql.automation.dialog.schemafile = схема Файл
graphql.automation.dialog.schemaurl = схема URL
graphql.automation.dialog.summary = URL\: {0}, Файл\: {1}
graphql.automation.dialog.tab.adv = Advanced ( Передовой)
graphql.automation.dialog.tab.params = Параметры
graphql.automation.dialog.title = Задание GraphQL 
graphql.automation.error = Работа graphql ошибка\: {0} 
graphql.automation.info.import.file = Задание graphql импортирует схему из файла\: {0} цель\: {1} 
graphql.automation.info.import.introspect = Задание graphql для импорта схемы с использованием интроспекции из\: {0} 
graphql.automation.info.import.url = Задание graphql импортирует схему из URL\: {0} цель\: {1} 
graphql.automation.name = GraphQL автоматизация 

graphql.cmdline.endurl.help = Устанавливает URL-адрес конечной точки 
graphql.cmdline.file.help = Импортирует схему GraphQL из файла 
graphql.cmdline.url.help = Импортирует схему GraphQL из URL-адреса 

graphql.desc = Позволяет проверять и атаковать конечные точки GraphQL. 

graphql.engine.agoo.docsUrl = https\://github.com/ohler55/agoo
graphql.engine.agoo.name = Agoo
graphql.engine.agoo.technologies = Ruby

graphql.engine.apollo.docsUrl = https\://github.com/apollographql/apollo-server
graphql.engine.apollo.name = Apollo
graphql.engine.apollo.technologies = JavaScript, Node.js, and TypeScript

graphql.engine.ariadne.docsUrl = https\://github.com/mirumee/ariadne
graphql.engine.ariadne.name = Ariadne
graphql.engine.ariadne.technologies = Python

graphql.engine.aws-appsync.docsUrl = https\://aws.amazon.com/appsync
graphql.engine.aws-appsync.name = AWS AppSync
graphql.engine.aws-appsync.technologies = AWS

graphql.engine.caliban.docsUrl = https\://github.com/ghostdogpr/caliban
graphql.engine.caliban.name = caliban
graphql.engine.caliban.technologies = Scala

graphql.engine.dgraph.docsUrl = https\://github.com/dgraph-io/dgraph
graphql.engine.dgraph.name = Dgraph
graphql.engine.dgraph.technologies = JavaScript

graphql.engine.dianajl.docsUrl = https\://github.com/neomatrixcode/Diana.jl
graphql.engine.dianajl.name = Diana.jl
graphql.engine.dianajl.technologies = Julia

graphql.engine.directus.docsUrl = https\://github.com/directus/directus
graphql.engine.directus.name = Directus
graphql.engine.directus.technologies = TypeScript

graphql.engine.gqlgen.docsUrl = https\://github.com/99designs/gqlgen
graphql.engine.gqlgen.name = gqlgen
graphql.engine.gqlgen.technologies = Golang

graphql.engine.graphene.docsUrl = https\://github.com/graphql-python/graphene
graphql.engine.graphene.name = Graphene
graphql.engine.graphene.technologies = Python

graphql.engine.graphql-by-pop.docsUrl = https\://github.com/leoloso/PoP/tree/master/layers/GraphQLByPoP
graphql.engine.graphql-by-pop.name = GraphQL by PoP
graphql.engine.graphql-by-pop.technologies = PHP

graphql.engine.graphql-flutter.docsUrl = https\://github.com/zino-app/graphql-flutter
graphql.engine.graphql-flutter.name = graphql-flutter
graphql.engine.graphql-flutter.technologies = Flutter (Dart)

graphql.engine.graphql-go.docsUrl = https\://github.com/graphql-go/graphql
graphql.engine.graphql-go.name = graphql-go
graphql.engine.graphql-go.technologies = Golang

graphql.engine.graphql-java.docsUrl = https\://github.com/graphql-java/graphql-java
graphql.engine.graphql-java.name = graphql-java
graphql.engine.graphql-java.technologies = Java

graphql.engine.graphql-php.docsUrl = https\://github.com/webonyx/graphql-php
graphql.engine.graphql-php.name = graphql-php
graphql.engine.graphql-php.technologies = PHP

graphql.engine.graphql-ruby.docsUrl = https\://github.com/rmosolgo/graphql-ruby
graphql.engine.graphql-ruby.name = graphql-ruby
graphql.engine.graphql-ruby.technologies = Ruby

graphql.engine.graphql-yoga.docsUrl = https\://github.com/dotansimha/graphql-yoga
graphql.engine.graphql-yoga.name = GraphQL Yoga
graphql.engine.graphql-yoga.technologies = TypeScript

graphql.engine.hasura.docsUrl = https\://github.com/hasura/graphql-engine
graphql.engine.hasura.name = Hasura
graphql.engine.hasura.technologies = Haskell

graphql.engine.hypergraphql.docsUrl = https\://github.com/hypergraphql/hypergraphql
graphql.engine.hypergraphql.name = HyperGraphQL
graphql.engine.hypergraphql.technologies = Java

graphql.engine.jaal.docsUrl = https\://github.com/appointy/jaal
graphql.engine.jaal.name = jaal
graphql.engine.jaal.technologies = Golang

graphql.engine.juniper.docsUrl = https\://github.com/graphql-rust/juniper
graphql.engine.juniper.name = Juniper
graphql.engine.juniper.technologies = Rust

graphql.engine.lacinia.docsUrl = https\://github.com/walmartlabs/lacinia
graphql.engine.lacinia.name = lacinia
graphql.engine.lacinia.technologies = Clojure

graphql.engine.lighthouse.docsUrl = https\://github.com/nuwave/lighthouse
graphql.engine.lighthouse.name = Lighthouse
graphql.engine.lighthouse.technologies = PHP

graphql.engine.mercurius.docsUrl = https\://github.com/mercurius-js/mercurius
graphql.engine.mercurius.name = mercurius
graphql.engine.mercurius.technologies = JavaScript, Node.js, and TypeScript

graphql.engine.morpheus.docsUrl = https\://github.com/morpheusgraphql/morpheus-graphql
graphql.engine.morpheus.name = morpheus-graphql
graphql.engine.morpheus.technologies = Haskell

graphql.engine.sangria.docsUrl = https\://github.com/sangria-graphql/sangria
graphql.engine.sangria.name = Sangria
graphql.engine.sangria.technologies = Scala

graphql.engine.strawberry.docsUrl = https\://github.com/strawberry-graphql/strawberry
graphql.engine.strawberry.name = Strawberry
graphql.engine.strawberry.technologies = Python

graphql.engine.tartiflette.docsUrl = https\://github.com/tartiflette/tartiflette
graphql.engine.tartiflette.name = tartiflette
graphql.engine.tartiflette.technologies = Python

graphql.engine.wpgraphql.docsUrl = https\://github.com/wp-graphql/wp-graphql
graphql.engine.wpgraphql.name = WPGraphQL WordPress Plugin
graphql.engine.wpgraphql.technologies = PHP

graphql.error.filenotfound = Cannot find the file\:\n{0}
graphql.error.importfile = Произошла ошибка при импорте из файла. 
graphql.error.invalidurl = Пожалуйста, введите корректный адрес.\n{0} 

graphql.fingerprinting.alert.desc = The server is using "{0}", which is a GraphQL implementation for {1}.
graphql.fingerprinting.alert.name = GraphQL Server Implementation Identified

graphql.formhandler.desc = GraphQL Form Handler Integration
graphql.formhandler.name = GraphQL Form Handler

graphql.importfromdialog.importbutton = Импортировать
graphql.importfromdialog.labelendpoint = URL конечной точки 
graphql.importfromdialog.message = ЧТО ДЕЛАТЬ\: Импорт и синтаксический анализ схемы 
graphql.importfromdialog.pasteaction = Вставить 

graphql.importfromfiledialog.choosefilebutton = Выберите файл
graphql.importfromfiledialog.labelfile = Файл схемы 
graphql.importfromfiledialog.title = Импорт схемы GraphQL из файла 

graphql.importfromurldialog.labelurl = URL схемы (необязательно) 
graphql.importfromurldialog.title = Импорт схемы GraphQL из URL-адреса 

graphql.info.emptyendurl = URL-адрес GraphQL не указан. 

graphql.introspection.alert.desc = The GraphQL endpoint has Introspection enabled. Introspection allows clients to query the schema and retrieve detailed information about the fields, types, inputs, etc. supported by the GraphQL endpoint. This may be valuable to an attacker, as it could enable them to craft more targeted queries.
graphql.introspection.alert.name = GraphQL Endpoint Supports Introspection
graphql.introspection.alert.ref = https\://spec.graphql.org/October2021/\#sec-Introspection
graphql.introspection.alert.soln = Disable Introspection on the GraphQL endpoint.

graphql.options.label.additionalQueryDepth = Дополнительная глубина запроса\: 
graphql.options.label.argsDepth = Максимальная глубина аргументов\:
graphql.options.label.argsType = Укажите аргументы\: 
graphql.options.label.lenientMaxQueryDepthEnabled = Минимальная максимальная глубина запроса 
graphql.options.label.lenientMaxQueryDepthEnabled.tooltip = Предотвратите недопустимые запросы, разрешив дополнительную глубину для полей без типов листьев. 
graphql.options.label.optionalArgsEnabled = Укажите необязательные аргументы 
graphql.options.label.queryDepth = Максимальная глубина запроса\: 
graphql.options.label.requestMethod = Метод запроса\: 
graphql.options.label.split = Создать запрос для\: 
graphql.options.panelName = GraphQL 
graphql.options.value.args.both = В обе стороны 
graphql.options.value.args.inline = Встроенный
graphql.options.value.args.variables = Использование переменных 
graphql.options.value.request.postJson = POST (c JSON body)
graphql.options.value.split.get = GET
graphql.options.value.split.leaf = Каждый лист (скалярный или перечисляемый) 
graphql.options.value.split.operation = HMMP Operation
graphql.options.value.split.postGraphql = POST (с телом GraphQL) 
graphql.options.value.split.rootField = Каждое поле операции 

graphql.spider.desc = GraphQL Spider Integration
graphql.spider.name = GraphQL Spider

graphql.topmenu.import.importgraphql = Импорт схемы GraphQL из файла 
graphql.topmenu.import.importgraphql.tooltip = Файл должен быть формально описанной схемой GraphQL. 
graphql.topmenu.import.importremotegraphql = Импорт схемы GraphQL из URL-адреса 
graphql.topmenu.import.importremotegraphql.tooltip = URL-адрес, по которому находится схема GraphQL. Если он не указан, будет использоваться самоанализ. 

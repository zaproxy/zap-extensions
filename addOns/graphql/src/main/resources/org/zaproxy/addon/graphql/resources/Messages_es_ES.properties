graphql.api.action.importFile = Importa un esquema GraphQL desde un archivo.
graphql.api.action.importFile.param.endurl = La URL Endpoint.
graphql.api.action.importFile.param.file = El Archivo que Contiene el Esquema GraphQL
graphql.api.action.importUrl = Importa un Esquema GraphQL desde una URL
graphql.api.action.importUrl.param.endurl = La URL Endpoint.
graphql.api.action.importUrl.param.url = La URL que localiza el esquema GraphQL.
graphql.api.action.setOptionArgsType = Establece cómo se especifican los argumentos.
graphql.api.action.setOptionArgsType.param.String = Puede ser "INLINE", "VARIABLES" o "BOTH".
graphql.api.action.setOptionLenientMaxQueryDepthEnabled = Establece si la profundidad Máxima de Consulta se aplica o no con indulgencia.
graphql.api.action.setOptionLenientMaxQueryDepthEnabled.param.Boolean = Haga cumplir la ley (verdadero o falso).
graphql.api.action.setOptionMaxAdditionalQueryDepth = Establece la profundidad máxima de generación de consultas adicionales (se utiliza si se aplica de forma poco estricta).
graphql.api.action.setOptionMaxAdditionalQueryDepth.param.Integer = La Profundidad Adicional Máxima.
graphql.api.action.setOptionMaxArgsDepth = Establece la profundidad máxima de generación de argumentos.
graphql.api.action.setOptionMaxArgsDepth.param.Integer = La Profundidad Máxima.
graphql.api.action.setOptionMaxQueryDepth = Establece la profundidad máxima de generación de consultas.
graphql.api.action.setOptionMaxQueryDepth.param.Integer = La Profundidad Máxima.
graphql.api.action.setOptionOptionalArgsEnabled = Establece si se deben especificar o no Argumentos Opcionales.
graphql.api.action.setOptionOptionalArgsEnabled.param.Boolean = Especificar Argumentos Opcionales (verdadero o falso).
graphql.api.action.setOptionQueryGenEnabled = Establece si el generador de consultas está activado.
graphql.api.action.setOptionQueryGenEnabled.param.Boolean = Activar la generación de consultas (verdadero o falso).
graphql.api.action.setOptionQuerySplitType = Establece el nivel para el que se genera una única consulta.
graphql.api.action.setOptionQuerySplitType.param.String = Puede ser "LEAF", "ROOT_FIELD" u "OPERATION".
graphql.api.action.setOptionRequestMethod = Establece el método de petición.
graphql.api.action.setOptionRequestMethod.param.String = Puede ser "POST_JSON", "POST_GRAPHQL", o "GET".
graphql.api.view.optionArgsType = Devuelve cómo se especifican actualmente los argumentos.
graphql.api.view.optionLenientMaxQueryDepthEnabled = Devuelve si está activada o no la profundidad máxima indulgente de generación de consultas.
graphql.api.view.optionMaxAdditionalQueryDepth = Devuelve la profundidad máxima actual de generación de consultas adicionales.
graphql.api.view.optionMaxArgsDepth = Devuelve la profundidad máxima actual de generación de argumentos.
graphql.api.view.optionMaxQueryDepth = Devuelve la profundidad máxima actual de generación de consultas.
graphql.api.view.optionOptionalArgsEnabled = Devuelve si se han especificado o no argumentos opcionales.
graphql.api.view.optionQueryGenEnabled = Devuelve si el generador de consultas está activado.
graphql.api.view.optionQuerySplitType = Devuelve el nivel actual para el que se genera una única consulta.
graphql.api.view.optionRequestMethod = Devuelve el método de la petición actual.

graphql.automation.desc = Integración del Framework de Automatización GraphQL
graphql.automation.dialog.argstype = Tipo de Argumentos\:
graphql.automation.dialog.endpoint = Endpoint\:
graphql.automation.dialog.lenientmaxquery = Profundidad Máxima de Consulta Activada\:
graphql.automation.dialog.maxaddquerydepth = Profundidad Máxima de Consulta Adicional\:
graphql.automation.dialog.maxargsdepth = Profundidad Máxima de Argumentos\:
graphql.automation.dialog.maxquerydepth = Profundidad Máxima de Consulta\:
graphql.automation.dialog.name = Nombre de Tarea\:
graphql.automation.dialog.optargsenabled = Argumentos Opcionales Activados\:
graphql.automation.dialog.querygen = Activar el Generador de Consultas\:
graphql.automation.dialog.querysplittype = Tipo de División de Consulta\:
graphql.automation.dialog.requestmethod = Método de Petición\:
graphql.automation.dialog.schemafile = Esquema de Archivo\:
graphql.automation.dialog.schemaurl = Esquema URL\:
graphql.automation.dialog.summary = URL\: {0}, Archivo\: {1}
graphql.automation.dialog.tab.params = Parámetros
graphql.automation.dialog.tab.queryGenConfig = Configuración del Generador de Consultas
graphql.automation.dialog.title = Tarea GraphQL
graphql.automation.error = Error de tarea graphql\: {0}
graphql.automation.info.import.file = Tarea graphql importando esquema desde fichero\: {0} objetivo\: {1}
graphql.automation.info.import.introspect = Tarea graphql importando esquema usando introspección desde\: {0}
graphql.automation.info.import.url = Tarea graphql importando esquema desde URL\: {0} obejtivo\: {1}
graphql.automation.name = Automatización GraphQL

graphql.cmdline.endurl.help = Establece la URL del endpoint
graphql.cmdline.file.help = Importa un Esquema GraphQL desde un Archivo
graphql.cmdline.url.help = Importa un Esquema GraphQL desde una URL

graphql.desc = Permite inspeccionar y atacar endpoints GraphQL.

graphql.engine.absinthe.docsUrl = https\://github.com/absinthe-graphql/absinthe
graphql.engine.absinthe.name = Absinthe
graphql.engine.absinthe.technologies = Elixir

graphql.engine.agoo.docsUrl = https\://github.com/ohler55/agoo
graphql.engine.agoo.name = Agoo
graphql.engine.agoo.technologies = Ruby

graphql.engine.apollo.docsUrl = https\://github.com/apollographql/apollo-server
graphql.engine.apollo.name = Apolo
graphql.engine.apollo.technologies = JavaScript, Node.js, y TypeScript

graphql.engine.ariadne.docsUrl = https\://github.com/mirumee/ariadne
graphql.engine.ariadne.name = Ariadne
graphql.engine.ariadne.technologies = Python

graphql.engine.aws-appsync.docsUrl = https\://aws.amazon.com/appsync
graphql.engine.aws-appsync.name = AWS AppSync
graphql.engine.aws-appsync.technologies = AWS

graphql.engine.caliban.docsUrl = https\://github.com/ghostdogpr/caliban
graphql.engine.caliban.name = caliban
graphql.engine.caliban.technologies = Scala

graphql.engine.dgraph.docsUrl = https\://github.com/dgraph-io/dgraph
graphql.engine.dgraph.name = Dgraph
graphql.engine.dgraph.technologies = JavaScript

graphql.engine.dianajl.docsUrl = https\://github.com/neomatrixcode/Diana.jl
graphql.engine.dianajl.name = Diana.jl
graphql.engine.dianajl.technologies = Julia

graphql.engine.directus.docsUrl = https\://github.com/directus/directus
graphql.engine.directus.name = Directus
graphql.engine.directus.technologies = TypeScript

graphql.engine.example.docsUrl = https\://example.com/graphql-engine-reference
graphql.engine.example.name = Ejemplo del Motor GraphQL
graphql.engine.example.technologies = "Example Technology 1" y "Example Technology 2"

graphql.engine.gqlgen.docsUrl = https\://github.com/99designs/gqlgen
graphql.engine.gqlgen.name = gqlgen
graphql.engine.gqlgen.technologies = Golang

graphql.engine.graphene.docsUrl = https\://github.com/graphql-python/graphene
graphql.engine.graphene.name = Graphene
graphql.engine.graphene.technologies = Python

graphql.engine.graphql-by-pop.docsUrl = https\://github.com/leoloso/PoP/tree/master/layers/GraphQLByPoP
graphql.engine.graphql-by-pop.name = GraphQL por PoP
graphql.engine.graphql-by-pop.technologies = PHP

graphql.engine.graphql-dotnet.docsUrl = https\://github.com/graphql-dotnet/graphql-dotnet
graphql.engine.graphql-dotnet.name = GraphQL.NET
graphql.engine.graphql-dotnet.technologies = .NET

graphql.engine.graphql-flutter.docsUrl = https\://github.com/zino-app/graphql-flutter
graphql.engine.graphql-flutter.name = graphql-flutter
graphql.engine.graphql-flutter.technologies = Flutter (Dart)

graphql.engine.graphql-go.docsUrl = https\://github.com/graphql-go/graphql
graphql.engine.graphql-go.name = graphql-go
graphql.engine.graphql-go.technologies = Golang

graphql.engine.graphql-java.docsUrl = https\://github.com/graphql-java/graphql-java
graphql.engine.graphql-java.name = graphql-java
graphql.engine.graphql-java.technologies = Java

graphql.engine.graphql-php.docsUrl = https\://github.com/webonyx/graphql-php
graphql.engine.graphql-php.name = graphql-php
graphql.engine.graphql-php.technologies = PHP

graphql.engine.graphql-ruby.docsUrl = https\://github.com/rmosolgo/graphql-ruby
graphql.engine.graphql-ruby.name = graphql-ruby
graphql.engine.graphql-ruby.technologies = Ruby

graphql.engine.graphql-yoga.docsUrl = https\://github.com/dotansimha/graphql-yoga
graphql.engine.graphql-yoga.name = GraphQL Yoga
graphql.engine.graphql-yoga.technologies = TypeScript

graphql.engine.hasura.docsUrl = https\://github.com/hasura/graphql-engine
graphql.engine.hasura.name = Hasura
graphql.engine.hasura.technologies = Haskell

graphql.engine.hotchocolate.docsUrl = https\://chillicream.com/docs/hotchocolate/v13
graphql.engine.hotchocolate.name = Hot Chocolate
graphql.engine.hotchocolate.technologies = .NET

graphql.engine.hypergraphql.docsUrl = https\://github.com/hypergraphql/hypergraphql
graphql.engine.hypergraphql.name = HyperGraphQL
graphql.engine.hypergraphql.technologies = Java

graphql.engine.inigo.docsUrl = https\://inigo.io
graphql.engine.inigo.name = Inigo
graphql.engine.inigo.technologies = Ir

graphql.engine.jaal.docsUrl = https\://github.com/appointy/jaal
graphql.engine.jaal.name = jaal
graphql.engine.jaal.technologies = Golang

graphql.engine.juniper.docsUrl = https\://github.com/graphql-rust/juniper
graphql.engine.juniper.name = Juniper
graphql.engine.juniper.technologies = Rust

graphql.engine.lacinia.docsUrl = https\://github.com/walmartlabs/lacinia
graphql.engine.lacinia.name = lacinia
graphql.engine.lacinia.technologies = Clojure

graphql.engine.lighthouse.docsUrl = https\://github.com/nuwave/lighthouse
graphql.engine.lighthouse.name = Faro
graphql.engine.lighthouse.technologies = PHP

graphql.engine.mercurius.docsUrl = https\://github.com/mercurius-js/mercurius
graphql.engine.mercurius.name = mercurio
graphql.engine.mercurius.technologies = JavaScript, Node.js, y TypeScript

graphql.engine.morpheus.docsUrl = https\://github.com/morpheusgraphql/morpheus-graphql
graphql.engine.morpheus.name = morpheus-graphql
graphql.engine.morpheus.technologies = Haskell

graphql.engine.pg_graphql.docsUrl = https\://supabase.github.io/pg_graphql
graphql.engine.pg_graphql.name = pg_graphql
graphql.engine.pg_graphql.technologies = Rust

graphql.engine.sangria.docsUrl = https\://github.com/sangria-graphql/sangria
graphql.engine.sangria.name = Sangria
graphql.engine.sangria.technologies = Scala

graphql.engine.strawberry.docsUrl = https\://github.com/strawberry-graphql/strawberry
graphql.engine.strawberry.name = Strawberry
graphql.engine.strawberry.technologies = Python

graphql.engine.tailcall.docsUrl = https\://tailcall.run
graphql.engine.tailcall.name = tailcall
graphql.engine.tailcall.technologies = Rust

graphql.engine.tartiflette.docsUrl = https\://github.com/tartiflette/tartiflette
graphql.engine.tartiflette.name = tartiflette
graphql.engine.tartiflette.technologies = Python

graphql.engine.wpgraphql.docsUrl = https\://github.com/wp-graphql/wp-graphql
graphql.engine.wpgraphql.name = WPGraphQL WordPress Plugin
graphql.engine.wpgraphql.technologies = PHP

graphql.error.emptySchema = The imported schema was empty.
graphql.error.filenotfound = No se puede encontrar el archivo\:\n{0}
graphql.error.import = No se pudo importar el esquema\:\n{0}
graphql.error.importfile = Se produjo un error al importar desde un archivo\:
graphql.error.introspection = Ha fallado la introspección del endpoint especificado.
graphql.error.invalidJson = The imported schema was not valid JSON.
graphql.error.invalidurl = Por favor introduzca una URL válida\:\n{0}
graphql.error.nullData = The "data" object in the imported schema was null.

graphql.fingerprinting.alert.desc = El servidor está utilizando "{0}", que es una implementación de GraphQL para {1}.
graphql.fingerprinting.alert.name = Implementación identificada del servidor GraphQL

graphql.importDialog.chooseFileButton = Elija el Archivo
graphql.importDialog.importButton = Importar
graphql.importDialog.labelEndpoint = Endpoint URL
graphql.importDialog.labelSchema = Archivo de Esquema o URL
graphql.importDialog.pasteAction = Pegar
graphql.importDialog.requiredFields = Indica un campo obligatorio
graphql.importDialog.title = Importar un Esquema GraphQL

graphql.info.emptyendurl = No se ha especificado ninguna URL GraphQL.

graphql.introspection.alert.desc = El endpoint GraphQL tiene habilitada la Introspección. La introspección permite a los clientes consultar el esquema y recuperar información detallada sobre los campos, tipos, entradas, etc. que admite el endpoint GraphQL. Esto puede ser valioso para un atacante, ya que podría permitirle elaborar consultas más específicas.
graphql.introspection.alert.name = El Endpoint GraphQL Admite la Introspección
graphql.introspection.alert.ref = https\://spec.graphql.org/October2021/\#sec-Introspection
graphql.introspection.alert.soln = Desactivar Introspección en el endpoint GraphQL.

graphql.options.label.additionalQueryDepth = Profundidad de la Consulta Adicional\:
graphql.options.label.argsDepth = Profundidad Máxima de Argumentos\:
graphql.options.label.argsType = Especificar Argumentos\:
graphql.options.label.lenientMaxQueryDepthEnabled = Profundidad Máxima de Consulta Indulgente
graphql.options.label.lenientMaxQueryDepthEnabled.tooltip = Evitar consultas no válidas permitiendo profundidad adicional para campos sin tipos de hoja.
graphql.options.label.optionalArgsEnabled = Especificar Argumentos Opcionales
graphql.options.label.queryDepth = Profundidad Máxima de Consulta\:
graphql.options.label.queryGenEnabled = Activar el Generador de Consultas
graphql.options.label.requestMethod = Método de Petición\:
graphql.options.label.split = Generar Consultas Para\:
graphql.options.panelName = GraphQL
graphql.options.queryGenConfigPanel.title = Configuración del Generador de Consultas
graphql.options.value.args.both = Ambos Sentidos
graphql.options.value.args.inline = En línea
graphql.options.value.args.variables = Usando Variables
graphql.options.value.request.postJson = POST (con JSON body)
graphql.options.value.split.get = GET
graphql.options.value.split.leaf = Cada Hoja (Scalar o Enum)
graphql.options.value.split.operation = Cada Operación
graphql.options.value.split.postGraphql = POST (con GraphQL body)
graphql.options.value.split.rootField = Cada campo de una operación

graphql.spider.desc = Integración de GraphQL Spider
graphql.spider.name = Spider GraphQL

graphql.techdetection.desc = GraphQL Technology Detection Integration
graphql.techdetection.name = GraphQL Tech Detection

graphql.topmenu.import.importgraphql = Importar un Esquema GraphQL
graphql.topmenu.import.importgraphql.tooltip = Especifique un endpoint GraphQL y, opcionalmente, un archivo de esquema GraphQL para importar.

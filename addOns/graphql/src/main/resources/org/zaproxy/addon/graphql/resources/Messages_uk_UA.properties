graphql.api.action.importFile = Імпортує GraphQL Schema з файлу.
graphql.api.action.importFile.param.endurl = Кінцева точка URL-адреси.
graphql.api.action.importFile.param.file = Файл, який містить GraphQL Schema.\n
graphql.api.action.importUrl = Імпортує GraphQL Schema з URL-адреси.
graphql.api.action.importUrl.param.endurl = Кінцева точка URL-адреси.
graphql.api.action.importUrl.param.url = URL-адреса розташування схеми GraphQL.
graphql.api.action.setOptionArgsType = Визначає, як встановлені аргументи.
graphql.api.action.setOptionArgsType.param.String = Може бути "INLINE", "VARIABLES" або "BOTH".
graphql.api.action.setOptionLenientMaxQueryDepthEnabled = Визначає чи пом’якшено застосовуватиметься максимальна глибина запиту.
graphql.api.action.setOptionLenientMaxQueryDepthEnabled.param.Boolean = Застосувати пом'якшено (істина/хибність).
graphql.api.action.setOptionMaxAdditionalQueryDepth = Визначає максимальну глибину створення додаткового запиту (використовується, якщо застосовується м’яко).
graphql.api.action.setOptionMaxAdditionalQueryDepth.param.Integer = Максимальна додаткова глибина.
graphql.api.action.setOptionMaxArgsDepth = Визначає максимальну глибину створення аргументів.
graphql.api.action.setOptionMaxArgsDepth.param.Integer = Максимальна глибина.
graphql.api.action.setOptionMaxQueryDepth = Визначає максимальну глибину створення запиту.
graphql.api.action.setOptionMaxQueryDepth.param.Integer = Максимальна глибина.
graphql.api.action.setOptionOptionalArgsEnabled = Визначає, чи потрібно вказувати додаткові аргументи.
graphql.api.action.setOptionOptionalArgsEnabled.param.Boolean = Вказати додаткові аргументи (істина/хибність).
graphql.api.action.setOptionQueryGenEnabled = Вказує, чи генератор запитів увімкнено.
graphql.api.action.setOptionQueryGenEnabled.param.Boolean = Увімкнути створення запитів (істина/хибність).
graphql.api.action.setOptionQuerySplitType = Визначає рівень, для якого створюється одинарний запит.
graphql.api.action.setOptionQuerySplitType.param.String = Може бути "LEAF", "ROOT_FIELD" або "OPERATION".
graphql.api.action.setOptionRequestMethod = Визначає метод запиту.
graphql.api.action.setOptionRequestMethod.param.String = Може бути "POST_JSON", "POST_GRAPHQL" або "GET".
graphql.api.view.optionArgsType = Повертає те, як наразі вказані аргументи.
graphql.api.view.optionLenientMaxQueryDepthEnabled = Повертає, чи ввімкнено поблажливу максимальну глибину створення запиту.
graphql.api.view.optionMaxAdditionalQueryDepth = Повертає поточну максимальну глибину створення додаткового запиту.
graphql.api.view.optionMaxArgsDepth = Повертає поточну максимальну глибину створення аргументів.
graphql.api.view.optionMaxQueryDepth = Повертає поточну максимальну глибину створення запиту.
graphql.api.view.optionOptionalArgsEnabled = Повертає, чи поточно вказано додаткові аргументи.
graphql.api.view.optionQueryGenEnabled = Повертає, чи генератор запитів увімкнено.
graphql.api.view.optionQuerySplitType = Повертає поточний рівень, для якого створюється одинарний запит.
graphql.api.view.optionRequestMethod = Повертає поточний метод запиту.

graphql.automation.desc = Інтеграція автоматизації інфраструктури GraphQL
graphql.automation.dialog.argstype = Тип аргументів\:
graphql.automation.dialog.endpoint = Кінцева точка\:
graphql.automation.dialog.lenientmaxquery = Увімкнуто поблажливу максимальну глибину запиту\:
graphql.automation.dialog.maxaddquerydepth = Максимальна додаткова глибина запиту\:
graphql.automation.dialog.maxargsdepth = Максимальна глибина аргументів\:
graphql.automation.dialog.maxquerydepth = Максимальна глибина запиту\:
graphql.automation.dialog.name = Назва завдання\:
graphql.automation.dialog.optargsenabled = Додаткові аргументи ввімкнено\:
graphql.automation.dialog.querygen = Увімкнути генератор запитів\:
graphql.automation.dialog.querysplittype = Тип розділення запиту\:
graphql.automation.dialog.requestmethod = Метод запиту\:
graphql.automation.dialog.schemafile = SchemaFile\:
graphql.automation.dialog.schemaurl = URL-адреса схеми\:
graphql.automation.dialog.summary = URL-адреса\: {0}, Файл\: {1}
graphql.automation.dialog.tab.params = Параметри
graphql.automation.dialog.tab.queryGenConfig = Конфігурація генератора запитів
graphql.automation.dialog.title = Завдання GraphQL
graphql.automation.error = Помилка завдання graphql \: {0}
graphql.automation.info.import.file = Імпорт схеми завдання graphql з файлу\: {0} ціль\: {1}
graphql.automation.info.import.introspect = Імпорт схеми завдання graphql за допомогою інтроспекції з\: {0}
graphql.automation.info.import.url = Імпорт схеми завдання graphql з URL-адреси\: {0} ціль\: {1}
graphql.automation.name = Автоматизація GraphQL 

graphql.cmdline.endurl.help = Визначає URL-адресу кінцевої точки
graphql.cmdline.file.help = Імпортує GraphQL Schema з файлу.
graphql.cmdline.url.help = Імпортує GraphQL Schema з URL-адреси.

graphql.desc = Дозволяє вам перевіряти та атакувати кінцеві точки GraphQL.

graphql.engine.absinthe.docsUrl = https\://github.com/absinthe-graphql/absinthe
graphql.engine.absinthe.name = Абсент
graphql.engine.absinthe.technologies = Еліксир

graphql.engine.agoo.docsUrl = https\://github.com/ohler55/agoo
graphql.engine.agoo.name = Agoo
graphql.engine.agoo.technologies = Ruby

graphql.engine.apollo.docsUrl = https\://github.com/apollographql/apollo-server
graphql.engine.apollo.name = Apollo
graphql.engine.apollo.technologies = JavaScript, Node.js, і TypeScript

graphql.engine.ariadne.docsUrl = https\://github.com/mirumee/ariadne
graphql.engine.ariadne.name = Ariadne
graphql.engine.ariadne.technologies = Python

graphql.engine.aws-appsync.docsUrl = https\://aws.amazon.com/appsync
graphql.engine.aws-appsync.name = AWS AppSync
graphql.engine.aws-appsync.technologies = AWS

graphql.engine.caliban.docsUrl = https\://github.com/ghostdogpr/caliban
graphql.engine.caliban.name = caliban
graphql.engine.caliban.technologies = Scala

graphql.engine.dgraph.docsUrl = https\://github.com/dgraph-io/dgraph
graphql.engine.dgraph.name = Dgraph
graphql.engine.dgraph.technologies = JavaScript

graphql.engine.dianajl.docsUrl = https\://github.com/neomatrixcode/Diana.jl
graphql.engine.dianajl.name = Diana.jl
graphql.engine.dianajl.technologies = Julia

graphql.engine.directus.docsUrl = https\://github.com/directus/directus
graphql.engine.directus.name = Directus
graphql.engine.directus.technologies = TypeScript

graphql.engine.example.docsUrl = https\://example.com/graphql-engine-reference
graphql.engine.example.name = Приклад движка GraphQL
graphql.engine.example.technologies = "Приклад технології 1" та "Приклад технології 2"

graphql.engine.gqlgen.docsUrl = https\://github.com/99designs/gqlgen
graphql.engine.gqlgen.name = gqlgen
graphql.engine.gqlgen.technologies = Golang

graphql.engine.graphene.docsUrl = https\://github.com/graphql-python/graphene
graphql.engine.graphene.name = Graphene
graphql.engine.graphene.technologies = Python

graphql.engine.graphql-by-pop.docsUrl = https\://github.com/leoloso/PoP/tree/master/layers/GraphQLByPoP
graphql.engine.graphql-by-pop.name = GraphQL by PoP
graphql.engine.graphql-by-pop.technologies = PHP

graphql.engine.graphql-dotnet.docsUrl = https\://github.com/graphql-dotnet/graphql-dotnet
graphql.engine.graphql-dotnet.name = GraphQL.NET
graphql.engine.graphql-dotnet.technologies = .NET

graphql.engine.graphql-flutter.docsUrl = https\://github.com/zino-app/graphql-flutter
graphql.engine.graphql-flutter.name = graphql-flutter
graphql.engine.graphql-flutter.technologies = Flutter (Dart)

graphql.engine.graphql-go.docsUrl = https\://github.com/graphql-go/graphql
graphql.engine.graphql-go.name = graphql-go
graphql.engine.graphql-go.technologies = Golang

graphql.engine.graphql-java.docsUrl = https\://github.com/graphql-java/graphql-java
graphql.engine.graphql-java.name = graphql-java
graphql.engine.graphql-java.technologies = Java

graphql.engine.graphql-php.docsUrl = https\://github.com/webonyx/graphql-php
graphql.engine.graphql-php.name = graphql-php
graphql.engine.graphql-php.technologies = PHP

graphql.engine.graphql-ruby.docsUrl = https\://github.com/rmosolgo/graphql-ruby
graphql.engine.graphql-ruby.name = graphql-ruby
graphql.engine.graphql-ruby.technologies = Ruby

graphql.engine.graphql-yoga.docsUrl = https\://github.com/dotansimha/graphql-yoga
graphql.engine.graphql-yoga.name = GraphQL Yoga
graphql.engine.graphql-yoga.technologies = TypeScript

graphql.engine.hasura.docsUrl = https\://github.com/hasura/graphql-engine
graphql.engine.hasura.name = Hasura
graphql.engine.hasura.technologies = Haskell

graphql.engine.hypergraphql.docsUrl = https\://github.com/hypergraphql/hypergraphql
graphql.engine.hypergraphql.name = HyperGraphQL
graphql.engine.hypergraphql.technologies = Java

graphql.engine.jaal.docsUrl = https\://github.com/appointy/jaal
graphql.engine.jaal.name = jaal
graphql.engine.jaal.technologies = Golang

graphql.engine.juniper.docsUrl = https\://github.com/graphql-rust/juniper
graphql.engine.juniper.name = Juniper
graphql.engine.juniper.technologies = Rust

graphql.engine.lacinia.docsUrl = https\://github.com/walmartlabs/lacinia
graphql.engine.lacinia.name = lacinia
graphql.engine.lacinia.technologies = Clojure

graphql.engine.lighthouse.docsUrl = https\://github.com/nuwave/lighthouse
graphql.engine.lighthouse.name = Lighthouse
graphql.engine.lighthouse.technologies = PHP

graphql.engine.mercurius.docsUrl = https\://github.com/mercurius-js/mercurius
graphql.engine.mercurius.name = mercurius
graphql.engine.mercurius.technologies = JavaScript, Node.js, і TypeScript

graphql.engine.morpheus.docsUrl = https\://github.com/morpheusgraphql/morpheus-graphql
graphql.engine.morpheus.name = morpheus-graphql
graphql.engine.morpheus.technologies = Haskell

graphql.engine.sangria.docsUrl = https\://github.com/sangria-graphql/sangria
graphql.engine.sangria.name = Sangria
graphql.engine.sangria.technologies = Scala

graphql.engine.strawberry.docsUrl = https\://github.com/strawberry-graphql/strawberry
graphql.engine.strawberry.name = Strawberry
graphql.engine.strawberry.technologies = Python

graphql.engine.tartiflette.docsUrl = https\://github.com/tartiflette/tartiflette
graphql.engine.tartiflette.name = tartiflette
graphql.engine.tartiflette.technologies = Python

graphql.engine.wpgraphql.docsUrl = https\://github.com/wp-graphql/wp-graphql
graphql.engine.wpgraphql.name = Плагін WPGraphQL WordPress
graphql.engine.wpgraphql.technologies = PHP

graphql.error.filenotfound = Неможливо знайти файл\:\n{0}
graphql.error.import = Не вдалося імпортувати схему.\n{0}
graphql.error.importfile = Сталася помилка під час імпорту з файлу. 
graphql.error.introspection = Помилка самоаналізу для вказаної кінцевої точки.
graphql.error.invalidurl = Введіть допустиму URL-адресу.\n{0}

graphql.fingerprinting.alert.desc = Сервер використовує "{0}", який є впровадженням GraphQL для {1}.
graphql.fingerprinting.alert.name = Визначено впровадження сервера GraphQL

graphql.importDialog.chooseFileButton = Вибрати файл
graphql.importDialog.importButton = Імпортувати
graphql.importDialog.labelEndpoint = Кінцева точка URL-адреси
graphql.importDialog.labelSchema = Файл схеми або URL-адреса
graphql.importDialog.pasteAction = Вставити
graphql.importDialog.requiredFields = вказує обов'язкове для заповнення поле
graphql.importDialog.title = Імпортувати схему GraphQL

graphql.info.emptyendurl = Не вказано URL-адресу GraphQL.

graphql.introspection.alert.desc = Кінцева точка GraphQL увімкнула самоаналіз. Самоаналіз дозволяє клієнтам робити запити схем і отримувати детальну інформацію про поля, типи, вхідні дані тощо, які підтримуються кінцевою точкою GraphQL. Це може бути цінним для зловмисників, оскільки це може дозволити їм створювати більш цілеспрямовані запити.
graphql.introspection.alert.name = Кінцева точка GraphQL підтримує самоаналіз
graphql.introspection.alert.ref = https\://spec.graphql.org/October2021/\#sec-Introspection
graphql.introspection.alert.soln = Вимкнути самоаналіз на кінцевій точці GraphQL.

graphql.options.label.additionalQueryDepth = Додаткова глибина запиту\:
graphql.options.label.argsDepth = Максимальна глибина аргументів\:
graphql.options.label.argsType = Вказати аргументи\:
graphql.options.label.lenientMaxQueryDepthEnabled = Поблажлива максимальна глибина запиту
graphql.options.label.lenientMaxQueryDepthEnabled.tooltip = Заборонити неприпустимі запити, дозволивши додаткову глибину для полів без типів аркушів.
graphql.options.label.optionalArgsEnabled = Вказати додаткові аргументи
graphql.options.label.queryDepth = Максимальна глибина запиту\:
graphql.options.label.queryGenEnabled = Увімкнути генератор запитів
graphql.options.label.requestMethod = Метод запиту\:
graphql.options.label.split = Створити запит для\:
graphql.options.panelName = GraphQL
graphql.options.queryGenConfigPanel.title = Конфігурація генератора запитів
graphql.options.value.args.both = Обидва напрямки
graphql.options.value.args.inline = У тексті
graphql.options.value.args.variables = Використання змінних
graphql.options.value.request.postJson = POST (з тілом JSON)
graphql.options.value.split.get = GET
graphql.options.value.split.leaf = Кожен аркуш (скаляр або перелік)
graphql.options.value.split.operation = Кожна операція
graphql.options.value.split.postGraphql = POST (з тілом GraphQL)
graphql.options.value.split.rootField = Кожне поле операції

graphql.spider.desc = Інтеграція GraphQL Spider
graphql.spider.name = GraphQL Spider

graphql.topmenu.import.importgraphql = Імпортувати схему GraphQL
graphql.topmenu.import.importgraphql.tooltip = Укажіть кінцеву точку GraphQL і, за необхідності, файл схеми GraphQL для імпорту.

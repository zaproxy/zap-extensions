graphql.api.action.importFile = Imports a GraphQL Schema from a File.
graphql.api.action.importFile.param.endurl = The Endpoint URL.
graphql.api.action.importFile.param.file = The File That Contains the GraphQL Schema.
graphql.api.action.importUrl = Imports a GraphQL Schema from a URL.
graphql.api.action.importUrl.param.endurl = The Endpoint URL.
graphql.api.action.importUrl.param.url = The URL Locating the GraphQL Schema.
graphql.api.action.setOptionArgsType = Sets how arguments are specified.
graphql.api.action.setOptionArgsType.param.String = Can be "INLINE", "VARIABLES", or "BOTH".
graphql.api.action.setOptionLenientMaxQueryDepthEnabled = Sets whether or not Maximum Query Depth is enforced leniently.
graphql.api.action.setOptionLenientMaxQueryDepthEnabled.param.Boolean = Enforce Leniently (true or false).
graphql.api.action.setOptionMaxAdditionalQueryDepth = Sets the maximum additional query generation depth (used if enforced leniently).
graphql.api.action.setOptionMaxAdditionalQueryDepth.param.Integer = The Maximum Additional Depth.
graphql.api.action.setOptionMaxArgsDepth = Sets the maximum arguments generation depth.
graphql.api.action.setOptionMaxArgsDepth.param.Integer = The Maximum Depth.
graphql.api.action.setOptionMaxQueryDepth = Sets the maximum query generation depth.
graphql.api.action.setOptionMaxQueryDepth.param.Integer = The Maximum Depth.
graphql.api.action.setOptionOptionalArgsEnabled = Sets whether or not Optional Arguments should be specified.
graphql.api.action.setOptionOptionalArgsEnabled.param.Boolean = Specify Optional Arguments (true or false).
graphql.api.action.setOptionQuerySplitType = Sets the level for which a single query is generated.
graphql.api.action.setOptionQuerySplitType.param.String = Can be "LEAF", "ROOT_FIELD", or "OPERATION".
graphql.api.action.setOptionRequestMethod = Sets the request method.
graphql.api.action.setOptionRequestMethod.param.String = Can be "POST_JSON", "POST_GRAPHQL", or "GET".
graphql.api.view.optionArgsType = Returns how arguments are currently specified.
graphql.api.view.optionLenientMaxQueryDepthEnabled = Returns whether or not lenient maximum query generation depth is enabled.
graphql.api.view.optionMaxAdditionalQueryDepth = Returns the current maximum additional query generation depth.
graphql.api.view.optionMaxArgsDepth = Returns the current maximum arguments generation depth.
graphql.api.view.optionMaxQueryDepth = Returns the current maximum query generation depth.
graphql.api.view.optionOptionalArgsEnabled = Returns whether or not optional arguments are currently specified.
graphql.api.view.optionQuerySplitType = Returns the current level for which a single query is generated.
graphql.api.view.optionRequestMethod = Returns the current request method.

graphql.automation.desc = GraphQL Automation Framework Integration
graphql.automation.dialog.advanced = Show Advanced Options\:
graphql.automation.dialog.argstype = Arguments Type\:
graphql.automation.dialog.endpoint = Endpoint\:
graphql.automation.dialog.lenientmaxquery = Lenient Max Query Depth Enabled\:
graphql.automation.dialog.maxaddquerydepth = Max Additional Query Depth\:
graphql.automation.dialog.maxargsdepth = Max Arguments Depth\:
graphql.automation.dialog.maxquerydepth = Max Query Depth\:
graphql.automation.dialog.name = Job Name\:
graphql.automation.dialog.optargsenabled = Optional Arguments Enabled\:
graphql.automation.dialog.querysplittype = Query Split Type\:
graphql.automation.dialog.requestmethod = Request Method\:
graphql.automation.dialog.schemafile = SchemaFile\:
graphql.automation.dialog.schemaurl = Schema URL\:
graphql.automation.dialog.summary = URL\: {0}, File\: {1}
graphql.automation.dialog.tab.adv = Avancé
graphql.automation.dialog.tab.params = Paramètres
graphql.automation.dialog.title = GraphQL Job
graphql.automation.error = Job graphql error\: {0}
graphql.automation.info.import.file = Job graphql importing schema from file\: {0} target\: {1}
graphql.automation.info.import.introspect = Job graphql importing schema using introspection from\: {0}
graphql.automation.info.import.url = Job graphql importing schema from URL\: {0} target\: {1}
graphql.automation.name = GraphQL Automation

graphql.cmdline.endurl.help = Sets the Endpoint URL
graphql.cmdline.file.help = Imports a GraphQL Schema from a File
graphql.cmdline.url.help = Imports a GraphQL Schema from a URL

graphql.desc = Allows you to inspect and attack GraphQL endpoints.

graphql.engine.agoo.docsUrl = https\://github.com/ohler55/agoo
graphql.engine.agoo.name = Agoo
graphql.engine.agoo.technologies = Ruby

graphql.engine.apollo.docsUrl = https\://github.com/apollographql/apollo-server
graphql.engine.apollo.name = Apollo
graphql.engine.apollo.technologies = JavaScript, Node.js, and TypeScript

graphql.engine.ariadne.docsUrl = https\://github.com/mirumee/ariadne
graphql.engine.ariadne.name = Ariadne
graphql.engine.ariadne.technologies = Python

graphql.engine.aws-appsync.docsUrl = https\://aws.amazon.com/appsync
graphql.engine.aws-appsync.name = AWS AppSync
graphql.engine.aws-appsync.technologies = AWS

graphql.engine.caliban.docsUrl = https\://github.com/ghostdogpr/caliban
graphql.engine.caliban.name = caliban
graphql.engine.caliban.technologies = Scala

graphql.engine.dgraph.docsUrl = https\://github.com/dgraph-io/dgraph
graphql.engine.dgraph.name = Dgraph
graphql.engine.dgraph.technologies = JavaScript

graphql.engine.dianajl.docsUrl = https\://github.com/neomatrixcode/Diana.jl
graphql.engine.dianajl.name = Diana.jl
graphql.engine.dianajl.technologies = Julia

graphql.engine.directus.docsUrl = https\://github.com/directus/directus
graphql.engine.directus.name = Directus
graphql.engine.directus.technologies = TypeScript

graphql.engine.gqlgen.docsUrl = https\://github.com/99designs/gqlgen
graphql.engine.gqlgen.name = gqlgen
graphql.engine.gqlgen.technologies = Golang

graphql.engine.graphene.docsUrl = https\://github.com/graphql-python/graphene
graphql.engine.graphene.name = Graphene
graphql.engine.graphene.technologies = Python

graphql.engine.graphql-by-pop.docsUrl = https\://github.com/leoloso/PoP/tree/master/layers/GraphQLByPoP
graphql.engine.graphql-by-pop.name = GraphQL by PoP
graphql.engine.graphql-by-pop.technologies = PHP

graphql.engine.graphql-flutter.docsUrl = https\://github.com/zino-app/graphql-flutter
graphql.engine.graphql-flutter.name = graphql-flutter
graphql.engine.graphql-flutter.technologies = Flutter (Dart)

graphql.engine.graphql-go.docsUrl = https\://github.com/graphql-go/graphql
graphql.engine.graphql-go.name = graphql-go
graphql.engine.graphql-go.technologies = Golang

graphql.engine.graphql-java.docsUrl = https\://github.com/graphql-java/graphql-java
graphql.engine.graphql-java.name = graphql-java
graphql.engine.graphql-java.technologies = Java

graphql.engine.graphql-php.docsUrl = https\://github.com/webonyx/graphql-php
graphql.engine.graphql-php.name = graphql-php
graphql.engine.graphql-php.technologies = PHP

graphql.engine.graphql-ruby.docsUrl = https\://github.com/rmosolgo/graphql-ruby
graphql.engine.graphql-ruby.name = graphql-ruby
graphql.engine.graphql-ruby.technologies = Ruby

graphql.engine.graphql-yoga.docsUrl = https\://github.com/dotansimha/graphql-yoga
graphql.engine.graphql-yoga.name = GraphQL Yoga
graphql.engine.graphql-yoga.technologies = TypeScript

graphql.engine.hasura.docsUrl = https\://github.com/hasura/graphql-engine
graphql.engine.hasura.name = Hasura
graphql.engine.hasura.technologies = Haskell

graphql.engine.hypergraphql.docsUrl = https\://github.com/hypergraphql/hypergraphql
graphql.engine.hypergraphql.name = HyperGraphQL
graphql.engine.hypergraphql.technologies = Java

graphql.engine.jaal.docsUrl = https\://github.com/appointy/jaal
graphql.engine.jaal.name = jaal
graphql.engine.jaal.technologies = Golang

graphql.engine.juniper.docsUrl = https\://github.com/graphql-rust/juniper
graphql.engine.juniper.name = Juniper
graphql.engine.juniper.technologies = Rust

graphql.engine.lacinia.docsUrl = https\://github.com/walmartlabs/lacinia
graphql.engine.lacinia.name = lacinia
graphql.engine.lacinia.technologies = Clojure

graphql.engine.lighthouse.docsUrl = https\://github.com/nuwave/lighthouse
graphql.engine.lighthouse.name = Lighthouse
graphql.engine.lighthouse.technologies = PHP

graphql.engine.mercurius.docsUrl = https\://github.com/mercurius-js/mercurius
graphql.engine.mercurius.name = mercurius
graphql.engine.mercurius.technologies = JavaScript, Node.js, and TypeScript

graphql.engine.morpheus.docsUrl = https\://github.com/morpheusgraphql/morpheus-graphql
graphql.engine.morpheus.name = morpheus-graphql
graphql.engine.morpheus.technologies = Haskell

graphql.engine.sangria.docsUrl = https\://github.com/sangria-graphql/sangria
graphql.engine.sangria.name = Sangria
graphql.engine.sangria.technologies = Scala

graphql.engine.strawberry.docsUrl = https\://github.com/strawberry-graphql/strawberry
graphql.engine.strawberry.name = Strawberry
graphql.engine.strawberry.technologies = Python

graphql.engine.tartiflette.docsUrl = https\://github.com/tartiflette/tartiflette
graphql.engine.tartiflette.name = tartiflette
graphql.engine.tartiflette.technologies = Python

graphql.engine.wpgraphql.docsUrl = https\://github.com/wp-graphql/wp-graphql
graphql.engine.wpgraphql.name = WPGraphQL WordPress Plugin
graphql.engine.wpgraphql.technologies = PHP

graphql.error.filenotfound = Cannot find the file\:\n{0}
graphql.error.importfile = An error occurred while importing from file.
graphql.error.invalidurl = Please enter a valid URL.\n{0}

graphql.fingerprinting.alert.desc = The server is using "{0}", which is a GraphQL implementation for {1}.
graphql.fingerprinting.alert.name = GraphQL Server Implementation Identified

graphql.formhandler.desc = GraphQL Form Handler Integration
graphql.formhandler.name = GraphQL Form Handler

graphql.importfromdialog.importbutton = Importer
graphql.importfromdialog.labelendpoint = Endpoint URL
graphql.importfromdialog.message = TO DO\: Import and Parse Schema
graphql.importfromdialog.pasteaction = Coller

graphql.importfromfiledialog.choosefilebutton = Choose File
graphql.importfromfiledialog.labelfile = Schema File
graphql.importfromfiledialog.title = Import a GraphQL Schema from a File

graphql.importfromurldialog.labelurl = Schema URL (Optional)
graphql.importfromurldialog.title = Import a GraphQL Schema from a URL

graphql.info.emptyendurl = No GraphQL URL specified.

graphql.introspection.alert.desc = The GraphQL endpoint has Introspection enabled. Introspection allows clients to query the schema and retrieve detailed information about the fields, types, inputs, etc. supported by the GraphQL endpoint. This may be valuable to an attacker, as it could enable them to craft more targeted queries.
graphql.introspection.alert.name = GraphQL Endpoint Supports Introspection
graphql.introspection.alert.ref = https\://spec.graphql.org/October2021/\#sec-Introspection
graphql.introspection.alert.soln = Disable Introspection on the GraphQL endpoint.

graphql.options.label.additionalQueryDepth = Additional Query Depth\:
graphql.options.label.argsDepth = Maximum Arguments Depth\:
graphql.options.label.argsType = Specify Arguments\:
graphql.options.label.lenientMaxQueryDepthEnabled = Lenient Maximum Query Depth
graphql.options.label.lenientMaxQueryDepthEnabled.tooltip = Prevent invalid queries by allowing additional depth for fields with no leaf types.
graphql.options.label.optionalArgsEnabled = Specify Optional Arguments
graphql.options.label.queryDepth = Maximum Query Depth\:
graphql.options.label.requestMethod = Request Method\:
graphql.options.label.split = Generate Query For\:
graphql.options.panelName = GraphQL
graphql.options.value.args.both = Both Ways
graphql.options.value.args.inline = A la file
graphql.options.value.args.variables = Using Variables
graphql.options.value.request.postJson = POST (with JSON body)
graphql.options.value.split.get = GET
graphql.options.value.split.leaf = Each Leaf (Scalar or Enum)
graphql.options.value.split.operation = Each Operation
graphql.options.value.split.postGraphql = POST (with GraphQL body)
graphql.options.value.split.rootField = Each Field of an Operation

graphql.spider.desc = GraphQL Spider Integration
graphql.spider.name = GraphQL Spider

graphql.topmenu.import.importgraphql = Import a GraphQL Schema from a File
graphql.topmenu.import.importgraphql.tooltip = The file must be a formally described GraphQL schema.
graphql.topmenu.import.importremotegraphql = Import a GraphQL Schema from a URL
graphql.topmenu.import.importremotegraphql.tooltip = The URL that locates a GraphQL schema. If it is not specified, Introspection will be used.

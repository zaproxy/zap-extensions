authhelper.auth-detect.desc = 给定的请求已被确定为身份验证请求。 “其他信息”字段包含一组 键\=值 行，该行识别任何相关字段。 如果请求是在具有身份验证方法设置为“自动检测”的上下文中，则此规则将更改身份验证以匹配已确定的请求。
authhelper.auth-detect.name = 身份验证请求已确定
authhelper.auth-detect.soln = 这是一个信息提示警报而不是漏洞，因此没有需要修复的地方。

authhelper.auth.method.autodetect.name = 自动检测身份验证
authhelper.auth.method.browser.label.browser = 浏览器：
authhelper.auth.method.browser.label.loginUrl = 登录 URL *：
authhelper.auth.method.browser.label.loginWait = 登录等待秒数：
authhelper.auth.method.browser.name = 基于浏览器的身份验证
authhelper.auth.method.browser.output.sessionid = 会话令牌标识在历史记录 ID 中：{0}

authhelper.auth.test.dialog.button.copy = 复制

authhelper.auth.test.dialog.button.save = 测试

authhelper.auth.test.dialog.default-context = 身份验证测试
authhelper.auth.test.dialog.error.badurl = 登录 URL 必须以“ http\://”或“ https\://”开头
authhelper.auth.test.dialog.error.nocontext = 您必须指定一个上下文
authhelper.auth.test.dialog.error.nopassword = 您必须指定一个密码

authhelper.auth.test.dialog.error.nourl = 您必须指定一个登录 URL
authhelper.auth.test.dialog.error.nouser = 您必须指定一个用户名
authhelper.auth.test.dialog.label.browser = 浏览器：
authhelper.auth.test.dialog.label.context = 上下文\:
authhelper.auth.test.dialog.label.copy = 
authhelper.auth.test.dialog.label.demo = 演示模式：
authhelper.auth.test.dialog.label.diag = 诊断
authhelper.auth.test.dialog.label.loginurl = 登录 URL ：
authhelper.auth.test.dialog.label.password = 密码：
authhelper.auth.test.dialog.label.username = 用户名
authhelper.auth.test.dialog.label.wait = 等待时长（秒）：
authhelper.auth.test.dialog.results.found = 已确定
authhelper.auth.test.dialog.results.password = 密码字段
authhelper.auth.test.dialog.results.session = 会话处理
authhelper.auth.test.dialog.results.status = 状态
authhelper.auth.test.dialog.results.username = 用户名字段
authhelper.auth.test.dialog.results.verif = 验证 URL
authhelper.auth.test.dialog.status.failed = 失败
authhelper.auth.test.dialog.status.launching = 启动浏览器
authhelper.auth.test.dialog.status.notstarted = 未开始
authhelper.auth.test.dialog.status.passed = 已通过
authhelper.auth.test.dialog.tab.diag = 诊断
authhelper.auth.test.dialog.tab.test = 测试

authhelper.auth.test.dialog.title = 身份验证测试器

authhelper.desc = 身份验证助手

authhelper.name = 身份验证助手

authhelper.session-detect.desc = 给定的响应已被确定为包含会话管理令牌。 “其他信息”字段包含一组可以在基于Header的会话管理方法中使用的Header令牌。 如果请求是在具有“自动检测”的会话管理方法的上下文中，则此规则将更改会话管理以使用已确定的令牌。
authhelper.session-detect.name = 会话管理响应已确定
authhelper.session-detect.soln = 这是一个信息提示警报而不是漏洞，因此没有需要修复的地方。

authhelper.session.method.auto.name = 自动检测会话管理
authhelper.session.method.header.error.headers = 您必须至少指定一个Header
authhelper.session.method.header.error.json.parse = 解析身份验证响应Body，无法从{0}解析为JSON：{1}
authhelper.session.method.header.error.value = 您必须同时指定Header和值
authhelper.session.method.header.label.footer = 支持任何数量的Header - 当将任何字符添加到最后一个字段时，则会添加新行。\n以下令牌可以在值中使用：\n* {％json：path.to.data％} JSON身份验证响应数据\n* {％env：env_var％} 环境变量\n* {%script\:glob_var%} 全局脚本变量\n* {%header\:env_var%} 身份验证响应Header\n* {％url：key％} 身份验证URL参数
authhelper.session.method.header.label.header = Header
authhelper.session.method.header.label.value = 值
authhelper.session.method.header.name = 基于Header的会话管理

authhelper.spiderajax.desc = 在执行经过身份验证的 AJAX Spider 扫描时启用基于浏览器的身份验证。
authhelper.spiderajax.name = 基于 AJAX Spider 浏览器的身份验证支持

authhelper.topmenu.tools.authtester = 身份验证测试器...

authhelper.verification-detect.desc = 给定的请求已被确定为身份验证验证的良好候选者。 如果请求是在具有验证策略设为“轮询”的上下文中，如果URL为空，该规则将填充正确的值。
authhelper.verification-detect.name = 验证请求已确定
authhelper.verification-detect.soln = 这是一个信息提示警报而不是漏洞，因此没有需要修复的地方。

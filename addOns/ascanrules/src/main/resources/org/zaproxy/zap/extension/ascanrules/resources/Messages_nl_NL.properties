ascanrules.desc = Actieve scan regels

ascanrules.bufferoverflow.name = Buffer Overflow
ascanrules.bufferoverflow.desc = Buffer overflow fouten worden gekenmerkt door het overschrijven van geheugen ruimte van het achtergrond web proces. Dit mag nooit worden gewijzigd, opzettelijk of onopzettelijk. Het overschrijven van waarden van de IP (Instrucie Pointer), BP (Base Pointer) en andere registers zorgt voor het optreden van excepties, segmentatie fouten, en andere proces fouten. Meestal zorgen deze fouten ervoor dat de applicatie op een onverwachte manier stoppen. 
ascanrules.bufferoverflow.soln = Herschrijf het achtergrond programma zodat de return lengte goed wordt gecontroleerd. Dit vergt een hercompilatie van de achtergrond executable.
ascanrules.bufferoverflow.refs = https\://owasp.org/www-community/attacks/Buffer_overflow_attack
ascanrules.bufferoverflow.other = Potentiele Buffer Overflow. Het script sloot de verbinding en gaf een 500 Internal Server Error

ascanrules.commandinjection.name=Remote OS Command Injection
ascanrules.commandinjection.desc=Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.
ascanrules.commandinjection.refs=http\://cwe.mitre.org/data/definitions/78.html\n\
https\://owasp.org/www-community/attacks/Command_Injection

ascanrules.elmah.name = ELMAH Information Leak
ascanrules.elmah.desc = The Error Logging Modules and Handlers (ELMAH [elmah.axd]) HTTP Module was found to be available. This module can leak a significant amount of valuable information.
ascanrules.elmah.otherinfo = Based on response status code ELMAH may be protected by an authentication or authorization mechanism.  
ascanrules.elmah.refs = https\://www.troyhunt.com/aspnet-session-hijacking-with-google/\n\
https\://www.nuget.org/packages/elmah\n\
https\://elmah.github.io/
ascanrules.elmah.soln = Consider whether or not ELMAH is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization. See also\: https\://elmah.github.io/a/securing-error-log-pages/

ascanrules.formatstring.name=Format String Fout
ascanrules.formatstring.desc=Een Format String fout treedt op wanneer de ingediende data van een invoerreeks wordt ge\u00ebvalueerd door de applicatie als een opdracht. 
ascanrules.formatstring.soln= Herschrijf het achtergrond programma m. b. v. de juiste verwijdering van slechte tekens. Hiervoor is een hercompilatie van de achtergrond executables nodig.
ascanrules.formatstring.refs=https\://owasp.org/www-community/attacks/Format_string_attack
ascanrules.formatstring.error1 = Potenti\u00eble Format String Fout. Het script sloot de verbinding op een /%s
ascanrules.formatstring.error2 = Potenti\u00eble Format String Fout. Het script sloot de verbinding op een /%s en /%x
ascanrules.formatstring.error3 = Potenti\u00eble Format String fout.  Het script sloot de verbinding op een microsoft format string fout

ascanrules.htaccess.name = .htaccess Information Leak
ascanrules.htaccess.desc = htaccess files can be used to alter the configuration of the Apache Web Server software to enable/disable additional functionality and features that the Apache Web Server software has to offer. 
ascanrules.htaccess.otherinfo = Based on response status code htaccess file may be protected by an authentication or authorization mechanism.
ascanrules.htaccess.refs = http\://www.htaccess-guide.com/
ascanrules.htaccess.soln = Ensure the .htaccess file is not accessible.

ascanrules.sourcecodedisclosurewebinf.name = Zichtbare Bron Code - /WEB-INF folder
ascanrules.sourcecodedisclosurewebinf.desc = Java bron code is publiek zichtbaar op de web server in Java klasse bestanden in de WEB-INF folder. De klasse bestanden kunnen gedisassembleerd worden om bron code op te leveren welke zeer sterk lijkt op de originele bron code.  
ascanrules.sourcecodedisclosurewebinf.soln = De web server zou niet geconfigureerd mogen worden om de /WEB-INF folder of de inhoud ervan beschikbaar te maken voor we browsers, dit omdat deze lokatie typisch gevoelige informatie bevat zoals gecompileerde Java Source Code en properties files welke credentials kunnen bevatten. Java klasses gepubliceerd samen met de toepassing moeten geobfusceerd worden, als een extra laag beveiliging binnen een "beveiliging-in-de-diepte" aanpak.
ascanrules.sourcecodedisclosurewebinf.propertiesfile.name = Proporties File publicatie - /WEB-INF folder
ascanrules.sourcecodedisclosurewebinf.propertiesfile.desc = Een JAVA klasse in de /WEB-INF folder toont publiekelijk de aanwezigheid van de properties file. De properties file is niet bedoeld om publiek zichtbaar te zijn, typisch bevat deze file configuratie informatie, toepassing credentials, of cryptografische sleutels.   
ascanrules.sourcecodedisclosurewebinf.propertiesfile.soln = De web server wordt bij voorkeur geconfigueerd om geen /WEB-INF folder en/of de inhoud daarvan te publiceren. Het kan mogelijk zijn om de /WEB-INF folder te verwijderen.  
ascanrules.sourcecodedisclosurewebinf.propertiesfile.extrainfo = The reference to the properties file was found in the dis-assembled Java source code for Java class [{0}].

ascanrules.crosssitescripting.name = Cross Site Scripting (Reflected)
ascanrules.crosssitescripting.json.name = Cross Site Scripting Weakness (Reflected in JSON Response)
ascanrules.crosssitescripting.json.desc = A XSS attack was reflected in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
ascanrules.crosssitescripting.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML

ascanrules.persistentxssattack.name=Cross Site Scripting (Persistent)
ascanrules.persistentxssattack.otherinfo=Source URL\: {0}
ascanrules.persistentxssattack.json.name = Cross Site Scripting Weakness (Persistent in JSON Response)
ascanrules.persistentxssattack.json.desc = A XSS attack was found in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
ascanrules.persistentxssattack.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML 

ascanrules.persistentxssprime.name=Cross Site Scripting (Persistent) - Prime
ascanrules.persistentxssprime.misc=N/A

ascanrules.persistentxssspider.name=Cross Site Scripting (Persistent) - Spider
ascanrules.persistentxssspider.misc=N/A

ascanrules.sqlinjection.name=SQL Injection
ascanrules.sqlinjection.desc=SQL injection may be possible.
ascanrules.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place.  \n\
In general, type check all data on the server side.\n\
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\n\
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\n\
If database Stored Procedures can be used, use them.\n\
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\n\
Do not create dynamic SQL queries using simple string concatenation.\n\
Escape all data received from the client.\n\
Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\n\
Apply the principle of least privilege by using the least privileged database user possible.\n\
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\n\
Grant the minimum database access that is necessary for the application.
ascanrules.sqlinjection.refs=https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
ascanrules.sqlinjection.alert.errorbased.attack=[{0}] field\: [{1}], value [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.attack=Original Value\: [{0}]. Modified Value\: [{1}]. Control Value\: [{2}]
ascanrules.sqlinjection.alert.booleanbased.attack=[{0}] field\: [{1}], value [{2}]
ascanrules.sqlinjection.alert.unionbased.attack=[{0}] field\: [{1}], value [{2}]
ascanrules.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] likely, given error message regular expression [{1}] matched by the HTML results.\n\
The vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised
ascanrules.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] likely, given UNION-specific error message regular expression [{1}] matched by the HTML results\n\
The vulnerability was detected by manipulating the parameter with an SQL ''UNION'' clause to cause a database error message to be returned and recognised
ascanrules.sqlinjection.alert.expressionbased.extrainfo=The original page results were successfully replicated using the expression [{0}] as the parameter value\n\
The parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.orderbybased.extrainfo=The original page results were successfully replicated using the "ORDER BY" expression [{0}] as the parameter value\n\
The parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Unmodified message gave HTTP status [{0}], modified message gave HTTP status [{1}]
ascanrules.sqlinjection.alert.errorbased.differentiation.extrainfo=Unmodified message gave HTTP status [{0}], body of length [{1}], modified message gave HTTP status [{2}], body of length [{3}]. A third (non-SQL injection inducing value) gave HTTP status [{4}], body of length [{5}]
ascanrules.sqlinjection.alert.booleanbased.extrainfo=The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]\n\
The parameter value being modified was {2}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.booleanbased.extrainfo.dataexists=Data was returned for the original parameter.\n\
The vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.booleanbased.extrainfo.datanotexists=Data was NOT returned for the original parameter.\n\
The vulnerability was detected by successfully retrieving more data than originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds 
ascanrules.sqlinjection.authbypass.name=SQL Injection - Authentication Bypass
ascanrules.sqlinjection.authbypass.desc=SQL injection may be possible on a login page, potentially allowing the application's authentication mechanism to be bypassed 

ascanrules.externalredirect.name=External Redirect
ascanrules.externalredirect.reason.location.header=The response contains a redirect in its Location header which allows an external Url to be set.
ascanrules.externalredirect.reason.location.meta=The response contains a redirect in its meta http-equiv tag for 'Location' which allows an external Url to be set.
ascanrules.externalredirect.reason.refresh.header=The response contains a redirect in its Refresh header which allows an external Url to be set.
ascanrules.externalredirect.reason.refresh.meta=The response contains a redirect in its meta http-equiv tag for 'Refresh' which allows an external Url to be set.
ascanrules.externalredirect.reason.javascript=The response contains a redirect in its JavaScript code which allows an external Url to be set.
ascanrules.externalredirect.reason.notfound=No reason found for it...

ascanrules.codeinjection.name=Server Side Code Injection
ascanrules.codeinjection.name.asp=Server Side Code Injection - ASP Code Injection
ascanrules.codeinjection.name.php=Server Side Code Injection - PHP Code Injection
ascanrules.codeinjection.desc=A code injection may be possible including custom code that will be evaluated by the scripting engine
ascanrules.codeinjection.soln=Do not trust client side input, even if there is client side validation in place.\n\
In general, type check all data on the server side and escape all data received from the client.\n\
 Avoid the use of eval() functions combined with user input data.
ascanrules.codeinjection.refs=http\://cwe.mitre.org/data/definitions/94.html\n\
https\://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection

ascanrules.directorybrowsing.name=Directory Browsing
ascanrules.directorybrowsing.desc=It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.
ascanrules.directorybrowsing.soln=Disable directory browsing.  If this is required, make sure the listed files does not induce risks.
ascanrules.directorybrowsing.refs=http\://httpd.apache.org/docs/mod/core.html\#options\n\
http\://alamo.satlug.org/pipermail/satlug/2002-February/000053.html

ascanrules.crlfinjection.name=CRLF Injection
ascanrules.crlfinjection.desc=Cookie can be set via CRLF injection.  It may also be possible to set arbitrary HTTP response headers. In addition, by carefully crafting the injected response using cross-site script, cache poisoning vulnerability may also exist.
ascanrules.crlfinjection.soln=Type check the submitted parameter carefully.  Do not allow CRLF to be injected by filtering CRLF.
ascanrules.crlfinjection.refs=http\://www.watchfire.com/resources/HTTPResponseSplitting.pdf\n\
http\://webappfirewall.com/lib/crlf-injection.txtnull\n\
http\://www.securityfocus.com/bid/9804

ascanrules.parametertamper.name=Parameter Tampering
ascanrules.parametertamper.desc=Parameter manipulation caused an error page or Java stack trace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
ascanrules.parametertamper.soln=Identify the cause of the error and fix it.  Do not trust client side input and enforce a tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.

ascanrules.pathtraversal.name=Path Traversal
ascanrules.pathtraversal.other=Check {0}

ascanrules.remotefileinclude.name=Remote File Inclusion

ascanrules.serversideinclude.name=Server Side Include
ascanrules.serversideinclude.desc=Certain parameters may cause Server Side Include commands to be executed.  This may allow database connection or arbitrary code to be executed.
ascanrules.serversideinclude.soln=Do not trust client side input and enforce a tight check in the server side.  Disable server side includes.\n\

Refer=om handmatig Server Side Include uit te schakelen.\n\
\n\
Gebruikt minste privilege voor het uitvoeren van uw webserver of applicatie server.\n\
\n\
Voor Apache, schakel het volgende uit\:\n\
\n\
Options Indexes FollowSymLinks Includes\n\
\n\
AddType application/x-httpd-cgi .cgi\n\
\n\
AddType text/x-server-parsed-html .html
ascanrules.serversideinclude.refs=http\://www.carleton.ca/~dmcfet/html/ssi.html

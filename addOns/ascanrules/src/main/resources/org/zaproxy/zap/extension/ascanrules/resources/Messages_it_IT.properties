
ascanrules.bufferoverflow.desc = Gli errori di Buffer overflow sono caratterizzati dalla sovrascrittura di spazi di memoria del processo web sottostante, che non dovebbe mai essere modificata intenzionalmente o non intenzionalmente. Sovrascrivere i valori del registro IP (Instruction Pointer, puntatotre di istruzione), BP (Base Pointer, puntatore base) e altri registri pu\u00f2 causare eccezioni, errori di segmentazione, e altri errori di processo. Normalmente questi errori terminano l'esecuzione dell'applicazione in un modo non prevedibile. 
ascanrules.bufferoverflow.name = Buffer Overflow
ascanrules.bufferoverflow.other = Potenziale Buffer Overflow. Lo script ha chiuso la connessione e ha generato un errore 500 Error interno del server
ascanrules.bufferoverflow.refs = https\://owasp.org/www-community/attacks/Buffer_overflow_attack
ascanrules.bufferoverflow.soln = Riscrivere il programma sullo sfondo utilizzando il controllo della lunghezza del valore di ritorno. Questo richiede di ricompilare l'eseguibile sullo sfondo.

ascanrules.cloudmetadata.desc = The Cloud Metadata Attack attempts to abuse a misconfigured NGINX server in order to access the instance metadata maintained by cloud service providers such as AWS, GCP and Azure.\nAll of these providers provide metadata via an internal unroutable IP address '169.254.169.254' - this can be exposed by incorrectly configured NGINX servers and accessed by using this IP address in the Host header field.
ascanrules.cloudmetadata.name = Meta-dati del Cloud Potenzialmente Esposti
ascanrules.cloudmetadata.otherinfo = Based on the successful response status code cloud metadata may have been returned in the response. Check the response data to see if any cloud metadata has been returned.\nThe meta data returned can include information that would allow an attacker to completely compromise the system.
ascanrules.cloudmetadata.refs = https\://www.nginx.com/blog/trust-no-one-perils-of-trusting-user-input/
ascanrules.cloudmetadata.soln = Do not trust any user data in NGINX configs. In this case it is probably the use of the $host variable which is set from the 'Host' header and can be controlled by an attacker.

ascanrules.codeinjection.desc = A code injection may be possible including custom code that will be evaluated by the scripting engine
ascanrules.codeinjection.name = Server Side Code Injection
ascanrules.codeinjection.name.asp = Server Side Code Injection - ASP Code Injection
ascanrules.codeinjection.name.php = Server Side Code Injection - PHP Code Injection
ascanrules.codeinjection.refs = http\://cwe.mitre.org/data/definitions/94.html\nhttps\://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection
ascanrules.codeinjection.soln = Do not trust client side input, even if there is client side validation in place.\nIn general, type check all data on the server side and escape all data received from the client.\n Avoid the use of eval() functions combined with user input data.

ascanrules.commandinjection.desc = Tecnica di attacco utilizzata per l'esecuzione non autorizzata di comandi del sistema operativo. Questo attacco \u00e8 possibile quando un'applicazione accetta un input non fidato per eseguire comandi del sistema operativo in una maniera non sicura, coinvolgendo la sanificazione di dati impropri e chiamate improprie a programmi esterni.
ascanrules.commandinjection.name = Remote OS Command Injection
ascanrules.commandinjection.otherinfo.feedback-based = The scan rule was able to retrieve the content of a file or command by sending [{0}] to the operating system running this application
ascanrules.commandinjection.otherinfo.time-based = The scan rule was able to control the timing of the application response by sending [{0}] to the operating system running this application
ascanrules.commandinjection.refs = http\://cwe.mitre.org/data/definitions/78.html\nhttps\://owasp.org/www-community/attacks/Command_Injection

ascanrules.crlfinjection.desc = Cookie can be set via CRLF injection.  It may also be possible to set arbitrary HTTP response headers. In addition, by carefully crafting the injected response using cross-site script, cache poisoning vulnerability may also exist.
ascanrules.crlfinjection.name = CRLF Injection
ascanrules.crlfinjection.refs = http\://www.watchfire.com/resources/HTTPResponseSplitting.pdf\nhttp\://webappfirewall.com/lib/crlf-injection.txtnull\nhttp\://www.securityfocus.com/bid/9804
ascanrules.crlfinjection.soln = Type check the submitted parameter carefully.  Do not allow CRLF to be injected by filtering CRLF.

ascanrules.crosssitescripting.json.desc = A XSS attack was reflected in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
ascanrules.crosssitescripting.json.name = Cross Site Scripting Weakness (Reflected in JSON Response)
ascanrules.crosssitescripting.name = Cross Site Scripting (Reflected)
ascanrules.crosssitescripting.otherinfo.accesskey = The accesskey attribute specifies a shortcut key to activate/focus an element. This attribute can trigger payloads for non-conventional or custom tags.
ascanrules.crosssitescripting.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML

ascanrules.desc = Stato di rilascio delle regole di scansione attiva

ascanrules.directorybrowsing.desc = It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.
ascanrules.directorybrowsing.name = Directory Browsing
ascanrules.directorybrowsing.refs = http\://httpd.apache.org/docs/mod/core.html\#options\nhttp\://alamo.satlug.org/pipermail/satlug/2002-February/000053.html
ascanrules.directorybrowsing.soln = Disable directory browsing.  If this is required, make sure the listed files does not induce risks.

ascanrules.elmah.desc = Il modulo HTTP Error Logging Modules and Handlers (ELMAH [elmah.axd]) \u00e8 stato trovato. Questo componente pu\u00f2 far trapelare una quantit\u00e0 importante di informazioni preziose.
ascanrules.elmah.name = ELMAH Information Leak
ascanrules.elmah.otherinfo = In base allo status code della risposta, ELMAH potrebbe essere protetto da un meccanismo di autenticazione o autorizzazione.  
ascanrules.elmah.refs = https\://www.troyhunt.com/aspnet-session-hijacking-with-google/\nhttps\://www.nuget.org/packages/elmah\nhttps\://elmah.github.io/
ascanrules.elmah.soln = Consider whether or not ELMAH is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization. See also\: https\://elmah.github.io/a/securing-error-log-pages/

ascanrules.envfiles.desc = One or more .env files seems to have been located on the server. These files often expose infrastructure or administrative account credentials, API or APP keys, or other sensitive configuration information. 
ascanrules.envfiles.name = .env Information Leak
ascanrules.envfiles.otherinfo = Based on response status code the .env file may be protected by an authentication or authorization mechanism.
ascanrules.envfiles.refs = https\://www.google.com/search?q\=db_password+filetype%3Aenv\nhttps\://mobile.twitter.com/svblxyz/status/1045013939904532482
ascanrules.envfiles.soln = Ensure the .env file is not accessible.

ascanrules.externalredirect.name = External Redirect
ascanrules.externalredirect.reason.javascript = The response contains a redirect in its JavaScript code which allows an external Url to be set.
ascanrules.externalredirect.reason.location.header = The response contains a redirect in its Location header which allows an external Url to be set.
ascanrules.externalredirect.reason.location.meta = The response contains a redirect in its meta http-equiv tag for 'Location' which allows an external Url to be set.
ascanrules.externalredirect.reason.notfound = No reason found for it...
ascanrules.externalredirect.reason.refresh.header = The response contains a redirect in its Refresh header which allows an external Url to be set.
ascanrules.externalredirect.reason.refresh.meta = The response contains a redirect in its meta http-equiv tag for 'Refresh' which allows an external Url to be set.

ascanrules.formatstring.desc = Un errore di formato della stringa avviene quando i dati inviati di una stringa di input vengono valutati come comando dall'applicazione. 
ascanrules.formatstring.error1 = Potenziale errore di formato stringa.  Lo script ha chiuso la connessione su un /%s
ascanrules.formatstring.error2 = Potenziale errore di formato stringa.  Lo script ha chiuso la connessione su un /%s e /%x
ascanrules.formatstring.error3 = Potenziale errore di formato stringa.  Lo script ha chiuso la connessione su un errore di formattazione stringa microsoft
ascanrules.formatstring.name = Errore nella formattazione della stringa
ascanrules.formatstring.refs = https\://owasp.org/www-community/attacks/Format_string_attack
ascanrules.formatstring.soln = Riscrivere il programma in background utilizzando una corretta eliminazione delle stringhe con caratteri malevoli. Questo richieder\u00e0 una ricompilazione dell'eseguibile in background.

ascanrules.getforpost.desc = A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to Cross-Site Scripting (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible.
ascanrules.getforpost.name = GET for POST
ascanrules.getforpost.soln = Ensure that only POST is accepted where POST is expected.

ascanrules.heartbleed.desc = L'implementazione di TLS in OpenSSL 1.0.1 prima 1.0.1g non gestisce correttamente i pacchetti Heartbeat Extension, che permette ad aggressori remoti di ottenere informazioni sensibili dalla memoria del processo tramite pacchetti costruiti ad arte che scatenano una sovra-lettura di un buffer, rivelando potenzialmente informazioni sensibili.
ascanrules.heartbleed.extrainfo = Questo problema \u00e8 stato confermato esfiltrando dati dal server, utilizzando {0}. E'' improbabile che questo sia un falso positivo.
ascanrules.heartbleed.name = Vulnerabilit\u00e0 OpenSSL Heartbleed
ascanrules.heartbleed.refs = https\://nvd.nist.gov/vuln/detail/CVE-2014-0160
ascanrules.heartbleed.soln = Aggiornare ad OpenSSL 1.0.1g o versione successiva. Riemettere i certificati HTTPS. Modificare le chiavi asimmetriche private e le chiavi segrete condivise, poich\u00e9 potrebbero essere state compromesse, senza nessun riscontro nei files di log del server.

ascanrules.hidden.files.alert.name = Hidden File Found
ascanrules.hidden.files.desc = A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.
ascanrules.hidden.files.name = Hidden File Finder
ascanrules.hidden.files.otherinfo = {0}
ascanrules.hidden.files.refs = https\://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html
ascanrules.hidden.files.soln = Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.

ascanrules.htaccess.desc = htaccess files can be used to alter the configuration of the Apache Web Server software to enable/disable additional functionality and features that the Apache Web Server software has to offer. 
ascanrules.htaccess.name = .htaccess Information Leak
ascanrules.htaccess.otherinfo = Based on response status code htaccess file may be protected by an authentication or authorization mechanism.
ascanrules.htaccess.refs = http\://www.htaccess-guide.com/
ascanrules.htaccess.soln = Ensure the .htaccess file is not accessible.

ascanrules.name = Regole di Scansione Attiva

ascanrules.paddingoracle.desc = By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely 'padding oracle' vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This rule should detect the MS10-070 padding oracle vulnerability in ASP.net if CustomErrors are enabled for that.
ascanrules.paddingoracle.name = Oracle Padding generico
ascanrules.paddingoracle.refs = http\://netifera.com/research/\nhttp\://www.microsoft.com/technet/security/bulletin/ms10-070.mspx\nhttp\://www.mono-project.com/Vulnerabilities\#ASP.NET_Padding_Oracle\nhttps\://bugzilla.redhat.com/show_bug.cgi?id\=623799
ascanrules.paddingoracle.soln = Aggiornare il software del server interessato o modificare gli script in modo che essi convalidino correttamente i dati crittografati prima di tentare la decrittazione.

ascanrules.parametertamper.desc = Parameter manipulation caused an error page or Java stack trace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
ascanrules.parametertamper.name = Parameter Tampering
ascanrules.parametertamper.soln = Identify the cause of the error and fix it.  Do not trust client side input and enforce a tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.

ascanrules.pathtraversal.name = Path Traversal

ascanrules.payloader.desc = Provides support for custom payloads in scan rules.
ascanrules.payloader.name = Active Scan Rules Custom Payloads

ascanrules.persistentxssattack.json.desc = A XSS attack was found in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
ascanrules.persistentxssattack.json.name = Cross Site Scripting Weakness (Persistent in JSON Response)
ascanrules.persistentxssattack.name = Cross Site Scripting (Persistent)
ascanrules.persistentxssattack.otherinfo = Source URL\: {0}
ascanrules.persistentxssattack.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML 

ascanrules.persistentxssprime.misc = N/A
ascanrules.persistentxssprime.name = Cross Site Scripting (Persistent) - Prime

ascanrules.persistentxssspider.misc = N/A
ascanrules.persistentxssspider.name = Cross Site Scripting (Persistent) - Spider

ascanrules.remotecodeexecution.cve-2012-1823.desc = Alcune versioni PHP, quando configurate per essere eseguito usando CGI, non gestiscono correttamente le stringhe di query in cui manca un carattere "\=", consentendo l'esecuzione di codice arbitrario. In questo caso, un comando del sistema operativo \u00e8 stato eseguito dal server web, e i risultati sono stati restituiti al browser web. 
ascanrules.remotecodeexecution.cve-2012-1823.name = Esecuzione di codice remoto - CVE-2012-1823
ascanrules.remotecodeexecution.cve-2012-1823.soln = Aggiornare all'ultima versione stabile di PHP, o utilizzare il server web Apache e il modulo mod_rewrite per filtrare le richieste dannose mediante le direttive "RewriteCond" e "RewriteRule".

ascanrules.remotefileinclude.name = Remote File Inclusion

ascanrules.serversideinclude.desc = Certain parameters may cause Server Side Include commands to be executed.  This may allow database connection or arbitrary code to be executed.
ascanrules.serversideinclude.name = Server Side Include
ascanrules.serversideinclude.refs = http\://www.carleton.ca/~dmcfet/html/ssi.html
ascanrules.serversideinclude.soln = Do not trust client side input and enforce a tight check in the server side. Disable server side includes.\nRefer to manual to disable Sever Side Include.\nUse least privilege to run your web server or application server.\nFor Apache, disable the following\:\nOptions Indexes FollowSymLinks Includes\nAddType application/x-httpd-cgi .cgi\nAddType text/x-server-parsed-html .html

ascanrules.sourcecodedisclosurecve-2012-1823.desc = Alcune versioni PHP, quando configurate per essere eseguite usando CGI, non gestiscono correttamente le stringhe di query con mancanza di un carattere escape "\=", consentendo la divulgazione del codice sorgente PHP e l'esecuzione di codice arbitrario. In questo caso, il contenuto del file PHP \u00e8 stato servito direttamente al browser web. Questa uscita di solito contiene  codice PHP, anche se pu\u00f2 anche contenere direttamente HTML.
ascanrules.sourcecodedisclosurecve-2012-1823.name = Rivelazione di codice sorgente - CVE-2012-1823
ascanrules.sourcecodedisclosurecve-2012-1823.soln = Aggiornare all'ultima versione stabile di PHP, o utilizzare il server web Apache e il modulo mod_rewrite per filtrare le richieste dannose mediante le direttive "RewriteCond" e "RewriteRule".

ascanrules.sourcecodedisclosurewebinf.desc = Codice sorgente Java \u00e8 stato divulgato dal server web nel file di classe Java nella cartella WEB-INF. I file di classe possono essere disassemblati per produrre codice sorgente che assomiglier\u00e0 molto accuratamente al codice sorgente originale.  
ascanrules.sourcecodedisclosurewebinf.name = Divulgazione di codice sorgente - cartella /WEB-INF
ascanrules.sourcecodedisclosurewebinf.propertiesfile.desc = Una classe Java nella cartella /WEB-INF ha rivelato la presenza di file di propriet\u00e0. I file di propriet\u00e0 non dovrebbero essere pubblicamente accessibilo e in genere contengono informazioni di configurazione, credenziali di applicazione o chiavi crittografiche.   
ascanrules.sourcecodedisclosurewebinf.propertiesfile.extrainfo = Il riferimento al file di propriet\u00e0 \u00e8 stato trovato nel codice sorgente Java disassemblato per la classe Java [{0}].
ascanrules.sourcecodedisclosurewebinf.propertiesfile.name = Rivelazione di File di Propriet\u00e0 - /WEB-INF cartella
ascanrules.sourcecodedisclosurewebinf.propertiesfile.soln = Il server web deve essere configurato per non servire la cartella /WEB-INF o il suo contenuto ai browser web.  \u00c8 possibile anche rimuovere la cartella /WEB-INF.  
ascanrules.sourcecodedisclosurewebinf.soln = Il server web deve essere configurato per non servire la cartella /WEB-INF o il suo contenuto ai browser web, poich\u00e9 contiene informazioni sensibili come codice Java compilato e file di propriet\u00e0 che possono contenere credenziali. Le classi Java distribuite con l'applicazione dovrebbero essere offuscate, come ulteriore livello di difesa in un approccio di "difesa in profondit\u00e0".

#ascanrules.sqlinjection.alert.errorbased.attack={1}
ascanrules.sqlinjection.alert.booleanbased.attack = Campo\: [{0}], valore [{1}]
ascanrules.sqlinjection.alert.booleanbased.extrainfo = The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]\nThe parameter value being modified was {2}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.booleanbased.extrainfo.dataexists = Data was returned for the original parameter.\nThe vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.booleanbased.extrainfo.datanotexists = Data was NOT returned for the original parameter.\nThe vulnerability was detected by successfully retrieving more data than originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.errorbased.attack = [{0}] campo\: [{1}], valore [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.attack = Valore originale\: [{0}]. valore modificato\: [{1}]. valore di controllo\: [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.extrainfo = Messaggio non modificato ha dato il codice di stato HTTP [{0}], corpo di lunghezza [{1}], il messaggio modificato ha dato lo stato HTTP [{2}], corpo di lunghezza [{3}]. Un terzo (valore inducente una non-SQL injection) ha dato lo stato HTTP [{4}], corpo di lunghezza [{5}]
ascanrules.sqlinjection.alert.errorbased.extrainfo = RDBMS [{0}] likely, given error message regular expression [{1}] matched by the HTML results.\nThe vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised
ascanrules.sqlinjection.alert.errorbased.httpstatuscode.extrainfo = Messaggio non modificato ha dato il codice di stato HTTP [{0}], il messaggio modificato ha dato lo stato HTTP [{1}]
ascanrules.sqlinjection.alert.expressionbased.extrainfo = The original page results were successfully replicated using the expression [{0}] as the parameter value\nThe parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.orderbybased.extrainfo = The original page results were successfully replicated using the "ORDER BY" expression [{0}] as the parameter value\nThe parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.timebased.extrainfo = Il tempo di query \u00e8 controllabile tramite il valore del parametro [{0}], che ha causato l''impiego di [{1}] millisecondi per la richiesta, quando la query originale non modificata con valore [{2}] ha impiegato [{3}] millisecondi 
ascanrules.sqlinjection.alert.unionbased.attack = [{0}] campo\: [{1}], valore [{2}]
ascanrules.sqlinjection.alert.unionbased.extrainfo = RDBMS [{0}] likely, given UNION-specific error message regular expression [{1}] matched by the HTML results\nThe vulnerability was detected by manipulating the parameter with an SQL ''UNION'' clause to cause a database error message to be returned and recognised
ascanrules.sqlinjection.authbypass.desc = SQL injection may be possible on a login page, potentially allowing the application's authentication mechanism to be bypassed
ascanrules.sqlinjection.authbypass.name = SQL Injection - Authentication Bypass
ascanrules.sqlinjection.desc = SQL injection may be possible.
ascanrules.sqlinjection.hypersonic.name = SQL Injection - Hypersonic SQL
ascanrules.sqlinjection.mssql.alert.timebased.extrainfo = The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds.
ascanrules.sqlinjection.mssql.name = SQL Injection - MsSQL
ascanrules.sqlinjection.mysql.name = SQL Injection - MySQL
ascanrules.sqlinjection.name = SQL Injection
ascanrules.sqlinjection.oracle.name = SQL Injection - Oracle
ascanrules.sqlinjection.postgres.name = SQL Injection - PostgreSQL
ascanrules.sqlinjection.refs = https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
ascanrules.sqlinjection.soln = Do not trust client side input, even if there is client side validation in place.\nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\nApply the principle of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.
ascanrules.sqlinjection.sqlite.alert.errorbased.extrainfo = The following known SQLite error message was provoked\: [{0}].
ascanrules.sqlinjection.sqlite.alert.timebased.extrainfo = The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, parameter value [{2}], which caused the request to take [{3}] milliseconds, when the original unmodified query with value [{4}] took [{5}] milliseconds.
ascanrules.sqlinjection.sqlite.alert.versionnumber.extrainfo = Using a UNION based SQL Injection attack, and by exploiting SQLite''s dynamic typing mechanism, the SQLite version was determined to be [{0}].\nWith string-based injection points, full SQLite version information can be extracted, but with numeric injection points, only partial SQLite version information can be extracted.\nMore information on SQLite version [{0}] is available at http\://www.sqlite.org/changes.html
ascanrules.sqlinjection.sqlite.name = SQL Injection - SQLite

ascanrules.traceaxd.desc = The ASP.NET Trace Viewer (trace.axd) was found to be available. This component can leak a significant amount of valuable information.
ascanrules.traceaxd.name = Trace.axd Information Leak
ascanrules.traceaxd.otherinfo = Based on response status code Trace Viewer may be protected by an authentication or authorization mechanism.  
ascanrules.traceaxd.refs = https\://msdn.microsoft.com/en-us/library/bb386420.aspx\nhttps\://msdn.microsoft.com/en-us/library/wwh16c6c.aspx\nhttps\://www.dotnetperls.com/trace
ascanrules.traceaxd.soln = Consider whether or not Trace Viewer is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization.

ascanrules.useragent.desc = Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.
ascanrules.useragent.name = User Agent Fuzzer
ascanrules.useragent.refs = https\://owasp.org/wstg
ascanrules.useragent.useragentparmname = Header User-Agent

ascanrules.xsltinjection.command.otherinfo = Command execution may be possible.
ascanrules.xsltinjection.desc = Injection using XSL transformations may be possible, and may allow an attacker to read system information, read and write files, or execute arbitrary code.
ascanrules.xsltinjection.error.otherinfo = The response to sending an XSLT token included error messages that may indicate a vulnerability to XSLT injections.
ascanrules.xsltinjection.name = XSLT Injection
ascanrules.xsltinjection.portscan.otherinfo = Port scanning may be possible.
ascanrules.xsltinjection.refs = https\://www.contextis.com/blog/xslt-server-side-injection-attacks
ascanrules.xsltinjection.soln = Sanitize and analyze every user input coming from any client-side.
ascanrules.xsltinjection.vendor.otherinfo = The XSLT processor vendor name "{0}" was returned after an injection request.

ascanrules.xxe.name = XML External Entity Attack

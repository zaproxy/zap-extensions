
ascanrules.bufferoverflow.desc = Les erreurs de d\u00e9bordement de tampon sont caract\u00e9ris\u00e9es par la sur\u00e9criture des espaces de m\u00e9moire du processus en arri\u00e8re-plan, qui ne devraient jamais \u00eatre modifi\u00e9s, intentionnellement ou non. \u00c9craser les valeurs de l'IP (Instruction Pointer), BP (pointeur de Base) et autres registres provoque des exceptions, des erreurs de segmentation et des erreurs dans d'autres processus. Ces erreurs terminent g\u00e9n\u00e9ralement l'ex\u00e9cution de l'application d'une mani\u00e8re inattendue. 
ascanrules.bufferoverflow.name = D\u00e9bordement de tampon
ascanrules.bufferoverflow.other = D\u00e9bordement de tampon potentiel. Le script a ferm\u00e9 la connexion et a lanc\u00e9 une erreur interne du serveur 500
ascanrules.bufferoverflow.refs = https\://owasp.org/www-community/attacks/Buffer_overflow_attack
ascanrules.bufferoverflow.soln = R\u00e9\u00e9crire le programme d'arri\u00e8re-plan en utilisant une v\u00e9rification de la longueur de retour correcte.  Cela n\u00e9cessitera une recompilation de l'ex\u00e9cutable d'arri\u00e8re-plan.

ascanrules.cloudmetadata.desc = De telles erreurs pourraient \u00eatre utilis\u00e9es pour contourner les sch\u00e9mas de listes autoris\u00e9es en introduisant des entr\u00e9es dangereuses apr\u00e8s leur v\u00e9rification.\n\nL'attaque de m\u00e9tadonn\u00e9es cloud tente d'abuser d'un serveur NGINX mal configur\u00e9 afin d'acc\u00e9der aux m\u00e9tadonn\u00e9es d'instance g\u00e9r\u00e9es par des fournisseurs de services cloud tels qu'AWS, GCP et Azure.\nTous ces fournisseurs fournissent des m\u00e9tadonn\u00e9es via une adresse IP interne non routable '169.254.169.254' - cela peut \u00eatre expos\u00e9 par des serveurs NGINX mal configur\u00e9s et accessible en utilisant cette adresse IP dans le champ d'en-t\u00eate Host.
ascanrules.cloudmetadata.name = M\u00e9tadonn\u00e9e du Cloud potentiellement vuln\u00e9rable
ascanrules.cloudmetadata.otherinfo = Based on the successful response status code cloud metadata may have been returned in the response. Check the response data to see if any cloud metadata has been returned.\nThe meta data returned can include information that would allow an attacker to completely compromise the system.
ascanrules.cloudmetadata.refs = https\://www.nginx.com/blog/trust-no-one-perils-of-trusting-user-input/
ascanrules.cloudmetadata.soln = Do not trust any user data in NGINX configs. In this case it is probably the use of the $host variable which is set from the 'Host' header and can be controlled by an attacker.

ascanrules.codeinjection.desc = Une injection de code peut \u00eatre possible en incluant un code sur mesure qui sera \u00e9valu\u00e9 par le moteur de script
ascanrules.codeinjection.name = Injection de Code c\u00f4t\u00e9 serveur
ascanrules.codeinjection.name.asp = Injection de Code c\u00f4t\u00e9 serveur - Injection de Code ASP
ascanrules.codeinjection.name.php = Injection de Code c\u00f4t\u00e9 serveur - Injection de Code PHP
ascanrules.codeinjection.refs = https\://cwe.mitre.org/data/definitions/94.html\nhttps\://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection
ascanrules.codeinjection.soln = Ne vous fiez pas aux entr\u00e9es du client, m\u00eame si une validation est en place c\u00f4t\u00e9 client. \nEn g\u00e9n\u00e9ral, v\u00e9rifier le type de toutes les donn\u00e9es du c\u00f4t\u00e9 serveur et \u00e9chapper toutes les donn\u00e9es re\u00e7ues du client.  \u00c9vitez d'utiliser des fonctions eval() combin\u00e9es avec des donn\u00e9es d'entr\u00e9e de l'utilisateur.

ascanrules.commandinjection.desc = Technique d'attaque utilis\u00e9e pour l'ex\u00e9cution non autoris\u00e9e de commandes du syst\u00e8me d'exploitation. Cette attaque est possible lorsqu'une application accepte des entr\u00e9es douteuses pour g\u00e9n\u00e9rer des commandes de syst\u00e8me d'exploitation vuln\u00e9rables, sans assainissement correct des donn\u00e9es et/ou sans appel correct de programmes externes.
ascanrules.commandinjection.name = Injection de commande de SE \u00e0 distance
ascanrules.commandinjection.otherinfo.feedback-based = La r\u00e8gle d''analyse a r\u00e9ussi \u00e0 r\u00e9cup\u00e9rer le contenu d''un fichier ou d''une commande en envoyant [{0}] au syst\u00e8me d''exploitation ex\u00e9cutant cette application
ascanrules.commandinjection.otherinfo.time-based = La r\u00e8gle d''analyse a r\u00e9ussi \u00e0 contr\u00f4ler le temps de r\u00e9ponse de l''application en envoyant [{0}] au syst\u00e8me d''exploitation ex\u00e9cutant cette application
ascanrules.commandinjection.refs = https\://cwe.mitre.org/data/definitions/78.html\nhttps\://owasp.org/www-community/attacks/Command_Injection

ascanrules.crlfinjection.desc = Le cookie peut \u00eatre renseign\u00e9 par injection CRLF.  Il serait \u00e9galement possible de renseigner des en-t\u00eates de r\u00e9ponse HTTP arbitraires. En outre, la possible manipulation de la r\u00e9ponse \u00e0 l'aide de script intersite peut faire appara\u00eetre une vuln\u00e9rabilit\u00e9 par empoisonnement de cache.
ascanrules.crlfinjection.name = Injection CRLF
ascanrules.crlfinjection.refs = https\://owasp.org/www-community/vulnerabilities/CRLF_Injection\nhttps\://cwe.mitre.org/data/definitions/113.html
ascanrules.crlfinjection.soln = Type check the submitted parameter carefully. Do not allow CRLF to be injected by filtering CRLF.

ascanrules.crosssitescripting.json.desc = Une attaque XSS a \u00e9t\u00e9 r\u00e9fl\u00e9chie dans la r\u00e9ponse JSON, cela peut rendre vuln\u00e9rable les composants qui consommeront ce contenu s'ils ne g\u00e8rent pas ces donn\u00e9es (r\u00e9ponse JSON) de mani\u00e8re appropri\u00e9e.
ascanrules.crosssitescripting.json.name = Faiblesse Cross Site Scripting (r\u00e9fl\u00e9chi dans la r\u00e9ponse JSON)
ascanrules.crosssitescripting.name = Cross Site Scripting (r\u00e9fl\u00e9chi)
ascanrules.crosssitescripting.otherinfo.accesskey = L'attribut accesskey sp\u00e9cifie une touche de raccourci pour activer/focaliser un \u00e9l\u00e9ment. Cet attribut peut d\u00e9clencher des charges utiles pour des tags non-conventionnels ou personnalis\u00e9s.
ascanrules.crosssitescripting.otherinfo.nothtml = Lev\u00e9e avec le degr\u00e9 de confiance faible, car le Content-Type n'est pas HTML

ascanrules.desc = Statut de publication des r\u00e8gles d'analyse actives

ascanrules.directorybrowsing.desc = Il est possible d'afficher la liste de r\u00e9pertoires.  Cette liste peut r\u00e9v\u00e9ler des scripts cach\u00e9s, des fichiers d'inclusion, des sauvegardes de fichiers source, etc. pouvant donner acc\u00e8s \u00e0 des informations sensibles.
ascanrules.directorybrowsing.name = R\u00e9pertoire de navigation
ascanrules.directorybrowsing.refs = https\://httpd.apache.org/docs/mod/core.html\#options
ascanrules.directorybrowsing.soln = D\u00e9sactiver la navigation dans les r\u00e9pertoires.  Si la navigation est malgr\u00e9 tout n\u00e9cessaire, assurez-vous que les fichiers r\u00e9pertori\u00e9s n'induisent pas de risques.

ascanrules.elmah.desc = Le module de journalisation d'erreur et de gestionnaire HTTP (ELMAH [elmah.axd]) est disponible. Ce module peut laisser \u00e9chapper une quantit\u00e9 importante d\u2019informations pr\u00e9cieuses.
ascanrules.elmah.name = Fuite d\u2019informations ELMAH
ascanrules.elmah.otherinfo = Selon le code de la r\u00e9ponse, ELMAH est peut-\u00eatre prot\u00e9g\u00e9 par un m\u00e9canisme d'authentification ou d'autorisation.  
ascanrules.elmah.refs = https\://www.troyhunt.com/aspnet-session-hijacking-with-google/\nhttps\://www.nuget.org/packages/elmah\nhttps\://elmah.github.io/
ascanrules.elmah.soln = Examinez si ELMAH est r\u00e9ellement n\u00e9cessaire \u00e0 la production, et si ce n\u2019est pas le cas, d\u00e9sactivez-le. S\u2019il est n\u00e9cessaire , assurez-vous que l'acc\u00e8s \u00e0 ELMAH requiert authentification et autorisation. Voir aussi\: https\://elmah.github.io/a/securing-error-log-pages/

ascanrules.envfiles.desc = One or more .env files seems to have been located on the server. These files often expose infrastructure or administrative account credentials, API or APP keys, or other sensitive configuration information. 
ascanrules.envfiles.name = .env Information Leak
ascanrules.envfiles.otherinfo = Based on response status code the .env file may be protected by an authentication or authorization mechanism.
ascanrules.envfiles.refs = https\://www.google.com/search?q\=db_password+filetype%3Aenv\nhttps\://mobile.twitter.com/svblxyz/status/1045013939904532482
ascanrules.envfiles.soln = Ensure the .env file is not accessible.

ascanrules.externalredirect.name = Redirection externe
ascanrules.externalredirect.reason.javascript = La r\u00e9ponse contient une redirection dans son code JavaScript, ce qui permet de d\u00e9finir une Url externe.
ascanrules.externalredirect.reason.location.header = La r\u00e9ponse contient une redirection dans le champ d'en-t\u00eate Location, ce qui permet de d\u00e9finir une Url externe.
ascanrules.externalredirect.reason.location.meta = La r\u00e9ponse contient une redirection pour 'Location' dans sa balise meta http-equiv, ce qui permet de d\u00e9finir une Url externe.
ascanrules.externalredirect.reason.notfound = Aucune raison trouv\u00e9e pour ceci...
ascanrules.externalredirect.reason.refresh.header = La r\u00e9ponse contient une redirection dans le champ d'en-t\u00eate Refresh, ce qui permet de d\u00e9finir une Url externe.
ascanrules.externalredirect.reason.refresh.meta = La r\u00e9ponse contient une redirection pour 'Refresh' dans sa balise meta http-equiv, ce qui permet de d\u00e9finir une Url externe.

ascanrules.formatstring.desc = Une erreur de format de cha\u00eene s'est produite lorsque les donn\u00e9es provenant d'une cha\u00eene d'entr\u00e9e ont \u00e9t\u00e9 \u00e9valu\u00e9es comme une commande par l'application. 
ascanrules.formatstring.error1 = \u00c9ventuelle erreur de formatage de cha\u00eene.  Le script a ferm\u00e9 la connexion sur un /%s
ascanrules.formatstring.error2 = \u00c9ventuelle erreur de formatage de cha\u00eene.  Le script a ferm\u00e9 la connexion sur un /%s et /%x
ascanrules.formatstring.error3 = \u00c9ventuelle erreur de formatage de cha\u00eene.  Le script a ferm\u00e9 la connexion sur une erreur de cha\u00eene au format microsoft
ascanrules.formatstring.name = Erreur de format de cha\u00eene
ascanrules.formatstring.refs = https\://owasp.org/www-community/attacks/Format_string_attack
ascanrules.formatstring.soln = R\u00e9\u00e9crire le programme d'arri\u00e8re-plan en supprimant de mani\u00e8re correcte les mauvaises cha\u00eenes de caract\u00e8res. Cela n\u00e9cessitera la recompilation de l'ex\u00e9cutable d'arri\u00e8re-plan .

ascanrules.getforpost.desc = A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to Cross-Site Scripting (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible.
ascanrules.getforpost.name = GET for POST
ascanrules.getforpost.soln = Ensure that only POST is accepted where POST is expected.

ascanrules.heartbleed.desc = L'impl\u00e9mentation de TLS dans OpenSSL 1.0.1 avant 1.0.1g ne g\u00e8re pas correctement les paquets Heartbeat Extension, ce qui permet \u00e0 des attaquants distants d'obtenir des informations sensibles de la m\u00e9moire de processus via des paquets con\u00e7us pour d\u00e9clencher un d\u00e9passement de tampon, avec le potentiel de divulguer des informations sensibles.
ascanrules.heartbleed.extrainfo = Ce probl\u00e8me a \u00e9t\u00e9 confirm\u00e9 par l''exfiltration de donn\u00e9es depuis le serveur, \u00e0 l''aide de {0}. Un faux positif est peu probable.
ascanrules.heartbleed.name = Vuln\u00e9rabilit\u00e9 OpenSSL Heartbleed
ascanrules.heartbleed.refs = https\://nvd.nist.gov/vuln/detail/CVE-2014-0160
ascanrules.heartbleed.soln = Mettez \u00e0 jour OpenSSL avec la version 1.0.1g ou ult\u00e9rieure. R\u00e9-\u00e9mettez les certificats HTTPS. Changer les cl\u00e9s priv\u00e9es asym\u00e9triques et les cl\u00e9s secr\u00e8tes partag\u00e9es, car elles peuvent avoir \u00e9t\u00e9 compromises, sans aucun avertissement dans les fichiers journaux du serveur.

ascanrules.hidden.files.alert.name = Hidden File Found
ascanrules.hidden.files.desc = A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.
ascanrules.hidden.files.name = Hidden File Finder
ascanrules.hidden.files.refs = https\://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html
ascanrules.hidden.files.soln = Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.

ascanrules.htaccess.desc = Les fichiers .htaccess peuvent \u00eatre utilis\u00e9s pour alt\u00e9rer la configuration du serveur web Apache afin d'activer/d\u00e9sactiver des fonctionnalit\u00e9s et caract\u00e9ristiques que le serveur web Apache peut offrir.
ascanrules.htaccess.name = Fuite d'information .htaccess
ascanrules.htaccess.otherinfo = Selon le code de la r\u00e9ponse, le fichier .htaccess est peut-\u00eatre prot\u00e9g\u00e9 par un m\u00e9canisme d'authentification ou d'autorisation.
ascanrules.htaccess.refs = https\://developer.mozilla.org/en-US/docs/Learn/Server-side/Apache_Configuration_htaccess\nhttps\://httpd.apache.org/docs/2.4/howto/htaccess.html
ascanrules.htaccess.soln = S'assurer que le fichier .htaccess n'est pas accessible.

ascanrules.log4shell.cve44228.desc = Apache Log4j2 <\=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default.
ascanrules.log4shell.cve44228.name = Log4Shell (CVE-2021-44228)
ascanrules.log4shell.cve44228.refs = https\://www.lunasec.io/docs/blog/log4j-zero-day/\nhttps\://nvd.nist.gov/vuln/detail/CVE-2021-44228
ascanrules.log4shell.cve44228.soln = Upgrade Log4j2 to version 2.17.1 or newer. In previous releases (>2.10) this behavior can be mitigated by setting system property "log4j2.formatMsgNoLookups" to "true" or by removing the JndiLookup class from the classpath (example\: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class). Java 8u121 (see https\://www.oracle.com/java/technologies/javase/8u121-relnotes.html) protects against remote code execution by defaulting "com.sun.jndi.rmi.object.trustURLCodebase" and "com.sun.jndi.cosnaming.object.trustURLCodebase" to "false".
ascanrules.log4shell.cve45046.desc = It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allow attackers to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments.
ascanrules.log4shell.cve45046.name = Log4Shell (CVE-2021-45046)
ascanrules.log4shell.cve45046.refs = https\://www.lunasec.io/docs/blog/log4j-zero-day/\nhttps\://nvd.nist.gov/vuln/detail/CVE-2021-45046
ascanrules.log4shell.cve45046.soln = Upgrade Log4j2 to version 2.17.1 or newer.
ascanrules.log4shell.name = Log4Shell
ascanrules.log4shell.skipped = no Active Scan OAST service is selected.

ascanrules.name = R\u00e8gles d'analyse active

ascanrules.paddingoracle.desc = By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely 'padding oracle' vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This rule should detect the MS10-070 padding oracle vulnerability in ASP.net if CustomErrors are enabled for that.
ascanrules.paddingoracle.name = Bourrage Oracle g\u00e9n\u00e9rique
ascanrules.paddingoracle.refs = https\://learn.microsoft.com/en-us/security-updates/securitybulletins/2010/ms10-070\nhttps\://www.mono-project.com/docs/about-mono/vulnerabilities/\nhttps\://bugzilla.redhat.com/show_bug.cgi?id\=623799
ascanrules.paddingoracle.soln = Mettez \u00e0 jour le logiciel de serveur affect\u00e9, ou modifiez les scripts afin qu'ils valident correctement les donn\u00e9es chiffr\u00e9es avant toute tentative de d\u00e9chiffrement.

ascanrules.parametertamper.desc = La manipulation des param\u00e8tres a provoqu\u00e9 une page d'erreur ou l'affichage d'une trace d'appel Java. Ceci indique un d\u00e9faut de gestion des exceptions et ouvre des potentialit\u00e9s pour d'autres exploits.
ascanrules.parametertamper.name = Falsification de param\u00e8tre
ascanrules.parametertamper.soln = Identifiez la cause de l'erreur et corrigez-la.  Ne pas faite confiance aux entr\u00e9es c\u00f4t\u00e9 client et appliquez un contr\u00f4le serr\u00e9 du c\u00f4t\u00e9 serveur.  En outre, interceptez proprement les exceptions.  Utilisez une page d'erreur g\u00e9n\u00e9rique 500 pour signaler les erreurs internes du serveur.

ascanrules.pathtraversal.name = Travers\u00e9e de chemin

ascanrules.payloader.desc = Provides support for custom payloads in scan rules.
ascanrules.payloader.name = Active Scan Rules Custom Payloads

ascanrules.persistentxssattack.json.desc = Une attaque XSS a \u00e9t\u00e9 trouv\u00e9e dans la r\u00e9ponse JSON, cela peut rendre vuln\u00e9rable les composants qui consommeront ce contenu s'ils ne g\u00e8rent pas ces donn\u00e9es (r\u00e9ponse JSON) de mani\u00e8re appropri\u00e9e.
ascanrules.persistentxssattack.json.name = Faiblesse Cross Site Scripting (stock\u00e9 dans la r\u00e9ponse JSON)
ascanrules.persistentxssattack.name = Cross-Site Scripting (stock\u00e9)
ascanrules.persistentxssattack.otherinfo = URL de la source\: {0}
ascanrules.persistentxssattack.otherinfo.nothtml = Lev\u00e9e avec le degr\u00e9 de confiance faible, car le Content-Type n'est pas HTML

ascanrules.persistentxssprime.name = Cross Site Scripting (stock\u00e9) - premier

ascanrules.persistentxssspider.name = Cross Site Scripting (stock\u00e9) - Robot

ascanrules.remotecodeexecution.cve-2012-1823.desc = Lorsqu'elles sont configur\u00e9es pour ex\u00e9cuter du code CGI, certaines versions de PHP ne traitent pas correctement les cha\u00eenes de requ\u00eate dans lesquelles manque un caract\u00e8re "\=" non \u00e9chapp\u00e9, ce qui permet l'ex\u00e9cution de code arbitraire. Dans ce cas, il est possible de faire ex\u00e9cuter une commande du syst\u00e8me d'exploitation sur le serveur internet, dont les r\u00e9sultats sont retourn\u00e9s au navigateur internet. 
ascanrules.remotecodeexecution.cve-2012-1823.name = Ex\u00e9cution de code \u00e0 distance - CVE-2012-1823
ascanrules.remotecodeexecution.cve-2012-1823.soln = Mettez \u00e0 jour \u00e0 la derni\u00e8re version stable de PHP, ou utilisez le serveur internet Apache et son module mod_rewrite pour filtrer les requ\u00eates malicieuses utilisant les directives "RewriteCond" et "RewriteRule".

ascanrules.remotefileinclude.name = Inclusion de fichiers distants

ascanrules.serversideinclude.desc = Certains param\u00e8tres peuvent conduire \u00e0 ex\u00e9cuter des commandes Server Side Include. Cela peut permettre la connexion \u00e0 des bases de donn\u00e9es ou l'ex\u00e9cution de code arbitraire.
ascanrules.serversideinclude.name = Server Side Include
ascanrules.serversideinclude.refs = https\://httpd.apache.org/docs/current/howto/ssi.html
ascanrules.serversideinclude.soln = Do not trust client side input and enforce a tight check in the server side. Disable server side includes.\nRefer to manual to disable Sever Side Include.\nUse least privilege to run your web server or application server.\nFor Apache, disable the following\:\nOptions Indexes FollowSymLinks Includes\nAddType application/x-httpd-cgi .cgi\nAddType text/x-server-parsed-html .html

ascanrules.sourcecodedisclosurecve-2012-1823.desc = Certaines versions PHP, lorsqu'il est configur\u00e9 pour ex\u00e9cuter \u00e0 l'aide de CGI, ne manipulez pas correctement les cha\u00eenes de requ\u00eate qui n'ont pas un caract\u00e8re de \u00ab \= \u00bb sans s\u00e9quence d'\u00e9chappement, ce qui permet la divulgation de code source PHP et l'ex\u00e9cution de code arbitraire. Dans ce cas, le contenu du fichier PHP a \u00e9t\u00e9 fourni directement au navigateur internet. Cette sortie contiendra g\u00e9n\u00e9ralement du code PHP, mais il peut \u00e9galement contenir du pur HTML.
ascanrules.sourcecodedisclosurecve-2012-1823.name = Source Code Disclosure - CVE-2012-1823
ascanrules.sourcecodedisclosurecve-2012-1823.soln = Mettez \u00e0 jour \u00e0 la derni\u00e8re version stable de PHP, ou utilisez le serveur internet Apache et son module mod_rewrite pour filtrer les requ\u00eates malicieuses utilisant les directives "RewriteCond" et "RewriteRule".

ascanrules.sourcecodedisclosurewebinf.desc = Du code source Java a \u00e9t\u00e9 d\u00e9voil\u00e9 par le serveur internet au travers des fichiers de classe Java du dossier WEB-INF. Les fichiers de classe peuvent \u00eatre d\u00e9compil\u00e9s pour produire un code source qui correspond tr\u00e8s \u00e9troitement au code source original.  
ascanrules.sourcecodedisclosurewebinf.name = Source Code Disclosure - /WEB-INF Folder
ascanrules.sourcecodedisclosurewebinf.propertiesfile.desc = Une classe Java du dossier /WEB-INF a d\u00e9voil\u00e9 la pr\u00e9sence du fichier de propri\u00e9t\u00e9s. Les fichiers de propri\u00e9t\u00e9s ne sont pas sens\u00e9s \u00eatre accessibles au public, car ils contiennent g\u00e9n\u00e9ralement des informations de configuration, des informations d'identification ou des cl\u00e9s cryptographiques.   
ascanrules.sourcecodedisclosurewebinf.propertiesfile.extrainfo = La r\u00e9f\u00e9rence vers le fichier de propri\u00e9t\u00e9s a \u00e9t\u00e9 trouv\u00e9e dans le code source Java d\u00e9s-assembl\u00e9 de la classe Java [{0}].
ascanrules.sourcecodedisclosurewebinf.propertiesfile.name = Divulgation de fichier de propri\u00e9t\u00e9s - Dossier /WEB-INF
ascanrules.sourcecodedisclosurewebinf.propertiesfile.soln = Le serveur internet devrait \u00eatre configur\u00e9 pour ne pas servir le dossier /WEB-INF ou son contenu aux navigateurs internet.  Il serait \u00e9galement possible de supprimer le dossier /WEB-INF.  
ascanrules.sourcecodedisclosurewebinf.soln = Le serveur internet devrait \u00eatre configur\u00e9 pour ne pas fournir le dossier /WEB-INF ou son contenu aux navigateurs internet, car il contient des informations sensibles telles que des fichiers de code Java compil\u00e9s et des fichiers de propri\u00e9t\u00e9s qui peuvent contenir des informations d'identification. Les classes Java d\u00e9ploy\u00e9es avec l'application devraient \u00eatre obscurcies, en guise de couche de d\u00e9fense suppl\u00e9mentaire dans une optique de "d\u00e9fense en profondeur".

ascanrules.spring4shell.desc = The application appears to be vulnerable to CVE-2022-22965 (otherwise known as Spring4Shell) - remote code execution (RCE) via data binding.
ascanrules.spring4shell.name = Spring4Shell
ascanrules.spring4shell.refs = https\://nvd.nist.gov/vuln/detail/CVE-2022-22965\nhttps\://www.rapid7.com/blog/post/2022/03/30/spring4shell-zero-day-vulnerability-in-spring-framework/\nhttps\://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\#vulnerability\nhttps\://tanzu.vmware.com/security/cve-2022-22965
ascanrules.spring4shell.soln = Upgrade Spring Framework to versions 5.3.18, 5.2.20, or newer.

ascanrules.springactuator.desc = Spring Actuator for Health is enabled and may reveal sensitive information about this application. Spring Actuators can be used for real monitoring purposes, but should be used with caution as to not expose too much information about the application or the infrastructure running it.
ascanrules.springactuator.name = Spring Actuator Information Leak
ascanrules.springactuator.refs = https\://docs.spring.io/spring-boot/docs/current/actuator-api/htmlsingle/\#overview
ascanrules.springactuator.soln = Disable the Health Actuators and other actuators, or restrict them to administrative users.

#ascanrules.sqlinjection.alert.errorbased.attack={1}
ascanrules.sqlinjection.alert.booleanbased.attack = champ\: [{0}], valeur [{1}]
ascanrules.sqlinjection.alert.booleanbased.extrainfo = The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]\nThe parameter value being modified was {2}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.booleanbased.extrainfo.dataexists = La donn\u00e9e a \u00e9t\u00e9 retourn\u00e9e pour le param\u00e8tre d'origine.\nLa vuln\u00e9rabilit\u00e9 a \u00e9t\u00e9 d\u00e9tect\u00e9e en manipulant le param\u00e8tre, ce qui a restreint avec succ\u00e8s les donn\u00e9es initialement retourn\u00e9es,
ascanrules.sqlinjection.alert.booleanbased.extrainfo.datanotexists = Les donn\u00e9es n'ont PAS \u00e9t\u00e9 retourn\u00e9es pour le param\u00e8tre d'origine.\nLa vuln\u00e9rabilit\u00e9 a \u00e9t\u00e9 d\u00e9tect\u00e9e en manipulant le param\u00e8tre pour r\u00e9cup\u00e9rer avec succ\u00e8s plus de donn\u00e9es qu'initialement retourn\u00e9es,
ascanrules.sqlinjection.alert.errorbased.attack = [{0}] champ\: [{1}], valeur [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.attack = Valeur d''Origine\: [{0}]. Valeur Modifi\u00e9e\: [{1}]. Valeur de Contr\u00f4le\: [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.extrainfo = Le message non modifi\u00e9 donne le statut HTTP [{0}], un corps d''une longueur [{1}], le message modifi\u00e9 donne le statut HTTP [{2}], un corps d''une longueur [{3}]. Un tiers (une injection non-SQL induisant une valeur) donne un statut HTTP [{4}], un corps d''une longueur [{5}]
ascanrules.sqlinjection.alert.errorbased.extrainfo = RDBMS [{0}] likely, given error message regular expression [{1}] matched by the HTML results.\nThe vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised
ascanrules.sqlinjection.alert.errorbased.httpstatuscode.extrainfo = Le message non modifi\u00e9 donne le statut HTTP [{0}], le message modifi\u00e9 donne le statut HTTP [{1}]
ascanrules.sqlinjection.alert.expressionbased.extrainfo = Les r\u00e9sultats de la page originale ont \u00e9t\u00e9 reproduits avec succ\u00e8s en utilisant l''expression [{0}] comme valeur du param\u00e8tre\nLa valeur du param\u00e8tre {1} en cours de modification est extraite de la sortie HTML \u00e0 fin de comparaison
ascanrules.sqlinjection.alert.orderbybased.extrainfo = Les r\u00e9sultats de la page originale ont \u00e9t\u00e9 reproduits avec succ\u00e8s en utilisant l''expression "ORDER BY" [{0}] comme valeur de param\u00e8tre\nLa valeur du param\u00e8tre {1} en cours de modification est extraite de la sortie HTML \u00e0 fin de comparaison
ascanrules.sqlinjection.alert.timebased.extrainfo = Le temps de la requ\u00eate est contr\u00f4lable \u00e0 l''aide de la valeur du param\u00e8tre [{0}], qui lui fait ainsi prendre [{1}] millisecondes, alors que la requ\u00eate d''origine, non modifi\u00e9e avec la valeur [{2}] prend, quant \u00e0 elle, [{3}] millisecondes 
ascanrules.sqlinjection.alert.unionbased.attack = [{0}] champ\: [{1}], valeur [{2}]
ascanrules.sqlinjection.alert.unionbased.extrainfo = RDBMS [{0}] likely, given UNION-specific error message regular expression [{1}] matched by the HTML results\nThe vulnerability was detected by manipulating the parameter with an SQL ''UNION'' clause to cause a database error message to be returned and recognised
ascanrules.sqlinjection.authbypass.desc = SQL injection may be possible on a login page, potentially allowing the application's authentication mechanism to be bypassed
ascanrules.sqlinjection.authbypass.name = Injection SQL - Contournement de l'authentification
ascanrules.sqlinjection.desc = SQL injection may be possible.
ascanrules.sqlinjection.hypersonic.name = Injection SQL - Hypersonic SQL
ascanrules.sqlinjection.mssql.alert.timebased.extrainfo = The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds.
ascanrules.sqlinjection.mssql.name = SQL Injection - MsSQL
ascanrules.sqlinjection.mysql.name = Injection SQL - MySQL
ascanrules.sqlinjection.name = Injection SQL
ascanrules.sqlinjection.oracle.name = Injection SQL - Oracle
ascanrules.sqlinjection.postgres.name = Injection SQL - PostgreSQL
ascanrules.sqlinjection.refs = https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
ascanrules.sqlinjection.soln = Do not trust client side input, even if there is client side validation in place.\nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\nApply the principle of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.
ascanrules.sqlinjection.sqlite.alert.errorbased.extrainfo = The following known SQLite error message was provoked\: [{0}].
ascanrules.sqlinjection.sqlite.alert.timebased.extrainfo = The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, parameter value [{2}], which caused the request to take [{3}] milliseconds, when the original unmodified query with value [{4}] took [{5}] milliseconds.
ascanrules.sqlinjection.sqlite.alert.versionnumber.extrainfo = Using a UNION based SQL Injection attack, and by exploiting SQLite''s dynamic typing mechanism, the SQLite version was determined to be [{0}].\nWith string-based injection points, full SQLite version information can be extracted, but with numeric injection points, only partial SQLite version information can be extracted.\nMore information on SQLite version [{0}] is available at https\://www.sqlite.org/changes.html
ascanrules.sqlinjection.sqlite.name = SQL Injection - SQLite

ascanrules.ssti.alert.otherinfo = Proof found at [{0}] \ncontent\:\n[{1}]
ascanrules.ssti.desc = When the user input is inserted in the template instead of being used as argument in rendering is evaluated by the template engine. Depending on the template engine it can lead to remote code execution.
ascanrules.ssti.name = Server Side Template Injection
ascanrules.ssti.refs = https\://portswigger.net/blog/server-side-template-injection
ascanrules.ssti.soln = Instead of inserting the user input in the template, use it as rendering argument.

ascanrules.sstiblind.alert.recvdcallback.otherinfo = Received callback from the server.
ascanrules.sstiblind.desc = When the user input is inserted in the template instead of being used as argument in rendering is evaluated by the template engine. Depending on the template engine it can lead to remote code execution.
ascanrules.sstiblind.name = Server Side Template Injection (Blind)
ascanrules.sstiblind.refs = https\://portswigger.net/blog/server-side-template-injection
ascanrules.sstiblind.soln = Instead of inserting the user input in the template, use it as rendering argument.

ascanrules.traceaxd.desc = The ASP.NET Trace Viewer (trace.axd) was found to be available. This component can leak a significant amount of valuable information.
ascanrules.traceaxd.name = Trace.axd Information Leak
ascanrules.traceaxd.otherinfo = Based on response status code Trace Viewer may be protected by an authentication or authorization mechanism.  
ascanrules.traceaxd.refs = https\://msdn.microsoft.com/en-us/library/bb386420.aspx\nhttps\://msdn.microsoft.com/en-us/library/wwh16c6c.aspx\nhttps\://www.dotnetperls.com/trace
ascanrules.traceaxd.soln = Consider whether or not Trace Viewer is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization.

ascanrules.useragent.desc = Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.
ascanrules.useragent.name = User Agent Fuzzer
ascanrules.useragent.refs = https\://owasp.org/wstg
ascanrules.useragent.useragentparmname = Header User-Agent

ascanrules.xpathinjection.name = Injection XPath

ascanrules.xsltinjection.command.otherinfo = Command execution may be possible.
ascanrules.xsltinjection.desc = Injection using XSL transformations may be possible, and may allow an attacker to read system information, read and write files, or execute arbitrary code.
ascanrules.xsltinjection.error.otherinfo = The response to sending an XSLT token included error messages that may indicate a vulnerability to XSLT injections.
ascanrules.xsltinjection.name = XSLT Injection
ascanrules.xsltinjection.portscan.otherinfo = Port scanning may be possible.
ascanrules.xsltinjection.refs = https\://www.contextis.com/blog/xslt-server-side-injection-attacks
ascanrules.xsltinjection.soln = Sanitize and analyze every user input coming from any client-side.
ascanrules.xsltinjection.vendor.otherinfo = The XSLT processor vendor name "{0}" was returned after an injection request.

ascanrules.xxe.name = XML External Entity Attack

ascanrules.desc = R\u00e8gles d'analyse active

ascanrules.bufferoverflow.name = D\u00e9bordement de tampon
ascanrules.bufferoverflow.desc = Les erreurs de d\u00e9bordement de tampon sont caract\u00e9ris\u00e9es par la sur\u00e9criture des espaces de m\u00e9moire du processus en arri\u00e8re-plan, qui ne devraient jamais \u00eatre modifi\u00e9s, intentionnellement ou non. \u00c9craser les valeurs de l'IP (Instruction Pointer), BP (pointeur de Base) et autres registres provoque des exceptions, des erreurs de segmentation et des erreurs dans d'autres processus. Ces erreurs terminent g\u00e9n\u00e9ralement l'ex\u00e9cution de l'application d'une mani\u00e8re inattendue. 
ascanrules.bufferoverflow.soln = R\u00e9\u00e9crire le programme d'arri\u00e8re-plan en utilisant une v\u00e9rification de la longueur de retour correcte.  Cela n\u00e9cessitera une recompilation de l'ex\u00e9cutable d'arri\u00e8re-plan.
ascanrules.bufferoverflow.refs = https\://owasp.org/www-community/attacks/Buffer_overflow_attack
ascanrules.bufferoverflow.other = D\u00e9bordement de tampon potentiel. Le script a ferm\u00e9 la connexion et a lanc\u00e9 une erreur interne du serveur 500

ascanrules.commandinjection.name=Remote OS Command Injection
ascanrules.commandinjection.desc=Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.
ascanrules.commandinjection.refs=http\://cwe.mitre.org/data/definitions/78.html\n\
https\://owasp.org/www-community/attacks/Command_Injection

ascanrules.elmah.name = Fuite d\u2019informations ELMAH
ascanrules.elmah.desc = Le module de journalisation d'erreur et de gestionnaire HTTP (ELMAH [elmah.axd]) est disponible. Ce module peut laisser \u00e9chapper une quantit\u00e9 importante d\u2019informations pr\u00e9cieuses.
ascanrules.elmah.otherinfo = Selon le code de la r\u00e9ponse, ELMAH est peut-\u00eatre prot\u00e9g\u00e9 par un m\u00e9canisme d'authentification ou d'autorisation.  
ascanrules.elmah.refs = https\://www.troyhunt.com/aspnet-session-hijacking-with-google/\n\
https\://www.nuget.org/packages/elmah\n\
https\://elmah.github.io/
ascanrules.elmah.soln = Examinez si ELMAH est r\u00e9ellement n\u00e9cessaire \u00e0 la production, et si ce n\u2019est pas le cas, d\u00e9sactivez-le. S\u2019il est n\u00e9cessaire , assurez-vous que l'acc\u00e8s \u00e0 ELMAH requiert authentification et autorisation. Voir aussi\: https\://elmah.github.io/a/securing-error-log-pages/

ascanrules.formatstring.name=Erreur de format de cha\u00eene
ascanrules.formatstring.desc=Une erreur de format de cha\u00eene s'est produite lorsque les donn\u00e9es provenant d'une cha\u00eene d'entr\u00e9e ont \u00e9t\u00e9 \u00e9valu\u00e9es comme une commande par l'application. 
ascanrules.formatstring.soln= R\u00e9\u00e9crire le programme d'arri\u00e8re-plan en supprimant de mani\u00e8re correcte les mauvaises cha\u00eenes de caract\u00e8res. Cela n\u00e9cessitera la recompilation de l'ex\u00e9cutable d'arri\u00e8re-plan .
ascanrules.formatstring.refs=https\://owasp.org/www-community/attacks/Format_string_attack
ascanrules.formatstring.error1 = \u00c9ventuelle erreur de formatage de cha\u00eene.  Le script a ferm\u00e9 la connexion sur un /%s
ascanrules.formatstring.error2 = \u00c9ventuelle erreur de formatage de cha\u00eene.  Le script a ferm\u00e9 la connexion sur un /%s et /%x
ascanrules.formatstring.error3 = \u00c9ventuelle erreur de formatage de cha\u00eene.  Le script a ferm\u00e9 la connexion sur une erreur de cha\u00eene au format microsoft

ascanrules.htaccess.name = .htaccess Information Leak
ascanrules.htaccess.desc = htaccess files can be used to alter the configuration of the Apache Web Server software to enable/disable additional functionality and features that the Apache Web Server software has to offer. 
ascanrules.htaccess.otherinfo = Based on response status code htaccess file may be protected by an authentication or authorization mechanism.
ascanrules.htaccess.refs = http\://www.htaccess-guide.com/
ascanrules.htaccess.soln = Ensure the .htaccess file is not accessible.

ascanrules.sourcecodedisclosurewebinf.name = Divulgation de Code Source - Dossier /WEB-INF
ascanrules.sourcecodedisclosurewebinf.desc = Du code source Java a \u00e9t\u00e9 d\u00e9voil\u00e9 par le serveur internet au travers des fichiers de classe Java du dossier WEB-INF. Les fichiers de classe peuvent \u00eatre d\u00e9compil\u00e9s pour produire un code source qui correspond tr\u00e8s \u00e9troitement au code source original.  
ascanrules.sourcecodedisclosurewebinf.soln = Le serveur internet devrait \u00eatre configur\u00e9 pour ne pas fournir le dossier /WEB-INF ou son contenu aux navigateurs internet, car il contient des informations sensibles telles que des fichiers de code Java compil\u00e9s et des fichiers de propri\u00e9t\u00e9s qui peuvent contenir des informations d'identification. Les classes Java d\u00e9ploy\u00e9es avec l'application devraient \u00eatre obscurcies, en guise de couche de d\u00e9fense suppl\u00e9mentaire dans une optique de "d\u00e9fense en profondeur".
ascanrules.sourcecodedisclosurewebinf.propertiesfile.name = Divulgation de fichier de propri\u00e9t\u00e9s - Dossier /WEB-INF
ascanrules.sourcecodedisclosurewebinf.propertiesfile.desc = Une classe Java du dossier /WEB-INF a d\u00e9voil\u00e9 la pr\u00e9sence du fichier de propri\u00e9t\u00e9s. Les fichiers de propri\u00e9t\u00e9s ne sont pas sens\u00e9s \u00eatre accessibles au public, car ils contiennent g\u00e9n\u00e9ralement des informations de configuration, des informations d'identification ou des cl\u00e9s cryptographiques.   
ascanrules.sourcecodedisclosurewebinf.propertiesfile.soln = Le serveur internet devrait \u00eatre configur\u00e9 pour ne pas servir le dossier /WEB-INF ou son contenu aux navigateurs internet.  Il serait \u00e9galement possible de supprimer le dossier /WEB-INF.  
ascanrules.sourcecodedisclosurewebinf.propertiesfile.extrainfo = La r\u00e9f\u00e9rence vers le fichier de propri\u00e9t\u00e9s a \u00e9t\u00e9 trouv\u00e9e dans le code source Java d\u00e9s-assembl\u00e9 de la classe Java [{0}].

ascanrules.crosssitescripting.name = Cross Site Scripting (Reflected)
ascanrules.crosssitescripting.json.name = Cross Site Scripting Weakness (Reflected in JSON Response)
ascanrules.crosssitescripting.json.desc = A XSS attack was reflected in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
ascanrules.crosssitescripting.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML

ascanrules.persistentxssattack.name=Cross Site Scripting (Persistent)
ascanrules.persistentxssattack.otherinfo=Source URL\: {0}
ascanrules.persistentxssattack.json.name = Cross Site Scripting Weakness (Persistent in JSON Response)
ascanrules.persistentxssattack.json.desc = A XSS attack was found in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
ascanrules.persistentxssattack.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML 

ascanrules.persistentxssprime.name=Cross Site Scripting (Persistent) - Prime
ascanrules.persistentxssprime.misc=N/A

ascanrules.persistentxssspider.name=Cross Site Scripting (Persistent) - Spider
ascanrules.persistentxssspider.misc=N/A

ascanrules.sqlinjection.name=Injection SQL
ascanrules.sqlinjection.desc=SQL injection may be possible.
ascanrules.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place.  \n\
In general, type check all data on the server side.\n\
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\n\
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\n\
If database Stored Procedures can be used, use them.\n\
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\n\
Do not create dynamic SQL queries using simple string concatenation.\n\
Escape all data received from the client.\n\
Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\n\
Apply the principle of least privilege by using the least privileged database user possible.\n\
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\n\
Grant the minimum database access that is necessary for the application.
ascanrules.sqlinjection.refs=https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
ascanrules.sqlinjection.alert.errorbased.attack=[{0}] champ\: [{1}], valeur [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.attack=Valeur d''Origine\: [{0}]. Valeur Modifi\u00e9e\: [{1}]. Valeur de Contr\u00f4le\: [{2}]
ascanrules.sqlinjection.alert.booleanbased.attack=[{0}] champ\: [{1}], valeur [{2}]
ascanrules.sqlinjection.alert.unionbased.attack=[{0}] champ\: [{1}], valeur [{2}]
ascanrules.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] likely, given error message regular expression [{1}] matched by the HTML results.\n\
The vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised
ascanrules.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] likely, given UNION-specific error message regular expression [{1}] matched by the HTML results\n\
The vulnerability was detected by manipulating the parameter with an SQL ''UNION'' clause to cause a database error message to be returned and recognised
ascanrules.sqlinjection.alert.expressionbased.extrainfo=The original page results were successfully replicated using the expression [{0}] as the parameter value\n\
The parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.orderbybased.extrainfo=The original page results were successfully replicated using the "ORDER BY" expression [{0}] as the parameter value\n\
The parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Le message non modifi\u00e9 donne le statut HTTP [{0}], le message modifi\u00e9 donne le statut HTTP [{1}]
ascanrules.sqlinjection.alert.errorbased.differentiation.extrainfo=Le message non modifi\u00e9 donne le statut HTTP [{0}], un corps d''une longueur [{1}], le message modifi\u00e9 donne le statut HTTP [{2}], un corps d''une longueur [{3}]. Un tiers (une injection non-SQL induisant une valeur) donne un statut HTTP [{4}], un corps d''une longueur [{5}]
ascanrules.sqlinjection.alert.booleanbased.extrainfo=The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]\n\
The parameter value being modified was {2}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.booleanbased.extrainfo.dataexists=Data was returned for the original parameter.\n\
The vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.booleanbased.extrainfo.datanotexists=Data was NOT returned for the original parameter.\n\
The vulnerability was detected by successfully retrieving more data than originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.timebased.extrainfo=Le temps de la requ\u00eate est contr\u00f4lable \u00e0 l''aide de la valeur du param\u00e8tre [{0}], qui lui fait ainsi prendre [{1}] millisecondes, alors que la requ\u00eate d''origine, non modifi\u00e9e avec la valeur [{2}] prend, quant \u00e0 elle, [{3}] millisecondes 
ascanrules.sqlinjection.authbypass.name=SQL Injection - Authentication Bypass
ascanrules.sqlinjection.authbypass.desc=SQL injection may be possible on a login page, potentially allowing the application's authentication mechanism to be bypassed 

ascanrules.externalredirect.name=External Redirect
ascanrules.externalredirect.reason.location.header=The response contains a redirect in its Location header which allows an external Url to be set.
ascanrules.externalredirect.reason.location.meta=The response contains a redirect in its meta http-equiv tag for 'Location' which allows an external Url to be set.
ascanrules.externalredirect.reason.refresh.header=The response contains a redirect in its Refresh header which allows an external Url to be set.
ascanrules.externalredirect.reason.refresh.meta=The response contains a redirect in its meta http-equiv tag for 'Refresh' which allows an external Url to be set.
ascanrules.externalredirect.reason.javascript=The response contains a redirect in its JavaScript code which allows an external Url to be set.
ascanrules.externalredirect.reason.notfound=No reason found for it...

ascanrules.codeinjection.name=Server Side Code Injection
ascanrules.codeinjection.name.asp=Server Side Code Injection - ASP Code Injection
ascanrules.codeinjection.name.php=Server Side Code Injection - PHP Code Injection
ascanrules.codeinjection.desc=A code injection may be possible including custom code that will be evaluated by the scripting engine
ascanrules.codeinjection.soln=Do not trust client side input, even if there is client side validation in place.\n\
In general, type check all data on the server side and escape all data received from the client.\n\
 Avoid the use of eval() functions combined with user input data.
ascanrules.codeinjection.refs=http\://cwe.mitre.org/data/definitions/94.html\n\
https\://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection

ascanrules.directorybrowsing.name=Directory Browsing
ascanrules.directorybrowsing.desc=It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.
ascanrules.directorybrowsing.soln=Disable directory browsing.  If this is required, make sure the listed files does not induce risks.
ascanrules.directorybrowsing.refs=http\://httpd.apache.org/docs/mod/core.html\#options\n\
http\://alamo.satlug.org/pipermail/satlug/2002-February/000053.html

ascanrules.crlfinjection.name=CRLF Injection
ascanrules.crlfinjection.desc=Cookie can be set via CRLF injection.  It may also be possible to set arbitrary HTTP response headers. In addition, by carefully crafting the injected response using cross-site script, cache poisoning vulnerability may also exist.
ascanrules.crlfinjection.soln=Type check the submitted parameter carefully.  Do not allow CRLF to be injected by filtering CRLF.
ascanrules.crlfinjection.refs=http\://www.watchfire.com/resources/HTTPResponseSplitting.pdf\n\
http\://webappfirewall.com/lib/crlf-injection.txtnull\n\
http\://www.securityfocus.com/bid/9804

ascanrules.parametertamper.name=Parameter Tampering
ascanrules.parametertamper.desc=Parameter manipulation caused an error page or Java stack trace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
ascanrules.parametertamper.soln=Identify the cause of the error and fix it.  Do not trust client side input and enforce a tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.

ascanrules.pathtraversal.name=Travers\u00e9e de chemin
ascanrules.pathtraversal.other=Check {0}

ascanrules.remotefileinclude.name=Inclusion de fichiers distants

ascanrules.serversideinclude.name=Server Side Include
ascanrules.serversideinclude.desc=Certain parameters may cause Server Side Include commands to be executed.  This may allow database connection or arbitrary code to be executed.
ascanrules.serversideinclude.soln=Do not trust client side input and enforce a tight check in the server side.  Disable server side includes.\n\

Refer=Vers la manuel pour d\u00e9sactiver la fonction Server Side Include.\n\
\n\
Utilisez les moindres privil\u00e8ges pour ex\u00e9cuter le serveur web ou applicatif.\n\
\n\
Pour Apache, d\u00e9sactivez ce qui suit\:\n\
\n\
Options Indexes FollowSymLinks Includes\n\
\n\
AddType application/x-httpd-cgi .cgi\n\
\n\
AddType text/x-server-parsed-html .html
ascanrules.serversideinclude.refs=http\://www.carleton.ca/~dmcfet/html/ssi.html

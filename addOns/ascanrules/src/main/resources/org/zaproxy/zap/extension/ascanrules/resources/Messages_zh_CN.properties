
ascanrules.bufferoverflow.desc = \u7f13\u51b2\u533a\u6ea2\u51fa\u9519\u8bef\u7684\u7279\u70b9\u662f\u8986\u76d6\u80cc\u666fweb\u8fc7\u7a0b\u5185\u5b58\u7a7a\u95f4\uff0c\u4ece\u6765\u4e0d\u8be5\u4fee\u6539\u7684\u6709\u610f\u6216\u65e0\u610f\u7684\u3002\u8986\u76d6\u7684 IP \uff08\u6307\u4ee4\u6307\u9488\uff09\u3001 BP \uff08\u57fa\u5730\u6307\u9488\uff09 \u548c\u5176\u4ed6\u5bc4\u5b58\u5668\u5bfc\u81f4\u5f02\u5e38\uff0c\u5206\u5272\u7684\u7f3a\u70b9\u548c\u5176\u4ed6\u8fc7\u7a0b\u7684\u9519\u8bef\u53d1\u751f\u3002\u901a\u5e38\u8fd9\u4e9b\u9519\u8bef\u4ee5\u610f\u60f3\u4e0d\u5230\u7684\u65b9\u5f0f\u7ed3\u675f\u5e94\u7528\u7a0b\u5e8f\u7684\u6267\u884c\u3002 
ascanrules.bufferoverflow.name = \u7f13\u51b2\u533a\u6ea2\u51fa
ascanrules.bufferoverflow.other = \u6f5c\u5728\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u3002 \u8be5\u811a\u672c\u5173\u95ed\u4e86\u8fde\u63a5\uff0c\u6254 500 \u5185\u90e8\u670d\u52a1\u5668\u9519\u8bef
ascanrules.bufferoverflow.refs = https\://owasp.org/www-community/attacks/Buffer_overflow_attack
ascanrules.bufferoverflow.soln = \u4ee5\u9002\u5f53\u7684\u8fd4\u56de\u957f\u5ea6\u68c0\u67e5\u6539\u5199\u540e\u53f0\u7a0b\u5e8f\u3002 \u8fd9\u5c06\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u80cc\u666f\u3002

ascanrules.cloudmetadata.desc = The Cloud Metadata Attack attempts to abuse a misconfigured NGINX server in order to access the instance metadata maintained by cloud service providers such as AWS, GCP and Azure.\nAll of these providers provide metadata via an internal unroutable IP address '169.254.169.254' - this can be exposed by incorrectly configured NGINX servers and accessed by using this IP address in the Host header field.
ascanrules.cloudmetadata.name = Cloud Metadata Potentially Exposed
ascanrules.cloudmetadata.otherinfo = Based on the successful response status code cloud metadata may have been returned in the response. Check the response data to see if any cloud metadata has been returned.\nThe meta data returned can include information that would allow an attacker to completely compromise the system.
ascanrules.cloudmetadata.refs = https\://www.nginx.com/blog/trust-no-one-perils-of-trusting-user-input/
ascanrules.cloudmetadata.soln = Do not trust any user data in NGINX configs. In this case it is probably the use of the $host variable which is set from the 'Host' header and can be controlled by an attacker.

ascanrules.codeinjection.desc = A code injection may be possible including custom code that will be evaluated by the scripting engine
ascanrules.codeinjection.name = \u670d\u52a1\u5668\u7aef\u4ee3\u7801\u6ce8\u5165
ascanrules.codeinjection.name.asp = \u670d\u52a1\u7aef\u4ee3\u7801\u6ce8\u5165\u2014\u2014ASP \u4ee3\u7801\u6ce8\u5165
ascanrules.codeinjection.name.php = \u670d\u52a1\u7aef\u4ee3\u7801\u6ce8\u5165\u2014\u2014PHP \u4ee3\u7801\u6ce8\u5165
ascanrules.codeinjection.refs = http\://cwe.mitre.org/data/definitions/94.html\nhttps\://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection
ascanrules.codeinjection.soln = Do not trust client side input, even if there is client side validation in place.\nIn general, type check all data on the server side and escape all data received from the client.\n Avoid the use of eval() functions combined with user input data.

ascanrules.commandinjection.desc = Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.
ascanrules.commandinjection.name = \u8fdc\u7a0b OS \u547d\u4ee4\u6ce8\u5165
ascanrules.commandinjection.otherinfo.feedback-based = The scan rule was able to retrieve the content of a file or command by sending [{0}] to the operating system running this application
ascanrules.commandinjection.otherinfo.time-based = The scan rule was able to control the timing of the application response by sending [{0}] to the operating system running this application
ascanrules.commandinjection.refs = http\://cwe.mitre.org/data/definitions/78.html\nhttps\://owasp.org/www-community/attacks/Command_Injection

ascanrules.crlfinjection.desc = Cookie can be set via CRLF injection.  It may also be possible to set arbitrary HTTP response headers. In addition, by carefully crafting the injected response using cross-site script, cache poisoning vulnerability may also exist.
ascanrules.crlfinjection.name = CRLF \u6ce8\u5165
ascanrules.crlfinjection.refs = http\://www.watchfire.com/resources/HTTPResponseSplitting.pdf\nhttp\://webappfirewall.com/lib/crlf-injection.txtnull\nhttp\://www.securityfocus.com/bid/9804
ascanrules.crlfinjection.soln = Type check the submitted parameter carefully.  Do not allow CRLF to be injected by filtering CRLF.

ascanrules.crosssitescripting.json.desc = A XSS attack was reflected in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
ascanrules.crosssitescripting.json.name = Cross Site Scripting Weakness (Reflected in JSON Response)
ascanrules.crosssitescripting.name = \u53cd\u5c04\u578b\u8de8\u7ad9\u811a\u672c\u653b\u51fb
ascanrules.crosssitescripting.otherinfo.accesskey = The accesskey attribute specifies a shortcut key to activate/focus an element. This attribute can trigger payloads for non-conventional or custom tags.
ascanrules.crosssitescripting.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML

ascanrules.desc = Release status active scan rules

ascanrules.directorybrowsing.desc = It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.
ascanrules.directorybrowsing.name = Directory Browsing
ascanrules.directorybrowsing.refs = http\://httpd.apache.org/docs/mod/core.html\#options\nhttp\://alamo.satlug.org/pipermail/satlug/2002-February/000053.html
ascanrules.directorybrowsing.soln = Disable directory browsing.  If this is required, make sure the listed files does not induce risks.

ascanrules.elmah.desc = \u53d1\u73b0\u9519\u8bef\u8bb0\u5f55\u6a21\u5757\u548c\u5904\u7406\u7a0b\u5e8f\uff08ELMAH[elmah.axd]\uff09HTTP\u6a21\u5757\u53ef\u7528\u3002\u8fd9\u4e2a\u6a21\u5757\u53ef\u80fd\u4f1a\u6cc4\u6f0f\u5927\u91cf\u6709\u4ef7\u503c\u7684\u4fe1\u606f
ascanrules.elmah.name = ELMAH\u4fe1\u606f\u6cc4\u6f0f
ascanrules.elmah.otherinfo = \u57fa\u4e8e\u54cd\u5e94\u72b6\u6001\u4ee3\u7801ELMAH\u53ef\u80fd\u53d7\u5230\u8eab\u4efd\u9a8c\u8bc1\u6216\u8005\u6388\u6743\u673a\u5236\u7684\u4fdd\u62a4  
ascanrules.elmah.refs = https//www.troyhunt.com/aspnet-session-hijacking-with-google/\nhttp\://www.nuget.org/packages/elmah\nhttp\://Elma\u2019s.github.io/
ascanrules.elmah.soln = \u8003\u8651\u5728\u751f\u4ea7\u4e2d\u662f\u5426\u9700\u8981ELMAH\uff0c\u5982\u679c\u6ca1\u6709\u5219\u7981\u6b62\u4f7f\u7528\u3002\u5982\u679c\u662f\u8fd9\u6837\uff0c\u5219\u786e\u4fdd\u5bf9\u5b83\u7684\u8bbf\u95ee\u9700\u8981\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\u3002\u53c2\u89c1\:https\://elmah.github.io/a/securing-error-log-pages/

ascanrules.envfiles.desc = One or more .env files seems to have been located on the server. These files often expose infrastructure or administrative account credentials, API or APP keys, or other sensitive configuration information. 
ascanrules.envfiles.name = .env Information Leak
ascanrules.envfiles.otherinfo = Based on response status code the .env file may be protected by an authentication or authorization mechanism.
ascanrules.envfiles.refs = https\://www.google.com/search?q\=db_password+filetype%3Aenv\nhttps\://mobile.twitter.com/svblxyz/status/1045013939904532482
ascanrules.envfiles.soln = Ensure the .env file is not accessible.

ascanrules.externalredirect.name = \u5916\u90e8\u91cd\u5b9a\u5411
ascanrules.externalredirect.reason.javascript = The response contains a redirect in its JavaScript code which allows an external Url to be set.
ascanrules.externalredirect.reason.location.header = The response contains a redirect in its Location header which allows an external Url to be set.
ascanrules.externalredirect.reason.location.meta = The response contains a redirect in its meta http-equiv tag for 'Location' which allows an external Url to be set.
ascanrules.externalredirect.reason.notfound = No reason found for it...
ascanrules.externalredirect.reason.refresh.header = The response contains a redirect in its Refresh header which allows an external Url to be set.
ascanrules.externalredirect.reason.refresh.meta = The response contains a redirect in its meta http-equiv tag for 'Refresh' which allows an external Url to be set.

ascanrules.formatstring.desc = \u683c\u5f0f\u5b57\u7b26\u4e32\u9519\u8bef\u53d1\u751f\u5f53\u6240\u63d0\u4ea4\u7684\u6570\u636e\u7684\u8f93\u5165\u5b57\u7b26\u4e32\u88ab\u8bc4\u4e3a\u547d\u4ee4\u7531\u5e94\u7528\u7a0b\u5e8f\u3002 
ascanrules.formatstring.error1 = \u6f5c\u5728\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u51fa\u9519\u3002\u811a\u672c\u5173\u95ed\u4e86 /%s \u7684\u8fde\u63a5
ascanrules.formatstring.error2 = \u6f5c\u5728\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u65f6\u51fa\u9519\u3002 \u8be5\u811a\u672c\u5173\u95ed /%s \u548c /%x \u7684\u8fde\u63a5
ascanrules.formatstring.error3 = \u6f5c\u5728\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u51fa\u9519\u3002 \u8be5\u811a\u672c\u5173\u95ed\u5728\u5fae\u8f6f\u4e0a\u683c\u5f0f\u5b57\u7b26\u4e32\u9519\u8bef\u7684\u8fde\u63a5
ascanrules.formatstring.name = \u683c\u5f0f\u5b57\u7b26\u4e32\u9519\u8bef
ascanrules.formatstring.refs = https\://owasp.org/www-community/attacks/Format_string_attack
ascanrules.formatstring.soln = \u4f7f\u7528\u6b63\u786e\u5220\u9664\u574f\u5b57\u7b26\u4e32\u6539\u5199\u540e\u53f0\u7a0b\u5e8f\u3002 \u8fd9\u5c06\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u80cc\u666f\u3002

ascanrules.getforpost.desc = A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to Cross-Site Scripting (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible.
ascanrules.getforpost.name = GET for POST
ascanrules.getforpost.soln = Ensure that only POST is accepted where POST is expected.

ascanrules.heartbleed.desc = The TLS implementation in OpenSSL 1.0.1 before 1.0.1g does not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, potentially disclosing sensitive information.
ascanrules.heartbleed.extrainfo = This issue was confirmed by exfiltrating data from the server, using {0}. This is unlikely to be a false positive.
ascanrules.heartbleed.name = \u5fc3\u810f\u51fa\u8840\u6f0f\u6d1eOpenSSL\u7684\u6f0f\u6d1e
ascanrules.heartbleed.refs = https\://nvd.nist.gov/vuln/detail/CVE-2014-0160
ascanrules.heartbleed.soln = Update to OpenSSL 1.0.1g or later. Re-issue HTTPS certificates. Change asymmetric private keys and shared secret keys, since these may have been compromised, with no evidence of compromise in the server log files.

ascanrules.hidden.files.alert.name = Hidden File Found
ascanrules.hidden.files.desc = A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.
ascanrules.hidden.files.name = Hidden File Finder
ascanrules.hidden.files.otherinfo = {0}
ascanrules.hidden.files.refs = https\://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html
ascanrules.hidden.files.soln = Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.

ascanrules.htaccess.desc = htaccess files can be used to alter the configuration of the Apache Web Server software to enable/disable additional functionality and features that the Apache Web Server software has to offer. 
ascanrules.htaccess.name = .htaccess \u4fe1\u606f\u6cc4\u9732
ascanrules.htaccess.otherinfo = Based on response status code htaccess file may be protected by an authentication or authorization mechanism.
ascanrules.htaccess.refs = http\://www.htaccess-guide.com/
ascanrules.htaccess.soln = Ensure the .htaccess file is not accessible.

ascanrules.name = \u4e3b\u52a8\u626b\u63cf\u89c4\u5219

ascanrules.paddingoracle.desc = By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely 'padding oracle' vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This rule should detect the MS10-070 padding oracle vulnerability in ASP.net if CustomErrors are enabled for that.
ascanrules.paddingoracle.name = Generic Padding Oracle
ascanrules.paddingoracle.refs = http\://netifera.com/research/\nhttp\://www.microsoft.com/technet/security/bulletin/ms10-070.mspx\nhttp\://www.mono-project.com/Vulnerabilities\#ASP.NET_Padding_Oracle\nhttps\://bugzilla.redhat.com/show_bug.cgi?id\=623799
ascanrules.paddingoracle.soln = Update the affected server software, or modify the scripts so that they properly validate encrypted data before attempting decryption.

ascanrules.parametertamper.desc = Parameter manipulation caused an error page or Java stack trace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
ascanrules.parametertamper.name = \u53c2\u6570\u7be1\u6539
ascanrules.parametertamper.soln = Identify the cause of the error and fix it.  Do not trust client side input and enforce a tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.

ascanrules.pathtraversal.name = \u8def\u5f84\u904d\u5386

ascanrules.payloader.desc = Provides support for custom payloads in scan rules.
ascanrules.payloader.name = Active Scan Rules Custom Payloads

ascanrules.persistentxssattack.json.desc = A XSS attack was found in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
ascanrules.persistentxssattack.json.name = Cross Site Scripting Weakness (Persistent in JSON Response)
ascanrules.persistentxssattack.name = \u6301\u7eed\u6027\u8de8\u7ad9\u811a\u672c\u653b\u51fb
ascanrules.persistentxssattack.otherinfo = Source URL\: {0}
ascanrules.persistentxssattack.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML 

ascanrules.persistentxssprime.misc = \u4e0d\u9002\u7528
ascanrules.persistentxssprime.name = Cross Site Scripting (Persistent) - Prime

ascanrules.persistentxssspider.misc = \u4e0d\u9002\u7528
ascanrules.persistentxssspider.name = Cross Site Scripting (Persistent) - Spider

ascanrules.remotecodeexecution.cve-2012-1823.desc = \u67d0\u4e9bPHP\u7248\u672c\u5728\u8bbe\u7f6e\u4e3a\u7528CGI\u8fd0\u884c\u65f6\uff0c\u4e0d\u80fd\u6b63\u786e\u5904\u7406\u7f3a\u5c11\u975e\u8f6c\u4e49\u201c\=\u201d\u5b57\u7b26\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\uff0c\u4f7f\u5f97\u4efb\u610f\u4ee3\u7801\u6267\u884c\u6210\u4e3a\u53ef\u80fd\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u4f1a\u5f15\u53d1\u64cd\u4f5c\u7cfb\u7edf\u547d\u4ee4\u5728Web\u670d\u52a1\u5668\u4e0a\u6267\u884c\uff0c\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u81f3\u7f51\u9875\u6d4f\u89c8\u5668\u3002 
ascanrules.remotecodeexecution.cve-2012-1823.name = \u6267\u884c\u8fdc\u7a0b\u4ee3\u7801\uff1aCVE-2012-1823
ascanrules.remotecodeexecution.cve-2012-1823.soln = \u5347\u7ea7\u5230PHP\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u672c\uff0c\u6216\u4f7f\u7528Apache Web\u670d\u52a1\u5668\u548cmod_rewrite\u6a21\u5757\uff0c\u7528\u201cRewriteCond\u201d\u548c\u201cRewriteRule\u201d\u6307\u4ee4\u6765\u8fc7\u6ee4\u6389\u6076\u610f\u8bf7\u6c42\u3002

ascanrules.remotefileinclude.name = \u8fdc\u7a0b\u6587\u4ef6\u5305\u542b

ascanrules.serversideinclude.desc = Certain parameters may cause Server Side Include commands to be executed.  This may allow database connection or arbitrary code to be executed.
ascanrules.serversideinclude.name = \u670d\u52a1\u5668\u7aef\u5305\u542b
ascanrules.serversideinclude.refs = http\://www.carleton.ca/~dmcfet/html/ssi.html
ascanrules.serversideinclude.soln = Do not trust client side input and enforce a tight check in the server side. Disable server side includes.\nRefer to manual to disable Sever Side Include.\nUse least privilege to run your web server or application server.\nFor Apache, disable the following\:\nOptions Indexes FollowSymLinks Includes\nAddType application/x-httpd-cgi .cgi\nAddType text/x-server-parsed-html .html

ascanrules.sourcecodedisclosurecve-2012-1823.desc = Some PHP versions, when configured to run using CGI, do not correctly handle query strings that lack an unescaped "\=" character, enabling PHP source code disclosure, and arbitrary code execution. In this case, the contents of the PHP file were served directly to the web browser. This output will typically contain PHP, although it may also contain straight HTML.
ascanrules.sourcecodedisclosurecve-2012-1823.name = Source Code Disclosure - CVE-2012-1823
ascanrules.sourcecodedisclosurecve-2012-1823.soln = \u5347\u7ea7\u5230PHP\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u672c\uff0c\u6216\u4f7f\u7528Apache Web\u670d\u52a1\u5668\u548cmod_rewrite\u6a21\u5757\uff0c\u7528\u201cRewriteCond\u201d\u548c\u201cRewriteRule\u201d\u6307\u4ee4\u6765\u8fc7\u6ee4\u6389\u6076\u610f\u8bf7\u6c42\u3002

ascanrules.sourcecodedisclosurewebinf.desc = Java source code was disclosed by the web server in Java class files in the WEB-INF folder. The class files can be dis-assembled to produce source code which very closely matches the original source code.  
ascanrules.sourcecodedisclosurewebinf.name = \u6e90\u4ee3\u7801\u62ab\u9732\u2014\u2014/WEB-INF \u6587\u4ef6\u5939
ascanrules.sourcecodedisclosurewebinf.propertiesfile.desc = A Java class in the /WEB-INF folder disclosed the presence of the properties file. Properties file are not intended to be publicly accessible, and typically contain configuration information, application credentials, or cryptographic keys.   
ascanrules.sourcecodedisclosurewebinf.propertiesfile.extrainfo = The reference to the properties file was found in the dis-assembled Java source code for Java class [{0}].
ascanrules.sourcecodedisclosurewebinf.propertiesfile.name = \u5c5e\u6027\u6587\u4ef6\u62ab\u9732\u2014\u2014/WEB-INF \u6587\u4ef6\u5939
ascanrules.sourcecodedisclosurewebinf.propertiesfile.soln = The web server should be configured to not serve the /WEB-INF folder or its contents to web browsers.  It may also be possible to remove the /WEB-INF folder.  
ascanrules.sourcecodedisclosurewebinf.soln = The web server should be configured to not serve the /WEB-INF folder or its contents to web browsers, since it contains sensitive information such as compiled Java source code and properties files which may contain credentials. Java classes deployed with the application should be obfuscated, as an additional layer of defence in a "defence-in-depth" approach.

#ascanrules.sqlinjection.alert.errorbased.attack={1}
ascanrules.sqlinjection.alert.booleanbased.attack = field\: [{0}], value [{1}]
ascanrules.sqlinjection.alert.booleanbased.extrainfo = The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]\nThe parameter value being modified was {2}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.booleanbased.extrainfo.dataexists = Data was returned for the original parameter.\nThe vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.booleanbased.extrainfo.datanotexists = Data was NOT returned for the original parameter.\nThe vulnerability was detected by successfully retrieving more data than originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.errorbased.attack = [{0}] field\: [{1}], value [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.attack = Original Value\: [{0}]. Modified Value\: [{1}]. Control Value\: [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.extrainfo = Unmodified message gave HTTP status [{0}], body of length [{1}], modified message gave HTTP status [{2}], body of length [{3}]. A third (non-SQL injection inducing value) gave HTTP status [{4}], body of length [{5}]
ascanrules.sqlinjection.alert.errorbased.extrainfo = RDBMS [{0}] likely, given error message regular expression [{1}] matched by the HTML results.\nThe vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised
ascanrules.sqlinjection.alert.errorbased.httpstatuscode.extrainfo = Unmodified message gave HTTP status [{0}], modified message gave HTTP status [{1}]
ascanrules.sqlinjection.alert.expressionbased.extrainfo = The original page results were successfully replicated using the expression [{0}] as the parameter value\nThe parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.orderbybased.extrainfo = The original page results were successfully replicated using the "ORDER BY" expression [{0}] as the parameter value\nThe parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.timebased.extrainfo = The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds 
ascanrules.sqlinjection.alert.unionbased.attack = [{0}] field\: [{1}], value [{2}]
ascanrules.sqlinjection.alert.unionbased.extrainfo = RDBMS [{0}] likely, given UNION-specific error message regular expression [{1}] matched by the HTML results\nThe vulnerability was detected by manipulating the parameter with an SQL ''UNION'' clause to cause a database error message to be returned and recognised
ascanrules.sqlinjection.authbypass.desc = SQL injection may be possible on a login page, potentially allowing the application's authentication mechanism to be bypassed
ascanrules.sqlinjection.authbypass.name = SQL \u6ce8\u5165\u2014\u2014\u8eab\u4efd\u9a8c\u8bc1\u7ed5\u8fc7
ascanrules.sqlinjection.desc = SQL injection may be possible.
ascanrules.sqlinjection.hypersonic.name = SQL Injection - Hypersonic SQL
ascanrules.sqlinjection.mssql.alert.timebased.extrainfo = The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds.
ascanrules.sqlinjection.mssql.name = SQL Injection - MsSQL
ascanrules.sqlinjection.mysql.name = SQL Injection - MySQL
ascanrules.sqlinjection.name = SQL \u6ce8\u5165
ascanrules.sqlinjection.oracle.name = SQL Injection - Oracle
ascanrules.sqlinjection.postgres.name = SQL Injection - PostgreSQL
ascanrules.sqlinjection.refs = https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
ascanrules.sqlinjection.soln = Do not trust client side input, even if there is client side validation in place.\nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\nApply the principle of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.
ascanrules.sqlinjection.sqlite.alert.errorbased.extrainfo = The following known SQLite error message was provoked\: [{0}].
ascanrules.sqlinjection.sqlite.alert.timebased.extrainfo = The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, parameter value [{2}], which caused the request to take [{3}] milliseconds, when the original unmodified query with value [{4}] took [{5}] milliseconds.
ascanrules.sqlinjection.sqlite.alert.versionnumber.extrainfo = Using a UNION based SQL Injection attack, and by exploiting SQLite''s dynamic typing mechanism, the SQLite version was determined to be [{0}].\nWith string-based injection points, full SQLite version information can be extracted, but with numeric injection points, only partial SQLite version information can be extracted.\nMore information on SQLite version [{0}] is available at http\://www.sqlite.org/changes.html
ascanrules.sqlinjection.sqlite.name = SQL Injection - SQLite

ascanrules.traceaxd.desc = The ASP.NET Trace Viewer (trace.axd) was found to be available. This component can leak a significant amount of valuable information.
ascanrules.traceaxd.name = Trace.axd Information Leak
ascanrules.traceaxd.otherinfo = Based on response status code Trace Viewer may be protected by an authentication or authorization mechanism.  
ascanrules.traceaxd.refs = https\://msdn.microsoft.com/en-us/library/bb386420.aspx\nhttps\://msdn.microsoft.com/en-us/library/wwh16c6c.aspx\nhttps\://www.dotnetperls.com/trace
ascanrules.traceaxd.soln = Consider whether or not Trace Viewer is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization.

ascanrules.useragent.desc = Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.
ascanrules.useragent.name = User Agent Fuzzer
ascanrules.useragent.refs = https\://owasp.org/wstg
ascanrules.useragent.useragentparmname = Header User-Agent

ascanrules.xsltinjection.command.otherinfo = Command execution may be possible.
ascanrules.xsltinjection.desc = Injection using XSL transformations may be possible, and may allow an attacker to read system information, read and write files, or execute arbitrary code.
ascanrules.xsltinjection.error.otherinfo = The response to sending an XSLT token included error messages that may indicate a vulnerability to XSLT injections.
ascanrules.xsltinjection.name = XSLT Injection
ascanrules.xsltinjection.portscan.otherinfo = Port scanning may be possible.
ascanrules.xsltinjection.refs = https\://www.contextis.com/blog/xslt-server-side-injection-attacks
ascanrules.xsltinjection.soln = Sanitize and analyze every user input coming from any client-side.
ascanrules.xsltinjection.vendor.otherinfo = The XSLT processor vendor name "{0}" was returned after an injection request.

ascanrules.xxe.name = XML External Entity Attack

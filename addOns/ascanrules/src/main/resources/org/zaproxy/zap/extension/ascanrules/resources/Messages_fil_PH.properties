ascanrules.desc = Release status active scan rules
ascanrules.name = Active Scan Rules

ascanrules.bufferoverflow.name = Pag-apaw ng Buffer
ascanrules.bufferoverflow.desc = Ang mga error sa buffer overflow ay nailalarawan sa pamamagitan ng overwriting ng mga puwang ng memorya ng proseso ng web sa background, na hindi dapat na baguhin nang sinadya o hindi sinasadya. Ang mga halaga ng overwriting ng IP (Tagubilin sa Pagtuturo), BP (Base Pointer) at iba pang mga registro ay nagdudulot ng mga pagbubukod, pagkakamali ng segmentation, at iba pang mga error sa proseso na magaganap. Kadalasan ang mga error na ito ay tumigil sa pagpapatupad ng application sa isang di-inaasahang paraan. 
ascanrules.bufferoverflow.soln = Muling isulat ang programang pang-background gamit ang tamang return length checking. Ito ay mangangailangan ng pag-recompile ng executable ng background.
ascanrules.bufferoverflow.refs = https\://owasp.org/www-community/attacks/Buffer_overflow_attack
ascanrules.bufferoverflow.other = Potensyal na Buffer Overflow. Isinara ng script ang koneksyon at inihagis ang isang 500 Internal Error Server

ascanrules.cloudmetadata.name = Cloud Metadata Potentially Exposed
ascanrules.cloudmetadata.desc = The Cloud Metadata Attack attempts to abuse a misconfigured NGINX server in order to access the instance metadata maintained by cloud service providers such as AWS, GCP and Azure.\n\
\n\
All of these providers provide metadata via an internal unroutable IP address '169.254.169.254' - this can be exposed by incorrectly configured NGINX servers and accessed by using this IP address in the Host header field.
ascanrules.cloudmetadata.otherinfo = Based on the successful response status code cloud metadata may have been returned in the response. Check the response data to see if any cloud metadata has been returned.\n\
\n\
The meta data returned can include information that would allow an attacker to completely compromise the system.
ascanrules.cloudmetadata.refs = https\://www.nginx.com/blog/trust-no-one-perils-of-trusting-user-input/
ascanrules.cloudmetadata.soln = Do not trust any user data in NGINX configs. In this case it is probably the use of the $host variable which is set from the 'Host' header and can be controlled by an attacker.

ascanrules.commandinjection.name=Remote OS Command Injection
ascanrules.commandinjection.desc=Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.
ascanrules.commandinjection.refs=http\://cwe.mitre.org/data/definitions/78.html\n\
https\://owasp.org/www-community/attacks/Command_Injection
ascanrules.commandinjection.otherinfo.feedback-based=The scan rule was able to retrieve the content of a file or command by sending [{0}] to the operating system running this application
ascanrules.commandinjection.otherinfo.time-based=The scan rule was able to control the timing of the application response by sending [{0}] to the operating system running this application

ascanrules.elmah.name = ELMAH tagas na inpormasyon
ascanrules.elmah.desc = Ang Mga Error Module at Handler (ELMAH [elmah.axd]) Ang HTTP Module ay natagpuan na magagamit. Ang module na ito ay maaaring tumagas ng isang malaking halaga ng mahalagang impormasyon.
ascanrules.elmah.otherinfo = Batay sa code ng katayuan ng tugon Ang ELMAH ay maaaring protektado ng mekanismo ng pagpapatotoo o awtorisasyon.  
ascanrules.elmah.refs = https\://www.troyhunt.com/aspnet-session-hijacking-with-google/\n\
https\://www.nuget.org/packages/elmah\n\
https\://elmah.github.io/
ascanrules.elmah.soln = Isaalang-alang kung o hindi ang ELMAH ay talagang kinakailangan sa produksyon, kung hindi pagkatapos ay huwag paganahin ito. Kung pagkatapos ay tiyakin na ang access dito ay nangangailangan ng pagpapatotoo at pahintulot. Tingnan din ang\: https\://elmah.github.io/a/securing-error-log-pages/

ascanrules.envfiles.name = .env Information Leak
ascanrules.envfiles.desc = One or more .env files seems to have been located on the server. These files often expose infrastructure or administrative account credentials, API or APP keys, or other sensitive configuration information. 
ascanrules.envfiles.otherinfo = Based on response status code the .env file may be protected by an authentication or authorization mechanism.
ascanrules.envfiles.refs = https\://www.google.com/search?q\=db_password+filetype%3Aenv\n\
https\://mobile.twitter.com/svblxyz/status/1045013939904532482
ascanrules.envfiles.soln = Ensure the .env file is not accessible.

ascanrules.formatstring.name=Mali sa String ng Format
ascanrules.formatstring.desc=Isang Format Ang error sa String ay nangyayari kapag ang naisumite na data ng input string ay sinusuri bilang isang utos ng application. 
ascanrules.formatstring.soln= Muling isulat ang programang pang-background gamit ang tamang pagtanggal ng mga masamang string ng character. Ito ay mangangailangan ng pag-recompile ng executable ng background.
ascanrules.formatstring.refs=https\://owasp.org/www-community/attacks/Format_string_attack
ascanrules.formatstring.error1 = Potensyal sa Pag-format ng String Error. Isinara ng script ang koneksyon sa isang  /%s
ascanrules.formatstring.error2 = Potential sa Pag-format ng String Error. Isinara ng script ang koneksyon sa isang /%s at /%x
ascanrules.formatstring.error3 = Potensyal sa Pag-format ng String Error. Isinara ng script ang koneksyon sa microsoft format string error

ascanrules.getforpost.name=GET for POST
ascanrules.getforpost.desc=A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to Cross-Site Scripting (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible.
ascanrules.getforpost.soln=Ensure that only POST is accepted where POST is expected.

ascanrules.heartbleed.name=Heartbleed OpenSSL Vulnerability
ascanrules.heartbleed.desc=Ang pagpapatupad ng TLS sa OpenSSL 1.0.1 bago 1.0.1g ay hindi maayos na pinangangasiwaan ang mga packet ng Heartbeat Extension, na nagpapahintulot sa mga remote attackers na makakuha ng sensitibong impormasyon mula sa memorya ng proseso sa pamamagitan ng mga naka-pack na packet na nagpapalitaw ng buffer over-read, potensyal na ibubunyag ang sensitibong impormasyon.
ascanrules.heartbleed.soln=I-update sa OpenSSL 1.0.1g o mas bago. Muling na-isyu ang mga sertipiko ng HTTPS. Baguhin ang mga walang-pribadong mga pribadong key at nakabahagi ng mga lihim na key, dahil ang mga ito ay maaaring naka-kompromiso, na walang katibayan ng pagkompromiso sa mga file ng log ng server.
ascanrules.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
ascanrules.heartbleed.extrainfo=Ang kumpirmasyong ito ay nakumpirma sa pamamagitan ng exfiltrating data mula sa server, gamit ang {0}. Ito ay malamang na hindi isang positibong mali.

ascanrules.hidden.files.name = Hidden File Finder
ascanrules.hidden.files.alert.name = Hidden File Found
ascanrules.hidden.files.desc = A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.
ascanrules.hidden.files.otherinfo = {0}
ascanrules.hidden.files.refs = https\://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html
ascanrules.hidden.files.soln = Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.

ascanrules.htaccess.name = .htaccess Information Leak
ascanrules.htaccess.desc = htaccess files can be used to alter the configuration of the Apache Web Server software to enable/disable additional functionality and features that the Apache Web Server software has to offer. 
ascanrules.htaccess.otherinfo = Based on response status code htaccess file may be protected by an authentication or authorization mechanism.
ascanrules.htaccess.refs = http\://www.htaccess-guide.com/
ascanrules.htaccess.soln = Ensure the .htaccess file is not accessible.

ascanrules.paddingoracle.name=Generic Padding Oracle
ascanrules.paddingoracle.desc=By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely 'padding oracle' vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This rule should detect the MS10-070 padding oracle vulnerability in ASP.net if CustomErrors are enabled for that.
ascanrules.paddingoracle.soln=I-update ang mga apektadong server software, o baguhin ang mga script para sila ay maayos na pag-validate sa encrypted na data bago sumubok ng pag descrypton.
ascanrules.paddingoracle.refs=http\://netifera.com/research/\n\
http\://www.microsoft.com/technet/security/bulletin/ms10-070.mspx\n\
http\://www.mono-project.com/Vulnerabilities\#ASP.NET_Padding_Oracle\n\
https\://bugzilla.redhat.com/show_bug.cgi?id\=623799

ascanrules.payloader.desc=Provides support for custom payloads in scan rules.
ascanrules.payloader.name=Active Scan Rules Custom Payloads

ascanrules.remotecodeexecution.cve-2012-1823.name = Remote Code Execution - CVE-2012-1823
ascanrules.remotecodeexecution.cve-2012-1823.desc = Ang ilang mga bersyon ng PHP, kapag na-configure upang patakbuhin ang paggamit ng CGI, ay hindi tama ang humahawak ng mga string ng query na walang kakayahang magamit na "\=" na karakter, na nagpapagana ng arbitrary na pagpapatupad ng code. Sa kasong ito, ang isang utos ng operating system ay sanhi upang maisagawa sa web server, at ang mga resulta ay ibinalik sa web browser. 
ascanrules.remotecodeexecution.cve-2012-1823.soln = Mag-upgrade sa pinakabagong matatag na bersyon ng PHP, o gamitin ang web server ng Apache at mod_rewrite module upang i-filter ang mga nakakahamak na kahilingan gamit ang direktiba ng "RewriteCond" at "RewriteRule".

ascanrules.sourcecodedisclosurecve-2012-1823.name = Source Code Disclosure - CVE-2012-1823
ascanrules.sourcecodedisclosurecve-2012-1823.desc = Ibang mga PHP na mga bersyon, na kung na-configure ay ito ay pinagana gamit ang CGI, huwag nang hawakan ng maayos ang query na mga string na nakukulang ng unescaped "-" na karakter, na nagpapagana ng PHP source code disclosure, at ang arbitrary code excution. sa halimbawang ito, ang mga laman ng PHP file ay maglingod ng direkta sa web browser. Ang output ay karamihan naglalaman ng PHP, Bagamat ito ay naglalaman din ng straight HTML.
ascanrules.sourcecodedisclosurecve-2012-1823.soln = Mag-upgrade sa pinakabagong matatag na bersyon ng PHP, o gamitin ang web server ng Apache at mod_rewrite module upang i-filter ang mga nakakahamak na kahilingan gamit ang direktiba ng "RewriteCond" at "RewriteRule".


ascanrules.sourcecodedisclosurewebinf.name = Source Code Disclosure - /WEB-INF folder
ascanrules.sourcecodedisclosurewebinf.desc = Java source code ay ibinunyag sa web server ng Java class na mga files na nasa WEB-INF folder. Ang class na mga file ay pwedeng ma dis-assembled sa ginawang source code na alin na naka dikit na magtutugma sa orihinal na source code.  
ascanrules.sourcecodedisclosurewebinf.soln = Ang web server ay dapat nakaayos na hindi maglingkod sa /WEB-INF o nilalaman nito sa mga browser ng web. dahil ito ay naglalaman ng sensitibong impormasyon tulad ng tinipon na Java source code at mg akatangian ng file na maaring maglaman ng mga kredensyal. Mga klase ng Java na nakatalaga sa mga aplikasyon na ito ay dapat maging obfuscated, bilang isang karagdagang patong ng pagtatanggol sa isang "pagtatanggol-nang malalim" na diskarte.
ascanrules.sourcecodedisclosurewebinf.propertiesfile.name = Properties File Disclosure - /WEB-INF folder
ascanrules.sourcecodedisclosurewebinf.propertiesfile.desc = Ang Java class na nasa /WEB-INF folder ay ibinunyag ang presence sa katangian ng file. Maga katangian ng file ay hindi maging hayag sa publiko, at karaniwang ay nag lalaman ng mga kumpigurasyon ng impormasyon m ang mga kredensyal ng aplikasyon o crypyographic keys.   
ascanrules.sourcecodedisclosurewebinf.propertiesfile.soln = Ang web sever na ito ay dapat nakaayos hindi maglingkod sa /WEB-INF folder o nilalaman nito sa mga web browser. Maari din itong maging posible upang alisin ang mga folder ng /WEB-INF folder.  
ascanrules.sourcecodedisclosurewebinf.propertiesfile.extrainfo = Ang pagtukoy sa mga katangian ng file ay matatagpuan sa dis-nakatipong Java source code para sa mga klase ng java [{0}].


ascanrules.crosssitescripting.name = Cross Site Scripting (Reflected)
ascanrules.crosssitescripting.json.name = Cross Site Scripting Weakness (Reflected in JSON Response)
ascanrules.crosssitescripting.json.desc = A XSS attack was reflected in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
ascanrules.crosssitescripting.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML
ascanrules.crosssitescripting.otherinfo.accesskey = The accesskey attribute specifies a shortcut key to activate/focus an element. This attribute can trigger payloads for non-conventional or custom tags.

ascanrules.persistentxssattack.name=Cross Site Scripting (Persistent)
ascanrules.persistentxssattack.otherinfo=Source URL\: {0}
ascanrules.persistentxssattack.json.name = Cross Site Scripting Weakness (Persistent in JSON Response)
ascanrules.persistentxssattack.json.desc = A XSS attack was found in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
ascanrules.persistentxssattack.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML 

ascanrules.persistentxssprime.name=Cross Site Scripting (Persistent) - Prime
ascanrules.persistentxssprime.misc=N/A

ascanrules.persistentxssspider.name=Cross Site Scripting (Persistent) - Spider
ascanrules.persistentxssspider.misc=N/A

ascanrules.sqlinjection.name=SQL Injection
ascanrules.sqlinjection.desc=Maaaring posible ang SQL injection
ascanrules.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place. \n\
In general, type check all data on the server side.\n\
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\n\
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\n\
If database Stored Procedures can be used, use them.\n\
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\n\
Do not create dynamic SQL queries using simple string concatenation.\n\
Escape all data received from the client.\n\
Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\n\
Apply the privilege of least privilege by using the least privileged database user possible.\n\
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\n\
Grant the minimum database access that is necessary for the application.
ascanrules.sqlinjection.refs=https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
ascanrules.sqlinjection.alert.errorbased.attack=[{0}] patlang\: [{1}], halaga [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.attack=Orihinal na halaga\: [{0}] Binago na halaga [{1}]. Hawak ng Halaga\: [{2}]
ascanrules.sqlinjection.alert.booleanbased.attack=patlang\: [{0}], halaga [{1}]
ascanrules.sqlinjection.alert.unionbased.attack=[{0}] patlang\: [{1}], halaga [{2}]
ascanrules.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] malamang, ibinigay ang maling mensahe ng fragment [{1}] sa mga resulta ng HTML
ascanrules.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] malamang, ibinigay ang UNION-specific na mensahe na fragment [{1}] sa mga resulta ng HTML
ascanrules.sqlinjection.alert.expressionbased.extrainfo=The original page results were successfully replicated using the expression [{0}] as the parameter value\n\
The parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.orderbybased.extrainfo=The original page results were successfully replicated using the "ORDER BY" expression [{0}] as the parameter value\n\
The parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=HIndi nabago ang mensahe ay ibinigay sa katayuan ng HTTP [{0}], binago ang mensahe na ibinigay na katayuan ng HTTP [{1}]
ascanrules.sqlinjection.alert.errorbased.differentiation.extrainfo=Hindi nabago ang mensahe ay ibinigay ang katayuan ng HTTP [{0}], haba ng katawan [{1}], binago na mensahe ay ibinigay sa HTTP na katayuan [{2}], haba ng katawan [{3}]. Ang pangatlong (non-SQL Injection ay naglalaman ng halaga) ibibigay ang HTTP na katayuan [{4}], haba ng katawan [{5}]
ascanrules.sqlinjection.alert.booleanbased.extrainfo=Ang pahina ng mga resulta ay matagumpay minamanipula gamit ang boolean na mga kondisyon [{0}] at [{1}]
ascanrules.sqlinjection.alert.booleanbased.extrainfo.dataexists=Data was returned for the original parameter.\n\
The vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.booleanbased.extrainfo.datanotexists=Data was NOT returned for the original parameter.\n\
The vulnerability was detected by successfully retrieving more data than originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.timebased.extrainfo=Ang oras ng query ay nakokontrol gamit ang parameter na halaga [{0}], na naging sanhi ng kahilingan na kumuha ng [{1}] milliseconds, kapag ang orihinal na hindi binago na query na may halaga [{2}] ay umabot sa [{3}] milliseconds 
ascanrules.sqlinjection.authbypass.name=SQL Injection - Authentication Bypass
ascanrules.sqlinjection.authbypass.desc=SQL injection may be possible on a login page, potentially allowing the application's authentication mechanism to be bypassed 

# TODO some duplicates

ascanrules.sqlinjection.mysql.name=SQL Injection - MySQL
ascanrules.sqlinjection.hypersonic.name=SQL Injection - Hypersonic SQL
ascanrules.sqlinjection.oracle.name=SQL Injection - Oracle
ascanrules.sqlinjection.postgres.name=SQL Injection - PostgreSQL
#ascanrules.sqlinjection.alert.errorbased.attack={1}

ascanrules.sqlinjection.mssql.name=SQL Injection - MsSQL
ascanrules.sqlinjection.mssql.desc=Maaaring posible ang SQL injection
ascanrules.sqlinjection.mssql.soln=Do not trust client side input, even if there is client side validation in place. \n\
In general, type check all data on the server side.\n\
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\n\
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\n\
If database Stored Procedures can be used, use them.\n\
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\n\
Do not create dynamic SQL queries using simple string concatenation.\n\
Escape all data received from the client.\n\
Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\n\
Apply the privilege of least privilege by using the least privileged database user possible.\n\
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\n\
Grant the minimum database access that is necessary for the application.
ascanrules.sqlinjection.mssql.refs=https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
ascanrules.sqlinjection.mssql.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds.

ascanrules.sqlinjection.sqlite.name=SQL Injection - SQLite
ascanrules.sqlinjection.sqlite.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, parameter value [{2}], which caused the request to take [{3}] milliseconds, when the original unmodified query with value [{4}] took [{5}] milliseconds.
ascanrules.sqlinjection.sqlite.alert.errorbased.extrainfo=The following known SQLite error message was provoked\: [{0}].
ascanrules.sqlinjection.sqlite.alert.versionnumber.extrainfo=Using a UNION based SQL Injection attack, and by exploiting SQLite''s dynamic typing mechanism, the SQLite version was determined to be [{0}].\n\
With string-based injection points, full SQLite version information can be extracted, but with numeric injection points, only partial SQLite version information can be extracted.\n\
More information on SQLite version [{0}] is available at http\://www.sqlite.org/changes.html


ascanrules.externalredirect.name=External Redirect
ascanrules.externalredirect.reason.location.header=The response contains a redirect in its Location header which allows an external Url to be set.
ascanrules.externalredirect.reason.location.meta=The response contains a redirect in its meta http-equiv tag for 'Location' which allows an external Url to be set.
ascanrules.externalredirect.reason.refresh.header=The response contains a redirect in its Refresh header which allows an external Url to be set.
ascanrules.externalredirect.reason.refresh.meta=The response contains a redirect in its meta http-equiv tag for 'Refresh' which allows an external Url to be set.
ascanrules.externalredirect.reason.javascript=The response contains a redirect in its JavaScript code which allows an external Url to be set.
ascanrules.externalredirect.reason.notfound=No reason found for it...

ascanrules.codeinjection.name=Server Side Code Injection
ascanrules.codeinjection.name.asp=Server Side Code Injection - ASP Code Injection
ascanrules.codeinjection.name.php=Server Side Code Injection - PHP Code Injection
ascanrules.codeinjection.desc=A code injection may be possible including custom code that will be evaluated by the scripting engine
ascanrules.codeinjection.soln=Do not trust client side input, even if there is client side validation in place.\n\
In general, type check all data on the server side and escape all data received from the client.\n\
 Avoid the use of eval() functions combined with user input data.
ascanrules.codeinjection.refs=http\://cwe.mitre.org/data/definitions/94.html\n\
https\://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection

ascanrules.directorybrowsing.name=Direktoryo ng pag-hahanap
ascanrules.directorybrowsing.desc=It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.
ascanrules.directorybrowsing.soln=Disable directory browsing.  If this is required, make sure the listed files does not induce risks.
ascanrules.directorybrowsing.refs=http\://httpd.apache.org/docs/mod/core.html\#options\n\
http\://alamo.satlug.org/pipermail/satlug/2002-February/000053.html

ascanrules.crlfinjection.name=CRLF Injection
ascanrules.crlfinjection.desc=Cookie can be set via CRLF injection.  It may also be possible to set arbitrary HTTP response headers. In addition, by carefully crafting the injected response using cross-site script, cache poisoning vulnerability may also exist.
ascanrules.crlfinjection.soln=Type check the submitted parameter carefully.  Do not allow CRLF to be injected by filtering CRLF.
ascanrules.crlfinjection.refs=http\://www.watchfire.com/resources/HTTPResponseSplitting.pdf\n\
http\://webappfirewall.com/lib/crlf-injection.txtnull\n\
http\://www.securityfocus.com/bid/9804

ascanrules.parametertamper.name=Parameter Tampering
ascanrules.parametertamper.desc=Parameter manipulation caused an error page or Java stack trace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
ascanrules.parametertamper.soln=Identify the cause of the error and fix it.  Do not trust client side input and enforce a tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.

ascanrules.pathtraversal.name=Ang Daanan ng Traversal
ascanrules.pathtraversal.other=Check {0}

ascanrules.remotefileinclude.name=Pagbuo ng remote na file

ascanrules.serversideinclude.name=Server Side Include
ascanrules.serversideinclude.desc=Certain parameters may cause Server Side Include commands to be executed.  This may allow database connection or arbitrary code to be executed.
ascanrules.serversideinclude.soln=Do not trust client side input and enforce a tight check in the server side.  Disable server side includes.\n\

Refer=sa manwal na huwag paganahin ang Server Side ay kasama.\n\
\n\
Gamitin ang pinakamaliit na pribilehiyo upang mapagana ang iyong web server o application server.\n\
\n\
Para sa Apache, huwag paganahin ang sumusunod \:\n\
\n\
AddType application/x-httpd-cgi .cgi\n\
\n\
AddType text/x-server-parsed-html .html
ascanrules.serversideinclude.refs=http\://www.carleton.ca/~dmcfet/html/ssi.html

ascanrules.traceaxd.name = Trace.axd Information Leak
ascanrules.traceaxd.desc = The ASP.NET Trace Viewer (trace.axd) was found to be available. This component can leak a significant amount of valuable information.
ascanrules.traceaxd.otherinfo = Based on response status code Trace Viewer may be protected by an authentication or authorization mechanism.  
ascanrules.traceaxd.refs = https\://msdn.microsoft.com/en-us/library/bb386420.aspx\n\
https\://msdn.microsoft.com/en-us/library/wwh16c6c.aspx\n\
https\://www.dotnetperls.com/trace
ascanrules.traceaxd.soln = Consider whether or not Trace Viewer is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization.

ascanrules.useragent.name=User Agent Fuzzer
ascanrules.useragent.desc=Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.
ascanrules.useragent.refs=https\://owasp.org/wstg
ascanrules.useragent.useragentparmname=Header User-Agent

ascanrules.xsltinjection.name = XSLT Injection
ascanrules.xsltinjection.desc = Injection using XSL transformations may be possible, and may allow an attacker to read system information, read and write files, or execute arbitrary code.
ascanrules.xsltinjection.refs = https\://www.contextis.com/blog/xslt-server-side-injection-attacks
ascanrules.xsltinjection.soln = Sanitize and analyze every user input coming from any client-side.
ascanrules.xsltinjection.error.otherinfo = The response to sending an XSLT token included error messages that may indicate a vulnerability to XSLT injections.
ascanrules.xsltinjection.vendor.otherinfo = The XSLT processor vendor name "{0}" was returned after an injection request.
ascanrules.xsltinjection.portscan.otherinfo = Port scanning may be possible.
ascanrules.xsltinjection.command.otherinfo = Command execution may be possible.

ascanrules.xxe.name=XML External Entity Attack



ascanrules.bufferoverflow.desc = Bellek ta\u015fma hatalar\u0131, arka planda \u00e7al\u0131\u015fan web i\u015flemlerinin bellekteki yerleri \u00fczerine bilerek ya da bilmeyerek yaz\u0131lmas\u0131yla olu\u015fan hatalard\u0131r. IP (Komut \u0130\u015faret\u00e7isi), BP(Temel Pointer) ve di\u011fer yazma\u00e7lar istisnai hatalar, segmentasyon hatalar\u0131 ve di\u011fer i\u015flemlerde problemler olu\u015fmas\u0131na neden olur. Genellikle bu hatalar uygulaman\u0131n beklenmedik bir \u015fekilde sona ermesine sebep olur. 
ascanrules.bufferoverflow.name = Bellek Ta\u015fmas\u0131
ascanrules.bufferoverflow.other = Olas\u0131 Bellek Ta\u015fmas\u0131.  Betik ba\u011flant\u0131y\u0131 sonland\u0131rd\u0131 ve 500 \u0130\u00e7 Sunucu Hatas\u0131 verdi
ascanrules.bufferoverflow.refs = https\://owasp.org/www-community/attacks/Buffer_overflow_attack
ascanrules.bufferoverflow.soln = Arka planda \u00e7al\u0131\u015fan program\u0131 uygun d\u00f6n\u00fc\u015f de\u011feri i\u00e7in uzunluk kontrol\u00fc yaparak tekrar yaz. Bu i\u015flem arka planda \u00e7al\u0131\u015fan program\u0131n tekrar derlenmesini gerektirir.

ascanrules.cloudmetadata.desc = The Cloud Metadata Attack attempts to abuse a misconfigured NGINX server in order to access the instance metadata maintained by cloud service providers such as AWS, GCP and Azure.\nAll of these providers provide metadata via an internal unroutable IP address '169.254.169.254' - this can be exposed by incorrectly configured NGINX servers and accessed by using this IP address in the Host header field.
ascanrules.cloudmetadata.name = Cloud Metadata Potentially Exposed
ascanrules.cloudmetadata.otherinfo = Based on the successful response status code cloud metadata may have been returned in the response. Check the response data to see if any cloud metadata has been returned.\nThe meta data returned can include information that would allow an attacker to completely compromise the system.
ascanrules.cloudmetadata.refs = https\://www.nginx.com/blog/trust-no-one-perils-of-trusting-user-input/
ascanrules.cloudmetadata.soln = Do not trust any user data in NGINX configs. In this case it is probably the use of the $host variable which is set from the 'Host' header and can be controlled by an attacker.

ascanrules.codeinjection.desc = A code injection may be possible including custom code that will be evaluated by the scripting engine
ascanrules.codeinjection.name = Server Side Code Injection
ascanrules.codeinjection.name.asp = Server Side Code Injection - ASP Code Injection
ascanrules.codeinjection.name.php = Server Side Code Injection - PHP Code Injection
ascanrules.codeinjection.refs = https\://cwe.mitre.org/data/definitions/94.html\nhttps\://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection
ascanrules.codeinjection.soln = Do not trust client side input, even if there is client side validation in place.\nIn general, type check all data on the server side and escape all data received from the client.\n Avoid the use of eval() functions combined with user input data.

ascanrules.commandinjection.desc = Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.
ascanrules.commandinjection.name = Remote OS Command Injection
ascanrules.commandinjection.otherinfo.feedback-based = The scan rule was able to retrieve the content of a file or command by sending [{0}] to the operating system running this application
ascanrules.commandinjection.otherinfo.time-based = The scan rule was able to control the timing of the application response by sending [{0}] to the operating system running this application
ascanrules.commandinjection.refs = https\://cwe.mitre.org/data/definitions/78.html\nhttps\://owasp.org/www-community/attacks/Command_Injection

ascanrules.crlfinjection.desc = Cookie can be set via CRLF injection.  It may also be possible to set arbitrary HTTP response headers. In addition, by carefully crafting the injected response using cross-site script, cache poisoning vulnerability may also exist.
ascanrules.crlfinjection.name = CRLF Injection
ascanrules.crlfinjection.refs = https\://owasp.org/www-community/vulnerabilities/CRLF_Injection\nhttps\://cwe.mitre.org/data/definitions/113.html
ascanrules.crlfinjection.soln = Type check the submitted parameter carefully. Do not allow CRLF to be injected by filtering CRLF.

ascanrules.crosssitescripting.json.desc = A XSS attack was reflected in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
ascanrules.crosssitescripting.json.name = Cross Site Scripting Weakness (Reflected in JSON Response)
ascanrules.crosssitescripting.name = Cross Site Scripting (Reflected)
ascanrules.crosssitescripting.otherinfo.accesskey = The accesskey attribute specifies a shortcut key to activate/focus an element. This attribute can trigger payloads for non-conventional or custom tags.
ascanrules.crosssitescripting.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML

ascanrules.desc = Release status active scan rules

ascanrules.directorybrowsing.desc = It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.
ascanrules.directorybrowsing.name = Dizin Tarama
ascanrules.directorybrowsing.refs = https\://httpd.apache.org/docs/mod/core.html\#options
ascanrules.directorybrowsing.soln = Disable directory browsing.  If this is required, make sure the listed files does not induce risks.

ascanrules.elmah.desc = The Error Logging Modules and Handlers (ELMAH [elmah.axd]) HTTP Module was found to be available. This module can leak a significant amount of valuable information.
ascanrules.elmah.name = ELMAH Bilgi S\u0131z\u0131nt\u0131s\u0131
ascanrules.elmah.otherinfo = Yan\u0131t durumu koduna dayanarak, ELMAH bir kimlik do\u011frulama veya yetkilendirme mekanizmas\u0131 taraf\u0131ndan korunabilir.  
ascanrules.elmah.refs = https\://www.troyhunt.com/aspnet-session-hijacking-with-google/\nhttps\://www.nuget.org/packages/elmah\nhttps\://elmah.github.io/
ascanrules.elmah.soln = ELMAH'\u0131n \u00fcretimde ger\u00e7ekten gerekli olup olmad\u0131\u011f\u0131n\u0131 d\u00fc\u015f\u00fcn\u00fcn, gerekli de\u011filse devre d\u0131\u015f\u0131 b\u0131rak\u0131n. E\u011fer \u00f6yleyse, ona eri\u015fimin, kimlik do\u011frulama ve yetkilendirme gerektirdi\u011finden emin olun. Ayr\u0131ca bkz\: https\://elmah.github.io/a/securing-error-log-pages/

ascanrules.envfiles.desc = One or more .env files seems to have been located on the server. These files often expose infrastructure or administrative account credentials, API or APP keys, or other sensitive configuration information. 
ascanrules.envfiles.name = .env Information Leak
ascanrules.envfiles.otherinfo = Based on response status code the .env file may be protected by an authentication or authorization mechanism.
ascanrules.envfiles.refs = https\://www.google.com/search?q\=db_password+filetype%3Aenv\nhttps\://mobile.twitter.com/svblxyz/status/1045013939904532482
ascanrules.envfiles.soln = Ensure the .env file is not accessible.

ascanrules.externalredirect.name = External Redirect
ascanrules.externalredirect.reason.javascript = The response contains a redirect in its JavaScript code which allows an external Url to be set.
ascanrules.externalredirect.reason.location.header = The response contains a redirect in its Location header which allows an external Url to be set.
ascanrules.externalredirect.reason.location.meta = The response contains a redirect in its meta http-equiv tag for 'Location' which allows an external Url to be set.
ascanrules.externalredirect.reason.notfound = No reason found for it...
ascanrules.externalredirect.reason.refresh.header = The response contains a redirect in its Refresh header which allows an external Url to be set.
ascanrules.externalredirect.reason.refresh.meta = The response contains a redirect in its meta http-equiv tag for 'Refresh' which allows an external Url to be set.

ascanrules.formatstring.desc = Girilen verinin uygulama taraf\u0131ndan bir komut olarak de\u011ferlendirilmesi sonucu Bi\u00e7im String hatas\u0131 olu\u015fur. 
ascanrules.formatstring.error1 = Potansiyel bi\u00e7im string hatas\u0131.  Komut dosyas\u0131 bir /%s' de ba\u011flant\u0131 kapatt\u0131
ascanrules.formatstring.error2 = Potansiyel bi\u00e7im string hatas\u0131.  Komut dosyas\u0131 bir /%s' de ve /%x ba\u011flant\u0131 kapatt\u0131
ascanrules.formatstring.error3 = Muhtemel yaz\u0131 format\u0131 hatas\u0131. Komut dosyas\u0131 mikrosoft yaz\u0131 format\u0131 hatas\u0131 ile sonland\u0131
ascanrules.formatstring.name = Bi\u00e7im String Hatas\u0131
ascanrules.formatstring.refs = https\://owasp.org/www-community/attacks/Format_string_attack
ascanrules.formatstring.soln = Arka planda \u00e7al\u0131\u015fan program\u0131 uygun k\u00f6t\u00fc string karakterlerini silerek tekrar yaz\u0131n. Bu arka planda \u00e7al\u0131\u015fan program\u0131n tekrar derlenmesini gerektirir.

ascanrules.getforpost.desc = A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to Cross-Site Scripting (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible.
ascanrules.getforpost.name = GET for POST
ascanrules.getforpost.soln = Ensure that only POST is accepted where POST is expected.

ascanrules.heartbleed.desc = 1.0.1g d\u00fczg\u00fcn uzak sald\u0131rganlar\u0131n hassas bilgileri if\u015fa, okuma a\u015f\u0131r\u0131 bir tampon tetikleyen haz\u0131rlanm\u0131\u015f paketler yoluyla i\u015flem bellekten hassas bilgileri elde etmesini sa\u011flar Heartbeat Uzatma paketleri, i\u015flemez \u00f6nce OpenSSL TLS uygulamas\u0131 1.0.1.
ascanrules.heartbleed.extrainfo = Bu sorun kullanarak sunucudan veri exfiltrating taraf\u0131ndan do\u011fruland\u0131 {0} . Bu, yanl\u0131\u015f pozitif olmas\u0131 pek m\u00fcmk\u00fcn de\u011fildir.
ascanrules.heartbleed.name = Heartbleed OpenSSL G\u00fcvenlik A\u00e7\u0131\u011f\u0131
ascanrules.heartbleed.refs = https\://nvd.nist.gov/vuln/detail/CVE-2014-0160
ascanrules.heartbleed.soln = Daha sonra OpenSSL 1.0.1g veya g\u00fcncelleyin. Yeniden sorunu HTTPS sertifikalar\u0131. Bu tehlikeye olabilir \u00e7\u00fcnk\u00fc sunucu g\u00fcnl\u00fck dosyalar\u0131ndaki uzla\u015fma hi\u00e7bir kan\u0131t ile, asimetrik \u00f6zel anahtarlar\u0131 ve payla\u015f\u0131lan gizli anahtarlar\u0131 de\u011fi\u015ftirin.

ascanrules.hidden.files.alert.name = Hidden File Found
ascanrules.hidden.files.desc = A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.
ascanrules.hidden.files.name = Hidden File Finder
ascanrules.hidden.files.refs = https\://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html
ascanrules.hidden.files.soln = Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.

ascanrules.htaccess.desc = htaccess files can be used to alter the configuration of the Apache Web Server software to enable/disable additional functionality and features that the Apache Web Server software has to offer. 
ascanrules.htaccess.name = .htaccess Information Leak
ascanrules.htaccess.otherinfo = Based on response status code htaccess file may be protected by an authentication or authorization mechanism.
ascanrules.htaccess.refs = https\://developer.mozilla.org/en-US/docs/Learn/Server-side/Apache_Configuration_htaccess\nhttps\://httpd.apache.org/docs/2.4/howto/htaccess.html
ascanrules.htaccess.soln = Ensure the .htaccess file is not accessible.

ascanrules.log4shell.cve44228.desc = Apache Log4j2 <\=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default.
ascanrules.log4shell.cve44228.name = Log4Shell (CVE-2021-44228)
ascanrules.log4shell.cve44228.refs = https\://www.lunasec.io/docs/blog/log4j-zero-day/\nhttps\://nvd.nist.gov/vuln/detail/CVE-2021-44228
ascanrules.log4shell.cve44228.soln = Upgrade Log4j2 to version 2.17.1 or newer. In previous releases (>2.10) this behavior can be mitigated by setting system property "log4j2.formatMsgNoLookups" to "true" or by removing the JndiLookup class from the classpath (example\: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class). Java 8u121 (see https\://www.oracle.com/java/technologies/javase/8u121-relnotes.html) protects against remote code execution by defaulting "com.sun.jndi.rmi.object.trustURLCodebase" and "com.sun.jndi.cosnaming.object.trustURLCodebase" to "false".
ascanrules.log4shell.cve45046.desc = It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allow attackers to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments.
ascanrules.log4shell.cve45046.name = Log4Shell (CVE-2021-45046)
ascanrules.log4shell.cve45046.refs = https\://www.lunasec.io/docs/blog/log4j-zero-day/\nhttps\://nvd.nist.gov/vuln/detail/CVE-2021-45046
ascanrules.log4shell.cve45046.soln = Upgrade Log4j2 to version 2.17.1 or newer.
ascanrules.log4shell.name = Log4Shell
ascanrules.log4shell.skipped = no Active Scan OAST service is selected.

ascanrules.name = Active Scan Rules

ascanrules.paddingoracle.desc = By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely 'padding oracle' vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This rule should detect the MS10-070 padding oracle vulnerability in ASP.net if CustomErrors are enabled for that.
ascanrules.paddingoracle.name = Genel Dolgu Oracle
ascanrules.paddingoracle.refs = https\://learn.microsoft.com/en-us/security-updates/securitybulletins/2010/ms10-070\nhttps\://www.mono-project.com/docs/about-mono/vulnerabilities/\nhttps\://bugzilla.redhat.com/show_bug.cgi?id\=623799
ascanrules.paddingoracle.soln = Kod \u00e7\u00f6zmeye ba\u015flamadan \u00f6nce kodlanm\u0131\u015f verileri d\u00fczg\u00fcn bir \u015fekilde do\u011frulayabilmeleri i\u00e7in etkilenmi\u015f sunucu yaz\u0131l\u0131m\u0131n\u0131 g\u00fcncelle veya komut dizilerini de\u011fi\u015ftir.

ascanrules.parametertamper.desc = Parameter manipulation caused an error page or Java stack trace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
ascanrules.parametertamper.name = Parameter Tampering
ascanrules.parametertamper.soln = Identify the cause of the error and fix it.  Do not trust client side input and enforce a tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.

ascanrules.pathtraversal.name = Yol Takibi

ascanrules.payloader.desc = Provides support for custom payloads in scan rules.
ascanrules.payloader.name = Active Scan Rules Custom Payloads

ascanrules.persistentxssattack.json.desc = A XSS attack was found in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
ascanrules.persistentxssattack.json.name = Cross Site Scripting Weakness (Persistent in JSON Response)
ascanrules.persistentxssattack.name = Cross Site Scripting (Persistent)
ascanrules.persistentxssattack.otherinfo = Source URL\: {0}
ascanrules.persistentxssattack.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML 

ascanrules.persistentxssprime.name = Cross Site Scripting (Persistent) - Prime

ascanrules.persistentxssspider.name = Cross Site Scripting (Persistent) - Spider

ascanrules.remotecodeexecution.cve-2012-1823.desc = CGI kullanarak \u00e7al\u0131\u015fmak \u00fczere yap\u0131land\u0131r\u0131lm\u0131\u015f Baz\u0131 PHP s\u00fcr\u00fcmleri, do\u011fru rasgele kod y\u00fcr\u00fct\u00fclmesine olanak bir \u00e7\u0131kmam\u0131\u015f "\=" karakterini eksikli\u011fi sorgu dizeleri dokunmay\u0131n. Bu durumda, bir i\u015fletim sistemi komut web sunucusunda y\u00fcr\u00fct\u00fclecek neden ve sonu\u00e7lar web taray\u0131c\u0131s\u0131 iade edildi. 
ascanrules.remotecodeexecution.cve-2012-1823.name = Uzaktan Kod Y\u00fcr\u00fctme - CVE-2012-1823
ascanrules.remotecodeexecution.cve-2012-1823.soln = PHP'nin en son kararl\u0131 s\u00fcr\u00fcme y\u00fckseltin veya "RewriteCond" ve "RewriteRule" direktiflerini kullanarak k\u00f6t\u00fc niyetli istekleri s\u00fczmek i\u00e7in Apache web sunucusu ve mod_rewrite mod\u00fcl\u00fcn\u00fc kullanabilirsiniz.

ascanrules.remotefileinclude.name = Uzaktan dosya dahili

ascanrules.serversideinclude.desc = Certain parameters may cause Server Side Include commands to be executed.  This may allow database connection or arbitrary code to be executed.
ascanrules.serversideinclude.name = Server Side Include
ascanrules.serversideinclude.refs = https\://httpd.apache.org/docs/current/howto/ssi.html
ascanrules.serversideinclude.soln = Do not trust client side input and enforce a tight check in the server side. Disable server side includes.\nRefer to manual to disable Sever Side Include.\nUse least privilege to run your web server or application server.\nFor Apache, disable the following\:\nOptions Indexes FollowSymLinks Includes\nAddType application/x-httpd-cgi .cgi\nAddType text/x-server-parsed-html .html

ascanrules.sourcecodedisclosurecve-2012-1823.desc = CGI kullanarak \u00e7al\u0131\u015fmak \u00fczere yap\u0131land\u0131r\u0131lm\u0131\u015f Baz\u0131 PHP s\u00fcr\u00fcmleri, do\u011fru PHP kaynak kodu a\u00e7\u0131klama ve keyfi kod y\u00fcr\u00fct\u00fclmesine olanak bir \u00e7\u0131kmam\u0131\u015f "\=" karakteri yoksun sorgu dizeleri dokunmay\u0131n. Bu durumda, PHP dosyas\u0131n\u0131n i\u00e7eri\u011fi web taray\u0131c\u0131s\u0131 do\u011frudan ikram edildi. O da d\u00fcz HTML i\u00e7erebilir ancak bu \u00e7\u0131k\u0131\u015f, genellikle, PHP i\u00e7erecektir.
ascanrules.sourcecodedisclosurecve-2012-1823.name = Kaynak Kodu Bilgilendirme - CVE-2012-1823
ascanrules.sourcecodedisclosurecve-2012-1823.soln = PHP'nin en son kararl\u0131 s\u00fcr\u00fcme y\u00fckseltin veya "RewriteCond" ve "RewriteRule" direktiflerini kullanarak k\u00f6t\u00fc niyetli istekleri s\u00fczmek i\u00e7in Apache web sunucusu ve mod_rewrite mod\u00fcl\u00fcn\u00fc kullanabilirsiniz.

ascanrules.sourcecodedisclosurewebinf.desc = Java kaynak kodu WEB-INF klas\u00f6r\u00fcndeki Java s\u0131n\u0131f dosyalar\u0131 web sunucusu taraf\u0131ndan if\u015fa edildi. s\u0131n\u0131f dosyalar\u0131 olabilir \u00e7ok yak\u0131ndan orijinal kaynak kodu ile e\u015fle\u015fen kaynak kodu \u00fcretmek i\u00e7in dis-topland\u0131.  
ascanrules.sourcecodedisclosurewebinf.name = Source Code Disclosure - /WEB-INF Folder
ascanrules.sourcecodedisclosurewebinf.propertiesfile.desc = / WEB-INF klas\u00f6r\u00fcndeki bir Java s\u0131n\u0131f\u0131 \u00f6zellikleri dosyan\u0131n varl\u0131\u011f\u0131n\u0131 a\u00e7\u0131klad\u0131. \u00d6zellikler dosyas\u0131 kamuya a\u00e7\u0131k olmas\u0131 ve genellikle yap\u0131land\u0131rma bilgilerini, uygulama kimlik bilgilerini veya \u015fifreleme anahtarlar\u0131 i\u00e7ermesi i\u00e7in de\u011fildir.   
ascanrules.sourcecodedisclosurewebinf.propertiesfile.extrainfo = \u00f6zellikler dosyaya ba\u015fvuru Java s\u0131n\u0131f\u0131 i\u00e7in dis monte Java kaynak kodu bulunmu\u015ftur [ {0} ].
ascanrules.sourcecodedisclosurewebinf.propertiesfile.name = \u00d6zellikler A\u00e7\u0131klanmas\u0131 Dosya - / WEB-INF klas\u00f6r\u00fc
ascanrules.sourcecodedisclosurewebinf.propertiesfile.soln = web sunucusu / WEB-INF klas\u00f6r\u00fcn\u00fc veya web taray\u0131c\u0131lar\u0131 i\u00e7eri\u011fini de\u011fil hizmet i\u00e7in yap\u0131land\u0131r\u0131lmal\u0131d\u0131r. Ayr\u0131ca / WEB-INF klas\u00f6r\u00fc kald\u0131rmak m\u00fcmk\u00fcn olabilir.  
ascanrules.sourcecodedisclosurewebinf.soln = web sunucusu bu t\u00fcr kimlik i\u00e7erebilir derlenmi\u015f Java kaynak kodu ve \u00f6zellikleri dosyalar\u0131 gibi hassas bilgiler i\u00e7erdi\u011finden, / WEB-INF klas\u00f6r\u00fcn\u00fc veya web taray\u0131c\u0131lar\u0131 i\u00e7eri\u011fini de\u011fil hizmet i\u00e7in yap\u0131land\u0131r\u0131lmal\u0131d\u0131r. Uygulama ile da\u011f\u0131t\u0131lan Java s\u0131n\u0131flar\u0131 bir "savunma derinlemesine" yakla\u015f\u0131m\u0131 i\u00e7inde ek bir savunma katman\u0131 olarak, Karart\u0131lm\u0131\u015f edilmelidir.

ascanrules.spring4shell.desc = The application appears to be vulnerable to CVE-2022-22965 (otherwise known as Spring4Shell) - remote code execution (RCE) via data binding.
ascanrules.spring4shell.name = Spring4Shell
ascanrules.spring4shell.refs = https\://nvd.nist.gov/vuln/detail/CVE-2022-22965\nhttps\://www.rapid7.com/blog/post/2022/03/30/spring4shell-zero-day-vulnerability-in-spring-framework/\nhttps\://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\#vulnerability\nhttps\://tanzu.vmware.com/security/cve-2022-22965
ascanrules.spring4shell.soln = Upgrade Spring Framework to versions 5.3.18, 5.2.20, or newer.

ascanrules.springactuator.desc = Spring Actuator for Health is enabled and may reveal sensitive information about this application. Spring Actuators can be used for real monitoring purposes, but should be used with caution as to not expose too much information about the application or the infrastructure running it.
ascanrules.springactuator.name = Spring Actuator Information Leak
ascanrules.springactuator.refs = https\://docs.spring.io/spring-boot/docs/current/actuator-api/htmlsingle/\#overview
ascanrules.springactuator.soln = Disable the Health Actuators and other actuators, or restrict them to administrative users.

#ascanrules.sqlinjection.alert.errorbased.attack={1}
ascanrules.sqlinjection.alert.booleanbased.attack = Alan\: [ {0} ], de\u011fer [ {1} ]
ascanrules.sqlinjection.alert.booleanbased.extrainfo = The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]\nThe parameter value being modified was {2}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.booleanbased.extrainfo.dataexists = Data was returned for the original parameter.\nThe vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.booleanbased.extrainfo.datanotexists = Data was NOT returned for the original parameter.\nThe vulnerability was detected by successfully retrieving more data than originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.errorbased.attack = [ {0} ] alan\: [ {1} ], de\u011fer [ {2} ]
ascanrules.sqlinjection.alert.errorbased.differentiation.attack = Original Value\: [{0}]. Modified Value\: [{1}]. Control Value\: [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.extrainfo = De\u011fi\u015ftirilmemi\u015f mesaj [HTTP stat\u00fcs\u00fc verdi {0} ], uzunlu\u011fu v\u00fccut [ {1} ], modifiye mesaj HTTP stat\u00fcs\u00fc verdi [ {2} ], uzunluk v\u00fccut [ {3} ]. \u00dc\u00e7\u00fcnc\u00fc (non-SQL enjeksiyonu uyaran de\u011feri) HTTP stat\u00fcs\u00fc verdi [ {4} ], uzunlu\u011fu v\u00fccut [ {5} ]
ascanrules.sqlinjection.alert.errorbased.extrainfo = RDBMS [{0}] likely, given error message regular expression [{1}] matched by the HTML results.\nThe vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised
ascanrules.sqlinjection.alert.errorbased.httpstatuscode.extrainfo = De\u011fi\u015ftirilmemi\u015f mesaj [HTTP stat\u00fcs\u00fc verdi {0} ], modifiye mesaj verdi HTTP durum [ {1} ]
ascanrules.sqlinjection.alert.expressionbased.extrainfo = The original page results were successfully replicated using the expression [{0}] as the parameter value\nThe parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.orderbybased.extrainfo = The original page results were successfully replicated using the "ORDER BY" expression [{0}] as the parameter value\nThe parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.timebased.extrainfo = Sorgu s\u00fcresi parametre de\u011ferini kullanarak kontrol edilebilir [ {0} ], istek [almaya neden olan {1} de\u011feri ile orijinal de\u011fi\u015ftirilmemi\u015f sorgusu [zaman] milisaniye, {2} ] [s\u00fcrd\u00fc {3} ] milisaniye 
ascanrules.sqlinjection.alert.unionbased.attack = [ {0} ] alan\: [ {1} ], de\u011fer [ {2} ]
ascanrules.sqlinjection.alert.unionbased.extrainfo = RDBMS [{0}] likely, given UNION-specific error message regular expression [{1}] matched by the HTML results\nThe vulnerability was detected by manipulating the parameter with an SQL ''UNION'' clause to cause a database error message to be returned and recognised
ascanrules.sqlinjection.authbypass.desc = SQL injection may be possible on a login page, potentially allowing the application's authentication mechanism to be bypassed
ascanrules.sqlinjection.authbypass.name = SQL Injection - Authentication Bypass
ascanrules.sqlinjection.desc = SQL injection may be possible.
ascanrules.sqlinjection.hypersonic.name = SQL Injection - Hypersonic SQL
ascanrules.sqlinjection.mssql.alert.timebased.extrainfo = The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds.
ascanrules.sqlinjection.mssql.name = SQL Injection - MsSQL
ascanrules.sqlinjection.mysql.name = SQL Injection - MySQL
ascanrules.sqlinjection.name = SQL Enjeksiyonu
ascanrules.sqlinjection.oracle.name = SQL Injection - Hipersonik SQL
ascanrules.sqlinjection.postgres.name = SQL Injection - PostgreSQL
ascanrules.sqlinjection.refs = https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
ascanrules.sqlinjection.soln = Do not trust client side input, even if there is client side validation in place.\nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\nApply the principle of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.
ascanrules.sqlinjection.sqlite.alert.errorbased.extrainfo = The following known SQLite error message was provoked\: [{0}].
ascanrules.sqlinjection.sqlite.alert.timebased.extrainfo = The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, parameter value [{2}], which caused the request to take [{3}] milliseconds, when the original unmodified query with value [{4}] took [{5}] milliseconds.
ascanrules.sqlinjection.sqlite.alert.versionnumber.extrainfo = Using a UNION based SQL Injection attack, and by exploiting SQLite''s dynamic typing mechanism, the SQLite version was determined to be [{0}].\nWith string-based injection points, full SQLite version information can be extracted, but with numeric injection points, only partial SQLite version information can be extracted.\nMore information on SQLite version [{0}] is available at https\://www.sqlite.org/changes.html
ascanrules.sqlinjection.sqlite.name = SQL Injection - SQLite

ascanrules.ssti.alert.otherinfo = Proof found at [{0}] \ncontent\:\n[{1}]
ascanrules.ssti.desc = When the user input is inserted in the template instead of being used as argument in rendering is evaluated by the template engine. Depending on the template engine it can lead to remote code execution.
ascanrules.ssti.name = Server Side Template Injection
ascanrules.ssti.refs = https\://portswigger.net/blog/server-side-template-injection
ascanrules.ssti.soln = Instead of inserting the user input in the template, use it as rendering argument.

ascanrules.sstiblind.alert.recvdcallback.otherinfo = Received callback from the server.
ascanrules.sstiblind.desc = When the user input is inserted in the template instead of being used as argument in rendering is evaluated by the template engine. Depending on the template engine it can lead to remote code execution.
ascanrules.sstiblind.name = Server Side Template Injection (Blind)
ascanrules.sstiblind.refs = https\://portswigger.net/blog/server-side-template-injection
ascanrules.sstiblind.soln = Instead of inserting the user input in the template, use it as rendering argument.

ascanrules.traceaxd.desc = The ASP.NET Trace Viewer (trace.axd) was found to be available. This component can leak a significant amount of valuable information.
ascanrules.traceaxd.name = Trace.axd Information Leak
ascanrules.traceaxd.otherinfo = Based on response status code Trace Viewer may be protected by an authentication or authorization mechanism.  
ascanrules.traceaxd.refs = https\://msdn.microsoft.com/en-us/library/bb386420.aspx\nhttps\://msdn.microsoft.com/en-us/library/wwh16c6c.aspx\nhttps\://www.dotnetperls.com/trace
ascanrules.traceaxd.soln = Consider whether or not Trace Viewer is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization.

ascanrules.useragent.desc = Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.
ascanrules.useragent.name = User Agent Fuzzer
ascanrules.useragent.refs = https\://owasp.org/wstg
ascanrules.useragent.useragentparmname = Header User-Agent

ascanrules.xpathinjection.name = XPath Enjeksiyonu

ascanrules.xsltinjection.command.otherinfo = Command execution may be possible.
ascanrules.xsltinjection.desc = Injection using XSL transformations may be possible, and may allow an attacker to read system information, read and write files, or execute arbitrary code.
ascanrules.xsltinjection.error.otherinfo = The response to sending an XSLT token included error messages that may indicate a vulnerability to XSLT injections.
ascanrules.xsltinjection.name = XSLT Injection
ascanrules.xsltinjection.portscan.otherinfo = Port scanning may be possible.
ascanrules.xsltinjection.refs = https\://www.contextis.com/blog/xslt-server-side-injection-attacks
ascanrules.xsltinjection.soln = Sanitize and analyze every user input coming from any client-side.
ascanrules.xsltinjection.vendor.otherinfo = The XSLT processor vendor name "{0}" was returned after an injection request.

ascanrules.xxe.name = XML External Entity Attack

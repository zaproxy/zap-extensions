
sqliplugin.ext.name = Inyecci\u00f3n SQL avanzada
sqliplugin.ext.desc = Extensi\u00f3n de ayuda para el complemento de Inyecci\u00f3n Avanzada SQL

sqliplugin.name = Inyecci\u00f3n SQL avanzada
sqliplugin.alert.name = Inyecci\u00f3n Avanzada SQL - {0}
sqliplugin.alert.desc = Puede ser posible una inyecci\u00f3n SQL utilizando el siguiente payload
sqliplugin.alert.soln = No conf\u00edes nunca en los datos de entrada en el lado del cliente, aunque haya una validaci\u00f3n.\n\
\n\
Por normal general, todas las verificaciones de datos se deben realizar en el lado del servidor.\n\
\n\
Si la aplicaci\u00f3n usa JDBC, usa PreparedStatement o CallableStatement, pasando los par\u00e1metros \u200b\u200bpor '?'\n\
\n\
Si la aplicaci\u00f3n usa ASP, usa objetos de comando ADO con verificaci\u00f3n de tipo fuerte y consultas parametrizadas.\n\
\n\
Si se pueden usar los procedimientos almacenados de la base de datos, util\u00edzalos.\n\
\n\
\u00a1*No* anides cadenas en consultas de procedimiento almacenado, usa 'exec', 'exec immediate' o alguna funci\u00f3n equivalente\!\n\
\n\
No crees consultas SQL din\u00e1micas mediante anidaci\u00f3n de cadenas simples.\n\
\n\
Escapa todos los datos que recibas del cliente.\n\
\n\
Aplica una 'lista de permitidos' o una 'lista de denegados' sobre los caracteres que puede utilizar el usuario.\n\
\n\
Aplica el m\u00e9todo de privilegio m\u00ednimo usando el usuario de la base de datos con menos privilegios posibles.\n\
\n\
En particular, evita usar los usuarios de la base de datos 'sa' o 'db-owner'. Esto no elimina las inyecciones SQL, pero minimizar\u00e1 su impacto.\n\
\n\
Otorga siempre el acceso m\u00ednimo a la base de datos que sea necesario para la aplicaci\u00f3n.
sqliplugin.alert.info.unionbased = RDBMS [{0}] probable, ya que ha devuelto un fragmento de error espec\u00edfico en UNION para las columnas [{1}]\n\
\n\
La vulnerabilidad se ha detectado manipulando el par\u00e1metro con una cl\u00e1usula SQL ''UNION'' para provocar que se devuelva y reconozca un mensaje de error de la base de datos.
sqliplugin.alert.info.booleanbased = Los resultados de la p\u00e1gina se consiguieron al manipular utilizando las condiciones booleanas [{0}] y [{1}]\n\
\n\
El valor del par\u00e1metro que se est\u00e1 modificando se elimin\u00f3 de la salida HTML a efectos de la comparaci\u00f3n.\n\
\n\
Se devolvieron los datos para el par\u00e1metro original.\n\
\n\
Se detect\u00f3 la vulnerabilidad, al restringir los datos devueltos originalmente, mediante la manipulaci\u00f3n del par\u00e1metro.
sqliplugin.alert.info.errorbased = RDBMS [{0}] probable, al mostrar un trozo de mensaje de error [{1}] en los resultados HTML.\n\
\n\
Se detect\u00f3 la vulnerabilidad, manipulando el par\u00e1metro para que devolviera y reconociera un mensaje de error de la base de datos.
sqliplugin.alert.info.timebased = El tiempo de la consulta se puede controlar mediante el valor del par\u00e1metro [{0}], con lo que la solicitud tardara [{1}] milisegundos, cuando la consulta original sin modificar con el valor [{2}] tarda un promedio de [{3}] milisegundos.
sqliplugin.alert.refs = https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
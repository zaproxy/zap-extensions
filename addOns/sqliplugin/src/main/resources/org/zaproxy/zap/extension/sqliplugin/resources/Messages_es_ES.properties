#X-Generator: crowdin.com

sqliplugin.ext.name=Inyecci\u00f3n SQL avanzada
sqliplugin.ext.desc=Extensi\u00f3n de ayuda para esc\u00e1ner avanzado de inyecci\u00f3n SQL.

sqliplugin.scanner.name=Inyecci\u00f3n SQL avanzada
sqliplugin.scanner.alert.name=Inyecci\u00f3n SQL avanzada - {0}
sqliplugin.scanner.alert.desc=Una inyecci\u00f3n SQL puede ser posible utilizando el payload adjunto
sqliplugin.scanner.alert.soln=No conf\u00ede en la informaci\u00f3n que se encuentra del lado del cliente, no importa que exista una validaci\u00f3n del lado del cliente.\n\nDe forma general escriba Verificar todos los datos en el lado del servidor.\n\nSi la aplicaci\u00f3n utiliza JDB, utilice PreparedStatement o CallableStatement, con los par\u00e1metros permitidos por '?'\n\nSi la aplicaci\u00f3n utiliza ASP, utilice ADO Command Objects con una verificaci\u00f3n de modo fuerte y con consultas parametrizadas.\n\nSi se puede utilizar los procedimientos que se encuentran almacenados en la base de datos, util\u00edcelos.\n\n\u00a1*No* relacione las cadenas de consultas en el procedimiento que se encuentra almacenado, o utilice 'exec', 'exec immediate', o la funcionalidad equivalente\!\n\n\nNo origine consultas que sean din\u00e1micas de SQL utilizando una cadena de enlaces sencillos.\n\nEvite todos los datos recibidos del cliente.\n\nAplique una "lista blanca" de caracteres aceptados, o una "lista negra" de caracteres no aceptados en la entrada del usuario.\n\nAplique el privilegio de privilegio m\u00ednimo usando el usuario de la base de datos que posea menos privilegios posibles.\n\nEn particular, evite el uso de los usuarios que se encuentran en la base de datos 'sa' o 'db-owner'. Esto no no podr\u00e1 eliminar la inyecci\u00f3n SQL, pero podr\u00e1 minimizar su impacto.\n\nPermita el acceso m\u00ednimo a la base de datos que es necesario para el uso la aplicaci\u00f3n.
sqliplugin.scanner.alert.info.unionbased=RDBMS [{0}] posible, proporcionado fragmento de mensaje de error espec\u00edfico de UNI\u00d3N para las columnas [{1}]\n\nLa vulnerabilidad se ha detectado manipulando el par\u00e1metro con una cl\u00e1usula de ''UNI\u00d3N'' de SQL para poder hacer que regresara y reconociera un mensaje de error de la base de datos.
sqliplugin.scanner.alert.info.booleanbased=Los resultados de la p\u00e1gina fueron manipulados con \u00e9xito usando las condiciones booleanas [{0}] y [{1}] \n\nEl valor del par\u00e1metro ha sido modificado fue extra\u00eddo del HTML de salida con el prop\u00f3sito de ser comparado. \n\nSe devuelven los datos al par\u00e1metro original. \n\nLa vulnerabilidad fue detectada al realizar con \u00e9xito al restringir con \u00e9xito los datos originalmente devueltos, manipulando el par\u00e1metro.
sqliplugin.scanner.alert.info.errorbased=RDBMS [{0}] posible, fragmento de mensaje de error [{1}] proporcionado en los resultados de HTML.\n\nLa vulnerabilidad se ha localizado al manipular el par\u00e1metro para que se regresara y reconociera un mensaje de error de la base de datos.
sqliplugin.scanner.alert.info.timebased=El tiempo de consulta es controlable a trav\u00e9s del valor del par\u00e1metro [{0}], el cual caus\u00f3 que la solicitud necesitase [{1}] mili segundos, mientras que la consulta original, no modificada, necesit\u00f3 [{2}] [{3}] mili segundos.
sqliplugin.scanner.alert.refs=https\://www.OWASP.org/index.php/Top_10_2010-a1 https\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet

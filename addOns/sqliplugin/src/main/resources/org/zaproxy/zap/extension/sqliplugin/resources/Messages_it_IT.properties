#X-Generator: crowdin.com

sqliplugin.ext.name=SQL Injection avanzata
sqliplugin.ext.desc=Estensione di aiuto per la scansione di SQL injection avanzata.

sqliplugin.scanner.name=SQL Injection avanzata
sqliplugin.scanner.alert.name=SQL Injection avanzata - {0}
sqliplugin.scanner.alert.desc=E' possibile una SQL injection utilizzando il payload allegato
sqliplugin.scanner.alert.soln=Non fidatevi delle informazioni che sono sul lato del cliente, anche se esiste gi\u00e0 una convalida sul lato cliente.\n\nIn generale, devi scrivere 'controlla tutti i dati' sul lato server.\n\nSe l'applicazione utilizza JDBC, devi utilizzare PreparedStatement o CallableStatement, con i parametri passati da '?'.\n\nSe l'applicazione utilizza ASP, \u00e8 necessario utilizzare oggetti comando ADO con una verifica che \u00e8 forte e ha le query con parametri.\n\nSe \u00e8 possibile utilizzare le procedure archiviate nel database, \u00e8 necessario utilizzarle.\n\n*Non* collegare tutte le stringhe di query nella stored procedure, o usare 'exec', 'exec. inmediate' o una funzionalit\u00e0 equivalente\!\n\nNon eseguire la creazione dinamica di query di SQL utilizzando una stringa che \u00e8 semplice associazione logica.\n\nSfuggi tutti i datii dati che sono stati ricevuti dal cliente. Questo non far\u00e0 l'eliminazione dell'iniezione SQL, ma pu\u00f2 minimizzare il suo impatto sul sistema.\n\nFornire solo l'accesso minimo al database necessario per poter utilizzare l'applicazione.\n\nApplicare una "lista bianca" che \u00e8 di caratteri, o una "lista nera" che \u00e8 di caratteri non ammessi nella voce che \u00e8 dell'utente.\n\nApplicare il privilegio che \u00e8 di privilegio minimo utilizzando l'utente che si trova nel database con il minor privilegio possibile.\n\nIn particolare, devi evitare di usare tutti gli utenti che sono sulla base 'sa' o 'db-owner'.
sqliplugin.scanner.alert.info.unionbased=Probabilmente [{0}] RDBMS, fornito frammento di messaggio di errore specifico per UNION per le colonne [{1}]\n\nLa vulnerabilit\u00e0 \u00e8 stata rilevata quando il parametro \u00e8 stato manipolato con una clausola SQL ''UNION'' per renderlo restituito e un messaggio di errore che \u00e8 stato trovato nel database \u00e8 stato riconosciuto.
sqliplugin.scanner.alert.info.booleanbased=I risultati della pagina sono stati gestiti correttamente utilizzando le condizioni booleane [{0}] e [{1}]\n\nll valore del parametro che si stava modificando \u00e8 stato eliminato dall''output HTML ai fini del confronto effettuato.\n\nTutti dati sono stati restituiti per el parametro originate.\n\nLa vulnerabilit\u00e0 \u00e8 stata rilevata quando \u00e8 stata eseguita la restrizione corretta su tutti i dati originariamente restituiti, quando il parametro \u00e8 stato manipolato.
sqliplugin.scanner.alert.info.errorbased=RDBMS [{0}] probabile, a condizione che il frammento del messaggio di errore [{1}] nei risultati ottenuti da HTML.\n\nLa vulnerabilit\u00e0 \u00e8 stata rilevata quando il parametro \u00e8 stato manipolato in modo che fosse restituito e un messaggio di errore trovato nel database fosse riconosciuto.
sqliplugin.scanner.alert.info.timebased=Ll tempo utilizzato per la query \u00e8 controllabile utilizzando il valore del parametro [{0}], che ha causato la richiesta di richiedere [{1}] milisecondi, quando la query originale non \u00e8 stata modificata con il valore [{2}] ha avuto una media di [{3}] milisecondi.
sqliplugin.scanner.alert.refs=https\://www.owasp.org/index.php/Top_10_2010-A1\nhttps\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet

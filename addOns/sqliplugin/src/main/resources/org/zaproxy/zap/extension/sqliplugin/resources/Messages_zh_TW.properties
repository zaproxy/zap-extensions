sqliplugin.alert.desc = A SQL injection may be possible using the attached payload.
sqliplugin.alert.info.booleanbased = The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]\nThe parameter value being modified was stripped from the HTML output for the purposes of the comparison.\nData was returned for the original parameter.\nThe vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter.
sqliplugin.alert.info.errorbased = RDBMS [{0}] likely, given error message fragment [{1}] in HTML results.\nThe vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised.
sqliplugin.alert.info.timebased = The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took on average [{3}] milliseconds.
sqliplugin.alert.info.unionbased = RDBMS [{0}] likely, given UNION-specific error message fragment for [{1}] columns\nThe vulnerability was detected by manipulating the parameter with an SQL ''UNION'' clause to cause a database error message to be returned and recognised.
sqliplugin.alert.name = \u9032\u968e SQL \u6ce8\u5165 - {0}
sqliplugin.alert.refs = https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
sqliplugin.alert.soln = Do not trust client side input, even if there is client side validation in place.\nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\nApply the privilege of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.

sqliplugin.ext.desc = Helper extension for Advanced SQL Injection add-on.
sqliplugin.ext.name = Advanced SQL Injection

sqliplugin.name = Advanced SQL Injection

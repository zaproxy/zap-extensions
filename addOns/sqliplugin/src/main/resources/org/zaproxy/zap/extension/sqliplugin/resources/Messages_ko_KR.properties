
sqliplugin.ext.name = \uace0\uae09 SQL \uc778\uc81d\uc158
sqliplugin.ext.desc = Helper extension for Advanced SQL Injection add-on.

sqliplugin.name = \uace0\uae09 SQL \uc778\uc81d\uc158
sqliplugin.alert.name = \uace0\uae09 SQL \uc778\uc81d\uc158
sqliplugin.alert.desc = A SQL injection may be possible using the attached payload
sqliplugin.alert.soln = Do not trust client side input, even if there is client side validation in place.\n\
\n\
In general, type check all data on the server side.\n\
\n\
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\n\
\n\
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\n\
\n\
If database Stored Procedures can be used, use them.\n\
\n\
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\n\
\n\
Do not create dynamic SQL queries using simple string concatenation.\n\
\n\
Escape all data received from the client.\n\
\n\
Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\n\
\n\
Apply the privilege of least privilege by using the least privileged database user possible.\n\
\n\
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\n\
\n\
Grant the minimum database access that is necessary for the application.
sqliplugin.alert.info.unionbased = RDBMS [{0}] likely, given UNION-specific error message fragment for [{1}] columns\n\
\n\
The vulnerability was detected by manipulating the parameter with an SQL ''UNION'' clause to cause a database error message to be returned and recognised.
sqliplugin.alert.info.booleanbased = The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]\n\
\n\
The parameter value being modified was stripped from the HTML output for the purposes of the comparison.\n\
\n\
Data was returned for the original parameter.\n\
\n\
The vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter.
sqliplugin.alert.info.errorbased = RDBMS [{0}] likely, given error message fragment [{1}] in HTML results.\n\
\n\
The vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised.
sqliplugin.alert.info.timebased = The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took on average [{3}] milliseconds.
sqliplugin.alert.refs = https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
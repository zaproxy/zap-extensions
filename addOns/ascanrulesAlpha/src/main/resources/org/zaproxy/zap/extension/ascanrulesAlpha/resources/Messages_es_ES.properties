ascanalpha.desc = Reglas de escaneo activo en estado Alpha

ascanalpha.examplefile.desc = A\u00f1adir m\u00e1s informaci\u00f3n acerca de la vulnerabilidad aqu\u00ed
ascanalpha.examplefile.name = Un ejemplo regla de lectura activa que carga datos desde un archivo
ascanalpha.examplefile.other = Se trata de informaci\u00f3n que no encaja en ninguna de las otras secciones
ascanalpha.examplefile.refs = https\://www.zaproxy.org/blog/2014-04-30-hacking-zap-4-active-scan-rules/
ascanalpha.examplefile.soln = Una descripci\u00f3n general de como resolver el problema

#ascanalpha.ldapinjection.alert.attack=[{0}] field [{1}] set to [{2}]
ascanalpha.ldapinjection.alert.attack = par\u00e1metro [{0}] asignado a [{1}]
#ascanalpha.ldapinjection.alert.extrainfo=[{0}] field [{1}] on [{2}] [{3}] may be vulnerable to LDAP injection, using an attack with LDAP meta-characters [{4}], yielding known [{5}] error message [{6}], which was not present in the original response.
ascanalpha.ldapinjection.alert.extrainfo = par\u00e1metro [{0}] en [{1}] [{2}] podr\u00eda ser vulnerable a una inyecci\u00f3n LDAP, mediante un ataque con meta-caracteres LDAP [{3}], rendimiento conocido [{4}] mensaje de error [{5}], el cual no estaba presente en la respuesta original.
ascanalpha.ldapinjection.booleanbased.alert.attack = Expresi\u00f3n equivalente LDAP\: [{0}]. Par\u00e1metro aleatorio\: [{1}].
ascanalpha.ldapinjection.booleanbased.alert.extrainfo = par\u00e1metro [{0}] en [{1}] [{2}] pod\u00eda ser vulnerable a inyecci\u00f3n LDAP, utilizando el equivalente l\u00f3gico de la expresi\u00f3n [{3}] y la expresi\u00f3n ''FALSA'' [{4}].
ascanalpha.ldapinjection.desc = La inyecci\u00f3n LDAP podr\u00eda ser posible. Podr\u00eda ser posible para un atacante eludir controles de autenticaci\u00f3n, y ver y modificar datos arbitrarios en el directorio LDAP. 
ascanalpha.ldapinjection.name = Inyecci\u00f3n LDAP
ascanalpha.ldapinjection.refs = https\://owasp.org/www-community/attacks/LDAP_Injection\nhttps\://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
ascanalpha.ldapinjection.soln = V\u00e1lida y/o escapar toda entrada de usuario antes de usarla para crear una consulta LDAP. En particular, los siguientes caracteres (o combinaciones) se deben denegar\:\n&\n|\n\!\n<\n>\n\=\n~\=\n>\=\n<\=\n*\n(\n)\n,\n+\n-\n"\n'\n;\n\\\n/\nNUL character\n 
ascanalpha.ldapinjection.technologies.protocol = Protocolo

ascanalpha.mongodb.desc = Inyecci\u00f3n en consulta de MongoDB puede ser posible.
ascanalpha.mongodb.extrainfo.alldata = En algunas implementaciones back-end basadas en PHP o NodeJS, para obtener datos confidenciales es posible inyectar la cadena "[$ne]" (u otras similares) esta se procesa como una matriz asociativa en lugar de un texto simple.\nUsando esto, las consultas realizadas a MongoDB siempre ser\u00e1n verdaderas.
ascanalpha.mongodb.extrainfo.authbypass = Lo m\u00e1s probable es que el ataque de MongoDB se haya saltado la autenticaci\u00f3n de la p\u00e1gina.
ascanalpha.mongodb.extrainfo.crash = No se ha manejado correctamente una excepci\u00f3n de MongoDB.
ascanalpha.mongodb.extrainfo.json = En algunas implementaciones de back-end basadas en NodeJS, se esperan mensajes que tengan el formato JSON como tipo de contenido. Para obtener datos confidenciales, es posible atacar estas aplicaciones inyectando la cadena "{$ne\:}" (u otras similares) que ser\u00e1 procesada como una matriz asociativa en lugar de un simple texto.\nUsando esto, las consultas realizadas a MongoDB siempre ser\u00e1n verdaderas.
ascanalpha.mongodb.extrainfo.sleep = A trav\u00e9s de las cl\u00e1usulas WHERE o GROUP de MongoDB, probablemente se podr\u00e1 ejecutar la funci\u00f3n sleep de Javascript.
ascanalpha.mongodb.name = Inyecci\u00f3n NoSQL - MongoDB
ascanalpha.mongodb.name.timebased = Inyecci\u00f3n NoSQL - MongoDB (Basada en tiempo)
ascanalpha.mongodb.refs = https\://arxiv.org/pdf/1506.04082.pdf\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.html
ascanalpha.mongodb.soln = No conf\u00edes en los datos de entrada del lado del cliente y escape todos los datos en el lado del servidor. \nEvite utilizar la entrada como consulta directa en WHERE y GROUP y actualice todos los controladores a la \u00faltima versi\u00f3n disponible.

ascanalpha.name = Reglas de Escaneo Activo - alpha

ascanalpha.webCacheDeception.desc = Puede ser posible el enga\u00f1o de web cache. Es posible que un usuario no autorizado vea datos confidenciales en esta p\u00e1gina.
ascanalpha.webCacheDeception.name = Enga\u00f1o de Web Cache
ascanalpha.webCacheDeception.otherinfo = La Respuesta Autorizada en Cach\u00e9 y la Respuesta No Autorizada son similares.
ascanalpha.webCacheDeception.refs = https\://blogs.akamai.com/2017/03/on-web-cache-deception-attacks.html\nhttps\://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/web-cache-deception/
ascanalpha.webCacheDeception.soln = Se recomienda encarecidamente abstenerse de clasificar los tipos de archivos, como im\u00e1genes u hojas de estilo, \u00fanicamente por su URL y extensi\u00f3n de archivo. En su lugar, debe asegurarse de que los archivos se almacenen en cach\u00e9 en funci\u00f3n de su encabezado Content-Type.

ascanalpha.desc = Aktif Tarama Kurallar\u0131 - alfa

ascanalpha.examplefile.name=Bir dosyadan veri y\u00fckler bir \u00f6rnek aktif tarama kural\u0131
ascanalpha.examplefile.desc=Burada g\u00fcvenlik a\u00e7\u0131\u011f\u0131 hakk\u0131nda daha fazla bilgi ekle
ascanalpha.examplefile.other=Bu, di\u011fer b\u00f6l\u00fcmlerin herhangi bir uygun does not bilgi i\u00e7indir
ascanalpha.examplefile.soln=Sorunu \u00e7\u00f6zmek i\u00e7in nas\u0131l genel bir a\u00e7\u0131klama
ascanalpha.examplefile.refs=https\://www.zaproxy.org/blog/2014-04-30-hacking-zap-4-active-scan-rules/

ascanalpha.ldapinjection.name=LDAP Enjeksiyonu
ascanalpha.ldapinjection.desc=LDAP enjeksiyonu m\u00fcmk\u00fcn olabilir. Bir sald\u0131rgan\u0131n kimlik kontrollerini a\u015fmak i\u00e7in, ve LDAP dizininde keyfi veri g\u00f6r\u00fcnt\u00fclemek ve de\u011fi\u015ftirmek i\u00e7in bu m\u00fcmk\u00fcn olabilir. 
ascanalpha.ldapinjection.soln=Validate and/or escape all user input before using it to create an LDAP query.  In particular, the following characters (or combinations) should be deny listed\:\n&\n|\n\!\n<\n>\n\=\n~\=\n>\=\n<\=\n*\n(\n)\n,\n+\n-\n"\n'\n;\n\\\n/\nNUL character\n 
ascanalpha.ldapinjection.refs=http\://www.testingsecurity.com/how-to-test/injection-vulnerabilities/LDAP-Injection\nhttps\://owasp.org/www-community/attacks/LDAP_Injection
#ascanalpha.ldapinjection.alert.extrainfo=[{0}] field [{1}] on [{2}] [{3}] may be vulnerable to LDAP injection, using an attack with LDAP meta-characters [{4}], yielding known [{5}] error message [{6}], which was not present in the original response.
ascanalpha.ldapinjection.alert.extrainfo=Parametre [ {0} ] \u00fczerine [ {1} ] [ {2} ] LDAP meta-karakterleri [ile bir sald\u0131r\u0131 kullanarak LDAP enjeksiyonu kar\u015f\u0131 savunmas\u0131z olabilir {3} ], bilinen [verimli {4} ] hata mesaj\u0131 [ {5} ], orijinal tepki mevcut de\u011fildi.
ascanalpha.ldapinjection.alert.evidence={0}
ascanalpha.ldapinjection.booleanbased.alert.extrainfo=Parametre [ {0} ] [on {1} ] [ {2} ] mant\u0131ksal e\u015fde\u011fer ifadesini kullanarak, LDAP enjeksiyonu kar\u015f\u0131 savunmas\u0131z olabilir [ {3} ], ve ''YANLI\u015e'' ifadesi [ {4} ].
#ascanalpha.ldapinjection.alert.attack=[{0}] field [{1}] set to [{2}]
ascanalpha.ldapinjection.alert.attack=Parametre [ {0} ] ayarland\u0131\u011f\u0131nda [ {1} ]
ascanalpha.ldapinjection.booleanbased.alert.attack=E\u015fde\u011fer LDAP ifadesi\: [ {0} ]. Rastgele parametre\: [ {1} ].

ascanalpha.mongodb.name=NoSQL Injection - MongoDB
ascanalpha.mongodb.desc=MongoDB query injection may be possible.
ascanalpha.mongodb.soln=Do not trust client side input and escape all data on the server side. \nAvoid to use the query input directly into the where and group clauses and upgrade all drivers at the latest available version.
ascanalpha.mongodb.refs=https\://arxiv.org/pdf/1506.04082.pdf\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.html
ascanalpha.mongodb.extrainfo.crash=A MongoDB exception hasn't been properly handled.
ascanalpha.mongodb.extrainfo.alldata=In some PHP or NodeJS based back end implementations, in order to obtain sensitive data it is possible to inject the "[$ne]" string (or other similar ones) that is processed as an associative array rather than a simple text.\nThrough this, the queries made to MongoDB will always be true.
ascanalpha.mongodb.extrainfo.sleep=Through the where or group MongoDB clauses, Javascript sleep function is probably executable.
ascanalpha.mongodb.extrainfo.json=In some NodeJS based back end implementations, messages having the JSON format as content-type are expected. In order to obtain sensitive data it is possible to attack these applications injecting the "{$ne\:}" string (or other similar ones) that is processed as an associative array rather than a simple text.\nThrough this, the queries made to MongoDB will always be true.
ascanalpha.mongodb.extrainfo.authbypass=More probably a MongoDB attack has bypassed an authentication page.

ascanalpha.forbiddenBypass.name=Bypassing 403
ascanalpha.forbiddenBypass.desc=Bypassing 403 endpoints may be possible, the scan rule sent a payload that caused the response to be accessible (status code 200).
ascanalpha.forbiddenBypass.refs=https\://www.acunetix.com/blog/articles/a-fresh-look-on-reverse-proxy-related-attacks/\nhttps\://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf\nhttps\://www.contextis.com/en/blog/server-technologies-reverse-proxy-bypass

ascanalpha.cors.info.name=CORS Header
ascanalpha.cors.info.desc=Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any other origins (domain, scheme, or port) than its own from which a browser should permit loading of resources. It relaxes the Same-Origin Policy (SOP).
ascanalpha.cors.vuln.name=CORS Misconfiguration
ascanalpha.cors.vuln.desc=This CORS misconfiguration could allow an attacker to perform AJAX queries to the vulnerable website from a malicious page loaded by the victim's user agent.\nIn order to perform authenticated AJAX queries, the server must specify the header "Access-Control-Allow-Credentials\: true" and the "Access-Control-Allow-Origin" header must be set to null or the malicious page's domain. Even if this misconfiguration doesn't allow authenticated AJAX requests, unauthenticated sensitive content can still be accessed (e.g intranet websites).\nA malicious page can belong to a malicious website but also a trusted website with flaws (e.g XSS, support of HTTP without TLS allowing code injection through MITM, etc).
ascanalpha.cors.soln=If a web resource contains sensitive information, the origin should be properly specified in the Access-Control-Allow-Origin header. Only trusted websites needing this resource should be specified in this header, with the most secured protocol supported.
ascanalpha.cors.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\nhttps\://portswigger.net/web-security/cors

ascanalpha.webCacheDeception.name=Web Cache Deception
ascanalpha.webCacheDeception.desc=Web cache deception may be possible. It may be possible for unauthorised user to view sensitive data on this page.
ascanalpha.webCacheDeception.refs=https\://blogs.akamai.com/2017/03/on-web-cache-deception-attacks.html\nhttps\://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/web-cache-deception/
ascanalpha.webCacheDeception.soln=It is strongly advised to refrain from classifying file types, such as images or stylesheets solely by their URL and file extension. Instead you should make sure that files are cached based on their Content-Type header.
ascanalpha.webCacheDeception.otherinfo=Cached Authorised Response and Unauthorised Response are similar.

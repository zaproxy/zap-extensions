ascanalpha.desc = Alpha status active scan rules

ascanalpha.examplefile.desc = Menambah lebih lanjut tentang kelemahan di sini
ascanalpha.examplefile.name = Contoh aktif scan peraturan yang banyak data dari fail
ascanalpha.examplefile.other = Ini adalah untuk maklumat itu tidak fit di mana-mana satu bahagian-bahagian lain
ascanalpha.examplefile.refs = https\://www.zaproxy.org/blog/2014-04-30-hacking-zap-4-active-scan-rules/
ascanalpha.examplefile.soln = Penerangan umum bagaimana untuk menyelesaikan masalah

#ascanalpha.ldapinjection.alert.attack=[{0}] field [{1}] set to [{2}]
ascanalpha.ldapinjection.alert.attack = parameter [{0}] set untuk [{1}]
#ascanalpha.ldapinjection.alert.extrainfo=[{0}] field [{1}] on [{2}] [{3}] may be vulnerable to LDAP injection, using an attack with LDAP meta-characters [{4}], yielding known [{5}] error message [{6}], which was not present in the original response.
ascanalpha.ldapinjection.alert.extrainfo = parameter [{0}] [{1}] [{2}] mungkin rentan terhadap NILAI suntikan, menggunakan serangan dengan NILAI meta-watak-watak [{3}], berhasil diketahui [{4}] ralat pesan [{5}], yang tidak hadir dalam asal tindak balas.
ascanalpha.ldapinjection.booleanbased.alert.attack = Equivalent LDAP expression\: [{0}]. Rawak parameter\: [{1}].
ascanalpha.ldapinjection.booleanbased.alert.extrainfo = parameter [{0}] [{1}] [{2}] mungkin rentan terhadap NILAI suntikan, dengan menggunakan secara logik bersamaan ungkapan [{3}], dan ''SALAH'' ungkapan [{4}].
ascanalpha.ldapinjection.desc = NILAI Suntikan mungkin menjadi mungkin. Ia mungkin menjadi mungkin untuk penyerang untuk memintas pengesahan kawalan, dan untuk melihat dan mengubah sewenang-wenang data dalam NILAI direktori. 
ascanalpha.ldapinjection.name = LDAP Injection
ascanalpha.ldapinjection.refs = https\://owasp.org/www-community/attacks/LDAP_Injection\nhttps\://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
ascanalpha.ldapinjection.soln = Validate and/or escape all user input before using it to create an LDAP query.  In particular, the following characters (or combinations) should be deny listed\:\n&\n|\n\!\n<\n>\n\=\n~\=\n>\=\n<\=\n*\n(\n)\n,\n+\n-\n"\n'\n;\n\\\n/\nNUL character\n 
ascanalpha.ldapinjection.technologies.protocol = Protocol

ascanalpha.mongodb.desc = MongoDB query injection may be possible.
ascanalpha.mongodb.extrainfo.alldata = In some PHP or NodeJS based back end implementations, in order to obtain sensitive data it is possible to inject the "[$ne]" string (or other similar ones) that is processed as an associative array rather than a simple text.\nThrough this, the queries made to MongoDB will always be true.
ascanalpha.mongodb.extrainfo.authbypass = More probably a MongoDB attack has bypassed an authentication page.
ascanalpha.mongodb.extrainfo.crash = A MongoDB exception hasn't been properly handled.
ascanalpha.mongodb.extrainfo.json = In some NodeJS based back end implementations, messages having the JSON format as content-type are expected. In order to obtain sensitive data it is possible to attack these applications injecting the "{$ne\:}" string (or other similar ones) that is processed as an associative array rather than a simple text.\nThrough this, the queries made to MongoDB will always be true.
ascanalpha.mongodb.extrainfo.sleep = Through the where or group MongoDB clauses, Javascript sleep function is probably executable.
ascanalpha.mongodb.name = NoSQL Injection - MongoDB
ascanalpha.mongodb.name.timebased = NoSQL Injection - MongoDB (Time Based)
ascanalpha.mongodb.refs = https\://arxiv.org/pdf/1506.04082.pdf\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.html
ascanalpha.mongodb.soln = Do not trust client side input and escape all data on the server side. \nAvoid to use the query input directly into the where and group clauses and upgrade all drivers at the latest available version.

ascanalpha.name = Active Scan Rules - alpha

ascanalpha.webCacheDeception.desc = Web cache deception may be possible. It may be possible for unauthorised user to view sensitive data on this page.
ascanalpha.webCacheDeception.name = Web Cache Deception
ascanalpha.webCacheDeception.otherinfo = Cached Authorised Response and Unauthorised Response are similar.
ascanalpha.webCacheDeception.refs = https\://blogs.akamai.com/2017/03/on-web-cache-deception-attacks.html\nhttps\://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/web-cache-deception/
ascanalpha.webCacheDeception.soln = It is strongly advised to refrain from classifying file types, such as images or stylesheets solely by their URL and file extension. Instead you should make sure that files are cached based on their Content-Type header.

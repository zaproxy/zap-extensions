ascanalpha.desc = Alpha status active scan rules
ascanalpha.name = Active Scan Rules - alpha

ascanalpha.examplefile.name=Un exemple de r\u00e8gle d'analyse active qui charge les donn\u00e9es d'un fichier
ascanalpha.examplefile.desc=Ajouter plus d'informations sur la vuln\u00e9rabilit\u00e9 ici
ascanalpha.examplefile.other=Pour des informations ne rentrant dans aucune des autres sections
ascanalpha.examplefile.soln=Une description g\u00e9n\u00e9rale sur la mani\u00e8re de r\u00e9soudre le probl\u00e8me
ascanalpha.examplefile.refs=https\://www.zaproxy.org/blog/2014-04-30-hacking-zap-4-active-scan-rules/

ascanalpha.ldapinjection.name=Injection LDAP
ascanalpha.ldapinjection.desc=Une injection de LDAP peut \u00eatre possible. Un pirate pourrait contourner les contr\u00f4les d'authentification et afficher et modifier des donn\u00e9es arbitraires dans le r\u00e9pertoire LDAP. 
ascanalpha.ldapinjection.soln=Validate and/or escape all user input before using it to create an LDAP query.  In particular, the following characters (or combinations) should be deny listed\:\n&\n|\n\!\n<\n>\n\=\n~\=\n>\=\n<\=\n*\n(\n)\n,\n+\n-\n"\n'\n;\n\\\n/\nNUL character\n 
ascanalpha.ldapinjection.refs=http\://www.testingsecurity.com/how-to-test/injection-vulnerabilities/LDAP-Injection\nhttps\://owasp.org/www-community/attacks/LDAP_Injection
#ascanalpha.ldapinjection.alert.extrainfo=[{0}] field [{1}] on [{2}] [{3}] may be vulnerable to LDAP injection, using an attack with LDAP meta-characters [{4}], yielding known [{5}] error message [{6}], which was not present in the original response.
ascanalpha.ldapinjection.alert.extrainfo=param\u00e8tre [{0}] sur [{1}] [{2}] peut \u00eatre vuln\u00e9rable \u00e0 l''injection de LDAP \u00e0 l''aide d''une attaque par meta-caract\u00e8res LDAP [{3}], donnant le message d''erreur [{4}] connu [{5}], qui n''\u00e9tait pas pr\u00e9sent dans la r\u00e9ponse originale.
ascanalpha.ldapinjection.alert.evidence={0}
ascanalpha.ldapinjection.booleanbased.alert.extrainfo=param\u00e8tre [{0}] sur [{1}] [{2}] peut \u00eatre vuln\u00e9rable \u00e0 l''injection de LDAP \u00e0 l''aide de l''expression logiquement \u00e9quivalente [{3}] et l''expression ''Faux'' [{4}].
#ascanalpha.ldapinjection.alert.attack=[{0}] field [{1}] set to [{2}]
ascanalpha.ldapinjection.alert.attack=param\u00e8tre [{0}] renseign\u00e9 \u00e0 [{1}]
ascanalpha.ldapinjection.booleanbased.alert.attack=Expression LDAP \u00e9quivalente\: [{0}]. Param\u00e8tre al\u00e9atoire\: [{1}].

ascanalpha.mongodb.name=NoSQL Injection - MongoDB
ascanalpha.mongodb.desc=MongoDB query injection may be possible.
ascanalpha.mongodb.soln=Do not trust client side input and escape all data on the server side. \nAvoid to use the query input directly into the where and group clauses and upgrade all drivers at the latest available version.
ascanalpha.mongodb.refs=https\://arxiv.org/pdf/1506.04082.pdf\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.html
ascanalpha.mongodb.extrainfo.crash=A MongoDB exception hasn't been properly handled.
ascanalpha.mongodb.extrainfo.alldata=In some PHP or NodeJS based back end implementations, in order to obtain sensitive data it is possible to inject the "[$ne]" string (or other similar ones) that is processed as an associative array rather than a simple text.\nThrough this, the queries made to MongoDB will always be true.
ascanalpha.mongodb.extrainfo.sleep=Through the where or group MongoDB clauses, Javascript sleep function is probably executable.
ascanalpha.mongodb.extrainfo.json=In some NodeJS based back end implementations, messages having the JSON format as content-type are expected. In order to obtain sensitive data it is possible to attack these applications injecting the "{$ne\:}" string (or other similar ones) that is processed as an associative array rather than a simple text.\nThrough this, the queries made to MongoDB will always be true.
ascanalpha.mongodb.extrainfo.authbypass=More probably a MongoDB attack has bypassed an authentication page.

ascanalpha.webCacheDeception.name=Web Cache Deception
ascanalpha.webCacheDeception.desc=Web cache deception may be possible. It may be possible for unauthorised user to view sensitive data on this page.
ascanalpha.webCacheDeception.refs=https\://blogs.akamai.com/2017/03/on-web-cache-deception-attacks.html\nhttps\://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/web-cache-deception/
ascanalpha.webCacheDeception.soln=It is strongly advised to refrain from classifying file types, such as images or stylesheets solely by their URL and file extension. Instead you should make sure that files are cached based on their Content-Type header.
ascanalpha.webCacheDeception.otherinfo=Cached Authorised Response and Unauthorised Response are similar.

ascanalpha.text4shell.name=Text4shell (CVE-2022-42889)
ascanalpha.text4shell.skipped=no Active Scan OAST service is selected.
ascanalpha.text4shell.desc=Apache Commons Text prior to 1.10.0 allows RCE when applied to untrusted input due to insecure interpolation defaults.\nApache Commons Text performs variable interpolation, allowing properties to be dynamically evaluated and expanded.\nThe application has been shown to initial contact with remote servers via variable interpolation and may well be vulnerable to Remote Code Execution (RCE).
ascanalpha.text4shell.soln=Upgrade Apache Commons Text prior to version 1.10.0 or newer.
ascanalpha.text4shell.refs=https\://www.cve.org/CVERecord?id\=CVE-2022-42889\nhttps\://securitylab.github.com/advisories/GHSL-2022-018_Apache_Commons_Text/


# ascanalphaAlpha 
#
# This file defines the default (English) variants of all of the internationalised messages
ascanalpha.desc = Active Scan Rules - alpha

ascanalpha.cloudmetadata.name = Cloud Metadata Potentially Exposed
ascanalpha.cloudmetadata.desc = The Cloud Metadata Attack attempts to abuse a misconfigured NGINX server in order to access the instance metadata maintained by cloud service providers such as AWS, GCP and Azure.\n\
All of these providers provide metadata via an internal unroutable IP address '169.254.169.254' - this can be exposed by incorrectly configured NGINX servers and accessed by using this IP address in the Host header field.
ascanalpha.cloudmetadata.otherinfo = Based on the successful response status code cloud metadata may have been returned in the response. Check the response data to see if any cloud metadata has been returned.\n\
 The meta data returned can include information that would allow an attacker to completely compromise the system.
ascanalpha.cloudmetadata.refs = https://www.nginx.com/blog/trust-no-one-perils-of-trusting-user-input/
ascanalpha.cloudmetadata.soln = Do not trust any user data in NGINX configs. In this case it is probably the use of the $host variable which is set from the 'Host' header and can be controlled by an attacker.

ascanalpha.envfiles.name = .env Information Leak
ascanalpha.envfiles.desc = One or more .env files seems to have been located on the server. These files often expose infrastructure or administrative account credentials, API or APP keys, or other sensitive configuration information. 
ascanalpha.envfiles.otherinfo = Based on response status code the .env file may be protected by an authentication or authorization mechanism.
ascanalpha.envfiles.refs = https://www.google.com/search?q=db_password+filetype%3Aenv\nhttps://mobile.twitter.com/svblxyz/status/1045013939904532482
ascanalpha.envfiles.soln = Ensure the .env file is not accessible.

ascanalpha.examplefile.name=An example active scan rule which loads data from a file
ascanalpha.examplefile.desc=Add more information about the vulnerability here
ascanalpha.examplefile.other=This is for information that doesnt fit in any of the other sections
ascanalpha.examplefile.soln=A general description of how to solve the problem
ascanalpha.examplefile.refs=https://www.zaproxy.org/blog/2014-04-30-hacking-zap-4-active-scan-rules/

ascanalpha.hidden.files.name = Hidden File Finder
ascanalpha.hidden.files.alert.name = Hidden File Found
ascanalpha.hidden.files.desc = A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.
ascanalpha.hidden.files.otherinfo = {0}
ascanalpha.hidden.files.refs = https://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html
ascanalpha.hidden.files.soln = Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.

ascanalpha.ldapinjection.name=LDAP Injection
ascanalpha.ldapinjection.desc=LDAP Injection may be possible. It may be possible for an attacker to bypass authentication controls, and to view and modify arbitrary data in the LDAP directory. 
ascanalpha.ldapinjection.soln=Validate and/or escape all user input before using it to create an LDAP query.  In particular, the following characters (or combinations) should be blacklisted:\n&\n|\n!\n<\n>\n=\n~=\n>=\n<=\n*\n(\n)\n,\n+\n-\n"\n'\n;\n\\\n/\nNUL character\n 
ascanalpha.ldapinjection.refs=http://www.testingsecurity.com/how-to-test/injection-vulnerabilities/LDAP-Injection\nhttps://owasp.org/www-community/attacks/LDAP_Injection
#ascanalpha.ldapinjection.alert.extrainfo=[{0}] field [{1}] on [{2}] [{3}] may be vulnerable to LDAP injection, using an attack with LDAP meta-characters [{4}], yielding known [{5}] error message [{6}], which was not present in the original response.
ascanalpha.ldapinjection.alert.extrainfo=parameter [{0}] on [{1}] [{2}] may be vulnerable to LDAP injection, using an attack with LDAP meta-characters [{3}], yielding known [{4}] error message [{5}], which was not present in the original response.
ascanalpha.ldapinjection.alert.evidence={0}
ascanalpha.ldapinjection.booleanbased.alert.extrainfo=parameter [{0}] on [{1}] [{2}] may be vulnerable to LDAP injection, by using the logically equivalent expression [{3}], and 'FALSE' expression [{4}].
#ascanalpha.ldapinjection.alert.attack=[{0}] field [{1}] set to [{2}]
ascanalpha.ldapinjection.alert.attack=parameter [{0}] set to [{1}]
ascanalpha.ldapinjection.booleanbased.alert.attack=Equivalent LDAP expression: [{0}]. Random parameter: [{1}].

ascanalpha.mongodb.name=NoSQL Injection - MongoDB
ascanalpha.mongodb.desc=MongoDB query injection may be possible.
ascanalpha.mongodb.soln=Do not trust client side input and escape all data on the server side. \nAvoid to use the query input directly into the where and group clauses and upgrade all drivers at the latest available version.
ascanalpha.mongodb.refs=https://arxiv.org/pdf/1506.04082.pdf\nhttps://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.html
ascanalpha.mongodb.extrainfo.crash=A MongoDB exception hasn't been properly handled.
ascanalpha.mongodb.extrainfo.alldata=In some PHP or NodeJS based back end implementations, in order to obtain sensitive data it is possible to inject the "[$ne]" string (or other similar ones) that is processed as an associative array rather than a simple text.\nThrough this, the queries made to MongoDB will always be true.
ascanalpha.mongodb.extrainfo.sleep=Through the where or group MongoDB clauses, Javascript sleep function is probably executable.
ascanalpha.mongodb.extrainfo.json=In some NodeJS based back end implementations, messages having the JSON format as content-type are expected. In order to obtain sensitive data it is possible to attack these applications injecting the "{$ne:}" string (or other similar ones) that is processed as an associative array rather than a simple text.\nThrough this, the queries made to MongoDB will always be true.
ascanalpha.mongodb.extrainfo.authbypass=More probably a MongoDB attack has bypassed an authentication page.

ascanalpha.payloader.desc=Provides support for custom payloads in scan rules.
ascanalpha.payloader.name=Active Scan Rules Alpha Custom Payloads

ascanalpha.xsltinjection.name = XSLT Injection
ascanalpha.xsltinjection.desc = Injection using XSL transformations may be possible, and may allow an attacker to read system information, read and write files, and/or execute arbitrary code.
ascanalpha.xsltinjection.refs = https://www.contextis.com/blog/xslt-server-side-injection-attacks
ascanalpha.xsltinjection.soln = Sanitize and analyze every user input coming from any client-side.
ascanalpha.xsltinjection.error.otherinfo = The response to sending an XSLT token included error messages that may indicate a vulnerability to XSLT injections.
ascanalpha.xsltinjection.vendor.otherinfo = The XSLT processor vendor name "{0}" was returned after an injection request.
ascanalpha.xsltinjection.portscan.otherinfo = Port scanning may be possible.
ascanalpha.xsltinjection.command.otherinfo = Command execution may be possible.
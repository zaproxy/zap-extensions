ascanalpha.desc = Alpha status active scan rules
ascanalpha.name = Active Scan Rules - alpha

ascanalpha.examplefile.name=Um exemplo de regra ativa de escaneamento que carrega dados do arquivo
ascanalpha.examplefile.desc=Adicione mais informa\u00e7\u00f5es sobre a vulnerabilidade aqui
ascanalpha.examplefile.other=Aqui \u00e9 para informa\u00e7\u00f5es que n\u00e3o encaixem em nenhuma das outras se\u00e7\u00f5es
ascanalpha.examplefile.soln=Uma descri\u00e7\u00e3o geral de como resolver o problema
ascanalpha.examplefile.refs=https\://www.zaproxy.org/blog/2014-04-30-hacking-zap-4-active-scan-rules/\n

ascanalpha.ldapinjection.name=Inje\u00e7\u00e3o LDAP
ascanalpha.ldapinjection.desc=Inje\u00e7\u00e3o LDAP pode ser poss\u00edvel. Pode ser poss\u00edvel para um atacante contornar controles de autentica\u00e7\u00e3o, visualizar e modificar dados no diret\u00f3rio LDAP. 
ascanalpha.ldapinjection.soln=Valide e escape de todas as entradas do usu\u00e1rio antes de us\u00e1-lo para criar uma consulta LDAP. Em particular, os seguintes caracteres (ou combina\u00e7\u00f5es) devem ser negados na lista\:\n&\n|\n\!\n<\n>\n\=\n~\=\n>\=\n<\=\n*\n(\n)\n,\n+\n-\n"\n'\n;\n\\\n/\nPersonagem NUL\n 
ascanalpha.ldapinjection.refs=http\://www.testingsecurity.com/how-to-test/injection-vulnerabilities/LDAP-Injection\nhttps\://owasp.org/www-community/attacks/LDAP_Injection
#ascanalpha.ldapinjection.alert.extrainfo=[{0}] field [{1}] on [{2}] [{3}] may be vulnerable to LDAP injection, using an attack with LDAP meta-characters [{4}], yielding known [{5}] error message [{6}], which was not present in the original response.
ascanalpha.ldapinjection.alert.extrainfo=parametro [{0}] em [{1}] [{2}] pode ser vulner\u00e1vel a inje\u00e7\u00e3o LDAP, utilizando um ataque com meta-caracteres LDAP [{3}], rendendo a conhecida [{4}] mensagem de erro [{5}], a qual n\u00e3o estava presente na resposta original.
ascanalpha.ldapinjection.alert.evidence={0}
ascanalpha.ldapinjection.booleanbased.alert.extrainfo=parametro [{0}] em [{1}] [{2}] pode ser vulner\u00e1vel a inje\u00e7\u00e3o LDAP, usando a express\u00e3o l\u00f3gica equivalente [{3}], e a express\u00e3o ''FALSE'' [{4}].
#ascanalpha.ldapinjection.alert.attack=[{0}] field [{1}] set to [{2}]
ascanalpha.ldapinjection.alert.attack=par\u00e2metro [{0}] definido para [{1}]
ascanalpha.ldapinjection.booleanbased.alert.attack=A express\u00e3o LDAP equivalente\: [{0}]. Par\u00e2metro aleat\u00f3rio\: [{1}.

ascanalpha.mongodb.name=Inje\u00e7\u00e3o NoSQL - MongoDB
ascanalpha.mongodb.desc=A inje\u00e7\u00e3o de consulta do MongoDB pode ser poss\u00edvel.
ascanalpha.mongodb.soln=N\u00e3o confie na entrada do lado do cliente e escape de todos os dados do lado do servidor.\nEvite usar a entrada de consulta diretamente nas cl\u00e1usulas Onde e grupo e atualize todos os drivers com a vers\u00e3o mais recente dispon\u00edvel.
ascanalpha.mongodb.refs=https\://arxiv.org/pdf/1506.04082.pdf\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.html
ascanalpha.mongodb.extrainfo.crash=Uma exce\u00e7\u00e3o do MongoDB n\u00e3o foi tratada adequadamente.
ascanalpha.mongodb.extrainfo.alldata=Em algumas implementa\u00e7\u00f5es de Processo interno baseadas em PHP ou NodeJS, a fim de obter dados confidenciais, \u00e9 poss\u00edvel injetar a string "[$ne]" (ou outras semelhantes) que \u00e9 processada como uma matriz associativa em vez de um texto simples.\nCom isso, as consultas feitas ao MongoDB sempre ser\u00e3o verdadeiras.
ascanalpha.mongodb.extrainfo.sleep=Por meio das cl\u00e1usulas Onde ou grupo do MongoDB, a fun\u00e7\u00e3o Javascript dormir \u00e9 provavelmente execut\u00e1vel.
ascanalpha.mongodb.extrainfo.json=Em algumas implementa\u00e7\u00f5es de Processo interno baseadas em NodeJS, s\u00e3o esperadas mensagens com o formato JSON como tipo de conte\u00fado. Para obter dados sens\u00edveis, \u00e9 poss\u00edvel atacar esses aplicativos injetando a string "{$ne\:}" (ou outras semelhantes) que \u00e9 processada como um array associativo em vez de um texto simples.
ascanalpha.mongodb.extrainfo.authbypass=Mais provavelmente, um ataque do MongoDB contornou uma p\u00e1gina de autentica\u00e7\u00e3o.

ascanalpha.webCacheDeception.name=Decep\u00e7\u00e3o do cache da web
ascanalpha.webCacheDeception.desc=Pode ser poss\u00edvel enganar o cache da Web. Pode ser poss\u00edvel que um usu\u00e1rio n\u00e3o autorizado visualize dados confidenciais nesta p\u00e1gina.
ascanalpha.webCacheDeception.refs=https\://blogs.akamai.com/2017/03/on-web-cache-deception-attacks.html\nhttps\://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/web-cache-deception/
ascanalpha.webCacheDeception.soln=\u00c9 altamente recomend\u00e1vel evitar a classifica\u00e7\u00e3o de tipos de arquivo, como imagens ou folhas de estilo, apenas por seu URL e extens\u00e3o de arquivo. Em vez disso, voc\u00ea deve certificar-se de que os arquivos sejam armazenados em cache com base no cabe\u00e7alho Tipo de conte\u00fado.
ascanalpha.webCacheDeception.otherinfo=A resposta autorizada em cache e a resposta n\u00e3o autorizada s\u00e3o semelhantes.

ascanalpha.text4shell.name=Text4shell (CVE-2022-42889)
ascanalpha.text4shell.skipped=no Active Scan OAST service is selected.
ascanalpha.text4shell.desc=Apache Commons Text prior to 1.10.0 allows RCE when applied to untrusted input due to insecure interpolation defaults.\nApache Commons Text performs variable interpolation, allowing properties to be dynamically evaluated and expanded.\nThe application has been shown to initial contact with remote servers via variable interpolation and may well be vulnerable to Remote Code Execution (RCE).
ascanalpha.text4shell.soln=Upgrade Apache Commons Text prior to version 1.10.0 or newer.
ascanalpha.text4shell.refs=https\://www.cve.org/CVERecord?id\=CVE-2022-42889\nhttps\://securitylab.github.com/advisories/GHSL-2022-018_Apache_Commons_Text/


ascanalpha.desc = Regras de Scan Ativo - alpha

ascanalpha.examplefile.name=Um exemplo de regra ativa de escaneamento que carrega dados do arquivo
ascanalpha.examplefile.desc=Adicione mais informa\u00e7\u00f5es sobre a vulnerabilidade aqui
ascanalpha.examplefile.other=Aqui \u00e9 para informa\u00e7\u00f5es que n\u00e3o encaixem em nenhuma das outras se\u00e7\u00f5es
ascanalpha.examplefile.soln=Uma descri\u00e7\u00e3o geral de como resolver o problema
ascanalpha.examplefile.refs=https\://www.zaproxy.org/blog/2014-04-30-hacking-zap-4-active-scan-rules/\n

ascanalpha.ldapinjection.name=Inje\u00e7\u00e3o LDAP
ascanalpha.ldapinjection.desc=Inje\u00e7\u00e3o LDAP pode ser poss\u00edvel. Pode ser poss\u00edvel para um atacante contornar controles de autentica\u00e7\u00e3o, visualizar e modificar dados no diret\u00f3rio LDAP. 
ascanalpha.ldapinjection.soln=Valide e escape de todas as entradas do usu\u00e1rio antes de us\u00e1-lo para criar uma consulta LDAP. Em particular, os seguintes caracteres (ou combina\u00e7\u00f5es) devem ser negados na lista\:\n&\n|\n\!\n<\n>\n\=\n~\=\n>\=\n<\=\n*\n(\n)\n,\n+\n-\n"\n'\n;\n\\\n/\nPersonagem NUL\n 
ascanalpha.ldapinjection.refs=http\://www.testingsecurity.com/how-to-test/injection-vulnerabilities/LDAP-Injection\nhttps\://owasp.org/www-community/attacks/LDAP_Injection
#ascanalpha.ldapinjection.alert.extrainfo=[{0}] field [{1}] on [{2}] [{3}] may be vulnerable to LDAP injection, using an attack with LDAP meta-characters [{4}], yielding known [{5}] error message [{6}], which was not present in the original response.
ascanalpha.ldapinjection.alert.extrainfo=parametro [{0}] em [{1}] [{2}] pode ser vulner\u00e1vel a inje\u00e7\u00e3o LDAP, utilizando um ataque com meta-caracteres LDAP [{3}], rendendo a conhecida [{4}] mensagem de erro [{5}], a qual n\u00e3o estava presente na resposta original.
ascanalpha.ldapinjection.alert.evidence={0}
ascanalpha.ldapinjection.booleanbased.alert.extrainfo=parametro [{0}] em [{1}] [{2}] pode ser vulner\u00e1vel a inje\u00e7\u00e3o LDAP, usando a express\u00e3o l\u00f3gica equivalente [{3}], e a express\u00e3o ''FALSE'' [{4}].
#ascanalpha.ldapinjection.alert.attack=[{0}] field [{1}] set to [{2}]
ascanalpha.ldapinjection.alert.attack=par\u00e2metro [{0}] definido para [{1}]
ascanalpha.ldapinjection.booleanbased.alert.attack=A express\u00e3o LDAP equivalente\: [{0}]. Par\u00e2metro aleat\u00f3rio\: [{1}.

ascanalpha.mongodb.name=Inje\u00e7\u00e3o NoSQL - MongoDB
ascanalpha.mongodb.desc=A inje\u00e7\u00e3o de consulta do MongoDB pode ser poss\u00edvel.
ascanalpha.mongodb.soln=N\u00e3o confie na entrada do lado do cliente e escape de todos os dados do lado do servidor.\nEvite usar a entrada de consulta diretamente nas cl\u00e1usulas Onde e grupo e atualize todos os drivers com a vers\u00e3o mais recente dispon\u00edvel.
ascanalpha.mongodb.refs=https\://arxiv.org/pdf/1506.04082.pdf\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.html
ascanalpha.mongodb.extrainfo.crash=Uma exce\u00e7\u00e3o do MongoDB n\u00e3o foi tratada adequadamente.
ascanalpha.mongodb.extrainfo.alldata=Em algumas implementa\u00e7\u00f5es de Processo interno baseadas em PHP ou NodeJS, a fim de obter dados confidenciais, \u00e9 poss\u00edvel injetar a string "[$ne]" (ou outras semelhantes) que \u00e9 processada como uma matriz associativa em vez de um texto simples.\nCom isso, as consultas feitas ao MongoDB sempre ser\u00e3o verdadeiras.
ascanalpha.mongodb.extrainfo.sleep=Por meio das cl\u00e1usulas Onde ou grupo do MongoDB, a fun\u00e7\u00e3o Javascript dormir \u00e9 provavelmente execut\u00e1vel.
ascanalpha.mongodb.extrainfo.json=Em algumas implementa\u00e7\u00f5es de Processo interno baseadas em NodeJS, s\u00e3o esperadas mensagens com o formato JSON como tipo de conte\u00fado. Para obter dados sens\u00edveis, \u00e9 poss\u00edvel atacar esses aplicativos injetando a string "{$ne\:}" (ou outras semelhantes) que \u00e9 processada como um array associativo em vez de um texto simples.
ascanalpha.mongodb.extrainfo.authbypass=Mais provavelmente, um ataque do MongoDB contornou uma p\u00e1gina de autentica\u00e7\u00e3o.

ascanalpha.forbiddenBypass.name=Ignorando 403
ascanalpha.forbiddenBypass.desc=Pode ser poss\u00edvel ignorar os terminais 403, a regra de varredura enviou uma carga \u00fatil que tornou a resposta acess\u00edvel (c\u00f3digo de status 200).
ascanalpha.forbiddenBypass.refs=https\://www.acunetix.com/blog/articles/a-fresh-look-on-reverse-proxy-related-attacks/\nhttps\://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf\nhttps\://www.contextis.com/en/blog/server-technologies-reverse-proxy-bypass

ascanalpha.cors.info.name=Cabe\u00e7alho CORS
ascanalpha.cors.info.desc=Compartilhamento de recursos de origem cruzada (CORS) \u00e9 um mecanismo baseado em cabe\u00e7alho HTTP que permite a um servidor indicar qualquer outra origem (dom\u00ednio, esquema ou porta) diferente da sua pr\u00f3pria, a partir da qual um navegador deve permitir o carregamento de recursos. Isso relaxa a pol\u00edtica de mesma origem (SOP).
ascanalpha.cors.vuln.name=Configura\u00e7\u00e3o incorreta do CORS
ascanalpha.cors.vuln.desc=Essa configura\u00e7\u00e3o incorreta do CORS pode permitir que um invasor execute consultas AJAX no site vulner\u00e1vel a partir de uma p\u00e1gina maliciosa carregada pelo agente do usu\u00e1rio da v\u00edtima.\nPara realizar consultas AJAX autenticadas, o servidor deve especificar o cabe\u00e7alho "Controle de acesso permitir credenciais\: verdadeiro" e o cabe\u00e7alho "Origem de permiss\u00e3o de controle de acesso" deve ser definido como nulo ou o dom\u00ednio da p\u00e1gina maliciosa. Mesmo se essa configura\u00e7\u00e3o incorreta n\u00e3o permitir solicita\u00e7\u00f5es AJAX autenticadas, o conte\u00fado confidencial n\u00e3o autenticado ainda pode ser acessado (por exemplo, sites de intranet).\nUma p\u00e1gina maliciosa pode pertencer a um site malicioso, mas tamb\u00e9m a um site confi\u00e1vel com falhas (por exemplo, XSS, suporte de HTTP sem TLS permitindo a inje\u00e7\u00e3o de c\u00f3digo atrav\u00e9s de MITM,etc).
ascanalpha.cors.soln=Se um recurso da web cont\u00e9m informa\u00e7\u00f5es confidenciais, a origem deve ser especificada corretamente no cabe\u00e7alho origem de permiss\u00e3o de controle de acesso. Apenas sites confi\u00e1veis que precisam deste recurso devem ser especificados neste cabe\u00e7alho, com o protocolo mais seguro suportado.
ascanalpha.cors.refs=https\://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\nhttps\://portswigger.net/web-security/cors

ascanalpha.webCacheDeception.name=Decep\u00e7\u00e3o do cache da web
ascanalpha.webCacheDeception.desc=Pode ser poss\u00edvel enganar o cache da Web. Pode ser poss\u00edvel que um usu\u00e1rio n\u00e3o autorizado visualize dados confidenciais nesta p\u00e1gina.
ascanalpha.webCacheDeception.refs=https\://blogs.akamai.com/2017/03/on-web-cache-deception-attacks.html\nhttps\://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/web-cache-deception/
ascanalpha.webCacheDeception.soln=\u00c9 altamente recomend\u00e1vel evitar a classifica\u00e7\u00e3o de tipos de arquivo, como imagens ou folhas de estilo, apenas por seu URL e extens\u00e3o de arquivo. Em vez disso, voc\u00ea deve certificar-se de que os arquivos sejam armazenados em cache com base no cabe\u00e7alho Tipo de conte\u00fado.
ascanalpha.webCacheDeception.otherinfo=A resposta autorizada em cache e a resposta n\u00e3o autorizada s\u00e3o semelhantes.

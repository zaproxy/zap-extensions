ascanalpha.desc = Alpha status active scan rules

ascanalpha.examplefile.desc = Aggiungere qui maggiori informazioni sulla vulnerabilit\u00e0
ascanalpha.examplefile.name = Un  esempio di regola di scansione attiva che carica dati da un file
ascanalpha.examplefile.other = Questa sezione \u00e8 per informazioni che non rientrano in nessuna altra sezione
ascanalpha.examplefile.refs = https\://www.zaproxy.org/blog/2014-04-30-hacking-zap-4-active-scan-rules/
ascanalpha.examplefile.soln = Una descrizione generale di come risolvere il problema

#ascanalpha.ldapinjection.alert.attack=[{0}] field [{1}] set to [{2}]
ascanalpha.ldapinjection.alert.attack = parametro [{0}]  impostato a [{1}]
#ascanalpha.ldapinjection.alert.extrainfo=[{0}] field [{1}] on [{2}] [{3}] may be vulnerable to LDAP injection, using an attack with LDAP meta-characters [{4}], yielding known [{5}] error message [{6}], which was not present in the original response.
ascanalpha.ldapinjection.alert.extrainfo = Il parametro [{0}] su [{1}] [{2}] pu\u00f2 essere vulnerabile all''iniezione di LDAP, utilizzando un attacco con meta-caratteri LDAP [{3}], generando il messaggio [{4}] di errore [{5}], che non era presente nella risposta originale.
ascanalpha.ldapinjection.booleanbased.alert.attack = Espressione equivalente LDAP\: [{0}]. Parametro casuale\: [{1}].
ascanalpha.ldapinjection.booleanbased.alert.extrainfo = Il parametro [{0}] su [{1}] [{2}] pu\u00f2 essere vulnerabile all''iniezione LDAP, utilizzando l''espressione logicamente equivalente [{3}] e l''espressione ''FALSE'' [{4}].
ascanalpha.ldapinjection.desc = Una iniezione su LDAP \u00e8 possibile. Potrebbe essere possibile per un utente malintenzionato aggirare i controlli di autenticazione, consentendo di visualizzare e modificare dati arbitrari nella directory LDAP. 
ascanalpha.ldapinjection.name = Iniezione LDAP
ascanalpha.ldapinjection.refs = https\://owasp.org/www-community/attacks/LDAP_Injection\nhttps\://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
ascanalpha.ldapinjection.soln = Validate and/or escape all user input before using it to create an LDAP query.  In particular, the following characters (or combinations) should be deny listed\:\n&\n|\n\!\n<\n>\n\=\n~\=\n>\=\n<\=\n*\n(\n)\n,\n+\n-\n"\n'\n;\n\\\n/\nNUL character\n 
ascanalpha.ldapinjection.technologies.protocol = Protocol

ascanalpha.mongodb.desc = MongoDB query injection may be possible.
ascanalpha.mongodb.extrainfo.alldata = In some PHP or NodeJS based back end implementations, in order to obtain sensitive data it is possible to inject the "[$ne]" string (or other similar ones) that is processed as an associative array rather than a simple text.\nThrough this, the queries made to MongoDB will always be true.
ascanalpha.mongodb.extrainfo.authbypass = More probably a MongoDB attack has bypassed an authentication page.
ascanalpha.mongodb.extrainfo.crash = A MongoDB exception hasn't been properly handled.
ascanalpha.mongodb.extrainfo.json = In some NodeJS based back end implementations, messages having the JSON format as content-type are expected. In order to obtain sensitive data it is possible to attack these applications injecting the "{$ne\:}" string (or other similar ones) that is processed as an associative array rather than a simple text.\nThrough this, the queries made to MongoDB will always be true.
ascanalpha.mongodb.extrainfo.sleep = Through the where or group MongoDB clauses, Javascript sleep function is probably executable.
ascanalpha.mongodb.name = NoSQL Injection - MongoDB
ascanalpha.mongodb.name.timebased = NoSQL Injection - MongoDB (Time Based)
ascanalpha.mongodb.refs = https\://arxiv.org/pdf/1506.04082.pdf\nhttps\://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.html
ascanalpha.mongodb.soln = Do not trust client side input and escape all data on the server side. \nAvoid to use the query input directly into the where and group clauses and upgrade all drivers at the latest available version.

ascanalpha.name = Active Scan Rules - alpha

ascanalpha.webCacheDeception.desc = Web cache deception may be possible. It may be possible for unauthorised user to view sensitive data on this page.
ascanalpha.webCacheDeception.name = Web Cache Deception
ascanalpha.webCacheDeception.otherinfo = Cached Authorised Response and Unauthorised Response are similar.
ascanalpha.webCacheDeception.refs = https\://blogs.akamai.com/2017/03/on-web-cache-deception-attacks.html\nhttps\://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/web-cache-deception/
ascanalpha.webCacheDeception.soln = It is strongly advised to refrain from classifying file types, such as images or stylesheets solely by their URL and file extension. Instead you should make sure that files are cached based on their Content-Type header.

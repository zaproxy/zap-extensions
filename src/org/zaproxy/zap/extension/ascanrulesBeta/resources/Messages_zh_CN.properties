#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages

ascanbeta.desc=\u6d3b\u52a8\u626b\u63cf\u89c4\u5219 - \u6d4b\u8bd5\u7248

ascanbeta.backupfiledisclosure.name=\u5907\u4efd\u6587\u4ef6\u6cc4\u9732
ascanbeta.backupfiledisclosure.desc=\u8be5\u6587\u4ef6\u7684\u5907\u4efd\u7531Web\u670d\u52a1\u5668\u6240\u516c\u5f00
ascanbeta.backupfiledisclosure.soln=\u4e0d\u539f\u4f4dWeb\u670d\u52a1\u5668\u4e0a\u7f16\u8f91\u6587\u4ef6\uff0c\u5e76\u4e14\u786e\u4fdd\u975e\u5fc5\u8981\u7684\u6587\u4ef6\uff08\u5305\u62ec\u9690\u85cf\u6587\u4ef6\uff09\u4eceWeb\u670d\u52a1\u5668\u4e0a\u5220\u9664\u3002
ascanbeta.backupfiledisclosure.evidence=\u5728[{1}]\u6709\u4e00\u4efd[{0}]\u7684\u5907\u4efd\u53ef\u7528

ascanbeta.crossdomain.name=\u8de8\u57df\u914d\u7f6e\u9519\u8bef
#the refs cannot be customised for each sub-category (Adobe, Silverlight, etc)
ascanbeta.crossdomain.refs=http\://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html\nhttp\://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf\nhttp\://msdn.microsoft.com/en-US/library/cc197955%28v\=vs.95%29.aspx\nhttp\://msdn.microsoft.com/en-us/library/cc838250%28v\=vs.95%29.aspx
ascanbeta.crossdomain.adobe.read.name=\u8de8\u57df\u914d\u7f6e\u9519\u8bef - Adobe - Read
ascanbeta.crossdomain.adobe.send.name=\u8de8\u57df\u914d\u7f6e\u9519\u8bef - Adobe - Read
ascanbeta.crossdomain.adobe.desc=Flash/Silverlight based cross-site request forgery may be possible, due to a misconfiguration on the web server. 
ascanbeta.crossdomain.adobe.read.soln=Configure the crossdomain.xml file to restrict the list of domains that are allowed to make cross-domain read requests to this web server, using <allow-access-from domain\="example.com">. You should only grant access to "*" (all domains) if you are certain that this service does not host any access-controlled, personalized, or private data.
ascanbeta.crossdomain.adobe.read.extrainfo=The web server permits malicious cross-domain data read requests originating from Flash/Silverlight components served from any third party domain, to this domain. If the victim user is logged into this service, the malicious read requests are processed using the privileges of the victim, and can result in data from this service being compromised by an unauthorised third party web site, via the victim's web browser. This is particularly likely to be an issue if a Cookie based session implementation is in use. 
ascanbeta.crossdomain.adobe.send.soln=Configure the crossdomain.xml file to restrict the list of domains that are allowed to make cross-domain send (but not necessarily read) requests to this web server, using <allow-http-request-headers-from domain\="example.com" headers\="Authorization,X-Blahh">. You should only grant access to "*" (all domains) if you are certain that this service is not vulnerable to Cross Site Request Forgery (CSRF) attacks.
ascanbeta.crossdomain.adobe.send.extrainfo=The web server permits malicious cross-domain data send (but not necessarily read) requests originating from Flash/Silverlight components served from any third party domain, to this domain. If the victim user is logged into this service, the malicious send requests are processed using the privileges of the victim, and can result in Cross Site Request Forgery (CSRF) type attacks, via the victim's web browser. This is particularly likely to be an issue if a Cookie based session implementation is in use.
ascanbeta.crossdomain.silverlight.name=Cross-Domain Misconfiguration - Silverlight
ascanbeta.crossdomain.silverlight.desc=\u7531\u4e8eweb\u670d\u52a1\u5668\u4e0a\u7684\u9519\u8bef\u914d\u7f6e\uff0c\u57fa\u4e8eSilverlight\u7684\u8de8\u7ad9\u70b9\u4f2a\u9020\u8bf7\u6c42\u662f\u53ef\u80fd\u7684\u3002
ascanbeta.crossdomain.silverlight.soln=Configure the clientaccesspolicy.xml file to restrict the list of domains that are allowed to make cross-domain requests to this web server, using <domain uri\="https\://example.com" />. You should only grant access to "*" (all domains) if you are certain that this service does not host any access-controlled, personalized, or private data.
ascanbeta.crossdomain.silverlight.extrainfo=The web server permits malicious cross-domain requests originating from Silverlight components served from any third party domain, to this domain. If the victim user is logged into this service, the malicious requests are processed using the privileges of the victim, and can result in data from this service being compromised by an unauthorised third party web site, via the victim's web browsers. It can also result in Cross Site Request Forgery (CSRF) type attacks. This is particularly likely to be an issue if a Cookie based session implementation is in use.

ascanbeta.csrftokenscan.name=\u53cdCSRF\u4ee4\u724c\u626b\u63cf\u7a0b\u5e8f
ascanbeta.csrftokenscan.extrainfo.annotation=This is an informational alert as the form has a security annotation indicating that it does not need an anti-CSRF Token. This should be tested manually to ensure the annotation is correct.

ascanbeta.heartbleed.name=\u5fc3\u810f\u51fa\u8840\u6f0f\u6d1eOpenSSL\u7684\u6f0f\u6d1e
ascanbeta.heartbleed.desc=The TLS implementation in OpenSSL 1.0.1 before 1.0.1g does not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, potentially disclosing sensitive information.
ascanbeta.heartbleed.soln=Update to OpenSSL 1.0.1g or later. Re-issue HTTPS certificates. Change asymmetric private keys and shared secret keys, since these may have been compromised, with no evidence of compromise in the server log files.
ascanbeta.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
ascanbeta.heartbleed.extrainfo=This issue was confirmed by exfiltrating data from the server, using {0}. This is unlikely to be a false positive.

ascanbeta.HTTPParamPoll.name=HTTP Parameter Pollution scanner
ascanbeta.HTTPParamPoll.desc=HTTP Parameter Pollution (HPP) attacks consist of injecting encoded query string delimiters into other existing parameters. If a web application does not properly sanitize the user input, a malicious user can compromise the logic of the application to perform either client-side or server-side attacks. One consequence of HPP attacks is that the attacker can potentially override existing hard-coded HTTP parameters to modify the behavior of an application, bypass input validation checkpoints, and access and possibly exploit variables that may be out of direct reach.
ascanbeta.HTTPParamPoll.sol=Properly sanitize the user input for parameter delimiters
ascanbeta.HTTPParamPoll.alert.attack=HTTP Parameter Pollution
ascanbeta.HTTPParamPoll.extrainfo=http\://www.google.com/search?q\=http+parameter+pollution

ascanbeta.insecurehttpmethod.name=\u4e0d\u5b89\u5168\u7684HTTP\u65b9\u6cd5
ascanbeta.insecurehttpmethod.detailed.name=\u4e0d\u5b89\u5168\u7684HTTP\u65b9\u6cd5\uff1a{0}
ascanbeta.insecurehttpmethod.desc=The insecure HTTP method [{0}] is enabled on the web server for this resource. Depending on the web server configuration, and the underlying implementation responsible for serving the resource, this might or might not be exploitable. The TRACK and TRACE methods may be used by an attacker, to gain access to the authorisation token/session cookie of an application user, even if the session cookie is protected using the ''HttpOnly'' flag. For the attack to be successful, the application user must typically be using an older web browser, or a web browser which has a Same Origin Policy (SOP) bypass vulnerability. The ''CONNECT'' method can be used by a web client to create an HTTP tunnel to third party websites or services.
ascanbeta.insecurehttpmethod.trace.exploitable.desc=The insecure HTTP method [{0}] is enabled for this resource, and is exploitable. The TRACK and TRACE methods may be used by an attacker, to gain access to the authorisation token/session cookie of an application user, even if the session cookie is protected using the ''HttpOnly'' flag. For the attack to be successful, the application user must typically be using an older web browser, or a web browser which has a Same Origin Policy (SOP) bypass vulnerability.
ascanbeta.insecurehttpmethod.connect.exploitable.desc=The insecure HTTP method [{0}] is enabled for this resource, and is exploitable. It was found to be possible to establish a tunneled socket connection to a third party service, using this HTTP method.  This would allow the service to be used as an anonymous spam relay, or as a web proxy, bypassing network restrictions. It also allows it to be used to establish a tunneled VPN, effectively extending the network perimeter to include untrusted components. 
ascanbeta.insecurehttpmethod.extrainfo=The OPTIONS method disclosed the following enabled HTTP methods for this resource\: [{0}]
ascanbeta.insecurehttpmethod.trace.exploitable.extrainfo=\u5df2\u7ecf\u4e3a\u8fd9\u4e2a\u8bf7\u6c42\u53d1\u9001\u8ddf\u8e2a\u8bf7\u6c42\uff0c\u5e76\u5e26\u6709\u81ea\u5b9a\u4e49\u7684cookie\u503c[{0}]\u3002\u8fd9\u4e2acookie\u503c\u5728HTTP\u54cd\u5e94\u4e2d\u516c\u5f00\uff0c\u5e76\u5bf9\u8fd9\u4e2a\u6f0f\u6d1e\u8fdb\u884c\u4e86\u786e\u8ba4\u3002
ascanbeta.insecurehttpmethod.connect.exploitable.extrainfo=\u8fd9\u79cd\u8fde\u63a5\u65b9\u6cd5\u7528\u6765\u5efa\u7acb\u4e00\u4e2a\u901a\u8fc7web\u670d\u52a1\u5668\u8fde\u63a5\u5230[{0}]\u7684\u5957\u63a5\u5b57\u3002
ascanbeta.insecurehttpmethod.soln=\u505c\u7528\u4e0d\u5b89\u5168\u7684web\u670d\u52a1\u5668\u8ddf\u8e2a\u548c\u8fde\u63a5\u7b49\u65b9\u6cd5\uff0c\u5e76\u786e\u4fdd\u5b9e\u73b0\u57fa\u7840\u670d\u52a1\u65f6\u4e0d\u652f\u6301\u4e0d\u5b89\u5168\u7684\u65b9\u6cd5\u3002


ascanbeta.integeroverflow.name=\u6574\u6570\u6ea2\u51fa\u9519\u8bef
ascanbeta.integeroverflow.desc=\u5728\u7f16\u8bd1\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5c1a\u672a\u5bf9\u8f93\u5165\u6d41\u8fdb\u884c\u6b63\u786e\u6027\u68c0\u67e5\u7684\u6574\u6570\u65f6\uff0c\u4f1a\u53d1\u751f\u6574\u6570\u6ea2\u51fa\u7684\u60c5\u51b5\u3002
ascanbeta.integeroverflow.soln=\u5bf9\u8f93\u5165\u7684\u6574\u6570\u7684\u5927\u5c0f\u8fdb\u884c\u6b63\u786e\u6027\u68c0\u67e5\uff0c\u4ee5\u6b64\u9632\u6b62\u6ea2\u51fa\u4ee5\u53ca\u5206\u6bcd\u4e3a\u96f6\u7684\u9519\u8bef\uff0c\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u540e\u53f0\u7a0b\u5e8f\u8fdb\u884c\u91cd\u5199\u3002\u8fd9\u9700\u8981\u5bf9\u540e\u53f0\u7684\u53ef\u6267\u884c\u6587\u4ef6\u8fdb\u884c\u91cd\u65b0\u7f16\u8bd1\u3002
ascanbeta.integeroverflow.refs=https\://www.owasp.org/index.php/Integer_overflow and http\://projects.webappsec.org/w/page/13246946/Integer%20Overflows.
ascanbeta.integeroverflow.error1=\u53ef\u80fd\u53d1\u751f\u7684\u6574\u6570\u6ea2\u51fa\u7684\u60c5\u51b5\u3002\u5728\u8f93\u5165\u4e00\u957f\u4e32\u968f\u673a\u6574\u6570\u65f6\uff0c\u72b6\u6001\u4ee3\u7801\u53d1\u751f\u4e86\u53d8\u5316\u3002
ascanbeta.integeroverflow.error2=\u53ef\u80fd\u53d1\u751f\u7684\u6574\u6570\u6ea2\u51fa\u7684\u60c5\u51b5\u3002\u5728\u8f93\u5165\u4e00\u957f\u4e32\u96f6\u65f6\uff0c\u72b6\u6001\u4ee3\u7801\u53d1\u751f\u4e86\u53d8\u5316\u3002
ascanbeta.integeroverflow.error3=\u53ef\u80fd\u53d1\u751f\u7684\u6574\u6570\u6ea2\u51fa\u7684\u60c5\u51b5\u3002\u5728\u8f93\u5165\u4e00\u957f\u4e32\u76841\u65f6\uff0c\u72b6\u6001\u4ee3\u7801\u53d1\u751f\u4e86\u53d8\u5316\u3002
ascanbeta.integeroverflow.error4=\u53ef\u80fd\u53d1\u751f\u7684\u6574\u6570\u6ea2\u51fa\u7684\u60c5\u51b5\u3002\u5728\u8f93\u5165\u4e00\u957f\u4e32\u76849\u65f6\uff0c\u72b6\u6001\u4ee3\u7801\u53d1\u751f\u4e86\u53d8\u5316\u3002

ascanbeta.noanticsrftokens.name=\u7f3a\u5c11\u53cdCSRF\u4ee4\u724c
ascanbeta.noanticsrftokens.desc=\u5728\u63d0\u4ea4\u7684HTML\u8868\u5355\u4e2d\u4e2d\u627e\u4e0d\u5230\u53cdCSRF\u4ee4\u724c\u3002

ascanbeta.remotecodeexecution.cve-2012-1823.name=\u6267\u884c\u8fdc\u7a0b\u4ee3\u7801\uff1aCVE-2012-1823
ascanbeta.remotecodeexecution.cve-2012-1823.desc=Some PHP versions, when configured to run using CGI, do not correctly handle query strings that lack an unescaped "\=" character, enabling arbitrary code execution. In this case, an operating system command was caused to be executed on the web server, and the results were returned to the web browser. 
ascanbeta.remotecodeexecution.cve-2012-1823.soln=Upgrade to the latest stable version of PHP, or use the Apache web server and the mod_rewrite module to filter out malicious requests using the "RewriteCond" and "RewriteRule" directives.

ascanbeta.sessionfixation.name=Session Fixation
ascanbeta.sessionfixation.desc=Session Fixation may be possible. If this issue occurs with a login URL (where the user authenticates themselves to the application), then the URL may be given by an attacker, along with a fixed session id, to a victim, in order to later assume the identity of the victim using the given session id. If the issue occurs with a non-login page, the URL and fixed session id may only be used by an attacker to track an unauthenticated user's actions. If the vulnerability occurs on a cookie field or a form field (POST parameter) rather than on a URL (GET) parameter, then some other vulnerability may also be required in order to set the cookie field on the victim's browser, to allow the vulnerability to be exploited.
ascanbeta.sessionfixation.soln=1) Prevent the attacker from gaining a session id by enforcing strict session ids, and by only allocating session ids upon successful authentication to the application.\n2) The server should always create a new session id upon authentication, regardless of whether a session is already in place.\n3) Bind the session id to some identificable client attribute combination, such as IP address, SSL client certificate.\n4) Sessions, when destroyed, must be destroyed on the server, as well as on the client.\n5) Implement a logout mechanism which will destroy all previous sessions for the client.\n6) Implement absolute session timeouts.\n7)Switch from a URL based to a cookie or form based session id implementation, as the latter typically require additional vulnerabilities, in order to be exploitable by an attacker\n
ascanbeta.sessionfixation.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management\nhttps\://www.owasp.org/index.php/Session_fixation\nhttp\://www.acros.si/papers/session_fixation.pdf\nhttp\://www.technicalinfo.net/papers/WebBasedSessionManagement.html\nhttps\://www.owasp.org/index.php/Top_10_2010-A9
ascanbeta.sessionfixation.alert.cookie.extrainfo=Cookie set in response when cookie field [{0}] is set to NULL\: [{1}]\nCookie set in response with borrowed (valid) cookie value in request [{1}] \: [{2}]
ascanbeta.sessionfixation.alert.cookie.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
ascanbeta.sessionfixation.alert.url.extrainfo=A likely session value has appeared in URLs in the HTML output when URL parameter/pseudo URL parameter [{0}] is set to NULL\: [{1}]\nWhen this ''borrowed'' session [{1}] is used in a subsequent request for this URL, a new session is not created.
ascanbeta.sessionfixation.alert.url.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
ascanbeta.sessionfixation.alert.attack={0} field\: [{1}]
#Exposed Session Id messages
ascanbeta.sessionidexposedinurl.name=Exposed Session ID
ascanbeta.sessionidexposedinurl.desc=A session id is exposed in the URL. By sharing such a website URL (containing the session id), a naiive user may be inadvertently granting access to their data, compromising its confidentiality, integrity, and availability.  URLs containing the session identifier also appear in web browser bookmarks, web server log files, and proxy server log files. 
ascanbeta.sessionidexposedinurl.soln=Use a more secure session management implementation, such as one that uses session cookies, which are not as easily shared inadvertently, and which do not typically appear in server log files or web browser bookmarks.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexposedinurl.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management
ascanbeta.sessionidexposedinurl.alert.extrainfo={0} field [{1}] contains an exposed session identifier [{2}]
ascanbeta.sessionidexposedinurl.alert.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
ascanbeta.sessionidexposedinurl.alert.attack={0} field\: [{1}]
#Session Id Cookie not sent securely
ascanbeta.sessionidsentinsecurely.name=\u6240\u4f20\u8f93\u7684\u4f1a\u8bddID\u4e0d\u5b89\u5168
ascanbeta.sessionidsentinsecurely.desc=A session id may be sent via an insecure mechanism. In the case of a cookie sent in the request, this occurs when HTTP, rather than HTTPS, is used.  In the case of a cookie sent by the server in response (when the URL is modified by setting the named parameter field to NULL), the 'secure' flag is not set, allowing the cookie to be sent later via HTTP rather than via HTTPS. This may allow a passive eavesdropper on the network path to gain full access to the victim's session.  
ascanbeta.sessionidsentinsecurely.soln=1) Use the latest available version of SSL/TLS (for HTTPS) for all pages where a session id is communicated between the browser and the web server.\n2) Do not allow the communication to be forced down to the unencrypted HTTP protocol.\n3) Use the 'secure' flag when setting a cookie containing a session id, to prevent its subsequent transmission by an insecure mechanism.\n4) Forward non-secure HTTP page requests to the secure HTTPS equivalent page.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidsentinsecurely.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management\nhttps\://www.owasp.org/index.php/Top_10_2010-A9
ascanbeta.sessionidsentinsecurely.alert.extrainfo=session identifier {0} field [{1}], value [{2}] may be sent via an insecure mechanism.  
ascanbeta.sessionidsentinsecurely.alert.extrainfo.secureflagnotset=The 'secure' flag was not set on the session cookie supplied by the server.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
ascanbeta.sessionidsentinsecurely.alert.attack={0} field\: [{1}]
#Session Id Cookie accessible by JavaScript
ascanbeta.sessionidaccessiblebyjavascript.name=Session ID Cookie Accessible to JavaScript
ascanbeta.sessionidaccessiblebyjavascript.desc=A Session Id cookie sent by the server (when the URL is modified by setting the named parameter field to NULL) may be accessed by JavaScript on the client. In conjunction with another vulnerability, this may allow the session to be hijacked.  
ascanbeta.sessionidaccessiblebyjavascript.soln=1) Use the 'httponly' flag when setting a cookie containing a session id, to prevent it from being accessed by JavaScript in the web browser.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidaccessiblebyjavascript.refs=
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo=session identifier {0} field [{1}], value [{2}] may be accessed using JavaScript in the web browser
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
ascanbeta.sessionidaccessiblebyjavascript.alert.attack={0} field\: [{1}]
#Session Id Cookie Expiry
ascanbeta.sessionidexpiry.name=Session ID Expiry Time/Max-Age is Excessive
ascanbeta.sessionidexpiry.desc=A Session Id cookie sent by the server (when the URL is modified by setting the named parameter field to NULL) is set to be valid for an excessive period of time. This may be exploitable by an attacker if the user forgets to log out, if the logout functionality does not correctly destroy the session, or if the session id is compromised by some other means.     
ascanbeta.sessionidexpiry.soln=1) Use the 'Expire' or 'Max-Age' cookie directives when setting a cookie containing a session id, to prevent it from being available for prolonged periods of time.\n2) Ensure that logout functionality exists, and that it correctly destroys the session.\n3) Use other preventative measures to ensure that if a session id is compromised, it may not be exploited.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexpiry.refs=
ascanbeta.sessionidexpiry.alert.extrainfo=session identifier {0} field [{1}], value [{2}] may be accessed until [{3}] (since cookie was received at {4}), unless the session is destroyed.
ascanbeta.sessionidexpiry.alert.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
ascanbeta.sessionidexpiry.alert.attack={0} field\: [{1}]
ascanbeta.sessionidexpiry.browserclose=browser close
ascanbeta.sessionidexpiry.timemorethanoneweek=\u8d85\u8fc71\u661f\u671f
ascanbeta.sessionidexpiry.timemorethanoneday=\u8d85\u8fc71\u5929
ascanbeta.sessionidexpiry.timemorethanonehour=\u8d85\u8fc71\u5c0f\u65f6
ascanbeta.sessionidexpiry.timelessthanonehour=\u5c0f\u4e8e1\u5c0f\u65f6
ascanbeta.sessionidexpiry.timeexpired=Expired

ascanbeta.shellshock.name=Remote Code Execution - Shell Shock
ascanbeta.shellshock.desc=The server is running a version of the Bash shell that allows remote attackers to execute arbitrary code 
ascanbeta.shellshock.extrainfo=From CVE-2014-6271\: GNU Bash through 4.3 processes trailing strings after function definitions in the values of environment variables, which allows remote attackers to execute arbitrary code via a crafted environment, as demonstrated by vectors involving the ForceCommand feature in OpenSSH sshd, the mod_cgi and mod_cgid modules in the Apache HTTP Server, scripts executed by unspecified DHCP clients, and other situations in which setting the environment occurs across a privilege boundary from Bash execution, aka "ShellShock." NOTE\: the original fix for this issue was incorrect; CVE-2014-7169 has been assigned to cover the vulnerability that is still present after the incorrect fix.
ascanbeta.shellshock.soln=Update Bash on the server to the latest version
ascanbeta.shellshock.ref=http\://web.nvd.nist.gov/view/vuln/detail?vulnId\=CVE-2014-6271\nhttp\://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html
ascanbeta.shellshock.timingbased.evidence=Using the attack, a delay of [{0}] milliseconds was induced and detected

ascanbeta.sqlinjection.mysql.name=SQL Injection - MySQL
ascanbeta.sqlinjection.hypersonic.name=SQL Injection - Hypersonic SQL
ascanbeta.sqlinjection.oracle.name=SQL Injection - Oracle
ascanbeta.sqlinjection.postgres.name=SQL Injection - PostgreSQL
ascanbeta.sqlinjection.desc=\u53ef\u80fd\u5b58\u5728SQL\u6ce8\u5165
ascanbeta.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place. \nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.\nApply the privilege of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.
ascanbeta.sqlinjection.refs=https\://www.owasp.org/index.php/Top_10_2010-A1\nhttps\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
#ascanbeta.sqlinjection.alert.errorbased.attack={1}
ascanbeta.sqlinjection.alert.errorbased.differentiation.attack=Original Value\: [{0}]. Modified Value\: [{1}]. Control Value\: [{2}]
ascanbeta.sqlinjection.alert.booleanbased.attack=field\: [{0}], value [{1}]
ascanbeta.sqlinjection.alert.unionbased.attack=[{0}] field\: [{1}], value [{2}]
ascanbeta.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] likely, given error message fragment [{1}] in HTML results
ascanbeta.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] likely, given UNION-specific message fragment [{1}] in HTML results
ascanbeta.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Unmodified message gave HTTP status [{0}], modified message gave HTTP status [{1}]
ascanbeta.sqlinjection.alert.errorbased.differentiation.extrainfo=Unmodified message gave HTTP status [{0}], body of length [{1}], modified message gave HTTP status [{2}], body of length [{3}]. A third (non-SQL injection inducing value) gave HTTP status [{4}], body of length [{5}]
ascanbeta.sqlinjection.alert.booleanbased.extrainfo=The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]
ascanbeta.sqlinjection.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds 

ascanbeta.sourcecodedisclosure.desc=\u5f53\u524d\u9875\u9762\u7684\u6765\u6e90\u4ee3\u7801\u88abWeb\u670d\u52a1\u5668\u62ab\u9732

ascanbeta.sourcecodedisclosurecve-2012-1823.name=Source Code Disclosure - CVE-2012-1823
ascanbeta.sourcecodedisclosurecve-2012-1823.desc=Some PHP versions, when configured to run using CGI, do not correctly handle query strings that lack an unescaped "\=" character, enabling PHP source code disclosure, and arbitrary code execution. In this case, the contents of the PHP file were served directly to the web browser. This output will typically contain PHP, although it may also contain straight HTML.
ascanbeta.sourcecodedisclosurecve-2012-1823.soln=Upgrade to the latest stable version of PHP, or use the Apache web server and the mod_rewrite module to filter out malicious requests using the "RewriteCond" and "RewriteRule" directives.

ascanbeta.sourcecodedisclosure.svnbased.name=Source Code Disclosure - SVN
ascanbeta.sourcecodedisclosure.svnbased.soln=Ensure that SVN metadata files are not deployed to the web server or application server
ascanbeta.sourcecodedisclosure.svnbased.extrainfo=The source code for [{0}] was found at [{1}]

ascanbeta.sourcecodedisclosurewebinf.name=Source Code Disclosure - /WEB-INF folder
ascanbeta.sourcecodedisclosurewebinf.desc=Java source code was disclosed by the web server in Java class files in the WEB-INF folder. The class files can be dis-assembled to produce source code which very closely matches the original source code.  
ascanbeta.sourcecodedisclosurewebinf.soln=The web server should be configured to not serve the /WEB-INF folder or its contents to web browsers, since it contains sensitive information such as compiled Java source code and properties files which may contain credentials. Java classes deployed with the application should be obfuscated, as an additional layer of defence in a "defence-in-depth" approach.

ascanbeta.sourcecodedisclosurewebinf.propertiesfile.name=Properties File Disclosure - /WEB-INF folder
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.desc=A Java class in the /WEB-INF folder disclosed the presence of the properties file. Properties file are not intended to be publicly accessible, and typically contain configuration information, application credentials, or cryptographic keys.   
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.soln=The web server should be configured to not serve the /WEB-INF folder or its contents to web browsers.  It may also be possible to remove the /WEB-INF folder.  
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.extrainfo=The reference to the properties file was found in the dis-assembled Java source code for Java class [{0}].

ascanbeta.usernameenumeration.name=Possible Username Enumeration
ascanbeta.usernameenumeration.desc=It may be possible to enumerate usernames, based on differing HTTP responses when valid and invalid usernames are provided. This would greatly increase the probability of success of password brute-forcing attacks against the system. Note that false positives may sometimes be minimised by increasing the 'Attack Strength' Option in ZAP.  Please manually check the 'Other Info' field to confirm if this is actually an issue. 
ascanbeta.usernameenumeration.soln=Do not divulge details of whether a username is valid or invalid. In particular, for unsuccessful login attempts, do not differentiate between an invalid user and an invalid password in the error message, page title, page contents, HTTP headers, or redirection logic.
ascanbeta.usernameenumeration.refs=https\://www.owasp.org/index.php/Testing_for_user_enumeration_%28OWASP-AT-002%29\nhttp\://sebastian-schinzel.de/_download/ifip-sec2011.pdf
ascanbeta.usernameenumeration.alert.extrainfo=[{0}] parameter [{1}] leaks information on whether a user exists. The [{5}] differences in output, for the valid original username value [{2}], and invalid username value [{3}] are\:\n[{4}]
ascanbeta.usernameenumeration.alert.attack=Manipulate [{0}] field\: [{1}] and monitor the output 

ascanbeta.paddingoracle.name=Generic Padding Oracle
ascanbeta.paddingoracle.desc=By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely 'padding oracle' vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This plugin should detect the MS10-070 padding oracle vulnerability in ASP.net if CustomErrors are enabled for that.
ascanbeta.paddingoracle.soln=Update the affected server software, or modify the scripts so that they properly validate encrypted data before attempting decryption.
ascanbeta.paddingoracle.refs=http\://netifera.com/research/\nhttp\://www.microsoft.com/technet/security/bulletin/ms10-070.mspx\nhttp\://www.mono-project.com/Vulnerabilities\#ASP.NET_Padding_Oracle\nhttps\://bugzilla.redhat.com/show_bug.cgi?id\=623799

ascanbeta.elinjection.name=\u8868\u8fbe\u5f0f\u8bed\u8a00\u7c7b\u6ce8\u5165\u653b\u51fb
ascanbeta.elinjection.desc=\u8fd9\u4e2a\u8f6f\u4ef6\u53ef\u4ee5\u4f7f\u7528\u4fe1\u606f\u6d41\u4e0a\u6e38\u7ec4\u4ef6\u4f5c\u4e3a\u8f93\u5165\u6784\u9020JSP\u8868\u8fbe\u5f0f\u8bed\u8a00\u7c7b\uff08EL\uff09\u3002\u4f46\u662f\u5728\u6267\u884c\u4e4b\u524d\u4e0d\u80fd\u9664\u53bb\u53ef\u4ee5\u66f4\u6539EL\u8868\u8fbe\u7684\u7279\u6b8a\u5143\u7d20\u3002\u5728Spring3.0.5\u53ca\u5176\u66f4\u65e9\u7684\u67d0\u4e9b\u7248\u672c\uff0c\u7531\u4e8eEL\u6807\u8bb0\u7b26\u4f1a\u88ab\u89e3\u91ca\u4e24\u6b21\uff0c\u4e00\u4e9b\u7f51\u7edc\u7a0b\u5e8f\u5f88\u5bb9\u6613\u53d7\u5230EL\u6ce8\u5165\u653b\u51fb\uff08\u8be6\u89c1CVE-2011-2730\uff09\u3002\u4f46\u662fSpring\u540e\u7eed\u7248\u672c\u7531\u4e8e\u914d\u7f6e\u7684\u539f\u56e0\u4ecd\u53ef\u80fd\u6709\u540c\u6837\u7684\u6f0f\u6d1e\u3002
ascanbeta.elinjection.soln=\u4e0d\u53ef\u4fe1\u8f93\u5165\u6570\u636e\u6709\u6548\u6027\u68c0\u9a8c\u548c\u4fdd\u8bc1\u8f93\u51fa\u7ed3\u679c\u6b63\u786e\u7f16\u7801\u7684\u6700\u597d\u65f6\u673a\u662f\u5f53\u6570\u636e\u5230\u8fbeEL\u5c42\u7684\u65f6\u5019\u3002\u8fd9\u662f\u56e0\u4e3a\u6b64\u65f6\u5728\u7528\u6237\u63d0\u4ea4\u7684\u5185\u5bb9\u5728\u88ab\u5904\u7406\u4e4b\u524d\u6ca1\u6709\u89e3\u91ca\u5668\u9700\u8981\u5904\u7406\u7684\u5143\u5b57\u7b26\u3002\u6700\u660e\u663e\u7684EL\u8868\u8fbe\u5f0f\u5305\u62ec ${ \u548c\#{\uff0c \u4f46\u8fd9\u5199\u8868\u8fbe\u5f0f\u53ef\u80fd\u4f1a\u88ab\u7f16\u7801\u5904\u7406\u6389\u6216\u662f\u88ab\u5206\u89e3\u5904\u7406\u3002
ascanbeta.elinjection.refs=https\://www.owasp.org/index.php/Expression_Language_Injection\nhttp\://cwe.mitre.org/data/definitions/917.html

ascanbeta.xxeplugin.name=XML External Entity Attack
ascanbeta.xxeplugin.nocallback=callback functionality not available

ascanbeta.xpathinjectionplugin.name=XPath Injection


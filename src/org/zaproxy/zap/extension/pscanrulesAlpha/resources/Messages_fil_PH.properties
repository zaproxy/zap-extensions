#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages
pscanalpha.desc=Mga Passive Scan Rules - alpha

pscanalpha.cookiesamesitescanner.name=Cookie Without SameSite Attribute
pscanalpha.cookiesamesitescanner.desc=Isang cookie ang naitakda nang walang SameSite na katangian, na nangangahulugang ang cookie ay maaaring maipadala bilang resulta ng isang 'cross-site' na kahilingan.\nAng katangian ng SameSite ay isang epektibong panukalang counter sa pag-request ng cross-site na palsipikado, pagsasama ng cross-site script, at mga pag-atake sa pag-time.
pscanalpha.cookiesamesitescanner.badval=Ang cookie ay naitakda na may di-wastong halaga ng attribute na SameSite, na nangangahulugang maaaring ipadala ang cookie bilang resulta ng isang 'cross-site' na kahilingan.\nAng katangian ng SameSite ay isang epektibong panukalang counter sa pag-request ng cross-site na palsipikado, pagsasama ng cross-site script, at mga pag-atake sa tamang oras.
pscanalpha.cookiesamesitescanner.soln=Tiyakin na ang SameSite na katangian ay naka-set sa alinman sa 'lax' o sa isip 'mahigpit' para sa lahat ng cookies.
pscanalpha.cookiesamesitescanner.refs=https\://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site

pscanalpha.examplefile.name=Isang halimbawa ng passive scan rule na naglo-load ng data mula sa isang file
pscanalpha.examplefile.desc=Magdagdag ng karagdagang impormasyon tungkol sa kahinaan dito
pscanalpha.examplefile.other=Ito ay para sa impormasyon na hindi magkasya sa alinman sa iba pang mga seksyon
pscanalpha.examplefile.soln=Isang pangkalahatang paglalarawan kung paano malutas ang problema
pscanalpha.examplefile.refs=http\://zaproxy.blogspot.co.uk/2014/04/hacking-zap-3-passive-scan-rules.html

pscanalpha.insecureformload.name=HTTP sa HTTPS Pagliligtas ng Walang Seguridad sa Form Post
pscanalpha.insecureformload.desc=Ang tseke na ito ay naghahanap para sa mga pahina ng hindi secure na HTTP na nagho-host ng mga form ng HTTPS. Ang isyu ay ang isang hindi secure na pahina ng HTTP ay maaaring madaling i-hijack sa pamamagitan ng MITM at ang secure na form ng HTTPS ay maaaring mapalitan o ma-spoof.
pscanalpha.insecureformload.refs=
pscanalpha.insecureformload.soln=Gamitin ang HTTPS para sa pagpunta sa pahina ng secure forms.
pscanalpha.insecureformload.exploit=
pscanalpha.insecureformload.extrainfo=Ang tugon sa sumusunod na kahilingan sa HTTP ay kasama ang halaga ng attribute tag na pagkilos ng tag ng HTTPS

pscanalpha.insecureformpost.name=HTTPS sa HTTP Insecure Transition sa Form Post
pscanalpha.insecureformpost.desc=Kinikilala ng cheke na ito ang mga secure na pahina ng HTTPS na naka-host ng mga hindi secure na form sa HTTP. Ang isyu ay na ang isang secure na pahina ay lumilipat sa isang hindi secure na pahina kapag ang data ay na-upload sa isang form. Maaaring isipin ng gumagamit na nagpapadala sila ng data sa isang secure na pahina kapag sa katunayan sila ay hindi.
pscanalpha.insecureformpost.refs=
pscanalpha.insecureformpost.soln=Tiyakin na ang sensitibong datos ay ipinapadala lamang sa mga siguradong mga channel ng HTTPS.
pscanalpha.insecureformpost.exploit=
pscanalpha.insecureformpost.extrainfo=Ang sagot sa sumusunod na kahilingan sa HTTPS ay kasama ang isang halaga ng attribute ng pagkilos ng tag ng HTTP form

pscanalpha.usercontrolledcharset.name=User Controllable Charset
pscanalpha.usercontrolledcharset.desc=Ang tseke na ito ay tumitingin sa input na ibinigay ng may gamit sa mga parameter ng query string at POST na datos upang matukoy kung saan ang mga deklarasyon ng Content-Type o meta tag ay maaaring kontrolado ng user. Ang naturang mga deklarasyon ng charset ay dapat palaging ideklara ng aplikasyon. Kung ang isang magsasalakay ay makokontrol sa charset ng sagot, maaari nilang manipulahin ang HTML upang magsagawa ng XSS o iba pang mga pag-atake.
pscanalpha.usercontrolledcharset.refs=
pscanalpha.usercontrolledcharset.soln=Puwersa UTF-8 sa lahat ng mga deklarasyon ng charset. Kung ang user-input ay kinakailangan upang magpasiya ng deklarasyon ng charset, tiyakin na tanging isang pinapayagang listahan ang ginagamit.
pscanalpha.usercontrolledcharset.exploit=Ang isang magsasalakay na nagkokontrol sa halaga ng <meta> elemento ng charset ay maaaring magdeklara ng UTF-7 at maaari ring isama ang sapat na kargamento na kinokontrol ng user nang maaga sa dokumento ng HTML upang ipaliwanag ito bilang UTF-7. Sa pamamagitan ng pag-encode ng kanilang kargamento sa UTF-7 ang magsasalakay ay makakapag-bypass ng anumang mga proteksyon sa XSS server at naka-embed na script sa pahina.
pscanalpha.usercontrolledcharset.extrainfo=Isang (n) [{0}] tag na [{1}] na katangian\n\nAng nahanap na user ay\:\n{2}\={3}\n\nAng halaga ng charset na kinokontrol nito ay\:\n{4}

pscanalpha.usercontrolledcookie.name=Pagkalason ng Cookie
pscanalpha.usercontrolledcookie.desc=Tinitingnan ng check na ito ang input na ibinibigay ng user sa mga parameter ng query string at POST na datos upang makilala kung saan maaaring kontrolin ang mga parameter ng cookie. Ito ay tinatawag na isang pag-atake ng pagkalason ng cookie, at nagiging exploitable kapag ang isang magsasalakay ay maaaring manipulahin ang cookie sa iba't ibang paraan. Sa ilang mga kaso na ito ay hindi maaapektuhan, gayunpaman, na nagpapahintulot sa mga parameter ng URL na magtakda ng mga halaga ng cookie ay karaniwang itinuturing na isang bug.
pscanalpha.usercontrolledcookie.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-cookie
pscanalpha.usercontrolledcookie.soln=Huwag pahintulutan ang pag-input ng gumagamit upang kontrolin ang mga pangalan at halaga ng cookie. Kung ang ilang parameter ng query string ay dapat itakda sa mga halaga ng cookie, siguraduhin na i-filter ang semicolon's na maaaring magsilbi bilang mga delimiter ng pangalan / halaga pares.
pscanalpha.usercontrolledcookie.exploit.get=Ang isang magsasalakay ay maaaring makalason sa mga halaga ng cookie sa pamamagitan ng mga parameter ng URL. Subukan ang pag-inject ng isang tuldok-tuldok upang makita kung maaari kang magdagdag ng mga halaga ng cookie (hal. Pangalan\=controlledValue; name\=anotherValue;).
pscanalpha.usercontrolledcookie.exploit.post=Ang isang magsasalakay ay maaaring makalason sa mga halaga ng cookie sa pamamagitan ng mga parameter ng POST. Upang masubukan kung ito ay isang mas malubhang isyu, dapat mong subukan ang resending na kahilingan bilang isang GET, kasama ang parameter na POST kasama bilang query string parmeter. Halimbawa\: http\://nottrusted.com/page?value\=maliciousInput.\n\n
pscanalpha.usercontrolledcookie.extrainfo=Nakilala ito sa\:\n\n{0}\n\nAng input ng user ay natagpuan sa sumusunod na cookie\:\n{1}\n\nAng input ng gumagamit ay\:\n{2}\={3}

pscanalpha.usercontrolledjavascriptevent.name=User Controllable JavaScript Event (XSS)
pscanalpha.usercontrolledjavascriptevent.desc=Tinitingnan ng check na ito ang input ng user na ibinigay sa mga parameter ng query string at POST na data upang makilala kung saan maaaring kontrolado ang ilang mga halaga ng attribute ng HTML. Nagbibigay ito ng pagtukoy ng hot-spot para sa XSS (cross-site scripting) na nangangailangan ng karagdagang pagsusuri ng isang analyst ng seguridad upang matukoy ang pagsasamantala.            
pscanalpha.usercontrolledjavascriptevent.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-javascript-event
pscanalpha.usercontrolledjavascriptevent.soln=Patunayan ang lahat ng input at sanitize output ito bago magsulat sa anumang Javascript sa * kaganapan.
pscanalpha.usercontrolledjavascriptevent.exploit=
pscanalpha.usercontrolledjavascriptevent.extrainfo=Natagpuan ang (mga) javascript event na kinokontrol ng user. Kakailanganin ang eksploitability na manu-manong matukoy. Ang pahina sa sumusunod na URL\:\n\n{0} "\n\nKabilang sa mga sumusunod na kaganapan ng Javascript na maaaring maatake sa pag-atake\:\n\nAng input ng user ay natagpuan sa sumusunod na data ng isang kaganapan na [{1}]\:\n{2}\n\nAng input ng gumagamit ay\:\n{3}

pscanalpha.usercontrolledjavascriptproperty.name=User Controllable JavaScript Property (XSS)
pscanalpha.usercontrolledjavascriptproperty.desc=Tinitingnan ng check na ito ang input na binigay ng gumagamit sa mga parameter ng query string at POST na datos upang matukoy kung saan ang URL sa ilang mga pag-aari ng javascript (hal. CreateElement src) ay maaaring maging takot. Nagbibigay ito ng pagtukoy ng hot-spot para sa XSS (cross-site scripting) na nangangailangan ng karagdagang pagsusuri ng isang analyst ng seguridad upang matukoy ang pagsasamantala.            
pscanalpha.usercontrolledjavascriptproperty.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-javascript-reference
pscanalpha.usercontrolledjavascriptproperty.soln=Huwag pahintulutan ang user-input upang kontrolin ang javascript pinagmulang mga sanggunian ng lokasyon.
pscanalpha.usercontrolledjavascriptproperty.exploit=
pscanalpha.usercontrolledjavascriptproperty.extrainfo=Lumilitaw ang pahina sa sumusunod na URL na naglalaman ng input ng user sa isang javascript na halaga ng ari-arian\:\n\n{0} Ang input ng gumagamit na natagpuan ay\:\n{1}\={2}\n\nAng konteksto ay\:\n{3}

pscanalpha.usercontrolledhtmlattributes.name=User Controllable HTML Element Attribute (Potensyal na XSS)
pscanalpha.usercontrolledhtmlattributes.desc=Tinitingnan ng check na ito ang input ng user na ibinigay sa mga parameter ng query string at POST na data upang makilala kung saan maaaring kontrolado ang ilang mga halaga ng attribute ng HTML. Nagbibigay ito ng pagtukoy ng hot-spot para sa XSS (cross-site scripting) na nangangailangan ng karagdagang pagsusuri ng isang analyst ng seguridad upang matukoy ang pagsasamantala.
pscanalpha.usercontrolledhtmlattributes.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-html-attribute
pscanalpha.usercontrolledhtmlattributes.soln=Patunayan ang lahat ng input at sanitize output ito bago magsulat sa anumang mga katangian ng HTML.
pscanalpha.usercontrolledhtmlattributes.exploit=
pscanalpha.usercontrolledhtmlattributes.extrainfo=Natagpuan ang mga katangian ng HTML na kinokontrol ng user. Subukan ang pag-inject ng mga espesyal na character upang makita kung maaaring maging posible ang XSS. Ang pahina sa sumusunod na URL\:\n\n{0}\n\nLumilitaw na isama ang input ng gumagamit sa\:\n\nisang (n) [{1}] na tag na [{2}] na katangian\n\nAng nahanap na user ay\:\n{3}\={4}\n\nAng halaga ng user na kinokontrol ay\:\n{5}

pscanalpha.usercontrolledopenredirect.name=Buksan ang Redirect
pscanalpha.usercontrolledopenredirect.desc=Buksan ang mga pag-redirect ay isa sa OWASP 2010 Top Ten vulnerabilities. Tinitingnan ng tseke na ito ang input ng user na ibinigay sa mga parameter ng query string at POST na data upang makilala kung saan maaaring maging posible ang mga bukas na pag-redirect. Ang mga bukas na pag-redirect ay nangyayari kapag ang isang application ay nagbibigay-daan sa input ng ibinibigay ng gumagamit (hal. Http\://nottrusted.com) upang makontrol ang isang pag-redirect ng offsite. Ito ay pangkaraniwang isang tumpak na paraan upang malaman kung saan maaaring gamitin ang 301 o 302 na pag-redirect ng mga spammer o phishing na pag-atake
pscanalpha.usercontrolledopenredirect.soln=Upang maiwasan ang kahinaan sa pag-redirect ng bukas, ang mga parameter ng application script/program ay dapat na mapatunayan bago magpadala ng 302 HTTP code (pag-redirect) sa browser ng client. Ipatupad ang pag-andar ng ligtas na pag-redirect na nagre-redirect lang sa kamag-anak ng URI, o isang listahan ng mga pinagkakatiwalaang mga domain
pscanalpha.usercontrolledopenredirect.exploit=Ang isang magsasalakay ay maaaring magbigay ng isang user na may sumusunod na link\: http\://example.com/example.php?url\=http\://malicious.example.com
pscanalpha.usercontrolledopenredirect.refs=https\://www.owasp.org/index.php/Open_redirect\nhttps\://owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards\nhttps\://cwe.mitre.org/data/definitions/601.html
pscanalpha.usercontrolledopenredirect.extrainfo.get=Ang 301 o 302 na sagot sa isang kahilingan para sa sumusunod na URL ay lumitaw na naglalaman ng input ng user sa header ng lokasyon\:\n\n
pscanalpha.usercontrolledopenredirect.extrainfo.post=Nakita ang isang bukas na redirect na kontrolado ng mga parameter ng POST. Upang masubukan kung ito ay isang mas seryosong isyu, dapat mong subukang ipagpatuloy ang kahilingang iyon bilang GET, kasama ang parameter na POST na kasama bilang parameter ng query string. Halimbawa\: http\://nottrusted.com/page?url\=http\://lookout.net.\n\nAng 301 o 302 na sagot sa isang kahilingan para sa sumusunod na URL ay lumitaw na naglalaman ng input ng user sa header ng lokasyon\:\n\n
pscanalpha.usercontrolledopenredirect.extrainfo.common={0}\r\n\r\nThe user input found was\:\r\n\r\n{1}\={2}\r\n\r\nThe context was\:\r\n\r\n{3}

pscanalpha.sourcecodedisclosure.name=Source Code Disclosure
pscanalpha.sourcecodedisclosure.desc=Ang Code ng Paggamit ng Application ay isiwalat ng web server
pscanalpha.sourcecodedisclosure.soln=Tiyakin na ang Code ng Paggamit ng aplikasyon ay hindi magagamit sa mga alternatibong extension, at tiyakin na ang source code ay hindi naroroon sa loob ng ibang mga file o data na ipinadala sa web server, o nagsilbi sa pamamagitan ng web server. 
pscanalpha.sourcecodedisclosure.refs=http\://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-u-s-government/
pscanalpha.sourcecodedisclosure.extrainfo={0}

pscanalpha.hashdisclosure.name=Hash Disclosure
pscanalpha.hashdisclosure.desc=Ang isang hash ay isiniwalat ng web server
pscanalpha.hashdisclosure.soln=Makakatiyak na ang hashes na ginagamit upang protektahan ang mga kredensyal o iba pang mga mapagkukunan ay hindi leaked ng web server o database. Karaniwan walang pangangailangan para sa mga password na may access sa web browser.      
pscanalpha.hashdisclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage\nhttp\://openwall.info/wiki/john/sample-hashes
pscanalpha.hashdisclosure.extrainfo={0}

pscanalpha.timestampdisclosure.name=Timestamp Disclosure
pscanalpha.timestampdisclosure.desc=Ang isang timestamp ay isiwalat ng application / web server
pscanalpha.timestampdisclosure.soln=Isa isahing kumpirmahin ang datod ng timestamp ay hindi sensitibo, at ang data ay hindi maaaring pagsamahin upang ibunyag ang mga magagamit na mga pattern.
pscanalpha.timestampdisclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.timestampdisclosure.extrainfo={0}, which evaluates to\: {1}

pscanalpha.base64disclosure.name=Base64 Disclosure
pscanalpha.base64disclosure.desc=Ang naka-encode na data Base64 ay isiwalat ng application / web server
pscanalpha.base64disclosure.soln=Isa isahing kumpirmahin na ang Base64 na datos ay hindi tumutulo sa sensitibong impormasyon, at ang datos ay hindi maaaring isama / ginamit upang pagsamantalahan ang iba pang mga kahinaan.
pscanalpha.base64disclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.extrainfo={1}

pscanalpha.base64disclosure.viewstate.name=ASP.NET ViewState Disclosure
pscanalpha.base64disclosure.viewstate.desc=An ASP.NET ViewState was disclosed by the application/web server
pscanalpha.base64disclosure.viewstate.soln=Manu-manong kumpirmahin na hindi tinatanggal ng ASP.NET ViewState ang sensitibong impormasyon, at ang data ay hindi maaaring pagsama / ginagamit upang pagsamantalahan ang iba pang mga kahinaan.
pscanalpha.base64disclosure.viewstate.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttps\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.viewstate.extrainfo={0}

pscanalpha.base64disclosure.viewstatewithoutmac.name=ASP.NET ViewState Integrity
pscanalpha.base64disclosure.viewstatewithoutmac.desc=Ang aplikasyon ay hindi gumagamit ng Code Authentication Code (MAC) upang maprotektahan ang integridad ng ASP.NET ViewState, na maaaring tampered ng isang malisyosong client
pscanalpha.base64disclosure.viewstatewithoutmac.soln=Tiyakin na ang lahat ng ASP.NET ViewStates ay protektado mula sa pag-tampering, sa pamamagitan ng paggamit ng MAC, na binuo gamit ang isang secure na algorithm, at isang lihim na key sa gilid ng server. Ito ang default na pagsasaayos sa modernong pag-install ng ASP.NET, sa pamamagitan ng maaaring over-ridden programatically, o sa pamamagitan ng configuration ng ASP.NET.
pscanalpha.base64disclosure.viewstatewithoutmac.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttps\://www.jardinesoftware.net/2012/02/06/asp-net-tampering-with-event-validation-part-1/
pscanalpha.base64disclosure.viewstatewithoutmac.extrainfo={0}

pscanalpha.directorybrowsing.name=Directory Browsing
pscanalpha.directorybrowsing.desc=Posibleng tingnan ang listahan ng mga nilalaman ng direktoryo. Ang listahan ng mga listahan ay maaaring magbunyag ng mga nakatagong script, isama ang mga file, mga file ng backup na pinagmulan, atbp, na ma-access upang ipakita ang sensitibong impormasyon.
pscanalpha.directorybrowsing.soln=I-configure ang web server upang huwag paganahin ang pag-browse sa direktoryo. 
pscanalpha.directorybrowsing.refs=https\://cwe.mitre.org/data/definitions/548.html
pscanalpha.directorybrowsing.extrainfo={0}

pscanalpha.heartbleed.name=Heartbleed OpenSSL Vulnerability (Indicative)
pscanalpha.heartbleed.desc=Ang mga pagpapatupad ng TLS at DTLS sa OpenSSL 1.0.1 bago 1.0.1g ay hindi maayos na pinangangasiwaan ang mga packet na Heartbeat Extension, na nagpapahintulot sa mga remote attackers na makakuha ng sensitibong impormasyon mula sa memory ng proseso sa pamamagitan ng mga naka-pack na packet na nagpapalitaw ng buffer over-read, potensyal na ibubunyag ang sensitibong impormasyon.
pscanalpha.heartbleed.soln=I-update sa OpenSSL 1.0.1g o mas bago. Muling na-isyu ang mga sertipiko ng HTTPS. Baguhin ang mga walang-pribadong mga pribadong key at nakabahagi ng mga lihim na key, dahil ang mga ito ay maaaring naka-kompromiso, na walang katibayan ng pagkompromiso sa mga file ng log ng server.
pscanalpha.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
pscanalpha.heartbleed.extrainfo=Ginagamit ang {0}. Gayunpaman tandaan na ang iniulat na bersyon ay maaaring maglaman ng mga pag-aayos ng seguridad na nai-back-port, at sa gayon ang isyu ay maaaring isang maling positibo. Ito ay karaniwan sa Red Hat, halimbawa.

pscanalpha.crossdomain.name=Pag-configure ng Cross-Domain
pscanalpha.crossdomain.desc=Maaaring posible ang pag-load ng data ng browser ng web, dahil sa misconfiguration ng Cross Origin Resource Sharing (CORS) sa web server
pscanalpha.crossdomain.soln=Tiyakin na ang sensitibong datos ay hindi magagamit sa isang hindi awtorisadong paraan (gamit ang IP address na white-listing, halimbawa).\nI-configure ang header ng HTTP na "Access-Control-Allow-Origin" sa isang mas mahigpit na hanay ng mga domain, o alisin ang lahat ng mga header ng CORS, upang payagan ang web browser na ipatupad ang Parehong Patakaran sa Pinagmulan (SOP) sa mas mahigpit na paraan.
pscanalpha.crossdomain.refs=http\://www.hpenterprisesecurity.com/vulncat/en/vulncat/vb/html5_overly_permissive_cors_policy.html
pscanalpha.crossdomain.extrainfo=Pinapayagan ng maling pag-configure ng CORS sa web server ang mga hiling na cross-domain na nabasa mula sa mga arbitrary na mga domain ng ikatlong partido, gamit ang mga hindi awtorisadong API sa domain na ito. Gayunpaman, hindi pinapahintulutan ng mga pagpapatupad ng web browser ang mga arbitrary na third party na basahin ang tugon mula sa napatotohanan na mga API. Binabawasan nito ang panganib. Ang misconfiguration na ito ay maaaring gamitin ng isang magsasalakay upang ma-access ang data na magagamit sa isang unauthenticated paraan, ngunit na gumagamit ng ilang iba pang paraan ng seguridad, tulad ng IP address white-listing.

pscanalpha.serverheader.scanner.name=HTTP Server Response Header Scanner
pscanalpha.serverheaderversioninfoleak.name=Server Leaks Version Impormasyon sa pamamagitan ng "Server" HTTP Response Header Field
pscanalpha.serverheaderversioninfoleak.desc=Ang server ng web / aplikasyon ay tumagas na bersyon ng impormasyon sa pamamagitan ng header ng tugon ng "Server" HTTP. Maaaring mapadali ng access sa naturang impormasyon ang mga attacker na nakakikilala sa iba pang mga kahinaan na napapailalim sa server ng iyong web / application.
pscanalpha.serverheaderinfoleak.name=Ang Paglabas ng Server ng Webserver nito sa Server sa pamamagitan ng "Server" HTTP Response Header Field
pscanalpha.serverheaderinfoleak.desc=The web/application server is leaking the application it uses as a webserver via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to. This information alone, i.e. without a version string, is not very dangerous for the security of a server, nevertheless this information in the response header field is almost always useless and thus just an obsolete attacking vector.
pscanalpha.serverheaderinfoleak.general.refs=http\://httpd.apache.org/docs/current/mod/core.html\#servertokens\nhttp\://msdn.microsoft.com/en-us/library/ff648552.aspx\#ht_urlscan_007\nhttp\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanalpha.serverheaderinfoleak.general.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.

pscanalpha.stricttransportsecurity.scanner.name=Strict-Transport-Security Header Scanner
pscanalpha.stricttransportsecurity.name=Strict-Transport-Security Header Not Set
pscanalpha.stricttransportsecurity.desc=HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
pscanalpha.stricttransportsecurity.refs=https\://www.owasp.org/index.php/HTTP_Strict_Transport_Security\nhttps\://www.owasp.org/index.php/List_of_useful_HTTP_headers\nhttp\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp\://caniuse.com/stricttransportsecurity\nhttp\://tools.ietf.org/html/rfc6797
pscanalpha.stricttransportsecurity.soln=Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
pscanalpha.stricttransportsecurity.max.age.name=Strict-Transport-Security Disabled
pscanalpha.stricttransportsecurity.max.age.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains the directive max-age\=0 which disables the control and instructs browsers to reset any previous HSTS related settings. See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.max.age.refs=http\://tools.ietf.org/html/rfc6797\#section-6.2
pscanalpha.stricttransportsecurity.max.age.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate max-age value.
pscanalpha.stricttransportsecurity.compliance.multiple.header.name=Strict-Transport-Security Multiple Header Entries (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.multiple.header.desc=HTTP Strict Transport Security (HSTS) headers were found, a response with multiple HSTS header entries is not compliant with the specification (RFC 6797) and only the first HSTS header will be processed others will be ignored by user agents or the HSTS policy may be incorrectly applied.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.compliance.multiple.header.refs=http\://tools.ietf.org/html/rfc6797\#section-8.1
pscanalpha.stricttransportsecurity.compliance.multiple.header.soln=Ensure that only one component in your stack\: code, web server, application server, load balancer, etc. is configured to set or add a HTTP Strict-Transport-Security (HSTS) header.
pscanalpha.stricttransportsecurity.plain.resp.name=Strict-Transport-Security Header on Plain HTTP Response
pscanalpha.stricttransportsecurity.plain.resp.desc=A HTTP Strict Transport Security (HSTS) header was found, but HSTS headers are ignored on plain (non-HTTPS) responses.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.plain.resp.refs=http\://tools.ietf.org/html/rfc6797\#section-8.1
pscanalpha.stricttransportsecurity.plain.resp.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security for HTTPS responses.
pscanalpha.stricttransportsecurity.compliance.max.age.missing.name=Strict-Transport-Security Missing Max-Age (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.max.age.missing.desc=A HTTP Strict Transport Security (HSTS) header was found, but it is missing the max-age directive (or the directive is missing a value). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.compliance.max.age.missing.refs=http\://tools.ietf.org/html/rfc6797\#section-6.2
pscanalpha.stricttransportsecurity.compliance.max.age.missing.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate max-age value.
pscanalpha.stricttransportsecurity.compliance.meta.name=Strict-Transport-Security Defined via META (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.meta.desc=A HTTP Strict Transport Security (HSTS) META tag was found, defining HTTP Strict Transport Security (HSTS) via a META tag is explicitly not supported by the spec (RFC 6797).
pscanalpha.stricttransportsecurity.compliance.meta.refs=http\://tools.ietf.org/html/rfc6797\#section-8.5
pscanalpha.stricttransportsecurity.compliance.meta.soln=Do not attempt to set HTTP Strict Transport Security (HSTS) via a META tag.
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.name=Strict-Transport-Security Max-Age Malformed (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains quotes preceding the max-age directive (the max-age value can be quoted, but the directive itself cannot be). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.refs=http\://tools.ietf.org/html/rfc6797\#section-6.1
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate format.
pscanalpha.stricttransportsecurity.compliance.malformed.content.name=Strict-Transport-Security Malformed Content (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.malformed.content.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains some content that was not expected (perhaps curly quotes), the expectation is that the content be printable ASCII characters.
pscanalpha.stricttransportsecurity.compliance.malformed.content.refs=http\://tools.ietf.org/html/rfc6797
pscanalpha.stricttransportsecurity.compliance.malformed.content.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with appropriate content. 

pscanalpha.xpoweredbyheaderinfoleak.name=Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)
pscanalpha.xpoweredbyheaderinfoleak.desc=The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
pscanalpha.xpoweredbyheaderinfoleak.refs=http\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanalpha.xpoweredbyheaderinfoleak.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
pscanalpha.xpoweredbyheaderinfoleak.exploit=
pscanalpha.xpoweredbyheaderinfoleak.extrainfo=
pscanalpha.xpoweredbyheaderinfoleak.otherinfo.msg=The following X-Powered-By headers were also found\:\r\n

pscanalpha.contentsecuritypolicymissing.name=Content Security Policy (CSP) Header Not Set
pscanalpha.contentsecuritypolicymissing.desc=Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanalpha.contentsecuritypolicymissing.refs=https\://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps\://www.owasp.org/index.php/Content_Security_Policy\nhttp\://www.w3.org/TR/CSP/\nhttp\://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp\://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp\://caniuse.com/\#feat\=contentsecuritypolicy\nhttp\://content-security-policy.com/
pscanalpha.contentsecuritypolicymissing.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header, to achieve optimal browser support\: "Content-Security-Policy" for Chrome 25+, Firefox 23+ and Safari 7+, "X-Content-Security-Policy" for Firefox 4.0+ and Internet Explorer 10+, and "X-WebKit-CSP" for Chrome 14+ and Safari 6+.
pscanalpha.contentsecuritypolicymissing.exploit=
pscanalpha.contentsecuritypolicymissing.extrainfo=
pscanalpha.contentsecuritypolicymissing.ro.name=Content Security Policy (CSP) Report-Only Header Found
pscanalpha.contentsecuritypolicymissing.ro.desc=The response contained a Content-Security-Policy-Report-Only header, this may indicate a work-in-progress implementation, or an oversight in promoting pre-Prod to Prod, etc.\n\nContent Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanalpha.contentsecuritypolicymissing.ro.refs=https\://www.w3.org/TR/CSP2/\nhttps\://w3c.github.io/webappsec-csp/\nhttp\://caniuse.com/\#feat\=contentsecuritypolicy\nhttp\://content-security-policy.com/

pscanalpha.xbackendserver.name=X-Backend-Server Header Information Leak
pscanalpha.xbackendserver.desc=The server is leaking information pertaining to backend systems (such as hostnames or IP addresses). Armed with this information an attacker may be able to attack other systems or more directly/efficiently attack those systems.
pscanalpha.xbackendserver.refs=
pscanalpha.xbackendserver.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress X-Backend-Server headers.
pscanalpha.xbackendserver.exploit=
pscanalpha.xbackendserver.extrainfo=

pscanalpha.insecurecomponent.name=Insecure Component
pscanalpha.insecurecomponent.desc=Based on passive analysis of the response, insecure component {0} {1} appears to be in use.\nThe highest noted CVSS rating for this product version is {2}.\nIn total, {3} vulnerabilities were noted.\nSome Linux distributions such as Red Hat employ the practice of retaining old version numbers when security fixes are "backported".\nThese cases are noted as "False Positives", but should be manually verified.  
pscanalpha.insecurecomponent.refs={0}
pscanalpha.insecurecomponent.soln=Upgrade from {0} {1} to the latest stable version of the product.\nUse a package manager and package management policies and procedures to manage the installed versions of software packages.

pscanalpha.bigredirectsscanner.name=Big Redirect Detected (Potential Sensitive Information Leak)
pscanalpha.bigredirectsscanner.desc=The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, PII, etc).
pscanalpha.bigredirectsscanner.refs=
pscanalpha.bigredirectsscanner.soln=Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.
pscanalpha.bigredirectsscanner.extrainfo=Location header URI length\: {0} [{1}].\nPredicted response size\: {2}.\nResponse Body Length\: {3}.


pscanalpha.storabilitycacheability.name=Content Cacheability

pscanalpha.nonstorable.name=Non-Storable Content
pscanalpha.nonstorable.desc=The response contents are not storable by caching components such as proxy servers. If the response does not contain sensitive, personal or user-specific information, it may benefit from being stored and cached, to improve performance.
pscanalpha.nonstorable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.nonstorable.soln=The content may be marked as storable by ensuring that the following conditions are satisfied\:\nThe request method must be understood by the cache and defined as being cacheable ("GET", "HEAD", and "POST" are currently defined as cacheable)\nThe response status code must be understood by the cache (one of the 1XX, 2XX, 3XX, 4XX, or 5XX response classes are generally understood)\nThe "no-store" cache directive must not appear in the request or response header fields\nFor caching by "shared" caches such as "proxy" caches, the "private" response directive must not appear in the response\nFor caching by "shared" caches such as "proxy" caches, the "Authorization" header field must not appear in the request, unless the response explicitly allows it (using one of the "must-revalidate", "public", or "s-maxage" Cache-Control response directives)\nIn addition to the conditions above, at least one of the following conditions must also be satisfied by the response\:\nIt must contain an "Expires" header field\nIt must contain a "max-age" response directive\nFor "shared" caches such as "proxy" caches, it must contain a "s-maxage" response directive\nIt must contain a "Cache Control Extension" that allows it to be cached\nIt must have a status code that is defined as cacheable by default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).   
pscanalpha.nonstorable.extrainfo={0}

pscanalpha.storablenoncacheable.name=Storable but Non-Cacheable Content
pscanalpha.storablenoncacheable.desc=The response contents are storable by caching components such as proxy servers, but will not be retrieved directly from the cache, without validating the request upstream, in response to similar requests from other users. 
pscanalpha.storablenoncacheable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablenoncacheable.soln=
pscanalpha.storablenoncacheable.extrainfo={0}}

pscanalpha.storablecacheable.name=Storable and Cacheable Content
pscanalpha.storablecacheable.desc=Ang mga nilalaman ng sagot ay maaaring maimbak ng mga sangkap ng pag-cache tulad ng mga server ng proxy, at maaaring makuha nang direkta mula sa cache, sa halip na mula sa pinagmulan ng server ng mga server ng caching, bilang tugon sa mga katulad na kahilingan mula sa iba pang mga gumagamit. Kung sensitibo ang data ng tugon, personal o user-specific, maaaring magresulta ito sa sensitibong impormasyon na na-leak. Sa ilang mga kaso, ito ay maaaring kahit na magreresulta sa isang gumagamit na nakakakuha ng kumpletong kontrol ng session ng ibang user, depende sa pagsasaayos ng mga component ng caching na ginagamit sa kanilang kapaligiran. Ito ang pangunahing isyu na kung saan ang "shared" na mga server ng caching tulad ng "proxy" na mga cache ay naka-configure sa lokal na network. Ang configuration na ito ay kadalasang matatagpuan sa mga corporate o pang-edukasyon na kapaligiran, halimbawa.
pscanalpha.storablecacheable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablecacheable.soln=Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. 
pscanalpha.storablecacheable.extrainfo={0}
pscanalpha.storablecacheable.otherinfo.liberallifetimeheuristic=In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.
pscanalpha.storablecacheable.otherinfo.staleretrievenotblocked=The response is stale, and stale responses are not configured to be re-validated or blocked, using the 'must-revalidate', 'proxy-revalidate', 's-maxage', or 'max-age' response 'Cache-Control' directives.

pscanalpha.retrievedfromcache.name=Retrieved from Cache
pscanalpha.retrievedfromcache.desc=The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. 
pscanalpha.retrievedfromcache.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.retrievedfromcache.soln=Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.
pscanalpha.retrievedfromcache.extrainfo={0}
pscanalpha.retrievedfromcache.extrainfo.http11ageheader=The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.

pscanalpha.imagelocationscanner.name=Image Location and Privacy Scanner
pscanalpha.imagelocationscanner.alerttitle=Image Exposes Location or Privacy Data
pscanalpha.imagelocationscanner.alertDetailPrefix=This image embeds a location or leaks privacy-related data\: 
pscanalpha.imagelocationscanner.desc=The image was found to contain embedded location information, such as GPS coordinates, or another privacy exposure, such as camera serial number.  Depending on the context of the image in the website, this information may expose private details of the users of a site.  For example, a site that allows users to upload profile pictures taken in the home may expose the home's address.  
pscanalpha.imagelocationscanner.refs=https\://www.veggiespam.com/ils/
pscanalpha.imagelocationscanner.soln=Before allowing images to be stored on the server and/or transmitted to the browser, strip out the embedded location information from image.  This could mean removing all Exif data or just the GPS component.  Other data, like serial numbers, should also be removed.

pscanalpha.usernameidor.name=Username Hash Found
pscanalpha.usernameidor.desc=A hash of a username ({0}) was found in the response. This may indicate that the application is subject to an Insecure Direct Object Reference (IDOR) vulnerability. Manual testing will be required to see if this discovery can be abused.
pscanalpha.usernameidor.otherinfo=The hash was an {0}, with value\: {1} 
pscanalpha.usernameidor.soln=Use per user or session indirect object references (create a temporary mapping at time of use). Or, ensure that each use of a direct object reference is tied to an authorization check to ensure the user is authorized for the requested object. 
pscanalpha.usernameidor.refs=https\://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References\nhttps\://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004)

pscanalpha.xaspnetversioncanner.name=X-AspNet-Version Response Header Scanner
pscanalpha.xaspnetversioncanner.desc=Server leaks information via "X-AspNet-Version"/"X-AspNetMvc-Version" HTTP response header field(s).
pscanalpha.xaspnetversioncanner.soln=Configure the server so it will not return those headers.
pscanalpha.xaspnetversioncanner.extrainfo=An attacker can use this information to exploit known vulnerabilities.
pscanalpha.xaspnetversioncanner.refs=https\://www.troyhunt.com/shhh-dont-let-your-response-headers/\nhttps\://blogs.msdn.microsoft.com/varunm/2013/04/23/remove-unwanted-http-response-headers/

pscanalpha.xchromeloggerdata.name=X-ChromeLogger-Data (XCOLD) Header Information Leak
pscanalpha.xchromeloggerdata.desc=The server is leaking information through the X-ChromeLogger-Data (or X-ChromePhp-Data) response header. The content of such headers can be customized by the developer, however it is not uncommon to find\: server file system locations, vhost declarations, etc.
pscanalpha.xchromeloggerdata.refs=https\://craig.is/writing/chrome-logger
pscanalpha.xchromeloggerdata.soln=Disable this functionality in Production when it might leak information that could be leveraged by an attacker. Alternatively ensure that use of the functionality is tied to a strong authorization check and only available to administrators or support personnel for troubleshooting purposes not general users.
pscanalpha.xchromeloggerdata.otherinfo.msg=The following represents an attempt to base64 decode the value\:
pscanalpha.xchromeloggerdata.otherinfo.error=Header value could not be base64 decoded\:

pscanalpha.xdebugtoken.name=X-Debug-Token Information Leak
pscanalpha.xdebugtoken.desc=The response contained an X-Debug-Token or X-Debug-Token-Link header. This indicates that Symfony's Profiler may be in use and exposing sensitive data.
pscanalpha.xdebugtoken.otherinfo=By accessing a URL in the form http\://target_host/_profiler/token_value (i.e.\: http\://example.com/_profiler_/123ab4), you may gain access to the profiler and further leaked information.
pscanalpha.xdebugtoken.refs=https\://symfony.com/doc/current/cookbook/profiler/profiling_data.html\nhttps\://symfony.com/blog/new-in-symfony-2-4-quicker-access-to-the-profiler-when-working-on-an-api
pscanalpha.xdebugtoken.soln=Limit access to Symfony's Profiler, either via authentication/authorization or limiting inclusion of the header to specific clients (by IP etc).


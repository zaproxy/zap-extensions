#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages
pscanalpha.desc=Reglas de exploraci\u00f3n pasivas - alpha

pscanalpha.cookiesamesitescanner.name=Cookie sin atributo SameSite
pscanalpha.cookiesamesitescanner.desc=Una cookie ha sido enviada sin el atributo SameSite, lo que significa que la cookie puede ser enviada como un resultado de una solicitud 'cross-site'. \nEl atributo SameSite es una medida efectiva contra solicitudes de falsificaci\u00f3n de cross-site, inclusi\u00f3n de secuencias cross-site, y ataques sincronizados.
pscanalpha.cookiesamesitescanner.badval=Una cookie ha sido establecida con un valor de atributo SameSite invalido, lo que significa que la cookie podr\u00eda ser enviada como resultado de una solicitud 'cross-site'.\nEl atributo SameSite es una medida efectiva contra solicitudes de falsificaci\u00f3n cross-site, inclusi\u00f3n de secuencias cross-site, y ataques sincronizados.
pscanalpha.cookiesamesitescanner.soln=Aseg\u00farese que el atributo SameSite est\u00e1 establecido como 'lax' o idealmente 'strict' para todas las cookies.
pscanalpha.cookiesamesitescanner.refs=https\://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site

pscanalpha.examplefile.name=Un ejemplo regla de exploraci\u00f3n pasiva que carga datos de un archivo
pscanalpha.examplefile.desc=A\u00f1adir m\u00e1s informaci\u00f3n acerca de la vulnerabilidad aqu\u00ed
pscanalpha.examplefile.other=Se trata de informaci\u00f3n que no encaja en ninguna de las otras secciones
pscanalpha.examplefile.soln=Una descripci\u00f3n general de como resolver el problema
pscanalpha.examplefile.refs=http\://zaproxy.blogspot.co.uk/2014/04/hacking-zap-3-pasivve-scan-rules.html

pscanalpha.insecureformload.name=HTTP a HTPPS transici\u00f3n insegura en forma de post
pscanalpha.insecureformload.desc=Esta comprobaci\u00f3n busca p\u00e1ginas HTTP inseguras que alojan formas HTTPS. El problema es que una p\u00e1gina HTTP insegura puede f\u00e1cilmente ser secuestrada a trav\u00e9s de MITM y la forma HTTPS segura puede ser reemplazada o simulada.
pscanalpha.insecureformload.refs=[cadena vac\u00eda]
pscanalpha.insecureformload.soln=Utilizar HTTPS para p\u00e1ginas de destino que alojen formas seguras.
pscanalpha.insecureformload.exploit=[cadena vac\u00eda]
pscanalpha.insecureformload.extrainfo=La respuesta a la siguiente petici\u00f3n por HTTP inclu\u00eda un valor de atributo de acci\u00f3n de etiqueta de forma HTTPS\:\n\n{0} el contexto era\:\n\n{1}

pscanalpha.insecureformpost.name=Transici\u00f3n insegura en forma de post de HTTPS a HTTP
pscanalpha.insecureformpost.desc=Esta comprobaci\u00f3n identifica p\u00e1ginas HTTPS seguras que alojan fromas HTTP inseguras. El problema es que una p\u00e1gina segura est\u00e1 transicionando a una p\u00e1gina insegura cuando datos son cargados a trav\u00e9s de una forma. El user puede pensar que est\u00e1n enviando datos a una p\u00e1gina segura cuando en realidad no es as\u00ed.
pscanalpha.insecureformpost.refs=[cadena vac\u00eda]
pscanalpha.insecureformpost.soln=Aseg\u00farese que los datos sensibles solo son enviados a trav\u00e9s de canales HTTPS seguros.
pscanalpha.insecureformpost.exploit=[cadena vac\u00eda]
pscanalpha.insecureformpost.extrainfo=La respuesta a la siguiente petici\u00f3n por HTTPS inclu\u00eda un valor de atributo de acci\u00f3n de etiqueta de forma HTTP\:\n\n{0} el contexto era\:\n\n{1}

pscanalpha.usercontrolledcharset.name=Usuario Charset controlable
pscanalpha.usercontrolledcharset.desc=Esta comprobaci\u00f3n busca en input user-supplied en par\u00e1metros de cadena de consulta y datos POST para identificar que las declaraciones de conjunto de caracteres de etiqueta Content-Type o meta podr\u00edan ser controladas por un user. Estas declaraciones de charset deben ser siempre declaradas por la aplicaci\u00f3n. SI un atacante puede controlar el charset de respuesta, ellos podr\u00edan manipular el HTML para ejecutar XSS o otros ataques.
pscanalpha.usercontrolledcharset.refs=[cadena vac\u00eda]
pscanalpha.usercontrolledcharset.soln=Fuerza UTF-8 en todas las declaraciones charset. Si la entrada de usuario es requerida para decidir una declaraci\u00f3n charset, aseg\u00farese que solo esta usted en la lista de los permitidos.
pscanalpha.usercontrolledcharset.exploit=Un atacante controlando el valor de conjunto de caracteres del elemento <meta> es capaz de declarar UTF-7 y tambi\u00e9n capaz de incluir suficiente carga controlada por el usuario temprano en el documento HTML para tenerlo interpretado como UT-7. Al codificar su carga con UTF-7 el atacante es capaz de saltarse cualquier protecci\u00f3n de servidor XSS e insertar guion en la p\u00e1gina.
pscanalpha.usercontrolledcharset.extrainfo=Una (n) [{0}] eiqueta [{1}] atributo\n\nLa entrada del usuario encontr\u00f3\:\n{2}\={3}\n\nEn valor del conjunto de caracteres era controlado por\:\n{4}

pscanalpha.usercontrolledcookie.name=Envenenamiento de cookie
pscanalpha.usercontrolledcookie.desc=Esta comprobaci\u00f3n buscar suministradas por el usuario en par\u00e1metros de cadena de consulta y datos POST para identificar donde los par\u00e1metros de las cookies podr\u00edan ser controladas. Esto es llamado un ataque de envenenamiento de cookie, y se vuelve explotable cuando un atacante puede manipular la cookie de varias formas. En algunos casos esto no ser\u00e1 explotable, de todas formas, permitiendo a par\u00e1metros URL establecer valores de cookies es generalmente considerado un error.
pscanalpha.usercontrolledcookie.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-cookie
pscanalpha.usercontrolledcookie.soln=No permitir a la entrada de usuario controlar valores y nombres de cookies. Si algunos par\u00e1metros de cadena de consulta deben ser establecidos en valores de cookies, aseg\u00farese de filtrar punto y coma que puede servir como delimitadores de nombres/valores.
pscanalpha.usercontrolledcookie.exploit.get=Un atacante podr\u00eda ser capaz de envenenar valores de cookies a trav\u00e9s de par\u00e1metros URL. Intentar inyectando un punto y coma para ver si usted puede agregar valores de cookies (por ejemplo, nombre\=ValorControlado; nombre\=ValorControlado;).
pscanalpha.usercontrolledcookie.exploit.post=Un atacante podr\u00eda se capaz de envenenar valores de cookies a trav\u00e9s de par\u00e1metros POST. Para comprobar si este es un problemas mas serio, usted deber\u00eda  tratar reenviando esa petici\u00f3n como un GET, con el par\u00e1metro POST incluido como un par\u00e1metro de cadena de consulta. Por ejemplo\: http\://nottrusted.com/page?value\=maliciousInput.\n\n
pscanalpha.usercontrolledcookie.extrainfo=Esto fue identificado en\:\n\n{0}\n\nLa entrada de usuario fue encontrada en el siguiente cookie\:\n{2}\={3}

pscanalpha.usercontrolledjavascriptevent.name=Evento de JavaScript (XSS) controlable por el usuario
pscanalpha.usercontrolledjavascriptevent.desc=Esta comprobaci\u00f3n busca entradas proporcionadas por el usuario en par\u00e1metro de cadena de consulta y datos POST para identificar donde cierto atributo HTML podr\u00edan ser controlados. Esto proporciona detecci\u00f3n de hot-spot para XSS (cross-site scripting) que requerir\u00e1n revisiones futuras por un analista de seguridad para determinar su nivel de explotaci\u00f3n.            
pscanalpha.usercontrolledjavascriptevent.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-javascript-event
pscanalpha.usercontrolledjavascriptevent.soln=Validar todas las entradas y desinfectar salidas antes de escribir alg\u00fan Javascrpit en eventos.
pscanalpha.usercontrolledjavascriptevent.exploit=[cadena vac\u00eda]
pscanalpha.usercontrolledjavascriptevent.extrainfo=Evento(s) JavaScript controlados por usuario fue encontrado. La explotabilidad necesitara ser determinada manualmente. La p\u00e1gina en el siguiente URL\:\n\n{0}''''\n\nIncluye el siguiente evento JavaScript que podr\u00eda ser controlable por el atacante\:\n\nEntrada de usuaria fue encontrada en los siguientes datos de un [{1}] evento.\n{2}\n\nLa entrada de usuario era\:\n{3}

pscanalpha.usercontrolledjavascriptproperty.name=Propiedad de JavaScript (XSS) controlable por el usuario
pscanalpha.usercontrolledjavascriptproperty.desc=Esta comprobaci\u00f3n busca entradas proporcionadas por el usuario en par\u00e1metro de cadena de consulta y datos POST para identificar donde URL en ciertas propiedades JavaScript (por ejemplo, createElement src) podr\u00edan ser controlados. Esto proporciona detecci\u00f3n de hot-spot para XSS (cross-site scripting) que requerir\u00e1n revisiones futuras por un analista de seguridad para determinar su nivel de explotaci\u00f3n.            
pscanalpha.usercontrolledjavascriptproperty.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-javascript-reference
pscanalpha.usercontrolledjavascriptproperty.soln=No permitir entradas de usuarios para controlar el origen de las referencias de ubicaci\u00f3n de JavaScript.
pscanalpha.usercontrolledjavascriptproperty.exploit=[cadena vac\u00eda]
pscanalpha.usercontrolledjavascriptproperty.extrainfo=L p\u00e1gina en el siguiente URL aparenta contener entrada de usuario en un valor de propiedad de JavaScript\:\n\n{0} La entrada de usuario encontrada fue\:\n\n{1}\={2}\n\nEl contexto era\:\n{3}

pscanalpha.usercontrolledhtmlattributes.name=Atributo de elemento HTML controlable por usuario (Potencial XSS)
pscanalpha.usercontrolledhtmlattributes.desc=Esta comprobaci\u00f3n busca entradas proporcionadas por el usuario en par\u00e1metro de cadena de consulta y datos POST para identificar donde ciertos valores de atributo HTML podr\u00edan ser controlados. Esto proporciona detecci\u00f3n de hot-spot para XSS (cross-site scripting) que requerir\u00e1n revisiones futuras por un analista de seguridad para determinar su nivel de explotaci\u00f3n.
pscanalpha.usercontrolledhtmlattributes.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-html-attribute
pscanalpha.usercontrolledhtmlattributes.soln=Validar todas las entradas y desinfectar salidas antes de escribir alg\u00fan atributo HTML.
pscanalpha.usercontrolledhtmlattributes.exploit=[cadena vac\u00eda]
pscanalpha.usercontrolledhtmlattributes.extrainfo=Valores de atributo controlables por usuario fueron encontrados. Tratar inyectando caracteres especiales a ver si XSS podr\u00eda ser posible. La p\u00e1gina en el siguiente URL\:\n\n{0}\n\naparenta incluir entrada de usuario en\:\n\nuna(n) [{1}] etiqueta [{2}] atributo\n\nLa entrada de usuario encontrada fue\:\n{3}\={4}\n\nEl valor controlable por usuario fue\:\n{5}

pscanalpha.usercontrolledopenredirect.name=Redirecci\u00f3n abierta
pscanalpha.usercontrolledopenredirect.desc=Redirecciones abiertas son una de las diez principales vulnerabilidades de OWASP 2010. Esta comprobaci\u00f3n busca entradas suministradas por el usuario en par\u00e1metros de cadena de consulta y datos POST para identificar donde redirecciones abiertas podr\u00edan ser posibles. Las redirecciones abiertas ocurren cuando una aplicaci\u00f3n permite entrada suministrada por usuario (por ejemplo, http\://nottrusted.com) para controlar una redirecci\u00f3n fuera de sitio. Esto es generalmente una forma bastante acertada de encontrar donde las redirecciones 301 o 302 podr\u00edan estar explotadas por spammers o ataques phising
pscanalpha.usercontrolledopenredirect.soln=Para evitar la vulnerabilidad de redirecci\u00f3n abierta, los par\u00e1metros de la aplicaci\u00f3n del script/programa deben ser validades antes de enviar el c\u00f3digo HTTP 302 (redirecci\u00f3n) al navegador del cliente. Implementar la funcionalidad que solo redirecciona a relativos de URI, o una lista de dominios de confianza
pscanalpha.usercontrolledopenredirect.exploit=Un atacante podr\u00eda suministrar a un usuario con el siguiente enlace\: http\://example.com/example.php?url\=http\://malicious.example.com
pscanalpha.usercontrolledopenredirect.refs=https\://www.Owasp.org/index.php/Open_redirect \nhttps\://owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards https\://cwe.mitre.org/data/definitions/601.html
pscanalpha.usercontrolledopenredirect.extrainfo.get=La respuesta 301 o 302 a una solicitud del siguiente URL parec\u00eda contener una entrada de usar en el encabezado de ubicaci\u00f3n\:\n\n
pscanalpha.usercontrolledopenredirect.extrainfo.post=Se detect\u00f3 una redirecci\u00f3n abierta controlada por par\u00e1metros POST. Para comprobar si se trata de un problema m\u00e1s grave, debe tratar de volver a enviar esa solicitud como un GET con el par\u00e1metro POST incluido como un par\u00e1metro de cadena de consulta. Por ejemplo\: http\://nottrusted.com/page?url\=http\: / / lookout.net. La respuesta a una solicitud de la siguiente URL 301 o 302 apareci\u00f3 contener entrada de usuario en el encabezado de Ubicaci\u00f3n\:  \n\n
pscanalpha.usercontrolledopenredirect.extrainfo.common={0} \n\nLa entrada de usuario encontrada fue\:\n\n{1}\={2}\n\nEl contexto fue\:\n\n{3}

pscanalpha.sourcecodedisclosure.name=Divulgaci\u00f3n de C\u00f3digo Fuente
pscanalpha.sourcecodedisclosure.desc=El c\u00f3digo de fuente de la aplicaci\u00f3n fue divulgado por el servidor web
pscanalpha.sourcecodedisclosure.soln=Aseg\u00farese que la aplicaci\u00f3n Source Code no est\u00e1 habilitada con extensiones alternativas, y aseg\u00farese que el c\u00f3digo de fuente no est\u00e1 presente dentro de otros archivos o datos desplegados al servidor web, o servidos por el servidor web. 
pscanalpha.sourcecodedisclosure.refs=http\://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-u-s-government/
pscanalpha.sourcecodedisclosure.extrainfo={0}

pscanalpha.hashdisclosure.name=Divulgaci\u00f3n de hash
pscanalpha.hashdisclosure.desc=Un hash ha sido divulgado por el servidor web
pscanalpha.hashdisclosure.soln=Aseg\u00farese que los hashes que son usados para proteger credenciales u otros recursos no est\u00e1n infiltrados por el servidor web o la base de datos. T\u00edpicamente no hay ning\u00fan requisito para contrase\u00f1as de hashes para ser accesibles para el navegador web.      
pscanalpha.hashdisclosure.refs=https\://www.Owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure http\://projects.webappsec.org/w/page/13246936/Information%20Leakage \nhttp\://openwall.info/wiki/john/sample-hashes
pscanalpha.hashdisclosure.extrainfo={0}

pscanalpha.timestampdisclosure.name=Divulgaci\u00f3n de la marca de hora
pscanalpha.timestampdisclosure.desc=Una marca de tiempo ha sido divulgada por el servidor de la aplicaci\u00f3n/el navegador
pscanalpha.timestampdisclosure.soln=Confirmar manualmente que los datos de marca de hora no son sensibles, y que los datos no pueden ser agregados a patrones explotables de divulgaci\u00f3n.
pscanalpha.timestampdisclosure.refs=https\://www.Owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure http\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.timestampdisclosure.extrainfo={0}, que eval\u00faa a\: {1}

pscanalpha.base64disclosure.name=Divulgaci\u00f3n de Base64
pscanalpha.base64disclosure.desc=Los datos codificados de Base64 fueron divulgados por el servidor de la aplicaci\u00f3n/el navegador
pscanalpha.base64disclosure.soln=Confirmar manualmente que los datos de la Base64 no divulguen informaci\u00f3n sensible, y que los datos no pueden ser agregados/usados para explotar otras vulnerabilidades.
pscanalpha.base64disclosure.refs=https\://www.Owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure http\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.extrainfo={1}

pscanalpha.base64disclosure.viewstate.name=Divulgaci\u00f3n ViewState ASP.NET
pscanalpha.base64disclosure.viewstate.desc=Un ViewState ASP.NET fue divulgado por el servidos de la aplicaci\u00f3n/el servidor
pscanalpha.base64disclosure.viewstate.soln=Manualmente confirmar que el ViewState ASP.NET no divulguen informaci\u00f3n sensible, y que los datos no pueden ser agregados/usados para explotar otras vulnerabilidades.
pscanalpha.base64disclosure.viewstate.refs=http\://msdn.Microsoft.com/en-us/library/bb386448.aspx \nhttps\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure http\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.viewstate.extrainfo={0}

pscanalpha.base64disclosure.viewstatewithoutmac.name=Integridad ViewState ASP.NET
pscanalpha.base64disclosure.viewstatewithoutmac.desc=La aplicaci\u00f3n no usa un C\u00f3digo de Autenticaci\u00f3n de Mensajes (MAC) para proteger la integridad del ViewState ASP.NET, que puede ser manipulado por un cliente malintencionado
pscanalpha.base64disclosure.viewstatewithoutmac.soln=Aseg\u00farese que todos los ViewStates ASP.NET est\u00e1n protegidos de la manipulaci\u00f3n usando un MAC, generado usando un algoritmo seguro, y una clave secreta en el lado del servidor. Esta es la configuraci\u00f3n de falla en instalaci\u00f3n ASP.NET moderna, que probablemente sea montado en exceso en programaci\u00f3n, o mediante la configuraci\u00f3n de ASP.NET.
pscanalpha.base64disclosure.viewstatewithoutmac.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttps\://www.jardinesoftware.net/2012/02/06/asp-net-tampering-with-event-validation-part-1/
pscanalpha.base64disclosure.viewstatewithoutmac.extrainfo={0}

pscanalpha.directorybrowsing.name=Exploraci\u00f3n de directorios
pscanalpha.directorybrowsing.desc=Es posible ver un listado de directorios. La listas de directorios podr\u00eda revelar scripts ocultos, incluyen archivos, copia de seguridad de los archivos de origen, etc, lo que puede ser accesible para revelar informaci\u00f3n sensible.
pscanalpha.directorybrowsing.soln=Configurar el servidor web para deshabilitar el navegador de directorios. 
pscanalpha.directorybrowsing.refs=https\://cwe.mitre.org/data/definitions/548.html
pscanalpha.directorybrowsing.extrainfo={0}

pscanalpha.heartbleed.name=Vulnerabilidad OpenSSL Heartbleed (Indicativo)
pscanalpha.heartbleed.desc=Las implementaciones de TLS y DTLS en OpenSSL 1.0.1 antes de 1.0.1g no manejan bien paquetes de extensi\u00f3n de latido, que permite a atacantes remotos obtener informaci\u00f3n sensible de la memoria de proceso mediante paquetes dise\u00f1ados que provocan una lectura excesiva de buffer, potencialmente divulgando informaci\u00f3n sensible.  
pscanalpha.heartbleed.soln=Actualizar a OpenSSL o posterior. Volver a emitir certificados HTTPS. Cambiar claves privadas asim\u00e9tricas y claves secretas compartidas, ya que estos podr\u00edan estar comprometidos, sin evidencia de compromiso en los archivos de registro del servidor.
pscanalpha.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
pscanalpha.heartbleed.extrainfo={0} est\u00e1 en uso. Tenga en cuenta que la versi\u00f3n divulgada podr\u00eda contener correcciones de seguridad retro-portado, y entonces el problema podr\u00eda ser un positivo falso. Esto es com\u00fan en Red Hat, por ejemplo.

pscanalpha.crossdomain.name=Misconfiguraci\u00f3n entre dominios
pscanalpha.crossdomain.desc=Descargas de datos del navegador web podr\u00eda ser posible, debido a una desconfiguraci\u00f3n del intercambio de recursos cruzados de origen (CORS) en el servidor web
pscanalpha.crossdomain.soln=Aseg\u00farese que los datos sensibles no est\u00e1n disponibles de manera no autenticada (usando direcci\u00f3n IP listado-blanco, por ejemplo). Configurar el encabezado HTTP ''''Access-Control-Allow-Origin" a un conjunto de dominios m\u00e1s restrictivo, o remover completamente todos los encabezados CORS, para permitir que el navegador web refuerce la pol\u00edtica de mismo origen (SOP) en una manera mas restrictiva.
pscanalpha.crossdomain.refs=http\://www.hpenterprisesecurity.com/vulncat/en/vulncat/vb/html5_overly_permissive_cors_policy.html
pscanalpha.crossdomain.extrainfo=La desconfiguraci\u00f3n CORS en el servidor web permite a dominios cruzados leer peticiones de dominios de terceros arbitrariamente, usando APIs sin autenticaci\u00f3n en este dominio. Las implementaciones de navegador web no permiten a terceros arbitrarios leer la respuesta de APIs autenticados, de todas formas. Esto reduce el riesgo de alguna forma. Esta desconfiguraci\u00f3n podr\u00eda ser usada por un atacante para acceder a datos que est\u00e1 disponible en una manera sin autenticaci\u00f3n, pero que usa otra forma de seguridad, tal como la direcci\u00f3n IP lista-blanca.

pscanalpha.serverheader.scanner.name=Esc\u00e1ner de encabezado servidor de respuesta HTTP
pscanalpha.serverheaderversioninfoleak.name=El servidor divulga informaci\u00f3n de versi\u00f3n mediante el campo de encabezado de respuesta HTTP ''''Server"
pscanalpha.serverheaderversioninfoleak.desc=El servidor de el navegador/la aplicaci\u00f3n est\u00e1 divulgando informaci\u00f3n mediante el encabezado de respuesta HTTP "Server". El acceso a dicha informaci\u00f3n podr\u00eda facilitarle a los atacantes la identificaci\u00f3n de otras vulnerabilidades a las que es sujeto el servidor de su navegador/aplicaci\u00f3n.
pscanalpha.serverheaderinfoleak.name=El servidor divulga su aplicaci\u00f3n de servidor de web mediante el campo de encabezado de respuesta HTTP ''''Server''''
pscanalpha.serverheaderinfoleak.desc=El servidor de el navegador/la aplicaci\u00f3n est\u00e1 divulgando la aplicaci\u00f3n que se usa como servidor web mediante el encabezado de respuesta HTTP ''''Server''''. El acceso a dicha informaci\u00f3n podr\u00eda facilitarle a atacantes a identificar otras vulnerabilidades a las que est\u00e1 sujeta el servidor de su navegador/aplicaci\u00f3n. Esta informaci\u00f3n sola, por ejemplo, sin una cadena de versi\u00f3n, no es tan peligrosa para la seguridad del servidor, sin embargo esta informaci\u00f3n en el campo de encabezado de respuesta es casi siempre in\u00fatil y solo un vector de ataque obsoleto.
pscanalpha.serverheaderinfoleak.general.refs=http\://httpd.apache.org/docs/current/mod/core.html\#servertokens\nhttp\://msdn.microsoft.com/en-us/library/ff648552.aspx\#ht_urlscan_007\nhttp\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanalpha.serverheaderinfoleak.general.soln=Aseg\u00farese que su servidor web, servidor de aplicaci\u00f3n, equilibrador de carga, etc. est\u00e1 configurado a suprimir el encabezado ''''Server'''' o proveer detalles gen\u00e9ricos.

pscanalpha.stricttransportsecurity.scanner.name=Esc\u00e1ner de encabezado de estricta seguridad de transporte
pscanalpha.stricttransportsecurity.name=Encabezado de estricta seguridad de transporte no establecido
pscanalpha.stricttransportsecurity.desc=La estricta seguridad de transporte (HSTS) es un mecanismo pol\u00edtico de seguridad web donde un servidor web declara que los agentes de usuarios obedientes (tales como un navegador web) est\u00e1n para interactuar con el usando solo conexiones HTTPS seguras (por ejemplo, HTTP cubierto sobre TLS/SSL). HSTS es un protocolo IETF de pista est\u00e1ndar y est\u00e1 especificado en RFC 6797.
pscanalpha.stricttransportsecurity.refs=https\://www.owasp.org/index.php/HTTP_Strict_Transport_Security\nhttps\://www.owasp.org/index.php/List_of_useful_HTTP_headers\nhttp\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp\://caniuse.com/stricttransportsecurity\nhttp\://tools.ietf.org/html/rfc6797
pscanalpha.stricttransportsecurity.soln=Aseg\u00farese que su servidor web, servidor de aplicaci\u00f3n, equilibrador de cargas, etc. est\u00e1 configurado a reforzar la Estricta Seguridad de Transporte.
pscanalpha.stricttransportsecurity.max.age.name=Estricta seguridad de transporte deshabilitada
pscanalpha.stricttransportsecurity.max.age.desc=Un encabezado de estricta seguridad de transporte HTTP (HSTS) fue encontrado, pero contiene la directiva max-age\=0 lo que deshabilita el control y ordena a los navegadores a resetear cualquier previa configuraci\u00f3n relacionada con HSTS. Ver RFC 6797 para detalles m\u00e1s precisos. \nLa estricta seguridad de transporte HTTP (HSTS) es un mecanismo pol\u00edtico de seguridad web donde un servidor web declara que los agentes de usuarios obedientes (tales como el navegador web) son para interactuar con el usando solo conexiones HTTPS seguras (por ejemplo, un HTTP cubierto sobre TLS/SSL).
pscanalpha.stricttransportsecurity.max.age.refs=http\://tools.ietf.org/html/rfc6797\#section-6.2
pscanalpha.stricttransportsecurity.max.age.soln=Revisar la configuraci\u00f3n de este control. Aseg\u00farese que su servidor web, servidor de aplicaci\u00f3n, equilibrador de carga, etc. est\u00e1 configurado para establecer el estricto seguridad de transporte con un valor max-age apropiado.
pscanalpha.stricttransportsecurity.compliance.multiple.header.name=Strict-Transport-Security Multiple Header Entries (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.multiple.header.desc=HTTP Strict Transport Security (HSTS) headers were found, a response with multiple HSTS header entries is not compliant with the specification (RFC 6797) and only the first HSTS header will be processed others will be ignored by user agents or the HSTS policy may be incorrectly applied.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.compliance.multiple.header.refs=http\://tools.ietf.org/html/rfc6797\#section-8.1
pscanalpha.stricttransportsecurity.compliance.multiple.header.soln=Ensure that only one component in your stack\: code, web server, application server, load balancer, etc. is configured to set or add a HTTP Strict-Transport-Security (HSTS) header.
pscanalpha.stricttransportsecurity.plain.resp.name=Strict-Transport-Security Header on Plain HTTP Response
pscanalpha.stricttransportsecurity.plain.resp.desc=A HTTP Strict Transport Security (HSTS) header was found, but HSTS headers are ignored on plain (non-HTTPS) responses.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.plain.resp.refs=http\://tools.ietf.org/html/rfc6797\#section-8.1
pscanalpha.stricttransportsecurity.plain.resp.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security for HTTPS responses.
pscanalpha.stricttransportsecurity.compliance.max.age.missing.name=Strict-Transport-Security Missing Max-Age (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.max.age.missing.desc=A HTTP Strict Transport Security (HSTS) header was found, but it is missing the max-age directive (or the directive is missing a value). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.compliance.max.age.missing.refs=http\://tools.ietf.org/html/rfc6797\#section-6.2
pscanalpha.stricttransportsecurity.compliance.max.age.missing.soln=Revisar la configuraci\u00f3n de este control. Aseg\u00farese que su servidor web, servidor de aplicaci\u00f3n, equilibrador de cargas, etc. est\u00e1 configurado para establecer el estricto seguridad de transporte con un valore max-age apropiado.
pscanalpha.stricttransportsecurity.compliance.meta.name=Strict-Transport-Security Defined via META (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.meta.desc=A HTTP Strict Transport Security (HSTS) META tag was found, defining HTTP Strict Transport Security (HSTS) via a META tag is explicitly not supported by the spec (RFC 6797).
pscanalpha.stricttransportsecurity.compliance.meta.refs=http\://tools.ietf.org/html/rfc6797\#section-8.5
pscanalpha.stricttransportsecurity.compliance.meta.soln=Do not attempt to set HTTP Strict Transport Security (HSTS) via a META tag.
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.name=Strict-Transport-Security Max-Age Malformed (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains quotes preceding the max-age directive (the max-age value can be quoted, but the directive itself cannot be). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.refs=http\://tools.ietf.org/html/rfc6797\#section-6.1
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate format.
pscanalpha.stricttransportsecurity.compliance.malformed.content.name=Strict-Transport-Security Malformed Content (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.malformed.content.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains some content that was not expected (perhaps curly quotes), the expectation is that the content be printable ASCII characters.
pscanalpha.stricttransportsecurity.compliance.malformed.content.refs=http\://tools.ietf.org/html/rfc6797
pscanalpha.stricttransportsecurity.compliance.malformed.content.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with appropriate content. 

pscanalpha.xpoweredbyheaderinfoleak.name=Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)
pscanalpha.xpoweredbyheaderinfoleak.desc=The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
pscanalpha.xpoweredbyheaderinfoleak.refs=http\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanalpha.xpoweredbyheaderinfoleak.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
pscanalpha.xpoweredbyheaderinfoleak.exploit=[cadena vac\u00eda]
pscanalpha.xpoweredbyheaderinfoleak.extrainfo=[cadena vac\u00eda]
pscanalpha.xpoweredbyheaderinfoleak.otherinfo.msg=The following X-Powered-By headers were also found\:\r\n

pscanalpha.contentsecuritypolicymissing.name=Content Security Policy (CSP) Header Not Set
pscanalpha.contentsecuritypolicymissing.desc=Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanalpha.contentsecuritypolicymissing.refs=https\://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps\://www.owasp.org/index.php/Content_Security_Policy\nhttp\://www.w3.org/TR/CSP/\nhttp\://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp\://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp\://caniuse.com/\#feat\=contentsecuritypolicy\nhttp\://content-security-policy.com/
pscanalpha.contentsecuritypolicymissing.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header, to achieve optimal browser support\: "Content-Security-Policy" for Chrome 25+, Firefox 23+ and Safari 7+, "X-Content-Security-Policy" for Firefox 4.0+ and Internet Explorer 10+, and "X-WebKit-CSP" for Chrome 14+ and Safari 6+.
pscanalpha.contentsecuritypolicymissing.exploit=[cadena vac\u00eda]
pscanalpha.contentsecuritypolicymissing.extrainfo=[cadena vac\u00eda]
pscanalpha.contentsecuritypolicymissing.ro.name=Content Security Policy (CSP) Report-Only Header Found
pscanalpha.contentsecuritypolicymissing.ro.desc=The response contained a Content-Security-Policy-Report-Only header, this may indicate a work-in-progress implementation, or an oversight in promoting pre-Prod to Prod, etc.\n\nContent Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanalpha.contentsecuritypolicymissing.ro.refs=https\://www.w3.org/TR/CSP2/\nhttps\://w3c.github.io/webappsec-csp/\nhttp\://caniuse.com/\#feat\=contentsecuritypolicy\nhttp\://content-security-policy.com/

pscanalpha.xbackendserver.name=X-Backend-Server Header Information Leak
pscanalpha.xbackendserver.desc=The server is leaking information pertaining to backend systems (such as hostnames or IP addresses). Armed with this information an attacker may be able to attack other systems or more directly/efficiently attack those systems.
pscanalpha.xbackendserver.refs=[cadena vac\u00eda]
pscanalpha.xbackendserver.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress X-Backend-Server headers.
pscanalpha.xbackendserver.exploit=[cadena vac\u00eda]
pscanalpha.xbackendserver.extrainfo=[cadena vac\u00eda]

pscanalpha.insecurecomponent.name=Insecure Component
pscanalpha.insecurecomponent.desc=Based on passive analysis of the response, insecure component {0} {1} appears to be in use.\nThe highest noted CVSS rating for this product version is {2}.\nIn total, {3} vulnerabilities were noted.\nSome Linux distributions such as Red Hat employ the practice of retaining old version numbers when security fixes are "backported".\nThese cases are noted as "False Positives", but should be manually verified.  
pscanalpha.insecurecomponent.refs={0}
pscanalpha.insecurecomponent.soln=Upgrade from {0} {1} to the latest stable version of the product.\nUse a package manager and package management policies and procedures to manage the installed versions of software packages.

pscanalpha.bigredirectsscanner.name=Big Redirect Detected (Potential Sensitive Information Leak)
pscanalpha.bigredirectsscanner.desc=The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, PII, etc).
pscanalpha.bigredirectsscanner.refs=[cadena vac\u00eda]
pscanalpha.bigredirectsscanner.soln=Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.
pscanalpha.bigredirectsscanner.extrainfo=Location header URI length\: {0} [{1}].\nPredicted response size\: {2}.\nResponse Body Length\: {3}.


pscanalpha.storabilitycacheability.name=Content Cacheability

pscanalpha.nonstorable.name=Non-Storable Content
pscanalpha.nonstorable.desc=The response contents are not storable by caching components such as proxy servers. If the response does not contain sensitive, personal or user-specific information, it may benefit from being stored and cached, to improve performance.
pscanalpha.nonstorable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.nonstorable.soln=The content may be marked as storable by ensuring that the following conditions are satisfied\:\nThe request method must be understood by the cache and defined as being cacheable ("GET", "HEAD", and "POST" are currently defined as cacheable)\nThe response status code must be understood by the cache (one of the 1XX, 2XX, 3XX, 4XX, or 5XX response classes are generally understood)\nThe "no-store" cache directive must not appear in the request or response header fields\nFor caching by "shared" caches such as "proxy" caches, the "private" response directive must not appear in the response\nFor caching by "shared" caches such as "proxy" caches, the "Authorization" header field must not appear in the request, unless the response explicitly allows it (using one of the "must-revalidate", "public", or "s-maxage" Cache-Control response directives)\nIn addition to the conditions above, at least one of the following conditions must also be satisfied by the response\:\nIt must contain an "Expires" header field\nIt must contain a "max-age" response directive\nFor "shared" caches such as "proxy" caches, it must contain a "s-maxage" response directive\nIt must contain a "Cache Control Extension" that allows it to be cached\nIt must have a status code that is defined as cacheable by default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).   
pscanalpha.nonstorable.extrainfo={0}

pscanalpha.storablenoncacheable.name=Storable but Non-Cacheable Content
pscanalpha.storablenoncacheable.desc=The response contents are storable by caching components such as proxy servers, but will not be retrieved directly from the cache, without validating the request upstream, in response to similar requests from other users. 
pscanalpha.storablenoncacheable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablenoncacheable.soln=[cadena vac\u00eda]
pscanalpha.storablenoncacheable.extrainfo={0}}

pscanalpha.storablecacheable.name=Storable and Cacheable Content
pscanalpha.storablecacheable.desc=The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where "shared" caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.
pscanalpha.storablecacheable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablecacheable.soln=Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. 
pscanalpha.storablecacheable.extrainfo={0}
pscanalpha.storablecacheable.otherinfo.liberallifetimeheuristic=In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.
pscanalpha.storablecacheable.otherinfo.staleretrievenotblocked=The response is stale, and stale responses are not configured to be re-validated or blocked, using the 'must-revalidate', 'proxy-revalidate', 's-maxage', or 'max-age' response 'Cache-Control' directives.

pscanalpha.retrievedfromcache.name=Retrieved from Cache
pscanalpha.retrievedfromcache.desc=The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. 
pscanalpha.retrievedfromcache.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.retrievedfromcache.soln=Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.
pscanalpha.retrievedfromcache.extrainfo={0}
pscanalpha.retrievedfromcache.extrainfo.http11ageheader=The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.

pscanalpha.imagelocationscanner.name=Image Location and Privacy Scanner
pscanalpha.imagelocationscanner.alerttitle=Image Exposes Location or Privacy Data
pscanalpha.imagelocationscanner.alertDetailPrefix=This image embeds a location or leaks privacy-related data\: 
pscanalpha.imagelocationscanner.desc=The image was found to contain embedded location information, such as GPS coordinates, or another privacy exposure, such as camera serial number.  Depending on the context of the image in the website, this information may expose private details of the users of a site.  For example, a site that allows users to upload profile pictures taken in the home may expose the home's address.  
pscanalpha.imagelocationscanner.refs=https\://www.veggiespam.com/ils/
pscanalpha.imagelocationscanner.soln=Before allowing images to be stored on the server and/or transmitted to the browser, strip out the embedded location information from image.  This could mean removing all Exif data or just the GPS component.  Other data, like serial numbers, should also be removed.

pscanalpha.usernameidor.name=Username Hash Found
pscanalpha.usernameidor.desc=A hash of a username ({0}) was found in the response. This may indicate that the application is subject to an Insecure Direct Object Reference (IDOR) vulnerability. Manual testing will be required to see if this discovery can be abused.
pscanalpha.usernameidor.otherinfo=The hash was an {0}, with value\: {1} 
pscanalpha.usernameidor.soln=Use per user or session indirect object references (create a temporary mapping at time of use). Or, ensure that each use of a direct object reference is tied to an authorization check to ensure the user is authorized for the requested object. 
pscanalpha.usernameidor.refs=https\://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References\nhttps\://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004)

pscanalpha.xaspnetversioncanner.name=X-AspNet-Version Response Header Scanner
pscanalpha.xaspnetversioncanner.desc=Server leaks information via "X-AspNet-Version"/"X-AspNetMvc-Version" HTTP response header field(s).
pscanalpha.xaspnetversioncanner.soln=Configure the server so it will not return those headers.
pscanalpha.xaspnetversioncanner.extrainfo=An attacker can use this information to exploit known vulnerabilities.
pscanalpha.xaspnetversioncanner.refs=https\://www.troyhunt.com/shhh-dont-let-your-response-headers/\nhttps\://blogs.msdn.microsoft.com/varunm/2013/04/23/remove-unwanted-http-response-headers/

pscanalpha.xchromeloggerdata.name=X-ChromeLogger-Data (XCOLD) Header Information Leak
pscanalpha.xchromeloggerdata.desc=The server is leaking information through the X-ChromeLogger-Data (or X-ChromePhp-Data) response header. The content of such headers can be customized by the developer, however it is not uncommon to find\: server file system locations, vhost declarations, etc.
pscanalpha.xchromeloggerdata.refs=https\://craig.is/writing/chrome-logger
pscanalpha.xchromeloggerdata.soln=Disable this functionality in Production when it might leak information that could be leveraged by an attacker. Alternatively ensure that use of the functionality is tied to a strong authorization check and only available to administrators or support personnel for troubleshooting purposes not general users.
pscanalpha.xchromeloggerdata.otherinfo.msg=The following represents an attempt to base64 decode the value\:
pscanalpha.xchromeloggerdata.otherinfo.error=Header value could not be base64 decoded\:

pscanalpha.xdebugtoken.name=X-Debug-Token Information Leak
pscanalpha.xdebugtoken.desc=The response contained an X-Debug-Token or X-Debug-Token-Link header. This indicates that Symfony's Profiler may be in use and exposing sensitive data.
pscanalpha.xdebugtoken.otherinfo=By accessing a URL in the form http\://target_host/_profiler/token_value (i.e.\: http\://example.com/_profiler_/123ab4), you may gain access to the profiler and further leaked information.
pscanalpha.xdebugtoken.refs=https\://symfony.com/doc/current/cookbook/profiler/profiling_data.html\nhttps\://symfony.com/blog/new-in-symfony-2-4-quicker-access-to-the-profiler-when-working-on-an-api
pscanalpha.xdebugtoken.soln=Limit access to Symfony's Profiler, either via authentication/authorization or limiting inclusion of the header to specific clients (by IP etc).


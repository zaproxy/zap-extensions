#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages
pscanalpha.desc=Passive Scan Rules - alpha

pscanalpha.examplefile.name=An example passive scan rule which loads data from a file
pscanalpha.examplefile.desc=A\u00f1adir m\u00e1s informaci\u00f3n acerca de la vulnerabilidad aqu\u00ed
pscanalpha.examplefile.other=Se trata de informaci\u00f3n que no encaja en ninguna de las otras secciones
pscanalpha.examplefile.soln=Una descripci\u00f3n general de como resolver el problema
pscanalpha.examplefile.refs=http\://zaproxy.blogspot.co.uk/2014/04/hacking-zap-3-passive-scan-rules.html

pscanalpha.insecureformload.name=HTTP to HTTPS Insecure Transition in Form Post
pscanalpha.insecureformload.desc=This check looks for insecure HTTP pages that host HTTPS forms. The issue is that an insecure HTTP page can easily be hijacked through MITM and the secure HTTPS form can be replaced or spoofed.
pscanalpha.insecureformload.refs=[cadena vac\u00eda]
pscanalpha.insecureformload.soln=Use HTTPS for landing pages that host secure forms.
pscanalpha.insecureformload.exploit=[cadena vac\u00eda]
pscanalpha.insecureformload.extrainfo=The response to the following request over HTTP included an HTTPS form tag action attribute value\:\r\n\r\n{0}The context was\:\r\n\r\n{1}

pscanalpha.insecureformpost.name=HTTPS to HTTP Insecure Transition in Form Post
pscanalpha.insecureformpost.desc=This check identifies secure HTTPS pages that host insecure HTTP forms. The issue is that a secure page is transitioning to an insecure page when data is uploaded through a form. The user may think they're submitting data to a secure page when in fact they are not.
pscanalpha.insecureformpost.refs=[cadena vac\u00eda]
pscanalpha.insecureformpost.soln=Ensure sensitive data is only sent over secured HTTPS channels.
pscanalpha.insecureformpost.exploit=[cadena vac\u00eda]
pscanalpha.insecureformpost.extrainfo=The response to the following request over HTTPS included an HTTP form tag action attribute value\:\r\n\r\n{0}The context was\:\r\n\r\n{1}

pscanalpha.usercontrolledcharset.name=User Controllable Charset
pscanalpha.usercontrolledcharset.desc=This check looks at user-supplied input in query string parameters and POST data to identify where Content-Type or meta tag charset declarations might be user-controlled. Such charset declarations should always be declared by the application. If an attacker can control the response charset, they could manipulate the HTML to perform XSS or other attacks.
pscanalpha.usercontrolledcharset.refs=[cadena vac\u00eda]
pscanalpha.usercontrolledcharset.soln=Force UTF-8 in all charset declarations. If user-input is required to decide a charset declaration, ensure that only an allowed list is used.
pscanalpha.usercontrolledcharset.exploit=An attacker controlling the <meta> element charset value is able to declare UTF-7 and is also able to include enough user-controlled payload early in the HTML document to have it interpreted as UTF-7. By encoding their payload with UTF-7 the attacker is able to bypass any server-side XSS protections and embed script in the page.
pscanalpha.usercontrolledcharset.extrainfo=A(n) [{0}] tag [{1}] attribute\r\n\r\nThe user input found was\:\r\n{2}\={3}\r\n\r\nThe charset value it controlled was\:\r\n{4}

pscanalpha.usercontrolledcookie.name=Cookie Poisoning
pscanalpha.usercontrolledcookie.desc=This check looks at user-supplied input in query string parameters and POST data to identify where cookie parameters might be controlled. This is called a cookie poisoning attack, and becomes exploitable when an attacker can manipulate the cookie in various ways. In some cases this will not be exploitable, however, allowing URL parameters to set cookie values is generally considered a bug.
pscanalpha.usercontrolledcookie.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-cookie
pscanalpha.usercontrolledcookie.soln=Do not allow user input to control cookie names and values. If some query string parameters must be set in cookie values, be sure to filter out semicolon's that can serve as name/value pair delimiters.
pscanalpha.usercontrolledcookie.exploit.get=An attacker may be able to poison cookie values through URL parameters.  Try injecting a semicolon to see if you can add cookie values (e.g. name\=controlledValue;name\=anotherValue;).
pscanalpha.usercontrolledcookie.exploit.post=An attacker may be able to poison cookie values through POST parameters. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parmeter. For example\:  http\://nottrusted.com/page?value\=maliciousInput.\r\n\r\n
pscanalpha.usercontrolledcookie.extrainfo=This was identified at\:\r\n\r\n{0}\r\n\r\nUser-input was found in the following cookie\:\r\n{1}\r\n\r\nThe user input was\:\r\n{2}\={3}

pscanalpha.usercontrolledjavascriptevent.name=User Controllable JavaScript Event (XSS)
pscanalpha.usercontrolledjavascriptevent.desc=This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.            
pscanalpha.usercontrolledjavascriptevent.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-javascript-event
pscanalpha.usercontrolledjavascriptevent.soln=Validate all input and sanitize output it before writing to any Javascript on* events.
pscanalpha.usercontrolledjavascriptevent.exploit=[cadena vac\u00eda]
pscanalpha.usercontrolledjavascriptevent.extrainfo=User-controlled javascript event(s) was found. Exploitability will need to be manually determined. The page at the following URL\:\r\n\r\n{0}"\r\n\r\nincludes the following Javascript event which may be attacker-controllable\: \r\n\r\nUser-input was found in the following data of an [{1}] event\:\r\n{2}\r\n\r\nThe user input was\:\r\n{3}

pscanalpha.usercontrolledjavascriptproperty.name=User Controllable JavaScript Property (XSS)
pscanalpha.usercontrolledjavascriptproperty.desc=This check looks at user-supplied input in query string parameters and POST data to identify where URL's in certain javascript properties (e.g. createElement src) might becontrolled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.            
pscanalpha.usercontrolledjavascriptproperty.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-javascript-reference
pscanalpha.usercontrolledjavascriptproperty.soln=Do not allow user-input to control javascript source location references.
pscanalpha.usercontrolledjavascriptproperty.exploit=[cadena vac\u00eda]
pscanalpha.usercontrolledjavascriptproperty.extrainfo=The page at the following URL appears to contain user input in a javascript property value\:\r\n\r\n{0}The user input found was\:\r\n{1}\={2}\r\n\r\nThe context was\:\r\n{3}

pscanalpha.usercontrolledhtmlattributes.name=User Controllable HTML Element Attribute (Potential XSS)
pscanalpha.usercontrolledhtmlattributes.desc=This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
pscanalpha.usercontrolledhtmlattributes.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-html-attribute
pscanalpha.usercontrolledhtmlattributes.soln=Validate all input and sanitize output it before writing to any HTML attributes.
pscanalpha.usercontrolledhtmlattributes.exploit=[cadena vac\u00eda]
pscanalpha.usercontrolledhtmlattributes.extrainfo=User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL\:\r\n\r\n{0}\r\n\r\nappears to include user input in\: \r\n\r\na(n) [{1}] tag [{2}] attribute \r\n\r\nThe user input found was\:\r\n{3}\={4}\r\n\r\nThe user-controlled value was\:\r\n{5}

pscanalpha.usercontrolledopenredirect.name=Open Redirect
pscanalpha.usercontrolledopenredirect.desc=Open redirects are one of the OWASP 2010 Top Ten vulnerabilities. This check looks at user-supplied input in query string parameters and POST data to identify where open redirects might be possible. Open redirects occur when an application allows user-supplied input (e.g. http\://nottrusted.com) to control an offsite redirect. This is generally a pretty accurate way to find where 301 or 302 redirects could be exploited by spammers or phishing attacks
pscanalpha.usercontrolledopenredirect.soln=To avoid the open redirect vulnerability, parameters of the application script/program must be validated before sending 302 HTTP code (redirect) to the client browser. Implement safe redirect functionality that only redirects to relative URI's, or a list of trusted domains
pscanalpha.usercontrolledopenredirect.exploit=An attacker could supply a user with the following link\: http\://example.com/example.php?url\=http\://malicious.example.com
pscanalpha.usercontrolledopenredirect.refs=https\://www.owasp.org/index.php/Open_redirect\nhttps\://owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards\nhttps\://cwe.mitre.org/data/definitions/601.html
pscanalpha.usercontrolledopenredirect.extrainfo.get=The 301 or 302 response to a request for the following URL appeared to contain user input in the location header\:\r\n\r\n
pscanalpha.usercontrolledopenredirect.extrainfo.post=An open redirect controlled by POST parameters was detected. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parameter. For example\: http\://nottrusted.com/page?url\=http\://lookout.net.\r\n\r\nThe 301 or 302 response to a request for the following URL appeared to contain user input in the location header\:\r\n\r\n
pscanalpha.usercontrolledopenredirect.extrainfo.common={0}\r\n\r\nThe user input found was\:\r\n\r\n{1}\={2}\r\n\r\nThe context was\:\r\n\r\n{3}

pscanalpha.sourcecodedisclosure.name=Source Code Disclosure
pscanalpha.sourcecodedisclosure.desc=Application Source Code was disclosed by the web server
pscanalpha.sourcecodedisclosure.soln=Ensure that application Source Code is not available with alternative extensions, and ensure that source code is not present within other files or data deployed to the web server, or served by the web server. 
pscanalpha.sourcecodedisclosure.refs=http\://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-u-s-government/
pscanalpha.sourcecodedisclosure.extrainfo={0}

pscanalpha.hashdisclosure.name=Hash Disclosure
pscanalpha.hashdisclosure.desc=A hash was disclosed by the web server
pscanalpha.hashdisclosure.soln=Ensure that hashes that are used to protect credentials or other resources are not leaked by the web server or database. There is typically no requirement for password hashes to be accessible to the web browser.      
pscanalpha.hashdisclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage\nhttp\://openwall.info/wiki/john/sample-hashes
pscanalpha.hashdisclosure.extrainfo={0}

pscanalpha.timestampdisclosure.name=Timestamp Disclosure
pscanalpha.timestampdisclosure.desc=A timestamp was disclosed by the application/web server
pscanalpha.timestampdisclosure.soln=Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.
pscanalpha.timestampdisclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.timestampdisclosure.extrainfo={0}, which evaluates to\: {1}

pscanalpha.base64disclosure.name=Base64 Disclosure
pscanalpha.base64disclosure.desc=Base64 encoded data was disclosed by the application/web server
pscanalpha.base64disclosure.soln=Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
pscanalpha.base64disclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.extrainfo={1}

pscanalpha.base64disclosure.viewstate.name=ASP.NET ViewState Disclosure
pscanalpha.base64disclosure.viewstate.desc=An ASP.NET ViewState was disclosed by the application/web server
pscanalpha.base64disclosure.viewstate.soln=Manually confirm that the ASP.NET ViewState does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
pscanalpha.base64disclosure.viewstate.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttps\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.viewstate.extrainfo={0}

pscanalpha.base64disclosure.viewstatewithoutmac.name=ASP.NET ViewState Integrity
pscanalpha.base64disclosure.viewstatewithoutmac.desc=The application does not use a Message Authentication Code (MAC) to protect the integrity of the ASP.NET ViewState, which can be tampered with by a malicious client
pscanalpha.base64disclosure.viewstatewithoutmac.soln=Ensure that all ASP.NET ViewStates are protected from tampering, by using a MAC, generated using a secure algorithm, and a secret key on the server side. This is the default configuration on modern ASP.NET installation, by may be over-ridden programatically, or via the ASP.NET configuration.
pscanalpha.base64disclosure.viewstatewithoutmac.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttps\://www.jardinesoftware.net/2012/02/06/asp-net-tampering-with-event-validation-part-1/
pscanalpha.base64disclosure.viewstatewithoutmac.extrainfo={0}

pscanalpha.directorybrowsing.name=Directory Browsing
pscanalpha.directorybrowsing.desc=It is possible to view a listing of the directory contents. Directory listings may reveal hidden scripts, include files , backup source files, etc, which be accessed to reveal sensitive information.
pscanalpha.directorybrowsing.soln=Configure the web server to disable directory browsing. 
pscanalpha.directorybrowsing.refs=https\://cwe.mitre.org/data/definitions/548.html
pscanalpha.directorybrowsing.extrainfo={0}

pscanalpha.heartbleed.name=Heartbleed OpenSSL Vulnerability (Indicative)
pscanalpha.heartbleed.desc=The TLS and DTLS implementations in OpenSSL 1.0.1 before 1.0.1g do not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, potentially disclosing sensitive information.\t
pscanalpha.heartbleed.soln=Update to OpenSSL 1.0.1g or later. Re-issue HTTPS certificates. Change asymmetric private keys and shared secret keys, since these may have been compromised, with no evidence of compromise in the server log files.
pscanalpha.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
pscanalpha.heartbleed.extrainfo={0} is in use. Note however that the reported version could contain back-ported security fixes, and so the issue could be a false positive. This is common on Red Hat, for instance.

pscanalpha.crossdomain.name=Cross-Domain Misconfiguration
pscanalpha.crossdomain.desc=Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server
pscanalpha.crossdomain.soln=Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.
pscanalpha.crossdomain.refs=http\://www.hpenterprisesecurity.com/vulncat/en/vulncat/vb/html5_overly_permissive_cors_policy.html
pscanalpha.crossdomain.extrainfo=The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.

pscanalpha.serverheaderversioninfoleak.name=Server Leaks Version Information via "Server" HTTP Response Header Field
pscanalpha.serverheaderversioninfoleak.desc=The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
pscanalpha.serverheaderversioninfoleak.refs=http\://httpd.apache.org/docs/current/mod/core.html\#servertokens\nhttp\://msdn.microsoft.com/en-us/library/ff648552.aspx\#ht_urlscan_007\nhttp\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanalpha.serverheaderversioninfoleak.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
pscanalpha.serverheaderversioninfoleak.exploit=[cadena vac\u00eda]
pscanalpha.serverheaderversioninfoleak.extrainfo=[cadena vac\u00eda]

pscanalpha.stricttransportsecurity.name=Strict-Transport-Security Header Not Set
pscanalpha.stricttransportsecurity.desc=HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
pscanalpha.stricttransportsecurity.refs=https\://www.owasp.org/index.php/HTTP_Strict_Transport_Security\nhttps\://www.owasp.org/index.php/List_of_useful_HTTP_headers\nhttp\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp\://caniuse.com/stricttransportsecurity\nhttp\://tools.ietf.org/html/rfc6797
pscanalpha.stricttransportsecurity.soln=Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
pscanalpha.stricttransportsecurity.exploit=[cadena vac\u00eda]
pscanalpha.stricttransportsecurity.extrainfo=[cadena vac\u00eda]

pscanalpha.xpoweredbyheaderinfoleak.name=Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)
pscanalpha.xpoweredbyheaderinfoleak.desc=The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
pscanalpha.xpoweredbyheaderinfoleak.refs=http\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanalpha.xpoweredbyheaderinfoleak.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
pscanalpha.xpoweredbyheaderinfoleak.exploit=[cadena vac\u00eda]
pscanalpha.xpoweredbyheaderinfoleak.extrainfo=[cadena vac\u00eda]

pscanalpha.contentsecuritypolicymissing.name=Content Security Policy (CSP) Header Not Set
pscanalpha.contentsecuritypolicymissing.desc=Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanalpha.contentsecuritypolicymissing.refs=https\://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps\://www.owasp.org/index.php/Content_Security_Policy\nhttp\://www.w3.org/TR/CSP/\nhttp\://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp\://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp\://caniuse.com/\#feat\=contentsecuritypolicy\nhttp\://content-security-policy.com/
pscanalpha.contentsecuritypolicymissing.soln=Ensure that your web server, application server, load balancer, etc. is configured to set all of the following Content Security Policy headers, to achieve optimal browser support\: "Content-Security-Policy" for Chrome 25+, Firefox 23+ and Safari 7+, "X-Content-Security-Policy" for Firefox 4.0+ and Internet Explorer 10+, and "X-WebKit-CSP" for Chrome 14+ and Safari 6+.
pscanalpha.contentsecuritypolicymissing.exploit=[cadena vac\u00eda]
pscanalpha.contentsecuritypolicymissing.extrainfo=[cadena vac\u00eda]

pscanalpha.xbackendserver.name=X-Backend-Server Header Information Leak
pscanalpha.xbackendserver.desc=The server is leaking information pertaining to backend systems (such as hostnames or IP addresses). Armed with this information an attacker may be able to attack other systems or more directly/efficiently attack those systems.
pscanalpha.xbackendserver.refs=[cadena vac\u00eda]
pscanalpha.xbackendserver.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress X-Backend-Server headers.
pscanalpha.xbackendserver.exploit=[cadena vac\u00eda]
pscanalpha.xbackendserver.extrainfo=[cadena vac\u00eda]

pscanalpha.insecurecomponent.name=Insecure Component
pscanalpha.insecurecomponent.desc=Based on passive analysis of the response, insecure component {0} {1} appears to be in use.\nThe highest noted CVSS rating for this product version is {2}.\nIn total, {3} vulnerabilities were noted.\nSome Linux distributions such as Red Hat employ the practice of retaining old version numbers when security fixes are "backported".\nThese cases are noted as "False Positives", but should be manually verified.  
pscanalpha.insecurecomponent.refs={0}
pscanalpha.insecurecomponent.soln=Upgrade from {0} {1} to the latest stable version of the product.\nUse a package manager and package management policies and procedures to manage the installed versions of software packages.

pscanalpha.bigredirectsscanner.name=Big Redirect Detected (Potential Sensitive Information Leak)
pscanalpha.bigredirectsscanner.desc=The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, PII, etc).
pscanalpha.bigredirectsscanner.refs=[cadena vac\u00eda]
pscanalpha.bigredirectsscanner.soln=Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.
pscanalpha.bigredirectsscanner.extrainfo=Location header URI length\: {0} [{1}].\nPredicted response size\: {2}.\nResponse Body Length\: {3}.


pscanalpha.storabilitycacheability.name=Content Cacheability

pscanalpha.nonstorable.name=Non-Storable Content
pscanalpha.nonstorable.desc=The response contents are not storable by caching components such as proxy servers. If the response does not contain sensitive, personal or user-specific information, it may benefit from being stored and cached, to improve performance.
pscanalpha.nonstorable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.nonstorable.soln=The content may be marked as storable by ensuring that the following conditions are satisfied\:\nThe request method must be understood by the cache and defined as being cacheable ("GET", "HEAD", and "POST" are currently defined as cacheable)\nThe response status code must be understood by the cache (one of the 1XX, 2XX, 3XX, 4XX, or 5XX response classes are generally understood)\nThe "no-store" cache directive must not appear in the request or response header fields\nFor caching by "shared" caches such as "proxy" caches, the "private" response directive must not appear in the response\nFor caching by "shared" caches such as "proxy" caches, the "Authorization" header field must not appear in the request, unless the response explicitly allows it (using one of the "must-revalidate", "public", or "s-maxage" Cache-Control response directives)\nIn addition to the conditions above, at least one of the following conditions must also be satisfied by the response\:\nIt must contain an "Expires" header field\nIt must contain a "max-age" response directive\nFor "shared" caches such as "proxy" caches, it must contain a "s-maxage" response directive\nIt must contain a "Cache Control Extension" that allows it to be cached\nIt must have a status code that is defined as cacheable by default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).   
pscanalpha.nonstorable.extrainfo={0}

pscanalpha.storablenoncacheable.name=Storable but Non-Cacheable Content
pscanalpha.storablenoncacheable.desc=The response contents are storable by caching components such as proxy servers, but will not be retrieved directly from the cache, without validating the request upstream, in response to similar requests from other users. 
pscanalpha.storablenoncacheable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablenoncacheable.soln=[cadena vac\u00eda]
pscanalpha.storablenoncacheable.extrainfo={0}}

pscanalpha.storablecacheable.name=Storable and Cacheable Content
pscanalpha.storablecacheable.desc=The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where "shared" caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.
pscanalpha.storablecacheable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablecacheable.soln=Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. 
pscanalpha.storablecacheable.extrainfo={0}
pscanalpha.storablecacheable.evidence.liberallifetimeheuristic=In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.
pscanalpha.storablecacheable.evidence.staleretrievenotblocked=The response is stale, and stale responses are not configured to be re-validated or blocked, using the 'must-revalidate', 'proxy-revalidate', 's-maxage', or 'max-age' response 'Cache-Control' directives.

pscanalpha.retrievedfromcache.name=Retrieved from Cache
pscanalpha.retrievedfromcache.desc=The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. 
pscanalpha.retrievedfromcache.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.retrievedfromcache.soln=Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.
pscanalpha.retrievedfromcache.extrainfo={0}
pscanalpha.retrievedfromcache.extrainfo.http11ageheader=The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.


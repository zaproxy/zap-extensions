#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages
pscanalpha.desc=Passive Scan Rules - alpha

pscanalpha.cookiesamesitescanner.name=Cookie Without SameSite Attribute
pscanalpha.cookiesamesitescanner.desc=A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. \nThe SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
pscanalpha.cookiesamesitescanner.badval=A cookie has been set with an invalid SameSite attribute value, which means that the cookie can be sent as a result of a 'cross-site' request. \nThe SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
pscanalpha.cookiesamesitescanner.soln=Arr\u00f3l, hogy a SameSite attrib\u00fatum be\u00e1ll\u00edt\u00e1sa vagy 'laza' vagy ide\u00e1lis 'szigor\u00fa' az \u00f6sszes cookie-kat.
pscanalpha.cookiesamesitescanner.refs=https\://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site

pscanalpha.examplefile.name=An example passive scan rule which loads data from a file
pscanalpha.examplefile.desc=Add tov\u00e1bbi inform\u00e1ci\u00f3k a biztons\u00e1gi r\u00e9s itt
pscanalpha.examplefile.other=Ez az inform\u00e1ci\u00f3, hogy nem illik a t\u00f6bbi szakaszok
pscanalpha.examplefile.soln=A general description of how to solve the problem
pscanalpha.examplefile.refs=http\://zaproxy.blogspot.co.uk/2014/04/hacking-zap-3-passive-scan-rules.html

pscanalpha.insecureformload.name=HTTP to HTTPS Insecure Transition in Form Post
pscanalpha.insecureformload.desc=This check looks for insecure HTTP pages that host HTTPS forms. The issue is that an insecure HTTP page can easily be hijacked through MITM and the secure HTTPS form can be replaced or spoofed.
pscanalpha.insecureformload.refs=
pscanalpha.insecureformload.soln=Use HTTPS for landing pages that host secure forms.
pscanalpha.insecureformload.exploit=
pscanalpha.insecureformload.extrainfo=The response to the following request over HTTP included an HTTPS form tag action attribute value\:\r\n\r\n{0}The context was\:\r\n\r\n{1}

pscanalpha.insecureformpost.name=HTTPS to HTTP Insecure Transition in Form Post
pscanalpha.insecureformpost.desc=Ezt a csekket azonos\u00edtja biztons\u00e1gos HTTPS oldalakat, hogy a fogad\u00f3 bizonytalan HTTP form\u00e1k. A k\u00e9rd\u00e9s az, hogy egy biztons\u00e1gos oldal nem az \u00e1t\u00e1ll\u00e1s, hogy egy bizonytalan oldal, ha az adatokat felt\u00f6lt\u00f6tte kereszt\u00fcl egy form\u00e1ja. El\u0151fordulhat, hogy a felhaszn\u00e1l\u00f3 azt hiszik beny\u00fajt\u00e1sa adatokat egy biztons\u00e1gos oldal, ha val\u00f3j\u00e1ban nem azok.
pscanalpha.insecureformpost.refs=
pscanalpha.insecureformpost.soln=Ensure sensitive data is only sent over secured HTTPS channels.
pscanalpha.insecureformpost.exploit=
pscanalpha.insecureformpost.extrainfo=The response to the following request over HTTPS included an HTTP form tag action attribute value\:\r\n\r\n{0}The context was\:\r\n\r\n{1}

pscanalpha.usercontrolledcharset.name=User Controllable Charset
pscanalpha.usercontrolledcharset.desc=Ezt a csekket, \u00fagy n\u00e9z ki, a felhaszn\u00e1l\u00f3i input a query string param\u00e9terek POST adatokat azonos\u00edtani, ahol a Content-Type, vagy meta tag charset nyilatkozatok lehet, hogy felhaszn\u00e1l\u00f3-vez\u00e9relt. Ilyen charset nyilatkozatok mindig kijelentette, hogy az alkalmaz\u00e1s \u00e1ltal. Ha a t\u00e1mad\u00f3 k\u00e9pes ir\u00e1ny\u00edtani a v\u00e1lasz charset, tudj\u00e1k manipul\u00e1lni a HTML, hogy v\u00e9gre XSS vagy m\u00e1s t\u00e1mad\u00e1sok.
pscanalpha.usercontrolledcharset.refs=
pscanalpha.usercontrolledcharset.soln=Force UTF-8 in all charset declarations. If user-input is required to decide a charset declaration, ensure that only an allowed list is used.
pscanalpha.usercontrolledcharset.exploit=An attacker controlling the <meta> element charset value is able to declare UTF-7 and is also able to include enough user-controlled payload early in the HTML document to have it interpreted as UTF-7. By encoding their payload with UTF-7 the attacker is able to bypass any server-side XSS protections and embed script in the page.
pscanalpha.usercontrolledcharset.extrainfo=A(n) [{0}] tag [{1}] attribute\r\n\r\nThe user input found was\:\r\n{2}\={3}\r\n\r\nThe charset value it controlled was\:\r\n{4}

pscanalpha.usercontrolledcookie.name=Cookie Poisoning
pscanalpha.usercontrolledcookie.desc=Ezt a csekket, \u00fagy n\u00e9z ki, a felhaszn\u00e1l\u00f3i input a query string param\u00e9terek POST adatok azonos\u00edt\u00e1s\u00e1ra, ahol a cookie-kat param\u00e9terekkel lehet vez\u00e9relni. Ez az \u00fagynevezett cookie-m\u00e9rgez\u00e9s t\u00e1mad\u00e1s, lesz kihaszn\u00e1lhat\u00f3, ha a t\u00e1mad\u00f3 k\u00e9pes manipul\u00e1lni a cookie-k k\u00fcl\u00f6nb\u00f6z\u0151 m\u00f3don. Egyes esetekben ez nem lesz kihaszn\u00e1lhat\u00f3, azonban lehet\u0151v\u00e9 teszi URL param\u00e9tereket kell be\u00e1ll\u00edtani a cookie-\u00e9rt\u00e9kek \u00e1ltal\u00e1ban \u00fagy egy bug.
pscanalpha.usercontrolledcookie.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-cookie
pscanalpha.usercontrolledcookie.soln=Nem teszik lehet\u0151v\u00e9 a felhaszn\u00e1l\u00f3i beavatkoz\u00e1st, hogy ellen\u0151rizz\u00e9k a s\u00fcti nev\u00e9t, illetve \u00e9rt\u00e9kek. Ha egy query string param\u00e9tert kell be\u00e1ll\u00edtani a cookie-\u00e9rt\u00e9kek, \u00fcgyeljen arra, hogy kisz\u0171rje a pontosvessz\u0151 van, hogy szolg\u00e1lhat n\u00e9v/\u00e9rt\u00e9k p\u00e1rt elv\u00e1laszt\u00f3jelek.
pscanalpha.usercontrolledcookie.exploit.get=An attacker may be able to poison cookie values through URL parameters.  Try injecting a semicolon to see if you can add cookie values (e.g. name\=controlledValue;name\=anotherValue;).
pscanalpha.usercontrolledcookie.exploit.post=An attacker may be able to poison cookie values through POST parameters. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parmeter. For example\:  http\://nottrusted.com/page?value\=maliciousInput.\r\n\r\n
pscanalpha.usercontrolledcookie.extrainfo=This was identified at\:\r\n\r\n{0}\r\n\r\nUser-input was found in the following cookie\:\r\n{1}\r\n\r\nThe user input was\:\r\n{2}\={3}

pscanalpha.usercontrolledjavascriptevent.name=User Controllable JavaScript Event (XSS)
pscanalpha.usercontrolledjavascriptevent.desc=Ezt a csekket, \u00fagy n\u00e9z ki, a felhaszn\u00e1l\u00f3i input a query string param\u00e9terek POST adatokat azonos\u00edtani, ahol bizonyos HTML attrib\u00fatum \u00e9rt\u00e9keket lehet szab\u00e1lyozni. Ez biztos\u00edtja a hot-spot felismer\u00e9s XSS (cross-site scripting), amely megk\u00f6veteli a tov\u00e1bbi fel\u00fclvizsg\u00e1lat biztons\u00e1gi elemz\u0151 meghat\u00e1rozni exploitability.            
pscanalpha.usercontrolledjavascriptevent.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-javascript-event
pscanalpha.usercontrolledjavascriptevent.soln=Validate all input and sanitize output it before writing to any Javascript on* events.
pscanalpha.usercontrolledjavascriptevent.exploit=
pscanalpha.usercontrolledjavascriptevent.extrainfo=User-controlled javascript event(s) was found. Exploitability will need to be manually determined. The page at the following URL\:\r\n\r\n{0}"\r\n\r\nincludes the following Javascript event which may be attacker-controllable\: \r\n\r\nUser-input was found in the following data of an [{1}] event\:\r\n{2}\r\n\r\nThe user input was\:\r\n{3}

pscanalpha.usercontrolledjavascriptproperty.name=User Controllable JavaScript Property (XSS)
pscanalpha.usercontrolledjavascriptproperty.desc=This check looks at user-supplied input in query string parameters and POST data to identify where URL's in certain javascript properties (e.g. createElement src) might becontrolled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.            
pscanalpha.usercontrolledjavascriptproperty.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-javascript-reference
pscanalpha.usercontrolledjavascriptproperty.soln=Do not allow user-input to control javascript source location references.
pscanalpha.usercontrolledjavascriptproperty.exploit=
pscanalpha.usercontrolledjavascriptproperty.extrainfo=The page at the following URL appears to contain user input in a javascript property value\:\r\n\r\n{0}The user input found was\:\r\n{1}\={2}\r\n\r\nThe context was\:\r\n{3}

pscanalpha.usercontrolledhtmlattributes.name=User Controllable HTML Element Attribute (Potential XSS)
pscanalpha.usercontrolledhtmlattributes.desc=Ezt a csekket, \u00fagy n\u00e9z ki, a felhaszn\u00e1l\u00f3i input a query string param\u00e9terek POST adatokat azonos\u00edtani, ahol bizonyos HTML attrib\u00fatum \u00e9rt\u00e9keket lehet szab\u00e1lyozni. Ez biztos\u00edtja a hot-spot felismer\u00e9s XSS (cross-site scripting), amely megk\u00f6veteli a tov\u00e1bbi fel\u00fclvizsg\u00e1lat biztons\u00e1gi elemz\u0151 meghat\u00e1rozni exploitability.
pscanalpha.usercontrolledhtmlattributes.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-html-attribute
pscanalpha.usercontrolledhtmlattributes.soln=Validate all input and sanitize output it before writing to any HTML attributes.
pscanalpha.usercontrolledhtmlattributes.exploit=
pscanalpha.usercontrolledhtmlattributes.extrainfo=User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL\:\r\n\r\n{0}\r\n\r\nappears to include user input in\: \r\n\r\na(n) [{1}] tag [{2}] attribute \r\n\r\nThe user input found was\:\r\n{3}\={4}\r\n\r\nThe user-controlled value was\:\r\n{5}

pscanalpha.usercontrolledopenredirect.name=Open Redirect
pscanalpha.usercontrolledopenredirect.desc=Nyitva \u00e1tir\u00e1ny\u00edtja a OWASP 2010 els\u0151 T\u00edz biztons\u00e1gi r\u00e9sek. Ezt a csekket, \u00fagy n\u00e9z ki, a felhaszn\u00e1l\u00f3i input a query string param\u00e9terek POST adatok azonos\u00edt\u00e1s\u00e1ra, ahol a nyitott \u00e1tir\u00e1ny\u00edt\u00e1sok lehet. Nyitva \u00e1tir\u00e1ny\u00edt\u00e1sok fordulhat el\u0151, ha egy alkalmaz\u00e1s lehet\u0151v\u00e9 teszi a felhaszn\u00e1l\u00f3i input (pl. http\://nottrusted.com), hogy az ir\u00e1ny\u00edt\u00e1st egy k\u00fcls\u0151 \u00e1tir\u00e1ny\u00edt\u00e1s. Ez \u00e1ltal\u00e1ban egy el\u00e9g pontos m\u00f3don, hogy hol 301 vagy 302 \u00e1tir\u00e1ny\u00edt\u00e1st lehet kihaszn\u00e1lva spammerek vagy adathal\u00e1sz t\u00e1mad\u00e1sok
pscanalpha.usercontrolledopenredirect.soln=To avoid the open redirect vulnerability, parameters of the application script/program must be validated before sending 302 HTTP code (redirect) to the client browser. Implement safe redirect functionality that only redirects to relative URI's, or a list of trusted domains
pscanalpha.usercontrolledopenredirect.exploit=An attacker could supply a user with the following link\: http\://example.com/example.php?url\=http\://malicious.example.com
pscanalpha.usercontrolledopenredirect.refs=https\://www.owasp.org/index.php/Open_redirect\nhttps\://owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards\nhttps\://cwe.mitre.org/data/definitions/601.html
pscanalpha.usercontrolledopenredirect.extrainfo.get=The 301 or 302 response to a request for the following URL appeared to contain user input in the location header\:\r\n\r\n
pscanalpha.usercontrolledopenredirect.extrainfo.post=An open redirect controlled by POST parameters was detected. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parameter. For example\: http\://nottrusted.com/page?url\=http\://lookout.net.\r\n\r\nThe 301 or 302 response to a request for the following URL appeared to contain user input in the location header\:\r\n\r\n
pscanalpha.usercontrolledopenredirect.extrainfo.common={0}\r\n\r\nThe user input found was\:\r\n\r\n{1}\={2}\r\n\r\nThe context was\:\r\n\r\n{3}

pscanalpha.sourcecodedisclosure.name=Source Code Disclosure
pscanalpha.sourcecodedisclosure.desc=Application Source Code was disclosed by the web server
pscanalpha.sourcecodedisclosure.soln=Ensure that application Source Code is not available with alternative extensions, and ensure that source code is not present within other files or data deployed to the web server, or served by the web server. 
pscanalpha.sourcecodedisclosure.refs=http\://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-u-s-government/
pscanalpha.sourcecodedisclosure.extrainfo={0}

pscanalpha.hashdisclosure.name=Hash Disclosure
pscanalpha.hashdisclosure.desc=A hash was disclosed by the web server
pscanalpha.hashdisclosure.soln=Ensure that hashes that are used to protect credentials or other resources are not leaked by the web server or database. There is typically no requirement for password hashes to be accessible to the web browser.      
pscanalpha.hashdisclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage\nhttp\://openwall.info/wiki/john/sample-hashes
pscanalpha.hashdisclosure.extrainfo={0}

pscanalpha.timestampdisclosure.name=Timestamp Disclosure
pscanalpha.timestampdisclosure.desc=A timestamp was disclosed by the application/web server
pscanalpha.timestampdisclosure.soln=K\u00e9zzel ellen\u0151rizze, hogy a timestamp adatok nem \u00e9rz\u00e9keny, az adatokat nem lehet \u00f6sszes\u00edtett nyilv\u00e1noss\u00e1gra kihaszn\u00e1lhat\u00f3 mint\u00e1k.
pscanalpha.timestampdisclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.timestampdisclosure.extrainfo={0}, which evaluates to\: {1}

pscanalpha.base64disclosure.name=Base64 Disclosure
pscanalpha.base64disclosure.desc=Base64 encoded data was disclosed by the application/web server
pscanalpha.base64disclosure.soln=Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
pscanalpha.base64disclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.extrainfo={1}

pscanalpha.base64disclosure.viewstate.name=ASP.NET ViewState Disclosure
pscanalpha.base64disclosure.viewstate.desc=An ASP.NET ViewState was disclosed by the application/web server
pscanalpha.base64disclosure.viewstate.soln=Manually confirm that the ASP.NET ViewState does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
pscanalpha.base64disclosure.viewstate.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttps\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.viewstate.extrainfo={0}

pscanalpha.base64disclosure.viewstatewithoutmac.name=ASP.NET ViewState Integrity
pscanalpha.base64disclosure.viewstatewithoutmac.desc=Az alkalmaz\u00e1s nem haszn\u00e1l egy Message Authentication Code (MAC) integrit\u00e1s\u00e1nak v\u00e9delme a ASP.NET ViewState, amely lehet babr\u00e1lt egy rosszindulat\u00fa \u00fcgyf\u00e9l
pscanalpha.base64disclosure.viewstatewithoutmac.soln=Ensure that all ASP.NET ViewStates are protected from tampering, by using a MAC, generated using a secure algorithm, and a secret key on the server side. This is the default configuration on modern ASP.NET installation, by may be over-ridden programatically, or via the ASP.NET configuration.
pscanalpha.base64disclosure.viewstatewithoutmac.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttps\://www.jardinesoftware.net/2012/02/06/asp-net-tampering-with-event-validation-part-1/
pscanalpha.base64disclosure.viewstatewithoutmac.extrainfo={0}

pscanalpha.directorybrowsing.name=Directory Browsing
pscanalpha.directorybrowsing.desc=Lehet\u0151s\u00e9g van egy lista a k\u00f6nyvt\u00e1r tartalm\u00e1t. K\u00f6nyvt\u00e1r list\u00e1z\u00e1s lehet a rejtett szkriptek, olyan f\u00e1jlokat , biztons\u00e1gi forr\u00e1s f\u00e1jlok, stb, ami el\u00e9rhet\u0151, hogy felfedje az \u00e9rz\u00e9keny inform\u00e1ci\u00f3kat.
pscanalpha.directorybrowsing.soln=Configure the web server to disable directory browsing. 
pscanalpha.directorybrowsing.refs=https\://cwe.mitre.org/data/definitions/548.html
pscanalpha.directorybrowsing.extrainfo={0}

pscanalpha.heartbleed.name=Heartbleed OpenSSL Vulnerability (Indicative)
pscanalpha.heartbleed.desc=A TLS s DTLS implement\u00e1ci\u00f3k OpenSSL 1.0.1 el\u0151tt 1.0.1g nem kezelik megfelel\u0151en a Sz\u00edvver\u00e9s Kiterjeszt\u00e9s csomag, amely lehet\u0151v\u00e9 teszi a t\u00e1voli t\u00e1mad\u00f3k megszerezni az \u00e9rz\u00e9keny inform\u00e1ci\u00f3kat a folyamat mem\u00f3ria seg\u00edts\u00e9g\u00e9vel kialak\u00edtott csomagok ravaszt egy puffer-olvasni, lehets\u00e9ges, hogy nyilv\u00e1noss\u00e1gra bizalmas inform\u00e1ci\u00f3t.\t
pscanalpha.heartbleed.soln=Update to OpenSSL 1.0.1g or later. Re-issue HTTPS certificates. Change asymmetric private keys and shared secret keys, since these may have been compromised, with no evidence of compromise in the server log files.
pscanalpha.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
pscanalpha.heartbleed.extrainfo={0} is in use. Note however that the reported version could contain back-ported security fixes, and so the issue could be a false positive. This is common on Red Hat, for instance.

pscanalpha.crossdomain.name=Cross-Domain Misconfiguration
pscanalpha.crossdomain.desc=Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server
pscanalpha.crossdomain.soln=Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.
pscanalpha.crossdomain.refs=http\://www.hpenterprisesecurity.com/vulncat/en/vulncat/vb/html5_overly_permissive_cors_policy.html
pscanalpha.crossdomain.extrainfo=A CORS konfigur\u00e1ci\u00f3s hiba a web szerver lehet\u0151v\u00e9 teszi, cross-domain olvassa el k\u00e9r\u00e9seket \u00f6nk\u00e9nyes harmadik f\u00e9l tartom\u00e1nyok seg\u00edts\u00e9g\u00e9vel megb\u00edzhat\u00f3 forr\u00e1s Api-ezen a ter\u00fcleten. Web b\u00f6ng\u00e9sz\u0151 megval\u00f3s\u00edt\u00e1sok nem teszik lehet\u0151v\u00e9 tetsz\u0151leges harmadik feleket, hogy olvassa el a v\u00e1laszt hiteles\u00edtett Api-kat, azonban. Ez cs\u00f6kkenti valamelyest. Ez konfigur\u00e1ci\u00f3s hiba lehetne haszn\u00e1lni, hogy a t\u00e1mad\u00f3 hozz\u00e1f\u00e9r\u00e9si adatok rendelkez\u00e9sre hiteles\u00edtett m\u00f3don, de ami haszn\u00e1l valamilyen m\u00e1s form\u00e1ban a biztons\u00e1gi, p\u00e9ld\u00e1ul az IP-c\u00edmet feh\u00e9r-lista.

pscanalpha.serverheader.scanner.name=HTTP Server Response Header Scanner
pscanalpha.serverheaderversioninfoleak.name=Server Leaks Version Information via "Server" HTTP Response Header Field
pscanalpha.serverheaderversioninfoleak.desc=The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
pscanalpha.serverheaderinfoleak.name=Server Leaks its Webserver Application via "Server" HTTP Response Header Field
pscanalpha.serverheaderinfoleak.desc=A web/application server sziv\u00e1rog az alkalmaz\u00e1s haszn\u00e1l, mint egy webszerver seg\u00edts\u00e9g\u00e9vel a "Server" HTTP fejl\u00e9c\u00e9ben. Az ilyen inform\u00e1ci\u00f3khoz val\u00f3 hozz\u00e1f\u00e9r\u00e9st megk\u00f6nny\u00edthetik a t\u00e1mad\u00f3k azonos\u00edt\u00f3 m\u00e1s biztons\u00e1gi r\u00e9seket a web/application server hat\u00e1lya al\u00e1 tartozik. Ez az inform\u00e1ci\u00f3 \u00f6nmag\u00e1ban, azaz an\u00e9lk\u00fcl, hogy egy v\u00e1ltozat string, nem nagyon vesz\u00e9lyes, a biztons\u00e1g egy szerver, azonban ezt az inform\u00e1ci\u00f3t a v\u00e1lasz fejl\u00e9c mez\u0151 majdnem mindig haszontalan, \u00edgy csak egy elavult t\u00e1mad\u00f3 vektor.
pscanalpha.serverheaderinfoleak.general.refs=http\://httpd.apache.org/docs/current/mod/core.html\#servertokens\nhttp\://msdn.microsoft.com/en-us/library/ff648552.aspx\#ht_urlscan_007\nhttp\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanalpha.serverheaderinfoleak.general.soln=Annak \u00e9rdek\u00e9ben, hogy a web-szerver alkalmaz\u00e1s szerver load balancer, stb. \u00fagy van be\u00e1ll\u00edtva, hogy elnyomja a "Server" header, vagy biztos\u00edtani \u00e1ltal\u00e1nos adatait.

pscanalpha.stricttransportsecurity.scanner.name=Strict-Transport-Security Header Scanner
pscanalpha.stricttransportsecurity.name=Strict-Transport-Security Header Not Set
pscanalpha.stricttransportsecurity.desc=HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
pscanalpha.stricttransportsecurity.refs=https\://www.owasp.org/index.php/HTTP_Strict_Transport_Security\nhttps\://www.owasp.org/index.php/List_of_useful_HTTP_headers\nhttp\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp\://caniuse.com/stricttransportsecurity\nhttp\://tools.ietf.org/html/rfc6797
pscanalpha.stricttransportsecurity.soln=Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
pscanalpha.stricttransportsecurity.max.age.name=Strict-Transport-Security Disabled
pscanalpha.stricttransportsecurity.max.age.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains the directive max-age\=0 which disables the control and instructs browsers to reset any previous HSTS related settings. See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.max.age.refs=http\://tools.ietf.org/html/rfc6797\#section-6.2
pscanalpha.stricttransportsecurity.max.age.soln=Tekintse \u00e1t a konfigur\u00e1ci\u00f3s ez az ir\u00e1ny\u00edt\u00e1st. Annak \u00e9rdek\u00e9ben, hogy a web-szerver alkalmaz\u00e1s szerver load balancer, stb. \u00fagy van be\u00e1ll\u00edtva, hogy meghat\u00e1rozott Szigor\u00fa-K\u00f6zleked\u00e9s-Biztons\u00e1gi megfelel\u0151 max-age \u00e9rt\u00e9k.
pscanalpha.stricttransportsecurity.compliance.multiple.header.name=Strict-Transport-Security Multiple Header Entries (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.multiple.header.desc=HTTP Strict Transport Security (HSTS) fejl\u00e9cek tal\u00e1ltak, egy v\u00e1lasz t\u00f6bb HSTS fejl\u00e9c bejegyz\u00e9s nem felel meg a specifik\u00e1ci\u00f3nak (RFC 6797), csak az els\u0151 HSTS fejl\u00e9c ker\u00fcl feldolgoz\u00e1sra m\u00e1sok figyelmen k\u00edv\u00fcl lesz hagyva, a felhaszn\u00e1l\u00f3i \u00fcgyn\u00f6k\u00f6k vagy a HSTS politika lehet, hogy helytelen\u00fcl alkalmazott.\nHTTP Strict Transport Security (HSTS) egy internetes biztons\u00e1gi politika mechanizmus, amelynek seg\u00edts\u00e9g\u00e9vel egy web-szerver kijelenti, hogy megfelel\u0151 felhaszn\u00e1l\u00f3i \u00e1gensek (p\u00e9ld\u00e1ul egy web b\u00f6ng\u00e9sz\u0151), hogy k\u00f6lcs\u00f6nhat\u00e1sba l\u00e9pnek a kiz\u00e1r\u00f3lag biztons\u00e1gos HTTPS-kapcsolatok (pl. HTTP r\u00e9teges \u00e1t TLS/SSL).
pscanalpha.stricttransportsecurity.compliance.multiple.header.refs=http\://tools.ietf.org/html/rfc6797\#section-8.1
pscanalpha.stricttransportsecurity.compliance.multiple.header.soln=Ensure that only one component in your stack\: code, web server, application server, load balancer, etc. is configured to set or add a HTTP Strict-Transport-Security (HSTS) header.
pscanalpha.stricttransportsecurity.plain.resp.name=Strict-Transport-Security Header on Plain HTTP Response
pscanalpha.stricttransportsecurity.plain.resp.desc=A HTTP Strict Transport Security (HSTS) header was found, but HSTS headers are ignored on plain (non-HTTPS) responses.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.plain.resp.refs=http\://tools.ietf.org/html/rfc6797\#section-8.1
pscanalpha.stricttransportsecurity.plain.resp.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security for HTTPS responses.
pscanalpha.stricttransportsecurity.compliance.max.age.missing.name=Strict-Transport-Security Missing Max-Age (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.max.age.missing.desc=A HTTP Strict Transport Security (HSTS) header was found, but it is missing the max-age directive (or the directive is missing a value). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.compliance.max.age.missing.refs=http\://tools.ietf.org/html/rfc6797\#section-6.2
pscanalpha.stricttransportsecurity.compliance.max.age.missing.soln=Tekintse \u00e1t a konfigur\u00e1ci\u00f3s ez az ir\u00e1ny\u00edt\u00e1st. Annak \u00e9rdek\u00e9ben, hogy a web-szerver alkalmaz\u00e1s szerver load balancer, stb. \u00fagy van be\u00e1ll\u00edtva, hogy meghat\u00e1rozott Szigor\u00fa-K\u00f6zleked\u00e9s-Biztons\u00e1gi megfelel\u0151 max-age \u00e9rt\u00e9k.
pscanalpha.stricttransportsecurity.compliance.meta.name=Strict-Transport-Security Defined via META (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.meta.desc=A HTTP Strict Transport Security (HSTS) META tag was found, defining HTTP Strict Transport Security (HSTS) via a META tag is explicitly not supported by the spec (RFC 6797).
pscanalpha.stricttransportsecurity.compliance.meta.refs=http\://tools.ietf.org/html/rfc6797\#section-8.5
pscanalpha.stricttransportsecurity.compliance.meta.soln=Do not attempt to set HTTP Strict Transport Security (HSTS) via a META tag.
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.name=Strict-Transport-Security Max-Age Malformed (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.desc=HTTP Strict Transport Security (HSTS) fejl\u00e9c tal\u00e1lt\u00e1k meg, de tartalmaz id\u00e9zetek megel\u0151z\u0151 max-age ir\u00e1nyelv (a max-age \u00e9rt\u00e9k jegyzett, de maga az ir\u00e1nyelv nem lehet). L\u00e1sd az RFC 6797 a tov\u00e1bbi r\u00e9szleteket.\nHTTP Strict Transport Security (HSTS) egy internetes biztons\u00e1gi politika mechanizmus, amelynek seg\u00edts\u00e9g\u00e9vel egy web-szerver kijelenti, hogy megfelel\u0151 felhaszn\u00e1l\u00f3i \u00e1gensek (p\u00e9ld\u00e1ul egy web b\u00f6ng\u00e9sz\u0151), hogy k\u00f6lcs\u00f6nhat\u00e1sba l\u00e9pnek a kiz\u00e1r\u00f3lag biztons\u00e1gos HTTPS kapcsolatok (pl. HTTP r\u00e9teges \u00e1t TLS/SSL).
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.refs=http\://tools.ietf.org/html/rfc6797\#section-6.1
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate format.
pscanalpha.stricttransportsecurity.compliance.malformed.content.name=Strict-Transport-Security Malformed Content (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.malformed.content.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains some content that was not expected (perhaps curly quotes), the expectation is that the content be printable ASCII characters.
pscanalpha.stricttransportsecurity.compliance.malformed.content.refs=http\://tools.ietf.org/html/rfc6797
pscanalpha.stricttransportsecurity.compliance.malformed.content.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with appropriate content. 

pscanalpha.xpoweredbyheaderinfoleak.name=Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)
pscanalpha.xpoweredbyheaderinfoleak.desc=A web/application server inform\u00e1ci\u00f3kat sziv\u00e1rogtat kereszt\u00fcl egy vagy t\u00f6bb "X-Hajtott-A" HTTP v\u00e1lasz fejl\u00e9cek. Az ilyen inform\u00e1ci\u00f3khoz val\u00f3 hozz\u00e1f\u00e9r\u00e9st megk\u00f6nny\u00edthetik a t\u00e1mad\u00f3k azonos\u00edt\u00f3 m\u00e1s keretek/alkatr\u00e9szek a web alkalmaz\u00e1s f\u00fcgg\u0151, valamint a biztons\u00e1gi r\u00e9sek ilyen \u00f6sszetev\u0151k t\u00e1rgya lehet.
pscanalpha.xpoweredbyheaderinfoleak.refs=http\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanalpha.xpoweredbyheaderinfoleak.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
pscanalpha.xpoweredbyheaderinfoleak.exploit=
pscanalpha.xpoweredbyheaderinfoleak.extrainfo=
pscanalpha.xpoweredbyheaderinfoleak.otherinfo.msg=The following X-Powered-By headers were also found\:\r\n

pscanalpha.contentsecuritypolicymissing.name=Content Security Policy (CSP) Header Not Set
pscanalpha.contentsecuritypolicymissing.desc=Tartalom Biztons\u00e1gi Politika (CSP) egy hozz\u00e1adott biztons\u00e1gi r\u00e9teget, amely seg\u00edt felismerni enyh\u00edt\u00e9s\u00e9re bizonyos t\u00edpus\u00fa t\u00e1mad\u00e1sok, bele\u00e9rtve a Cross-Site Scripting (XSS) adatok injekci\u00f3 t\u00e1mad\u00e1sok. Ezek a t\u00e1mad\u00e1sok haszn\u00e1lt minden adat lop\u00e1s site dekonstrukci\u00f3 vagy eloszt\u00e1sa malware. CSP biztos\u00edtja a szabv\u00e1nyos HTTP fejl\u00e9cek, amelyek lehet\u0151v\u00e9 teszik a weboldal tulajdonosok, hogy \u00e1llap\u00edtsa meg j\u00f3v\u00e1hagyott forr\u00e1sok a tartalom b\u00f6ng\u00e9sz\u0151ben enged\u00e9lyezni kell, hogy a terhel\u00e9s az oldal bor\u00edtott t\u00edpusok JavaScript, CSS, HTML kereteket, bet\u0171t\u00edpusok, k\u00e9pek, be\u00e1gyazhat\u00f3, t\u00e1rgyak, mint p\u00e9ld\u00e1ul a Java alkalmaz\u00e1sokat, ActiveX, audio, illetve vide\u00f3 f\u00e1jlok.
pscanalpha.contentsecuritypolicymissing.refs=https\://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps\://www.owasp.org/index.php/Content_Security_Policy\nhttp\://www.w3.org/TR/CSP/\nhttp\://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp\://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp\://caniuse.com/\#feat\=contentsecuritypolicy\nhttp\://content-security-policy.com/
pscanalpha.contentsecuritypolicymissing.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header, to achieve optimal browser support\: "Content-Security-Policy" for Chrome 25+, Firefox 23+ and Safari 7+, "X-Content-Security-Policy" for Firefox 4.0+ and Internet Explorer 10+, and "X-WebKit-CSP" for Chrome 14+ and Safari 6+.
pscanalpha.contentsecuritypolicymissing.exploit=
pscanalpha.contentsecuritypolicymissing.extrainfo=
pscanalpha.contentsecuritypolicymissing.ro.name=Content Security Policy (CSP) Report-Only Header Found
pscanalpha.contentsecuritypolicymissing.ro.desc=The response contained a Content-Security-Policy-Report-Only header, this may indicate a work-in-progress implementation, or an oversight in promoting pre-Prod to Prod, etc.\n\nContent Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanalpha.contentsecuritypolicymissing.ro.refs=https\://www.w3.org/TR/CSP2/\nhttps\://w3c.github.io/webappsec-csp/\nhttp\://caniuse.com/\#feat\=contentsecuritypolicy\nhttp\://content-security-policy.com/

pscanalpha.xbackendserver.name=X-Backend-Server Header Information Leak
pscanalpha.xbackendserver.desc=A szerver inform\u00e1ci\u00f3kat sziv\u00e1rogtat vonatkoz\u00f3 backend rendszer (p\u00e9ld\u00e1ul az \u00e1llom\u00e1sneveket, vagy IP c\u00edm\u00e9t). Fegyveres ezt az inform\u00e1ci\u00f3t a t\u00e1mad\u00f3 k\u00e9pes lehet t\u00e1madni m\u00e1s rendszerek vagy t\u00f6bb k\u00f6zvetlen\u00fcl/hat\u00e9konyan t\u00e1madni azokat a rendszereket.
pscanalpha.xbackendserver.refs=
pscanalpha.xbackendserver.soln=Annak \u00e9rdek\u00e9ben, hogy a web-szerver alkalmaz\u00e1s szerver load balancer, stb. \u00fagy van be\u00e1ll\u00edtva, hogy elnyomja X-Backend Szerver fejl\u00e9cek.
pscanalpha.xbackendserver.exploit=
pscanalpha.xbackendserver.extrainfo=

pscanalpha.insecurecomponent.name=Insecure Component
pscanalpha.insecurecomponent.desc=Based on passive analysis of the response, insecure component {0} {1} appears to be in use.\nThe highest noted CVSS rating for this product version is {2}.\nIn total, {3} vulnerabilities were noted.\nSome Linux distributions such as Red Hat employ the practice of retaining old version numbers when security fixes are "backported".\nThese cases are noted as "False Positives", but should be manually verified.  
pscanalpha.insecurecomponent.refs={0}
pscanalpha.insecurecomponent.soln=Upgrade from {0} {1} to the latest stable version of the product.\nUse a package manager and package management policies and procedures to manage the installed versions of software packages.

pscanalpha.bigredirectsscanner.name=Big Redirect Detected (Potential Sensitive Information Leak)
pscanalpha.bigredirectsscanner.desc=The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, PII, etc).
pscanalpha.bigredirectsscanner.refs=
pscanalpha.bigredirectsscanner.soln=Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.
pscanalpha.bigredirectsscanner.extrainfo=Location header URI length\: {0} [{1}].\nPredicted response size\: {2}.\nResponse Body Length\: {3}.


pscanalpha.storabilitycacheability.name=Content Cacheability

pscanalpha.nonstorable.name=Non-Storable Content
pscanalpha.nonstorable.desc=The response contents are not storable by caching components such as proxy servers. If the response does not contain sensitive, personal or user-specific information, it may benefit from being stored and cached, to improve performance.
pscanalpha.nonstorable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.nonstorable.soln=The content may be marked as storable by ensuring that the following conditions are satisfied\:\nThe request method must be understood by the cache and defined as being cacheable ("GET", "HEAD", and "POST" are currently defined as cacheable)\nThe response status code must be understood by the cache (one of the 1XX, 2XX, 3XX, 4XX, or 5XX response classes are generally understood)\nThe "no-store" cache directive must not appear in the request or response header fields\nFor caching by "shared" caches such as "proxy" caches, the "private" response directive must not appear in the response\nFor caching by "shared" caches such as "proxy" caches, the "Authorization" header field must not appear in the request, unless the response explicitly allows it (using one of the "must-revalidate", "public", or "s-maxage" Cache-Control response directives)\nIn addition to the conditions above, at least one of the following conditions must also be satisfied by the response\:\nIt must contain an "Expires" header field\nIt must contain a "max-age" response directive\nFor "shared" caches such as "proxy" caches, it must contain a "s-maxage" response directive\nIt must contain a "Cache Control Extension" that allows it to be cached\nIt must have a status code that is defined as cacheable by default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).   
pscanalpha.nonstorable.extrainfo={0}

pscanalpha.storablenoncacheable.name=Storable but Non-Cacheable Content
pscanalpha.storablenoncacheable.desc=The response contents are storable by caching components such as proxy servers, but will not be retrieved directly from the cache, without validating the request upstream, in response to similar requests from other users. 
pscanalpha.storablenoncacheable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablenoncacheable.soln=
pscanalpha.storablenoncacheable.extrainfo={0}}

pscanalpha.storablecacheable.name=Storable and Cacheable Content
pscanalpha.storablecacheable.desc=The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where "shared" caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.
pscanalpha.storablecacheable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablecacheable.soln=Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. 
pscanalpha.storablecacheable.extrainfo={0}
pscanalpha.storablecacheable.otherinfo.liberallifetimeheuristic=In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.
pscanalpha.storablecacheable.otherinfo.staleretrievenotblocked=The response is stale, and stale responses are not configured to be re-validated or blocked, using the 'must-revalidate', 'proxy-revalidate', 's-maxage', or 'max-age' response 'Cache-Control' directives.

pscanalpha.retrievedfromcache.name=Retrieved from Cache
pscanalpha.retrievedfromcache.desc=The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. 
pscanalpha.retrievedfromcache.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.retrievedfromcache.soln=Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.
pscanalpha.retrievedfromcache.extrainfo={0}
pscanalpha.retrievedfromcache.extrainfo.http11ageheader=The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.

pscanalpha.imagelocationscanner.name=Image Location and Privacy Scanner
pscanalpha.imagelocationscanner.alerttitle=Image Exposes Location or Privacy Data
pscanalpha.imagelocationscanner.alertDetailPrefix=This image embeds a location or leaks privacy-related data\: 
pscanalpha.imagelocationscanner.desc=The image was found to contain embedded location information, such as GPS coordinates, or another privacy exposure, such as camera serial number.  Depending on the context of the image in the website, this information may expose private details of the users of a site.  For example, a site that allows users to upload profile pictures taken in the home may expose the home's address.  
pscanalpha.imagelocationscanner.refs=https\://www.veggiespam.com/ils/
pscanalpha.imagelocationscanner.soln=Before allowing images to be stored on the server and/or transmitted to the browser, strip out the embedded location information from image.  This could mean removing all Exif data or just the GPS component.  Other data, like serial numbers, should also be removed.

pscanalpha.usernameidor.name=Username Hash Found
pscanalpha.usernameidor.desc=A hash of a username ({0}) was found in the response. This may indicate that the application is subject to an Insecure Direct Object Reference (IDOR) vulnerability. Manual testing will be required to see if this discovery can be abused.
pscanalpha.usernameidor.otherinfo=The hash was an {0}, with value\: {1} 
pscanalpha.usernameidor.soln=Use per user or session indirect object references (create a temporary mapping at time of use). Or, ensure that each use of a direct object reference is tied to an authorization check to ensure the user is authorized for the requested object. 
pscanalpha.usernameidor.refs=https\://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References\nhttps\://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004)

pscanalpha.xaspnetversioncanner.name=X-AspNet-Version Response Header Scanner
pscanalpha.xaspnetversioncanner.desc=Server leaks information via "X-AspNet-Version"/"X-AspNetMvc-Version" HTTP response header field(s).
pscanalpha.xaspnetversioncanner.soln=Configure the server so it will not return those headers.
pscanalpha.xaspnetversioncanner.extrainfo=An attacker can use this information to exploit known vulnerabilities.
pscanalpha.xaspnetversioncanner.refs=https\://www.troyhunt.com/shhh-dont-let-your-response-headers/\nhttps\://blogs.msdn.microsoft.com/varunm/2013/04/23/remove-unwanted-http-response-headers/

pscanalpha.xchromeloggerdata.name=X-ChromeLogger-Data (XCOLD) Header Information Leak
pscanalpha.xchromeloggerdata.desc=The server is leaking information through the X-ChromeLogger-Data (or X-ChromePhp-Data) response header. The content of such headers can be customized by the developer, however it is not uncommon to find\: server file system locations, vhost declarations, etc.
pscanalpha.xchromeloggerdata.refs=https\://craig.is/writing/chrome-logger
pscanalpha.xchromeloggerdata.soln=Disable this functionality in Production when it might leak information that could be leveraged by an attacker. Alternatively ensure that use of the functionality is tied to a strong authorization check and only available to administrators or support personnel for troubleshooting purposes not general users.
pscanalpha.xchromeloggerdata.otherinfo.msg=The following represents an attempt to base64 decode the value\:
pscanalpha.xchromeloggerdata.otherinfo.error=Header value could not be base64 decoded\:

pscanalpha.xdebugtoken.name=X-Debug-Token Information Leak
pscanalpha.xdebugtoken.desc=The response contained an X-Debug-Token or X-Debug-Token-Link header. This indicates that Symfony's Profiler may be in use and exposing sensitive data.
pscanalpha.xdebugtoken.otherinfo=By accessing a URL in the form http\://target_host/_profiler/token_value (i.e.\: http\://example.com/_profiler_/123ab4), you may gain access to the profiler and further leaked information.
pscanalpha.xdebugtoken.refs=https\://symfony.com/doc/current/cookbook/profiler/profiling_data.html\nhttps\://symfony.com/blog/new-in-symfony-2-4-quicker-access-to-the-profiler-when-working-on-an-api
pscanalpha.xdebugtoken.soln=Limit access to Symfony's Profiler, either via authentication/authorization or limiting inclusion of the header to specific clients (by IP etc).


# This file defines the default (English) variants of all of the internationalised messages

pscanrules.desc = Passive Scan Rules

pscanrules.headerxssprotectionscanner.name = Web Browser XSS Protection Not Enabled
pscanrules.headerxssprotectionscanner.desc = Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
pscanrules.headerxssprotectionscanner.refs = https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
pscanrules.headerxssprotectionscanner.extrainfo = The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
pscanrules.headerxssprotectionscanner.soln = Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.

pscanrules.xframeoptionsscanner.name = X-Frame-Options Header Not Set
pscanrules.xframeoptionsscanner.desc = X-Frame-Options header was not set for defense against 'ClickJacking' attacks.
pscanrules.xframeoptionsscanner.missing.desc = X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.
pscanrules.xframeoptionsscanner.otherinfo = At "High" threshold this scanner will not alert on client or server error responses.
pscanrules.xframeoptionsscanner.refs = http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
pscanrules.xframeoptionsscanner.soln = Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).

pscanrules.xcontenttypeoptionsscanner.name = X-Content-Type-Options Header Missing
pscanrules.xcontenttypeoptionsscanner.desc = The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
pscanrules.xcontenttypeoptionsscanner.otherinfo = This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scanner will not alert on client or server error responses.
pscanrules.xcontenttypeoptionsscanner.refs = http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers
pscanrules.xcontenttypeoptionsscanner.soln = Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.

pscanrules.applicationerrorscanner.name = Application Error Disclosure
pscanrules.applicationerrorscanner.desc = This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.
pscanrules.applicationerrorscanner.soln = Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.

pscanrules.cachecontrolscanner.name = Incomplete or No Cache-control and Pragma HTTP Header Set
pscanrules.cachecontrolscanner.desc = The cache-control and pragma HTTP header have not been set properly or are missing allowing the browser and proxies to cache content.
pscanrules.cachecontrolscanner.soln = Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate, private; and that the pragma HTTP header is set with no-cache.
pscanrules.cachecontrolscanner.refs = https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching

pscanrules.contenttypemissingscanner.name = Content-Type Header Missing

pscanrules.cookiehttponlyscanner.name = Cookie No HttpOnly Flag

pscanrules.cookiesecureflagscanner.name = Cookie Without Secure Flag

pscanrules.crossdomainscriptinclusionscanner.name = Cross-Domain JavaScript Source File Inclusion

pscanrules.mixedcontentscanner.name = Secure Pages Include Mixed Content

pscanrules.passwordautocompletescanner.name = Password Autocomplete in Browser

pscanrules.testinfoprivateaddressdisclosure.name = Private IP Disclosure
pscanrules.testinfoprivateaddressdisclosure.desc = A private IP such as 10.x.x.x, 172.x.x.x, 192.168.x.x has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.
pscanrules.testinfoprivateaddressdisclosure.soln = Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP comment instead of HTML/JavaScript comment which can be seen by client browsers.
pscanrules.testinfoprivateaddressdisclosure.refs = https://tools.ietf.org/html/rfc1918

pscanrules.testinfosessionidurl.name = Session ID in URL Rewrite
pscanrules.testinfosessionidurl.desc = URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.
pscanrules.testinfosessionidurl.soln = For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite.
pscanrules.testinfosessionidurl.refs = http://seclists.org/lists/webappsec/2002/Oct-Dec/0111.html
pscanrules.testinfosessionidurl.referrer.alert = Referer Exposes Session ID
pscanrules.testinfosessionidurl.referrer.desc = A hyperlink pointing to anther host name was found. As session ID URL rewrite is used, it may be disclosed in referer header to external hosts.
pscanrules.testinfosessionidurl.referrer.soln = This is a risk if the session ID is sensitive and the hyperlink refers to an external or third party host. For secure content, put session ID in secured session cookie.

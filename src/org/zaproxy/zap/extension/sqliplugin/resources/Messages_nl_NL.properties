#X-Generator: crowdin.com

sqliplugin.ext.name=Advanced SQL Injection
sqliplugin.ext.desc=Helper extension for Advanced SQL Injection scanner.

sqliplugin.scanner.name=Advanced SQL Injection
sqliplugin.scanner.alert.name=Advanced SQL Injection - {0}
sqliplugin.scanner.alert.desc=A SQL injection may be possible using the attached payload
sqliplugin.scanner.alert.soln=Vertrouw de invoer aan de kant van de client niet, ook niet als de client-side is gevalideerd.\n\
\n\
Typ in het algemeen alle gegevens aan de serverkant.\n\
\n\
Als de toepassing JDBC gebruikt, gebruikt u PreparedStatement of CallableStatement, met parameters die worden doorgegeven door '?'\n\
\n\
Als de toepassing ASP gebruikt, gebruikt u ADO-opdrachtobjecten met een sterke typecontrole en geparametriseerde query's.\n\
\n\
Als database Opgeslagen procedures kunnen worden gebruikt, gebruikt u deze.\n\
\n\
Doe * niet * concessies in tekenreeksen in de opgeslagen procedure, of gebruik 'exec', 'exec onmiddellijk' of equivalente functionaliteit\!\n\
\n\
Maak geen dynamische SQL-query's met behulp van eenvoudige reeksaaneenschakeling.\n\
\n\
Ontsnap aan alle gegevens die van de klant zijn ontvangen.\n\
\n\
Een 'witte lijst' van toegestane tekens toepassen of een 'zwarte lijst' van niet-toegestane tekens in gebruikersinvoer.\n\
\n\
Pas het privilege van least privilege toe door gebruik te maken van de minst bevoorrechte databasegebruiker.\n\
\n\
Vermijd in het bijzonder het gebruik van de gebruikers van de 'sa' of 'db-owner' database. Dit elimineert SQL-injectie niet, maar minimaliseert de impact ervan.\n\
\n\
Verleen de minimale databasetoegang die nodig is voor de toepassing.
sqliplugin.scanner.alert.info.unionbased=RDBMS [{0}] likely, given UNION-specific error message fragment for [{1}] columns\n\
\n\
The vulnerability was detected by manipulating the parameter with an SQL ''UNION'' clause to cause a database error message to be returned and recognised.
sqliplugin.scanner.alert.info.booleanbased=The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]\n\
\n\
The parameter value being modified was stripped from the HTML output for the purposes of the comparison.\n\
\n\
Data was returned for the original parameter.\n\
\n\
The vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter.
sqliplugin.scanner.alert.info.errorbased=RDBMS [{0}] likely, given error message fragment [{1}] in HTML results.\n\
\n\
The vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised.
sqliplugin.scanner.alert.info.timebased=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took on average [{3}] milliseconds.
sqliplugin.scanner.alert.refs=https\://www.owasp.org/index.php/Top_10_2010-A1\n\
https\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet

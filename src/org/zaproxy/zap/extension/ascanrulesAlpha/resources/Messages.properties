# ascanalphaAlpha 
#
# This file defines the default (English) variants of all of the internationalised messages
ascanalpha.desc = Active Scan Rules - alpha

ascanalpha.apacherangeheaderdosscanner.name = Apache Range Header DoS (CVE-2011-3192)
ascanalpha.apacherangeheaderdosscanner.desc = The byterange filter in earlier versions of the Apache HTTP Server allows remote attackers to cause a denial of service (memory and CPU exhaustion) via a Range request header that identifies multiple overlapping ranges. This issue was exploited in the wild in August 2011.
ascanalpha.apacherangeheaderdosscanner.soln = Upgrade your Apache server to a currently stable version. Alternative solutions or workarounds are outlined in the references. 
ascanalpha.apacherangeheaderdosscanner.refs = https://httpd.apache.org/security/CVE-2011-3192.txt\nhttp://cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2011-3192

ascanalpha.cookieslack.name = Cookie Slack Detector
ascanalpha.cookieslack.desc = Repeated GET requests: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.
ascanalpha.cookieslack.otherinfo.intro = Cookies that don't have expected effects can reveal flaws in application logic. In the worst case, this can reveal where authentication via cookie token(s) is not actually enforced.\n
ascanalpha.cookieslack.session.warning = NOTE: Because of its name this cookie may be important, but dropping it appears to have no effect: [{0}] \n
ascanalpha.cookieslack.affect.response.yes = These cookies affected the response: 
ascanalpha.cookieslack.affect.response.no = These cookies did NOT affect the response: 
ascanalpha.cookieslack.session.destroyed = Dropping this cookie appears to have invalidated the session: [{0}] A follow-on request with all original cookies still had a different response than the original request. \n
ascanalpha.cookieslack.separator = ,
ascanalpha.cookieslack.endline = \n

ascanalpha.elmahscanner.name = ELMAH Information Leak
ascanalpha.elmahscanner.desc = The Error Logging Modules and Handlers (ELMAH [elmah.axd]) HTTP Module was found to be available. This module can leak a significant amount of valuable information.
ascanalpha.elmahscanner.otherinfo = Based on response status code ELMAH may be protected by an authentication or authorization mechanism.  
ascanalpha.elmahscanner.refs = https://www.troyhunt.com/aspnet-session-hijacking-with-google/\nhttps://www.nuget.org/packages/elmah\nhttps://elmah.github.io/
ascanalpha.elmahscanner.soln = Consider whether or not ELMAH is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization. See also: https://elmah.github.io/a/securing-error-log-pages/

ascanalpha.examplefile.name=An example active scan rule which loads data from a file
ascanalpha.examplefile.desc=Add more information about the vulnerability here
ascanalpha.examplefile.other=This is for information that doesnt fit in any of the other sections
ascanalpha.examplefile.soln=A general description of how to solve the problem
ascanalpha.examplefile.refs=http://zaproxy.blogspot.co.uk/2014/04/hacking-zap-4-active-scan-rules.html

ascanalpha.getforpostscanner.name=GET for POST
ascanalpha.getforpostscanner.desc=A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to Cross-Site Scripting (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible.
ascanalpha.getforpostscanner.soln=Ensure that only POST is accepted where POST is expected.

ascanalpha.htaccscanner.name = .htaccess Information Leak
ascanalpha.htaccscanner.desc = htaccess files can be used to alter the configuration of the Apache Web Server software to enable/disable additional functionality and features that the Apache Web Server software has to offer. 
ascanalpha.htaccscanner.otherinfo = Based on response status code htaccess file may be protected by an authentication or authorization mechanism.
ascanalpha.htaccscanner.refs = http://www.htaccess-guide.com/
ascanalpha.htaccscanner.soln = Ensure the .htaccess file is not accessible.

ascanalpha.httponlysite.name = HTTP Only Site
ascanalpha.httponlysite.desc = The site is only served under HTTP and not HTTPS.
ascanalpha.httponlysite.soln = Configure your web or application server to use SSL (https).
ascanalpha.httponlysite.refs = https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet\nhttps://www.owasp.org/index.php/SSL_Best_Practices\nhttps://letsencrypt.org/
ascanalpha.httponlysite.otherinfo = {0}\nZAP attempted to connect via: {1}
ascanalpha.httponlysite.otherinfo.connectionfail = Failed to connect.
ascanalpha.httponlysite.otherinfo.differenthosts = Different Hosts.
ascanalpha.httponlysite.otherinfo.redirectionlimit = Redirection limit reached.
ascanalpha.httponlysite.otherinfo.noredirection = There was no automatic redirection.
ascanalpha.httponlysite.otherinfo.nossl = Site has no SSL/TLS support.
ascanalpha.httponlysite.otherinfo.redirecttohttp = Redirected to HTTP.
ascanalpha.httponlysite.otherinfo.urinotencoded = Redirection URI couldn't be encoded.

ascanalpha.httpoxy.name = Httpoxy - Proxy Header Misuse
ascanalpha.httpoxy.desc = The server initiated a proxied request via the proxy specified in the HTTP Proxy header of the request.\
Httpoxy typically affects code running in CGI or CGI like environments.\n\
This may allow attackers to:\n\
* Proxy the outgoing HTTP requests made by the web application\n\
* Direct the server to open outgoing connections to an address and port of their choosing or\n\
* Tie up server resources by forcing the vulnerable software to use a malicious proxy
ascanalpha.httpoxy.otherinfo = An outgoing message to {0} was proxied via the host and port that ZAP injected into the HTTP Proxy header.
ascanalpha.httpoxy.soln = The best immediate mitigation is to block Proxy request headers as early as possible, and before they hit your application.
ascanalpha.httpoxy.refs = https://httpoxy.org/

ascanalpha.httpsashttpscanner.name = HTTPS Content Available via HTTP
ascanalpha.httpsashttpscanner.desc = Content which was initially accessed via HTTPS (i.e.: using SSL/TLS encryption) is also accessible via HTTP (without encryption). 
ascanalpha.httpsashttpscanner.soln = Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.
ascanalpha.httpsashttpscanner.refs = https://www.owasp.org/index.php/HTTP_Strict_Transport_Security\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797
ascanalpha.httpsashttpscanner.otherinfo=ZAP attempted to connect via: {0}

ascanalpha.ldapinjection.name=LDAP Injection
ascanalpha.ldapinjection.desc=LDAP Injection may be possible. It may be possible for an attacker to bypass authentication controls, and to view and modify arbitrary data in the LDAP directory. 
ascanalpha.ldapinjection.soln=Validate and/or escape all user input before using it to create an LDAP query.  In particular, the following characters (or combinations) should be blacklisted:\n&\n|\n!\n<\n>\n=\n~=\n>=\n<=\n*\n(\n)\n,\n+\n-\n"\n'\n;\n\\\n/\nNUL character\n 
ascanalpha.ldapinjection.refs=https://www.owasp.org/index.php/Top_10_2010-A9\nhttp://www.testingsecurity.com/how-to-test/injection-vulnerabilities/LDAP-Injection\nhttps://www.owasp.org/index.php/LDAP_injection
#ascanalpha.ldapinjection.alert.extrainfo=[{0}] field [{1}] on [{2}] [{3}] may be vulnerable to LDAP injection, using an attack with LDAP meta-characters [{4}], yielding known [{5}] error message [{6}], which was not present in the original response.
ascanalpha.ldapinjection.alert.extrainfo=parameter [{0}] on [{1}] [{2}] may be vulnerable to LDAP injection, using an attack with LDAP meta-characters [{3}], yielding known [{4}] error message [{5}], which was not present in the original response.
ascanalpha.ldapinjection.alert.evidence={0}
ascanalpha.ldapinjection.booleanbased.alert.extrainfo=parameter [{0}] on [{1}] [{2}] may be vulnerable to LDAP injection, by using the logically equivalent expression [{3}], and 'FALSE' expression [{4}].
#ascanalpha.ldapinjection.alert.attack=[{0}] field [{1}] set to [{2}]
ascanalpha.ldapinjection.alert.attack=parameter [{0}] set to [{1}]
ascanalpha.ldapinjection.booleanbased.alert.attack=Equivalent LDAP expression: [{0}]. Random parameter: [{1}].

ascanalpha.proxydisclosure.name=Proxy Disclosure
ascanalpha.proxydisclosure.desc={0} proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n - A list of targets for an attack against the application.\n - Potential vulnerabilities on the proxy servers that service the application.\n - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. 
ascanalpha.proxydisclosure.soln=Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\nDisable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\nConfigure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\nConfigure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n
ascanalpha.proxydisclosure.refs=https://tools.ietf.org/html/rfc7231#section-5.1.2
ascanalpha.proxydisclosure.attack=TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.
ascanalpha.proxydisclosure.extrainfo.unknown=Unknown
ascanalpha.proxydisclosure.extrainfo.proxyserver.header=Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between OWASP ZAP and the application/web server: 
ascanalpha.proxydisclosure.extrainfo.proxyserver= - {0}
ascanalpha.proxydisclosure.extrainfo.webserver.header=The following web/application server has been identified: 
ascanalpha.proxydisclosure.extrainfo.webserver= - {0}
ascanalpha.proxydisclosure.extrainfo.silentproxyserver.header=The following 'silent' proxy servers were identified. Due to their behaviour, it is not known at which point in the network topology these proxy servers reside:
ascanalpha.proxydisclosure.extrainfo.silentproxyserver= - {0}
ascanalpha.proxydisclosure.extrainfo.traceenabled=The 'TRACE' method is enabled on one or more of the proxy servers, or on the origin server. This method leaks all information submitted from the web browser and proxies back to the user agent. This may facilitate 'Cross Site Tracing' attacks. 

ascanalpha.relativepathconfusion.name=Relative Path Confusion
ascanalpha.relativepathconfusion.desc=The web server is configured to serve responses to ambiguous URLs in a manner that is likely to lead to confusion about the correct "relative path" for the URL. Resources (CSS, images, etc) are also specified in the page response using relative, rather than absolute URLs. In an attack, if the web browser parses the "cross-content" response in a permissive manner, or can be tricked into permissively parsing the "cross-content" response, using techniques such as framing, then the web browser may be fooled into interpreting HTML as CSS (or other content types), leading to an XSS vulnerability.
ascanalpha.relativepathconfusion.soln=Web servers and frameworks should be updated to be configured to not serve responses to ambiguous URLs in such a way that the relative path of such URLs could be mis-interpreted by components on either the client side, or server side.\nWithin the application, the correct use of the "<base>" HTML tag in the HTTP response will unambiguously specify the base URL for all relative URLs in the document.\nUse the "Content-Type" HTTP response header to make it harder for the attacker to force the web browser to mis-interpret the content type of the response.\nUse the "X-Content-Type-Options: nosniff" HTTP response header to prevent the web browser from "sniffing" the content type of the response.\nUse a modern DOCTYPE such as "<!doctype html>" to prevent the page from being rendered in the web browser using "Quirks Mode", since this results in the content type being ignored by the web browser.\nSpecify the "X-Frame-Options" HTTP response header to prevent Quirks Mode from being enabled in the web browser using framing attacks. 
ascanalpha.relativepathconfusion.refs=http://www.thespanner.co.uk/2014/03/21/rpo/\nhttps://hsivonen.fi/doctype/\nhttp://www.w3schools.com/tags/tag_base.asp
ascanalpha.relativepathconfusion.extrainfo.morethanonebasetag=More than one <base> tag was specified in the HTML <head> tag to define the location for relative URLs, which is not valid.
ascanalpha.relativepathconfusion.extrainfo.nobasetag=No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.
ascanalpha.relativepathconfusion.extrainfo.contenttypeenabled=A Content Type of "{0}" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  
ascanalpha.relativepathconfusion.extrainfo.quirksmodeenabledexplicitly=Quirks Mode is explicitly enabled via <meta http-equiv="{0}", allowing the specified Content Type to be bypassed.
ascanalpha.relativepathconfusion.extrainfo.quirksmodeenabledimplicitly=Quirks Mode is implicitly enabled via the use of an old DOCTYPE with PUBLIC id "{0}", allowing the specified Content Type to be bypassed in some web browsers.
ascanalpha.relativepathconfusion.extrainfo.quirksmodeenabledimplicitlynodoctype=Quirks Mode is implicitly enabled via the absence of a DOCTYPE, allowing the specified Content Type to be bypassed.
ascanalpha.relativepathconfusion.extrainfo.nocontenttype=No Content Type was specified, so Quirks Mode is not required to exploit the vulnerability in the web browser. 
ascanalpha.relativepathconfusion.extrainfo.framingallowed=No X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed.

ascanalpha.sourcecodedisclosure.desc = The source code for the current page was disclosed by the web server
ascanalpha.sourcecodedisclosure.lfibased.name = Source Code Disclosure - File Inclusion
ascanalpha.sourcecodedisclosure.lfibased.soln = Ensure that arbitrary files specified by the user are not included in the output
ascanalpha.sourcecodedisclosure.lfibased.extrainfo = The output for the source code filename [{0}] differs sufficiently from that of the random parameter [{1}], at [{2}%], compared to a threshold of [{3}%]
ascanalpha.sourcecodedisclosure.lfibased.evidence = 

ascanalpha.sourcecodedisclosure.gitbased.name = Source Code Disclosure - Git 
ascanalpha.sourcecodedisclosure.gitbased.soln = Ensure that Git metadata files are not deployed to the web server or application server
ascanalpha.sourcecodedisclosure.gitbased.extrainfo =  
ascanalpha.sourcecodedisclosure.gitbased.evidence = The source code for [{0}] was extracted using [{1}]

ascanalpha.sqlinjection.mssql.name=SQL Injection - MsSQL
ascanalpha.sqlinjection.mssql.desc=SQL injection may be possible
ascanalpha.sqlinjection.mssql.soln=Do not trust client side input, even if there is client side validation in place. \nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.\nApply the privilege of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.
ascanalpha.sqlinjection.mssql.refs=https://www.owasp.org/index.php/Top_10_2010-A1\nhttps://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
ascanalpha.sqlinjection.mssql.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds.

ascanalpha.sqlinjection.sqlite.name=SQL Injection - SQLite
ascanalpha.sqlinjection.desc=SQL injection may be possible
ascanalpha.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place. \nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.\nApply the privilege of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.
ascanalpha.sqlinjection.refs=https://www.owasp.org/index.php/Top_10_2010-A1\nhttps://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
ascanalpha.sqlinjection.sqlite.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, parameter value [{2}], which caused the request to take [{3}] milliseconds, when the original unmodified query with value [{4}] took [{5}] milliseconds.
ascanalpha.sqlinjection.sqlite.alert.errorbased.extrainfo=The following known SQLite error message was provoked: [{0}].
ascanalpha.sqlinjection.sqlite.alert.versionnumber.extrainfo=Using a UNION based SQL Injection attack, and by exploiting SQLite's dynamic typing mechanism, the SQLite version was determined to be [{0}].\nWith string-based injection points, full SQLite version information can be extracted, but with numeric injection points, only partial SQLite version information can be extracted.\nMore information on SQLite version [{0}] is available at http://www.sqlite.org/changes.html

ascanalpha.testuseragent.name=User Agent Fuzzer
ascanalpha.testuseragent.desc=Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.
ascanalpha.testuseragent.refs=https://www.owasp.org/index.php/Web_Application_Security_Testing_Cheat_Sheet
ascanalpha.testuseragent.useragentparmname=Header User-Agent

ascanalpha.traceaxdscanner.name = Trace.axd Information Leak
ascanalpha.traceaxdscanner.desc = The ASP.NET Trace Viewer (trace.axd) was found to be available. This component can leak a significant amount of valuable information.
ascanalpha.traceaxdscanner.otherinfo = Based on response status code Trace Viewer may be protected by an authentication or authorization mechanism.  
ascanalpha.traceaxdscanner.refs = https://msdn.microsoft.com/en-us/library/bb386420.aspx\nhttps://msdn.microsoft.com/en-us/library/wwh16c6c.aspx\nhttps://www.dotnetperls.com/trace
ascanalpha.traceaxdscanner.soln = Consider whether or not Trace Viewer is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization.


# ascanalphaAlpha 
#
# This file defines the default (English) variants of all of the internationalised messages
ascanalpha.desc = Active Scan Rules - alpha

ascanalpha.examplefile.name=An example active scan rule which loads data from a file
ascanalpha.examplefile.desc=Add more information about the vulnerability here
ascanalpha.examplefile.other=This is for information that doesnt fit in any of the other sections
ascanalpha.examplefile.soln=A general description of how to solve the problem
ascanalpha.examplefile.refs=http://zaproxy.blogspot.co.uk/2014/04/hacking-zap-4-active-scan-rules.html

ascanalpha.formatstring.name=Format String Error
ascanalpha.formatstring.desc=A Format String error occurs when the submitted data of an input string is evaluated as a command by the application. 
ascanalpha.formatstring.soln= Rewrite the background program using proper deletion of bad character strings.  This will require a recompile of the background executable.
ascanalpha.formatstring.refs=https://www.owasp.org/index.php/Format_string_attack
ascanalpha.formatstring.error1 = Potential Format String Error.  The script closed the connection on a /%s
ascanalpha.formatstring.error2 = Potential Format String Error.  The script closed the connection on a /%s and /%x
ascanalpha.formatstring.error3 = Potential Format String Error.  The script closed the connection on a microsoft format string error


ascanalpha.sourcecodedisclosure.desc = The source code for the current page was disclosed by the web server
ascanalpha.sourcecodedisclosure.lfibased.name = Source Code Disclosure - File Inclusion
ascanalpha.sourcecodedisclosure.lfibased.soln = Ensure that arbitrary files specified by the user are not included in the output
ascanalpha.sourcecodedisclosure.lfibased.extrainfo = The output for the source code filename [{0}] differs sufficiently from that of the random parameter [{1}], at [{2}%], compared to a threshold of [{3}%]
ascanalpha.sourcecodedisclosure.lfibased.evidence = 

ascanalpha.sourcecodedisclosure.gitbased.name = Source Code Disclosure - Git 
ascanalpha.sourcecodedisclosure.gitbased.soln = Ensure that Git metadata files are not deployed to the web server or application server
ascanalpha.sourcecodedisclosure.gitbased.extrainfo =  
ascanalpha.sourcecodedisclosure.gitbased.evidence = The source code for [{0}] was extracted using [{1}]

ascanalpha.elinjection.name = Expression Language Injection
ascanalpha.elinjection.desc = The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed. In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection. However, even for later versions, this weakness is still possible depending on configuration.
ascanalpha.elinjection.soln = Perform data validation best practice against untrusted input and to ensure that output encoding is applied when data arrives on the EL layer, so that no metacharacter is found by the interpreter within the user content before evaluation. The most obvious patterns to detect include ${ and #{, but it may be possible to encode or fragment this data.
ascanalpha.elinjection.refs = https://www.owasp.org/index.php/Expression_Language_Injection\nhttp://cwe.mitre.org/data/definitions/917.html

ascanalpha.cookieslack.name = Cookie Slack Detector
ascanalpha.cookieslack.desc = Repeated GET requests: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.
ascanalpha.cookieslack.solution = N.a.
ascanalpha.cookieslack.otherinfo.intro = Cookies that don't have expected effects can reveal flaws in application logic. In the worst case, this can reveal where authentication via cookie token(s) is not actually enforced.\n
ascanalpha.cookieslack.session.warning = NOTE: Because of its name this cookie may be important, but dropping it appears to have no effect: [{0}] \n
ascanalpha.cookieslack.affect.response.yes = These cookies affected the response: 
ascanalpha.cookieslack.affect.response.no = These cookies did NOT affect the response: 
ascanalpha.cookieslack.session.destroyed = Dropping this cookie appears to have invalidated the session: [{0}] A follow-on request with all original cookies still had a different response than the original request. \n
ascanalpha.cookieslack.separator = ,
ascanalpha.cookieslack.endline = \n

ascanalpha.httpsashttpscanner.name = HTTPS Content Available via HTTP
ascanalpha.httpsashttpscanner.desc = Content which was initially accessed via HTTPS (i.e.: using SSL/TLS encryption) is also accessible via HTTP (without encryption). 
ascanalpha.httpsashttpscanner.soln = Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.
ascanalpha.httpsashttpscanner.refs = https://www.owasp.org/index.php/HTTP_Strict_Transport_Security\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797

ascanalpha.sqlinjection.sqlite.name=SQL Injection - SQLite
ascanalpha.sqlinjection.desc=SQL injection may be possible
ascanalpha.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place. \nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.\nApply the privilege of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.
ascanalpha.sqlinjection.refs=https://www.owasp.org/index.php/Top_10_2010-A1\nhttps://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
ascanalpha.sqlinjection.sqlite.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, parameter value [{2}], which caused the request to take [{3}] milliseconds, when the original unmodified query with value [{4}] took [{5}] milliseconds.
ascanalpha.sqlinjection.sqlite.alert.errorbased.extrainfo=The following known SQLite error message was provoked: [{0}].
ascanalpha.sqlinjection.sqlite.alert.versionnumber.extrainfo=Using a UNION based SQL Injection attack, and by exploiting SQLite's dynamic typing mechanism, the SQLite version was determined to be [{0}].\nWith string-based injection points, full SQLite version information can be extracted, but with numeric injection points, only partial SQLite version information can be extracted.\nMore information on SQLite version [{0}] is available at http://www.sqlite.org/changes.html

ascanalpha.proxydisclosure.name=Proxy Disclosure
ascanalpha.proxydisclosure.desc={0} proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n - A list of targets for an attack against the application.\n - Potential vulnerabilities on the proxy servers that service the application.\n - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. 
ascanalpha.proxydisclosure.soln=Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\nDisable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\nConfigure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\nConfigure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n
ascanalpha.proxydisclosure.refs=???
ascanalpha.proxydisclosure.attack=TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.
ascanalpha.proxydisclosure.extrainfo.unknown=Unknown
ascanalpha.proxydisclosure.extrainfo.proxyserver.header=Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between OWASP ZAP and the application/web server: 
ascanalpha.proxydisclosure.extrainfo.proxyserver= - {0}
ascanalpha.proxydisclosure.extrainfo.webserver.header=The following web/application server has been identified: 
ascanalpha.proxydisclosure.extrainfo.webserver= - {0}
ascanalpha.proxydisclosure.extrainfo.silentproxyserver.header=The following 'silent' proxy servers were identified. Due to their behaviour, it is not known at which point in the network topology these proxy servers reside:
ascanalpha.proxydisclosure.extrainfo.silentproxyserver= - {0}
ascanalpha.proxydisclosure.extrainfo.traceenabled=The 'TRACE' method is enabled on one or more of the proxy servers, or on the origin server. This method leaks all information submitted from the web browser and proxies back to the user agent. This may facilitate 'Cross Site Tracing' attacks. 

ascanalpha.relativepathconfusion.name=Relative Path Confusion
ascanalpha.relativepathconfusion.desc=The web server is configured to serve responses to ambiguous URLs in a manner that is likely to lead to confusion about the correct "relative path" for the URL. Resources (CSS, images, etc) are also specified in the page response using relative, rather than absolute URLs. In an attack, if the web browser parses the "cross-content" response in a permissive manner, or can be tricked into permissively parsing the "cross-content" response, using techniques such as framing, then the web browser may be fooled into interpreting HTML as CSS (or other content types), leading to an XSS vulnerability.
ascanalpha.relativepathconfusion.soln=Web servers and frameworks should be updated to be configured to not serve responses to ambiguous URLs in such a way that the relative path of such URLs could be mis-interpreted by components on either the client side, or server side.\nWithin the application, the correct use of the "<base>" HTML tag in the HTTP response will unambiguously specify the base URL for all relative URLs in the document.\nUse the "Content-Type" HTTP response header to make it harder for the attacker to force the web browser to mis-interpret the content type of the response.\nUse the "X-Content-Type-Options: nosniff" HTTP response header to prevent the web browser from "sniffing" the content type of the response.\nUse a modern DOCTYPE such as "<!doctype html>" to prevent the page from being rendered in the web browser using "Quirks Mode", since this results in the content type being ignored by the web browser.\nSpecify the "X-Frame-Options" HTTP response header to prevent Quirks Mode from being enabled in the web browser using framing attacks. 
ascanalpha.relativepathconfusion.refs=http://www.thespanner.co.uk/2014/03/21/rpo/\nhttps://hsivonen.fi/doctype/\nhttp://www.w3schools.com/tags/tag_base.asp
ascanalpha.relativepathconfusion.extrainfo.morethanonebasetag=More than one <base> tag was specified in the HTML <head> tag to define the location for relative URLs, which is not valid.
ascanalpha.relativepathconfusion.extrainfo.nobasetag=No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.
ascanalpha.relativepathconfusion.extrainfo.contenttypeenabled=A Content Type of "{0}" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  
ascanalpha.relativepathconfusion.extrainfo.quirksmodeenabledexplicitly=Quirks Mode is explicitly enabled via <meta http-equiv="{0}", allowing the specified Content Type to be bypassed.
ascanalpha.relativepathconfusion.extrainfo.quirksmodeenabledimplicitly=Quirks Mode is implicitly enabled via the use of an old DOCTYPE with PUBLIC id "{0}", allowing the specified Content Type to be bypassed in some web browsers.
ascanalpha.relativepathconfusion.extrainfo.quirksmodeenabledimplicitlynodoctype=Quirks Mode is implicitly enabled via the absence of a DOCTYPE, allowing the specified Content Type to be bypassed.
ascanalpha.relativepathconfusion.extrainfo.nocontenttype=No Content Type was specified, so Quirks Mode is not required to exploit the vulnerability in the web browser. 
ascanalpha.relativepathconfusion.extrainfo.framingallowed=No X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed.

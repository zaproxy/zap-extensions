#X-Generator: crowdin.com
# ascanalphaAlpha 
#
# This file defines the default (English) variants of all of the internationalised messages
ascanalpha.desc=Activar Reglas de Escaneo - alfa

ascanalpha.examplefile.name=Un ejemplo regla de lectura activa que carga datos desde un archivo
ascanalpha.examplefile.desc=A\u00f1adir m\u00e1s informaci\u00f3n acerca de la vulnerabilidad aqu\u00ed
ascanalpha.examplefile.other=Se trata de informaci\u00f3n que no encaja en ninguna de las otras secciones
ascanalpha.examplefile.soln=Una descripci\u00f3n general de como resolver el problema
ascanalpha.examplefile.refs=http\://zaproxy.blogspot.co.uk/2014/04/hacking-zap-4-active-scan-rules.html

ascanalpha.sourcecodedisclosure.desc=El c\u00f3digo fuente de la p\u00e1gina actual se dio a conocer por el servidor web
ascanalpha.sourcecodedisclosure.lfibased.name=Divulgaci\u00f3n de C\u00f3digo Fuente - Inclusi\u00f3n de archivos
ascanalpha.sourcecodedisclosure.lfibased.soln=Asegurar que los archivos arbitrarios especificados por el usuario no se incluyen en la salida
ascanalpha.sourcecodedisclosure.lfibased.extrainfo=La salida para el nombre del archivo de c\u00f3digo fuente [{0}] se diferencia suficientemente de la del par\u00e1metro aleatorio [{1}], a [{2}%], en comparaci\u00f3n con un umbral de [{3}%]
ascanalpha.sourcecodedisclosure.lfibased.evidence=[cadena vac\u00eda]

ascanalpha.sourcecodedisclosure.gitbased.name=Divulgaci\u00f3n de C\u00f3digo Fuente - Git
ascanalpha.sourcecodedisclosure.gitbased.soln=Aseg\u00farese de que los archivos de metadatos Git no se implementan en el servidor web o servidor de aplicaciones
ascanalpha.sourcecodedisclosure.gitbased.extrainfo=[cadena vac\u00eda]
ascanalpha.sourcecodedisclosure.gitbased.evidence=El c\u00f3digo fuente de [{0}] fue extra\u00eddo usando [{1}]

ascanalpha.elinjection.name=Inyecci\u00f3n Expresi\u00f3n de Lenguaje
ascanalpha.elinjection.desc=El software construye todo o parte de una instrucci\u00f3n de lenguaje de expresi\u00f3n (EL) en una p\u00e1gina de servidor Java (JSP) con entrada influenciado externamente de un componente upstream, pero no neutraliza o incorrectamente neutraliza elementos especiales que podr\u00edan modificar la declaraci\u00f3n de EL previsto antes de ejecutarse. En ciertas versiones de Spring 3.0.5 y anteriores, hab\u00eda una vulnerabilidad (CVE-2011-2730) en que lenguaje de expresi\u00f3n de etiquetas se evaluar\u00edan dos veces, que expone con eficacia cualquier aplicaci\u00f3n de la inyecci\u00f3n EL. Sin embargo, incluso para las versiones posteriores, esta debilidad es posible dependiendo de la configuraci\u00f3n.
ascanalpha.elinjection.soln=Realizar la mejores pr\u00e1cticas de validaci\u00f3n de datos de entrada en la que no se conf\u00eda y para garantizar que se aplica la codificaci\u00f3n de salida cuando llega datos sobre la capa EL, para que el metacaracter sea encontrado por el int\u00e9rprete dentro del contenido del usuario antes de la evaluaci\u00f3n. Los patrones m\u00e1s evidentes para detectar incluyen ${ y \#{, pero puede ser posible codificar o fragmento estos datos.
ascanalpha.elinjection.refs=https\://www.owasp.org/index.php/Expression_Language_Injection\nhttp\://cwe.mitre.org/data/definitions/917.html

ascanalpha.cookieslack.name=Detector de Cookie Slack
ascanalpha.cookieslack.desc=Repeated GET requests\: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.
ascanalpha.cookieslack.solution=N.a.
ascanalpha.cookieslack.otherinfo.intro=Cookies that don't have expected effects can reveal flaws in application logic. In the worst case, this can reveal where authentication via cookie token(s) is not actually enforced.\n
ascanalpha.cookieslack.session.warning=NOTE\: Because of its name this cookie may be important, but dropping it appears to have no effect\: [{0}] \n
ascanalpha.cookieslack.affect.response.yes=These cookies affected the response\: 
ascanalpha.cookieslack.affect.response.no=These cookies did NOT affect the response\: 
ascanalpha.cookieslack.session.destroyed=Dropping this cookie appears to have invalidated the session\: [{0}] A follow-on request with all original cookies still had a different response than the original request. \n
ascanalpha.cookieslack.separator=,
ascanalpha.cookieslack.endline=\ 

ascanalpha.httpsashttpscanner.name=HTTPS Contenido Disponible v\u00eda HTTP
ascanalpha.httpsashttpscanner.desc=Content which was initially accessed via HTTPS (i.e.\: using SSL/TLS encryption) is also accessible via HTTP (without encryption). 
ascanalpha.httpsashttpscanner.soln=Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.
ascanalpha.httpsashttpscanner.refs=https\://www.owasp.org/index.php/HTTP_Strict_Transport_Security\nhttps\://www.owasp.org/index.php/List_of_useful_HTTP_headers\nhttp\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp\://caniuse.com/stricttransportsecurity\nhttp\://tools.ietf.org/html/rfc6797

ascanalpha.sqlinjection.sqlite.name=Inyecci\u00f3n SQL - SQLite
ascanalpha.sqlinjection.desc=Falla por Inyecci\u00f3n SQL puede ser posible
ascanalpha.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place. \nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.\nApply the privilege of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.
ascanalpha.sqlinjection.refs=https\://www.OWASP.org/index.php/Top_10_2010-a1 https\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
ascanalpha.sqlinjection.sqlite.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, parameter value [{2}], which caused the request to take [{3}] milliseconds, when the original unmodified query with value [{4}] took [{5}] milliseconds.
ascanalpha.sqlinjection.sqlite.alert.errorbased.extrainfo=The following known SQLite error message was provoked\: [{0}].
ascanalpha.sqlinjection.sqlite.alert.versionnumber.extrainfo=Using a UNION based SQL Injection attack, and by exploiting SQLite''s dynamic typing mechanism, the SQLite version was determined to be [{0}].\nWith string-based injection points, full SQLite version information can be extracted, but with numeric injection points, only partial SQLite version information can be extracted.\nMore information on SQLite version [{0}] is available at http\://www.sqlite.org/changes.html

ascanalpha.proxydisclosure.name=Disvulgaci\u00f3n Proxy
ascanalpha.proxydisclosure.desc={0} proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n - A list of targets for an attack against the application.\n - Potential vulnerabilities on the proxy servers that service the application.\n - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. 
ascanalpha.proxydisclosure.soln=Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\nDisable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\nConfigure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\nConfigure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n
ascanalpha.proxydisclosure.refs=???
ascanalpha.proxydisclosure.attack=TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.
ascanalpha.proxydisclosure.extrainfo.unknown=Desconocido
ascanalpha.proxydisclosure.extrainfo.proxyserver.header=Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between OWASP ZAP and the application/web server\: 
ascanalpha.proxydisclosure.extrainfo.proxyserver=- {0}
ascanalpha.proxydisclosure.extrainfo.webserver.header=The following web/application server has been identified\: 
ascanalpha.proxydisclosure.extrainfo.webserver=- {0}
ascanalpha.proxydisclosure.extrainfo.silentproxyserver.header=The following 'silent' proxy servers were identified. Due to their behaviour, it is not known at which point in the network topology these proxy servers reside\:
ascanalpha.proxydisclosure.extrainfo.silentproxyserver=- {0}
ascanalpha.proxydisclosure.extrainfo.traceenabled=The 'TRACE' method is enabled on one or more of the proxy servers, or on the origin server. This method leaks all information submitted from the web browser and proxies back to the user agent. This may facilitate 'Cross Site Tracing' attacks. 

ascanalpha.relativepathconfusion.name=Confusi\u00f3n de Ruta Relativa de acceso
ascanalpha.relativepathconfusion.desc=The web server is configured to serve responses to ambiguous URLs in a manner that is likely to lead to confusion about the correct "relative path" for the URL. Resources (CSS, images, etc) are also specified in the page response using relative, rather than absolute URLs. In an attack, if the web browser parses the "cross-content" response in a permissive manner, or can be tricked into permissively parsing the "cross-content" response, using techniques such as framing, then the web browser may be fooled into interpreting HTML as CSS (or other content types), leading to an XSS vulnerability.
ascanalpha.relativepathconfusion.soln=Web servers and frameworks should be updated to be configured to not serve responses to ambiguous URLs in such a way that the relative path of such URLs could be mis-interpreted by components on either the client side, or server side.\nWithin the application, the correct use of the "<base>" HTML tag in the HTTP response will unambiguously specify the base URL for all relative URLs in the document.\nUse the "Content-Type" HTTP response header to make it harder for the attacker to force the web browser to mis-interpret the content type of the response.\nUse the "X-Content-Type-Options\: nosniff" HTTP response header to prevent the web browser from "sniffing" the content type of the response.\nUse a modern DOCTYPE such as "<\!doctype html>" to prevent the page from being rendered in the web browser using "Quirks Mode", since this results in the content type being ignored by the web browser.\nSpecify the "X-Frame-Options" HTTP response header to prevent Quirks Mode from being enabled in the web browser using framing attacks. 
ascanalpha.relativepathconfusion.refs=http\://www.thespanner.co.uk/2014/03/21/rpo/\nhttps\://hsivonen.fi/doctype/\nhttp\://www.w3schools.com/tags/tag_base.asp
ascanalpha.relativepathconfusion.extrainfo.morethanonebasetag=More than one <base> tag was specified in the HTML <head> tag to define the location for relative URLs, which is not valid.
ascanalpha.relativepathconfusion.extrainfo.nobasetag=No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.
ascanalpha.relativepathconfusion.extrainfo.contenttypeenabled=A Content Type of "{0}" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  
ascanalpha.relativepathconfusion.extrainfo.quirksmodeenabledexplicitly=Quirks Mode is explicitly enabled via <meta http-equiv\="{0}", allowing the specified Content Type to be bypassed.
ascanalpha.relativepathconfusion.extrainfo.quirksmodeenabledimplicitly=Quirks Mode is implicitly enabled via the use of an old DOCTYPE with PUBLIC id "{0}", allowing the specified Content Type to be bypassed in some web browsers.
ascanalpha.relativepathconfusion.extrainfo.quirksmodeenabledimplicitlynodoctype=Quirks Mode is implicitly enabled via the absence of a DOCTYPE, allowing the specified Content Type to be bypassed.
ascanalpha.relativepathconfusion.extrainfo.nocontenttype=No Content Type was specified, so Quirks Mode is not required to exploit the vulnerability in the web browser. 
ascanalpha.relativepathconfusion.extrainfo.framingallowed=No X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed.

